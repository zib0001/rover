
rover2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ecac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000186c  0801ee80  0801ee80  0001fe80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080206ec  080206ec  000233fc  2**0
                  CONTENTS
  4 .ARM          00000008  080206ec  080206ec  000216ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080206f4  080206f4  000233fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080206f4  080206f4  000216f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020700  08020700  00021700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000013fc  20000000  08020704  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016678  20001400  08021b00  00023400  2**3
                  ALLOC
 10 ._user_heap_stack 00001100  20017a78  08021b00  00023a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000233fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021950  00000000  00000000  0002342c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d4  00000000  00000000  00044d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00049750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000148a  00000000  00000000  0004b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cbb  00000000  00000000  0004c66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000210df  00000000  00000000  00075325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeb1e  00000000  00000000  00096404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  00184f22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008824  00000000  00000000  00184f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0018d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001400 	.word	0x20001400
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ee64 	.word	0x0801ee64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001404 	.word	0x20001404
 800020c:	0801ee64 	.word	0x0801ee64

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_frsub>:
 8000ce8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cec:	e002      	b.n	8000cf4 <__addsf3>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fsub>:
 8000cf0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cf4 <__addsf3>:
 8000cf4:	0042      	lsls	r2, r0, #1
 8000cf6:	bf1f      	itttt	ne
 8000cf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cfc:	ea92 0f03 	teqne	r2, r3
 8000d00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d08:	d06a      	beq.n	8000de0 <__addsf3+0xec>
 8000d0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d12:	bfc1      	itttt	gt
 8000d14:	18d2      	addgt	r2, r2, r3
 8000d16:	4041      	eorgt	r1, r0
 8000d18:	4048      	eorgt	r0, r1
 8000d1a:	4041      	eorgt	r1, r0
 8000d1c:	bfb8      	it	lt
 8000d1e:	425b      	neglt	r3, r3
 8000d20:	2b19      	cmp	r3, #25
 8000d22:	bf88      	it	hi
 8000d24:	4770      	bxhi	lr
 8000d26:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d2e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4240      	negne	r0, r0
 8000d36:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d3a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d3e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d42:	bf18      	it	ne
 8000d44:	4249      	negne	r1, r1
 8000d46:	ea92 0f03 	teq	r2, r3
 8000d4a:	d03f      	beq.n	8000dcc <__addsf3+0xd8>
 8000d4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d50:	fa41 fc03 	asr.w	ip, r1, r3
 8000d54:	eb10 000c 	adds.w	r0, r0, ip
 8000d58:	f1c3 0320 	rsb	r3, r3, #32
 8000d5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d60:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__addsf3+0x78>
 8000d66:	4249      	negs	r1, r1
 8000d68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d6c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d70:	d313      	bcc.n	8000d9a <__addsf3+0xa6>
 8000d72:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d76:	d306      	bcc.n	8000d86 <__addsf3+0x92>
 8000d78:	0840      	lsrs	r0, r0, #1
 8000d7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d7e:	f102 0201 	add.w	r2, r2, #1
 8000d82:	2afe      	cmp	r2, #254	@ 0xfe
 8000d84:	d251      	bcs.n	8000e2a <__addsf3+0x136>
 8000d86:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	ea40 0003 	orr.w	r0, r0, r3
 8000d98:	4770      	bx	lr
 8000d9a:	0049      	lsls	r1, r1, #1
 8000d9c:	eb40 0000 	adc.w	r0, r0, r0
 8000da0:	3a01      	subs	r2, #1
 8000da2:	bf28      	it	cs
 8000da4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000da8:	d2ed      	bcs.n	8000d86 <__addsf3+0x92>
 8000daa:	fab0 fc80 	clz	ip, r0
 8000dae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000db2:	ebb2 020c 	subs.w	r2, r2, ip
 8000db6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dba:	bfaa      	itet	ge
 8000dbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dc0:	4252      	neglt	r2, r2
 8000dc2:	4318      	orrge	r0, r3
 8000dc4:	bfbc      	itt	lt
 8000dc6:	40d0      	lsrlt	r0, r2
 8000dc8:	4318      	orrlt	r0, r3
 8000dca:	4770      	bx	lr
 8000dcc:	f092 0f00 	teq	r2, #0
 8000dd0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dd4:	bf06      	itte	eq
 8000dd6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dda:	3201      	addeq	r2, #1
 8000ddc:	3b01      	subne	r3, #1
 8000dde:	e7b5      	b.n	8000d4c <__addsf3+0x58>
 8000de0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de8:	bf18      	it	ne
 8000dea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dee:	d021      	beq.n	8000e34 <__addsf3+0x140>
 8000df0:	ea92 0f03 	teq	r2, r3
 8000df4:	d004      	beq.n	8000e00 <__addsf3+0x10c>
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	4770      	bx	lr
 8000e00:	ea90 0f01 	teq	r0, r1
 8000e04:	bf1c      	itt	ne
 8000e06:	2000      	movne	r0, #0
 8000e08:	4770      	bxne	lr
 8000e0a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e0e:	d104      	bne.n	8000e1a <__addsf3+0x126>
 8000e10:	0040      	lsls	r0, r0, #1
 8000e12:	bf28      	it	cs
 8000e14:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e18:	4770      	bx	lr
 8000e1a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e1e:	bf3c      	itt	cc
 8000e20:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e24:	4770      	bxcc	lr
 8000e26:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e2a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e32:	4770      	bx	lr
 8000e34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e38:	bf16      	itet	ne
 8000e3a:	4608      	movne	r0, r1
 8000e3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e40:	4601      	movne	r1, r0
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	bf06      	itte	eq
 8000e46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e4a:	ea90 0f01 	teqeq	r0, r1
 8000e4e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_ui2f>:
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	e004      	b.n	8000e64 <__aeabi_i2f+0x8>
 8000e5a:	bf00      	nop

08000e5c <__aeabi_i2f>:
 8000e5c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e60:	bf48      	it	mi
 8000e62:	4240      	negmi	r0, r0
 8000e64:	ea5f 0c00 	movs.w	ip, r0
 8000e68:	bf08      	it	eq
 8000e6a:	4770      	bxeq	lr
 8000e6c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e70:	4601      	mov	r1, r0
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	e01c      	b.n	8000eb2 <__aeabi_l2f+0x2a>

08000e78 <__aeabi_ul2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	e00a      	b.n	8000e9c <__aeabi_l2f+0x14>
 8000e86:	bf00      	nop

08000e88 <__aeabi_l2f>:
 8000e88:	ea50 0201 	orrs.w	r2, r0, r1
 8000e8c:	bf08      	it	eq
 8000e8e:	4770      	bxeq	lr
 8000e90:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e94:	d502      	bpl.n	8000e9c <__aeabi_l2f+0x14>
 8000e96:	4240      	negs	r0, r0
 8000e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e9c:	ea5f 0c01 	movs.w	ip, r1
 8000ea0:	bf02      	ittt	eq
 8000ea2:	4684      	moveq	ip, r0
 8000ea4:	4601      	moveq	r1, r0
 8000ea6:	2000      	moveq	r0, #0
 8000ea8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000eac:	bf08      	it	eq
 8000eae:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000eb6:	fabc f28c 	clz	r2, ip
 8000eba:	3a08      	subs	r2, #8
 8000ebc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ec0:	db10      	blt.n	8000ee4 <__aeabi_l2f+0x5c>
 8000ec2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ed4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f102 0220 	add.w	r2, r2, #32
 8000ee8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eec:	f1c2 0220 	rsb	r2, r2, #32
 8000ef0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ef4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ef8:	eb43 0002 	adc.w	r0, r3, r2
 8000efc:	bf08      	it	eq
 8000efe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_ldivmod>:
 8000f04:	b97b      	cbnz	r3, 8000f26 <__aeabi_ldivmod+0x22>
 8000f06:	b972      	cbnz	r2, 8000f26 <__aeabi_ldivmod+0x22>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bfbe      	ittt	lt
 8000f0c:	2000      	movlt	r0, #0
 8000f0e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000f12:	e006      	blt.n	8000f22 <__aeabi_ldivmod+0x1e>
 8000f14:	bf08      	it	eq
 8000f16:	2800      	cmpeq	r0, #0
 8000f18:	bf1c      	itt	ne
 8000f1a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000f1e:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f22:	f000 b9eb 	b.w	80012fc <__aeabi_idiv0>
 8000f26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f2e:	2900      	cmp	r1, #0
 8000f30:	db09      	blt.n	8000f46 <__aeabi_ldivmod+0x42>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db1a      	blt.n	8000f6c <__aeabi_ldivmod+0x68>
 8000f36:	f000 f883 	bl	8001040 <__udivmoddi4>
 8000f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f42:	b004      	add	sp, #16
 8000f44:	4770      	bx	lr
 8000f46:	4240      	negs	r0, r0
 8000f48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db1b      	blt.n	8000f88 <__aeabi_ldivmod+0x84>
 8000f50:	f000 f876 	bl	8001040 <__udivmoddi4>
 8000f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	4252      	negs	r2, r2
 8000f66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6a:	4770      	bx	lr
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	f000 f865 	bl	8001040 <__udivmoddi4>
 8000f76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7e:	b004      	add	sp, #16
 8000f80:	4240      	negs	r0, r0
 8000f82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f86:	4770      	bx	lr
 8000f88:	4252      	negs	r2, r2
 8000f8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8e:	f000 f857 	bl	8001040 <__udivmoddi4>
 8000f92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9a:	b004      	add	sp, #16
 8000f9c:	4252      	negs	r2, r2
 8000f9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fa2:	4770      	bx	lr

08000fa4 <__aeabi_uldivmod>:
 8000fa4:	b953      	cbnz	r3, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa6:	b94a      	cbnz	r2, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	bf08      	it	eq
 8000fac:	2800      	cmpeq	r0, #0
 8000fae:	bf1c      	itt	ne
 8000fb0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000fb4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000fb8:	f000 b9a0 	b.w	80012fc <__aeabi_idiv0>
 8000fbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fc4:	f000 f83c 	bl	8001040 <__udivmoddi4>
 8000fc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fd0:	b004      	add	sp, #16
 8000fd2:	4770      	bx	lr

08000fd4 <__aeabi_d2lz>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	f7ff fdad 	bl	8000b3c <__aeabi_dcmplt>
 8000fe2:	b928      	cbnz	r0, 8000ff0 <__aeabi_d2lz+0x1c>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fec:	f000 b80a 	b.w	8001004 <__aeabi_d2ulz>
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ff6:	f000 f805 	bl	8001004 <__aeabi_d2ulz>
 8000ffa:	4240      	negs	r0, r0
 8000ffc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop

08001004 <__aeabi_d2ulz>:
 8001004:	b5d0      	push	{r4, r6, r7, lr}
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <__aeabi_d2ulz+0x34>)
 8001008:	2200      	movs	r2, #0
 800100a:	4606      	mov	r6, r0
 800100c:	460f      	mov	r7, r1
 800100e:	f7ff fb23 	bl	8000658 <__aeabi_dmul>
 8001012:	f7ff fdf9 	bl	8000c08 <__aeabi_d2uiz>
 8001016:	4604      	mov	r4, r0
 8001018:	f7ff faa4 	bl	8000564 <__aeabi_ui2d>
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <__aeabi_d2ulz+0x38>)
 800101e:	2200      	movs	r2, #0
 8001020:	f7ff fb1a 	bl	8000658 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4630      	mov	r0, r6
 800102a:	4639      	mov	r1, r7
 800102c:	f7ff f95c 	bl	80002e8 <__aeabi_dsub>
 8001030:	f7ff fdea 	bl	8000c08 <__aeabi_d2uiz>
 8001034:	4621      	mov	r1, r4
 8001036:	bdd0      	pop	{r4, r6, r7, pc}
 8001038:	3df00000 	.word	0x3df00000
 800103c:	41f00000 	.word	0x41f00000

08001040 <__udivmoddi4>:
 8001040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001044:	9d08      	ldr	r5, [sp, #32]
 8001046:	460c      	mov	r4, r1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d14e      	bne.n	80010ea <__udivmoddi4+0xaa>
 800104c:	4694      	mov	ip, r2
 800104e:	458c      	cmp	ip, r1
 8001050:	4686      	mov	lr, r0
 8001052:	fab2 f282 	clz	r2, r2
 8001056:	d962      	bls.n	800111e <__udivmoddi4+0xde>
 8001058:	b14a      	cbz	r2, 800106e <__udivmoddi4+0x2e>
 800105a:	f1c2 0320 	rsb	r3, r2, #32
 800105e:	4091      	lsls	r1, r2
 8001060:	fa20 f303 	lsr.w	r3, r0, r3
 8001064:	fa0c fc02 	lsl.w	ip, ip, r2
 8001068:	4319      	orrs	r1, r3
 800106a:	fa00 fe02 	lsl.w	lr, r0, r2
 800106e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001072:	fa1f f68c 	uxth.w	r6, ip
 8001076:	fbb1 f4f7 	udiv	r4, r1, r7
 800107a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800107e:	fb07 1114 	mls	r1, r7, r4, r1
 8001082:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001086:	fb04 f106 	mul.w	r1, r4, r6
 800108a:	4299      	cmp	r1, r3
 800108c:	d90a      	bls.n	80010a4 <__udivmoddi4+0x64>
 800108e:	eb1c 0303 	adds.w	r3, ip, r3
 8001092:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001096:	f080 8112 	bcs.w	80012be <__udivmoddi4+0x27e>
 800109a:	4299      	cmp	r1, r3
 800109c:	f240 810f 	bls.w	80012be <__udivmoddi4+0x27e>
 80010a0:	3c02      	subs	r4, #2
 80010a2:	4463      	add	r3, ip
 80010a4:	1a59      	subs	r1, r3, r1
 80010a6:	fa1f f38e 	uxth.w	r3, lr
 80010aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80010ae:	fb07 1110 	mls	r1, r7, r0, r1
 80010b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010b6:	fb00 f606 	mul.w	r6, r0, r6
 80010ba:	429e      	cmp	r6, r3
 80010bc:	d90a      	bls.n	80010d4 <__udivmoddi4+0x94>
 80010be:	eb1c 0303 	adds.w	r3, ip, r3
 80010c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80010c6:	f080 80fc 	bcs.w	80012c2 <__udivmoddi4+0x282>
 80010ca:	429e      	cmp	r6, r3
 80010cc:	f240 80f9 	bls.w	80012c2 <__udivmoddi4+0x282>
 80010d0:	4463      	add	r3, ip
 80010d2:	3802      	subs	r0, #2
 80010d4:	1b9b      	subs	r3, r3, r6
 80010d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010da:	2100      	movs	r1, #0
 80010dc:	b11d      	cbz	r5, 80010e6 <__udivmoddi4+0xa6>
 80010de:	40d3      	lsrs	r3, r2
 80010e0:	2200      	movs	r2, #0
 80010e2:	e9c5 3200 	strd	r3, r2, [r5]
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d905      	bls.n	80010fa <__udivmoddi4+0xba>
 80010ee:	b10d      	cbz	r5, 80010f4 <__udivmoddi4+0xb4>
 80010f0:	e9c5 0100 	strd	r0, r1, [r5]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4608      	mov	r0, r1
 80010f8:	e7f5      	b.n	80010e6 <__udivmoddi4+0xa6>
 80010fa:	fab3 f183 	clz	r1, r3
 80010fe:	2900      	cmp	r1, #0
 8001100:	d146      	bne.n	8001190 <__udivmoddi4+0x150>
 8001102:	42a3      	cmp	r3, r4
 8001104:	d302      	bcc.n	800110c <__udivmoddi4+0xcc>
 8001106:	4290      	cmp	r0, r2
 8001108:	f0c0 80f0 	bcc.w	80012ec <__udivmoddi4+0x2ac>
 800110c:	1a86      	subs	r6, r0, r2
 800110e:	eb64 0303 	sbc.w	r3, r4, r3
 8001112:	2001      	movs	r0, #1
 8001114:	2d00      	cmp	r5, #0
 8001116:	d0e6      	beq.n	80010e6 <__udivmoddi4+0xa6>
 8001118:	e9c5 6300 	strd	r6, r3, [r5]
 800111c:	e7e3      	b.n	80010e6 <__udivmoddi4+0xa6>
 800111e:	2a00      	cmp	r2, #0
 8001120:	f040 8090 	bne.w	8001244 <__udivmoddi4+0x204>
 8001124:	eba1 040c 	sub.w	r4, r1, ip
 8001128:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800112c:	fa1f f78c 	uxth.w	r7, ip
 8001130:	2101      	movs	r1, #1
 8001132:	fbb4 f6f8 	udiv	r6, r4, r8
 8001136:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800113a:	fb08 4416 	mls	r4, r8, r6, r4
 800113e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001142:	fb07 f006 	mul.w	r0, r7, r6
 8001146:	4298      	cmp	r0, r3
 8001148:	d908      	bls.n	800115c <__udivmoddi4+0x11c>
 800114a:	eb1c 0303 	adds.w	r3, ip, r3
 800114e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8001152:	d202      	bcs.n	800115a <__udivmoddi4+0x11a>
 8001154:	4298      	cmp	r0, r3
 8001156:	f200 80cd 	bhi.w	80012f4 <__udivmoddi4+0x2b4>
 800115a:	4626      	mov	r6, r4
 800115c:	1a1c      	subs	r4, r3, r0
 800115e:	fa1f f38e 	uxth.w	r3, lr
 8001162:	fbb4 f0f8 	udiv	r0, r4, r8
 8001166:	fb08 4410 	mls	r4, r8, r0, r4
 800116a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800116e:	fb00 f707 	mul.w	r7, r0, r7
 8001172:	429f      	cmp	r7, r3
 8001174:	d908      	bls.n	8001188 <__udivmoddi4+0x148>
 8001176:	eb1c 0303 	adds.w	r3, ip, r3
 800117a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800117e:	d202      	bcs.n	8001186 <__udivmoddi4+0x146>
 8001180:	429f      	cmp	r7, r3
 8001182:	f200 80b0 	bhi.w	80012e6 <__udivmoddi4+0x2a6>
 8001186:	4620      	mov	r0, r4
 8001188:	1bdb      	subs	r3, r3, r7
 800118a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800118e:	e7a5      	b.n	80010dc <__udivmoddi4+0x9c>
 8001190:	f1c1 0620 	rsb	r6, r1, #32
 8001194:	408b      	lsls	r3, r1
 8001196:	fa22 f706 	lsr.w	r7, r2, r6
 800119a:	431f      	orrs	r7, r3
 800119c:	fa20 fc06 	lsr.w	ip, r0, r6
 80011a0:	fa04 f301 	lsl.w	r3, r4, r1
 80011a4:	ea43 030c 	orr.w	r3, r3, ip
 80011a8:	40f4      	lsrs	r4, r6
 80011aa:	fa00 f801 	lsl.w	r8, r0, r1
 80011ae:	0c38      	lsrs	r0, r7, #16
 80011b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80011b4:	fbb4 fef0 	udiv	lr, r4, r0
 80011b8:	fa1f fc87 	uxth.w	ip, r7
 80011bc:	fb00 441e 	mls	r4, r0, lr, r4
 80011c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011c4:	fb0e f90c 	mul.w	r9, lr, ip
 80011c8:	45a1      	cmp	r9, r4
 80011ca:	fa02 f201 	lsl.w	r2, r2, r1
 80011ce:	d90a      	bls.n	80011e6 <__udivmoddi4+0x1a6>
 80011d0:	193c      	adds	r4, r7, r4
 80011d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80011d6:	f080 8084 	bcs.w	80012e2 <__udivmoddi4+0x2a2>
 80011da:	45a1      	cmp	r9, r4
 80011dc:	f240 8081 	bls.w	80012e2 <__udivmoddi4+0x2a2>
 80011e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011e4:	443c      	add	r4, r7
 80011e6:	eba4 0409 	sub.w	r4, r4, r9
 80011ea:	fa1f f983 	uxth.w	r9, r3
 80011ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80011f2:	fb00 4413 	mls	r4, r0, r3, r4
 80011f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80011fe:	45a4      	cmp	ip, r4
 8001200:	d907      	bls.n	8001212 <__udivmoddi4+0x1d2>
 8001202:	193c      	adds	r4, r7, r4
 8001204:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001208:	d267      	bcs.n	80012da <__udivmoddi4+0x29a>
 800120a:	45a4      	cmp	ip, r4
 800120c:	d965      	bls.n	80012da <__udivmoddi4+0x29a>
 800120e:	3b02      	subs	r3, #2
 8001210:	443c      	add	r4, r7
 8001212:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001216:	fba0 9302 	umull	r9, r3, r0, r2
 800121a:	eba4 040c 	sub.w	r4, r4, ip
 800121e:	429c      	cmp	r4, r3
 8001220:	46ce      	mov	lr, r9
 8001222:	469c      	mov	ip, r3
 8001224:	d351      	bcc.n	80012ca <__udivmoddi4+0x28a>
 8001226:	d04e      	beq.n	80012c6 <__udivmoddi4+0x286>
 8001228:	b155      	cbz	r5, 8001240 <__udivmoddi4+0x200>
 800122a:	ebb8 030e 	subs.w	r3, r8, lr
 800122e:	eb64 040c 	sbc.w	r4, r4, ip
 8001232:	fa04 f606 	lsl.w	r6, r4, r6
 8001236:	40cb      	lsrs	r3, r1
 8001238:	431e      	orrs	r6, r3
 800123a:	40cc      	lsrs	r4, r1
 800123c:	e9c5 6400 	strd	r6, r4, [r5]
 8001240:	2100      	movs	r1, #0
 8001242:	e750      	b.n	80010e6 <__udivmoddi4+0xa6>
 8001244:	f1c2 0320 	rsb	r3, r2, #32
 8001248:	fa20 f103 	lsr.w	r1, r0, r3
 800124c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001250:	fa24 f303 	lsr.w	r3, r4, r3
 8001254:	4094      	lsls	r4, r2
 8001256:	430c      	orrs	r4, r1
 8001258:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800125c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001260:	fa1f f78c 	uxth.w	r7, ip
 8001264:	fbb3 f0f8 	udiv	r0, r3, r8
 8001268:	fb08 3110 	mls	r1, r8, r0, r3
 800126c:	0c23      	lsrs	r3, r4, #16
 800126e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001272:	fb00 f107 	mul.w	r1, r0, r7
 8001276:	4299      	cmp	r1, r3
 8001278:	d908      	bls.n	800128c <__udivmoddi4+0x24c>
 800127a:	eb1c 0303 	adds.w	r3, ip, r3
 800127e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001282:	d22c      	bcs.n	80012de <__udivmoddi4+0x29e>
 8001284:	4299      	cmp	r1, r3
 8001286:	d92a      	bls.n	80012de <__udivmoddi4+0x29e>
 8001288:	3802      	subs	r0, #2
 800128a:	4463      	add	r3, ip
 800128c:	1a5b      	subs	r3, r3, r1
 800128e:	b2a4      	uxth	r4, r4
 8001290:	fbb3 f1f8 	udiv	r1, r3, r8
 8001294:	fb08 3311 	mls	r3, r8, r1, r3
 8001298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800129c:	fb01 f307 	mul.w	r3, r1, r7
 80012a0:	42a3      	cmp	r3, r4
 80012a2:	d908      	bls.n	80012b6 <__udivmoddi4+0x276>
 80012a4:	eb1c 0404 	adds.w	r4, ip, r4
 80012a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80012ac:	d213      	bcs.n	80012d6 <__udivmoddi4+0x296>
 80012ae:	42a3      	cmp	r3, r4
 80012b0:	d911      	bls.n	80012d6 <__udivmoddi4+0x296>
 80012b2:	3902      	subs	r1, #2
 80012b4:	4464      	add	r4, ip
 80012b6:	1ae4      	subs	r4, r4, r3
 80012b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012bc:	e739      	b.n	8001132 <__udivmoddi4+0xf2>
 80012be:	4604      	mov	r4, r0
 80012c0:	e6f0      	b.n	80010a4 <__udivmoddi4+0x64>
 80012c2:	4608      	mov	r0, r1
 80012c4:	e706      	b.n	80010d4 <__udivmoddi4+0x94>
 80012c6:	45c8      	cmp	r8, r9
 80012c8:	d2ae      	bcs.n	8001228 <__udivmoddi4+0x1e8>
 80012ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80012d2:	3801      	subs	r0, #1
 80012d4:	e7a8      	b.n	8001228 <__udivmoddi4+0x1e8>
 80012d6:	4631      	mov	r1, r6
 80012d8:	e7ed      	b.n	80012b6 <__udivmoddi4+0x276>
 80012da:	4603      	mov	r3, r0
 80012dc:	e799      	b.n	8001212 <__udivmoddi4+0x1d2>
 80012de:	4630      	mov	r0, r6
 80012e0:	e7d4      	b.n	800128c <__udivmoddi4+0x24c>
 80012e2:	46d6      	mov	lr, sl
 80012e4:	e77f      	b.n	80011e6 <__udivmoddi4+0x1a6>
 80012e6:	4463      	add	r3, ip
 80012e8:	3802      	subs	r0, #2
 80012ea:	e74d      	b.n	8001188 <__udivmoddi4+0x148>
 80012ec:	4606      	mov	r6, r0
 80012ee:	4623      	mov	r3, r4
 80012f0:	4608      	mov	r0, r1
 80012f2:	e70f      	b.n	8001114 <__udivmoddi4+0xd4>
 80012f4:	3e02      	subs	r6, #2
 80012f6:	4463      	add	r3, ip
 80012f8:	e730      	b.n	800115c <__udivmoddi4+0x11c>
 80012fa:	bf00      	nop

080012fc <__aeabi_idiv0>:
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <CS_Select>:
#define NRF24_CSN_PORT   CSN_GPIO_Port
#define NRF24_CSN_PIN    CSN_Pin


void CS_Select (void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800130a:	4802      	ldr	r0, [pc, #8]	@ (8001314 <CS_Select+0x14>)
 800130c:	f004 fa1e 	bl	800574c <HAL_GPIO_WritePin>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021400 	.word	0x40021400

08001318 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001322:	4802      	ldr	r0, [pc, #8]	@ (800132c <CS_UnSelect+0x14>)
 8001324:	f004 fa12 	bl	800574c <HAL_GPIO_WritePin>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021400 	.word	0x40021400

08001330 <CE_Enable>:


void CE_Enable (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800133a:	4802      	ldr	r0, [pc, #8]	@ (8001344 <CE_Enable+0x14>)
 800133c:	f004 fa06 	bl	800574c <HAL_GPIO_WritePin>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40020c00 	.word	0x40020c00

08001348 <CE_Disable>:

void CE_Disable (void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001352:	4802      	ldr	r0, [pc, #8]	@ (800135c <CE_Disable+0x14>)
 8001354:	f004 f9fa 	bl	800574c <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020c00 	.word	0x40020c00

08001360 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	b2db      	uxtb	r3, r3
 8001378:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800137e:	f7ff ffbf 	bl	8001300 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8001382:	f107 010c 	add.w	r1, r7, #12
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	2202      	movs	r2, #2
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <nrf24_WriteReg+0x40>)
 800138e:	f005 f8b4 	bl	80064fa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001392:	f7ff ffc1 	bl	8001318 <CS_UnSelect>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000929c 	.word	0x2000929c

080013a4 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80013bc:	f7ff ffa0 	bl	8001300 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80013c0:	f107 0114 	add.w	r1, r7, #20
 80013c4:	2364      	movs	r3, #100	@ 0x64
 80013c6:	2201      	movs	r2, #1
 80013c8:	4808      	ldr	r0, [pc, #32]	@ (80013ec <nrf24_WriteRegMulti+0x48>)
 80013ca:	f005 f896 	bl	80064fa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	68b9      	ldr	r1, [r7, #8]
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <nrf24_WriteRegMulti+0x48>)
 80013da:	f005 f88e 	bl	80064fa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80013de:	f7ff ff9b 	bl	8001318 <CS_UnSelect>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000929c 	.word	0x2000929c

080013f0 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80013fe:	f7ff ff7f 	bl	8001300 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001402:	1df9      	adds	r1, r7, #7
 8001404:	2364      	movs	r3, #100	@ 0x64
 8001406:	2201      	movs	r2, #1
 8001408:	4808      	ldr	r0, [pc, #32]	@ (800142c <nrf24_ReadReg+0x3c>)
 800140a:	f005 f876 	bl	80064fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800140e:	f107 010f 	add.w	r1, r7, #15
 8001412:	2364      	movs	r3, #100	@ 0x64
 8001414:	2201      	movs	r2, #1
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <nrf24_ReadReg+0x3c>)
 8001418:	f005 f9b3 	bl	8006782 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800141c:	f7ff ff7c 	bl	8001318 <CS_UnSelect>

	return data;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000929c 	.word	0x2000929c

08001430 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800143e:	f7ff ff5f 	bl	8001300 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001442:	f107 010f 	add.w	r1, r7, #15
 8001446:	2364      	movs	r3, #100	@ 0x64
 8001448:	2201      	movs	r2, #1
 800144a:	4808      	ldr	r0, [pc, #32]	@ (800146c <nrf24_ReadReg_Multi+0x3c>)
 800144c:	f005 f855 	bl	80064fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	b29a      	uxth	r2, r3
 8001454:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	4804      	ldr	r0, [pc, #16]	@ (800146c <nrf24_ReadReg_Multi+0x3c>)
 800145c:	f005 f991 	bl	8006782 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001460:	f7ff ff5a 	bl	8001318 <CS_UnSelect>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000929c 	.word	0x2000929c

08001470 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800147a:	f7ff ff41 	bl	8001300 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800147e:	1df9      	adds	r1, r7, #7
 8001480:	2364      	movs	r3, #100	@ 0x64
 8001482:	2201      	movs	r2, #1
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <nrfsendCmd+0x28>)
 8001486:	f005 f838 	bl	80064fa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800148a:	f7ff ff45 	bl	8001318 <CS_UnSelect>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000929c 	.word	0x2000929c

0800149c <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b07      	cmp	r3, #7
 80014aa:	d104      	bne.n	80014b6 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80014ac:	2100      	movs	r1, #0
 80014ae:	2007      	movs	r0, #7
 80014b0:	f7ff ff56 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80014b4:	e090      	b.n	80015d8 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b17      	cmp	r3, #23
 80014ba:	d104      	bne.n	80014c6 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80014bc:	2111      	movs	r1, #17
 80014be:	2017      	movs	r0, #23
 80014c0:	f7ff ff4e 	bl	8001360 <nrf24_WriteReg>
}
 80014c4:	e088      	b.n	80015d8 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80014c6:	2108      	movs	r1, #8
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff ff49 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80014ce:	213f      	movs	r1, #63	@ 0x3f
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7ff ff45 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80014d6:	2103      	movs	r1, #3
 80014d8:	2002      	movs	r0, #2
 80014da:	f7ff ff41 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80014de:	2103      	movs	r1, #3
 80014e0:	2003      	movs	r0, #3
 80014e2:	f7ff ff3d 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80014e6:	2103      	movs	r1, #3
 80014e8:	2004      	movs	r0, #4
 80014ea:	f7ff ff39 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80014ee:	2102      	movs	r1, #2
 80014f0:	2005      	movs	r0, #5
 80014f2:	f7ff ff35 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80014f6:	210e      	movs	r1, #14
 80014f8:	2006      	movs	r0, #6
 80014fa:	f7ff ff31 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80014fe:	2100      	movs	r1, #0
 8001500:	2007      	movs	r0, #7
 8001502:	f7ff ff2d 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001506:	2100      	movs	r1, #0
 8001508:	2008      	movs	r0, #8
 800150a:	f7ff ff29 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800150e:	2100      	movs	r1, #0
 8001510:	2009      	movs	r0, #9
 8001512:	f7ff ff25 	bl	8001360 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001516:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <nrf24_reset+0x144>)
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001520:	6018      	str	r0, [r3, #0]
 8001522:	3304      	adds	r3, #4
 8001524:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	2205      	movs	r2, #5
 800152c:	4619      	mov	r1, r3
 800152e:	200a      	movs	r0, #10
 8001530:	f7ff ff38 	bl	80013a4 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001534:	4a2b      	ldr	r2, [pc, #172]	@ (80015e4 <nrf24_reset+0x148>)
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153e:	6018      	str	r0, [r3, #0]
 8001540:	3304      	adds	r3, #4
 8001542:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	2205      	movs	r2, #5
 800154a:	4619      	mov	r1, r3
 800154c:	200b      	movs	r0, #11
 800154e:	f7ff ff29 	bl	80013a4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8001552:	21c3      	movs	r1, #195	@ 0xc3
 8001554:	200c      	movs	r0, #12
 8001556:	f7ff ff03 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800155a:	21c4      	movs	r1, #196	@ 0xc4
 800155c:	200d      	movs	r0, #13
 800155e:	f7ff feff 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8001562:	21c5      	movs	r1, #197	@ 0xc5
 8001564:	200e      	movs	r0, #14
 8001566:	f7ff fefb 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800156a:	21c6      	movs	r1, #198	@ 0xc6
 800156c:	200f      	movs	r0, #15
 800156e:	f7ff fef7 	bl	8001360 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001572:	4a1b      	ldr	r2, [pc, #108]	@ (80015e0 <nrf24_reset+0x144>)
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157c:	6018      	str	r0, [r3, #0]
 800157e:	3304      	adds	r3, #4
 8001580:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	2205      	movs	r2, #5
 8001588:	4619      	mov	r1, r3
 800158a:	2010      	movs	r0, #16
 800158c:	f7ff ff0a 	bl	80013a4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8001590:	2100      	movs	r1, #0
 8001592:	2011      	movs	r0, #17
 8001594:	f7ff fee4 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001598:	2100      	movs	r1, #0
 800159a:	2012      	movs	r0, #18
 800159c:	f7ff fee0 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2013      	movs	r0, #19
 80015a4:	f7ff fedc 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2014      	movs	r0, #20
 80015ac:	f7ff fed8 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	2015      	movs	r0, #21
 80015b4:	f7ff fed4 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2016      	movs	r0, #22
 80015bc:	f7ff fed0 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80015c0:	2111      	movs	r1, #17
 80015c2:	2017      	movs	r0, #23
 80015c4:	f7ff fecc 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80015c8:	2100      	movs	r1, #0
 80015ca:	201c      	movs	r0, #28
 80015cc:	f7ff fec8 	bl	8001360 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80015d0:	2100      	movs	r1, #0
 80015d2:	201d      	movs	r0, #29
 80015d4:	f7ff fec4 	bl	8001360 <nrf24_WriteReg>
}
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	0801ee80 	.word	0x0801ee80
 80015e4:	0801ee88 	.word	0x0801ee88

080015e8 <NRF24_Init>:




void NRF24_Init (void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80015ec:	f7ff feac 	bl	8001348 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff53 	bl	800149c <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80015f6:	2100      	movs	r1, #0
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff feb1 	bl	8001360 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80015fe:	2100      	movs	r1, #0
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fead 	bl	8001360 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001606:	2100      	movs	r1, #0
 8001608:	2002      	movs	r0, #2
 800160a:	f7ff fea9 	bl	8001360 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800160e:	2103      	movs	r1, #3
 8001610:	2003      	movs	r0, #3
 8001612:	f7ff fea5 	bl	8001360 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8001616:	2100      	movs	r1, #0
 8001618:	2004      	movs	r0, #4
 800161a:	f7ff fea1 	bl	8001360 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800161e:	2100      	movs	r1, #0
 8001620:	2005      	movs	r0, #5
 8001622:	f7ff fe9d 	bl	8001360 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8001626:	210e      	movs	r1, #14
 8001628:	2006      	movs	r0, #6
 800162a:	f7ff fe99 	bl	8001360 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800162e:	f7ff fe7f 	bl	8001330 <CE_Enable>

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}

08001636 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8001642:	f7ff fe81 	bl	8001348 <CE_Disable>

	nrf24_reset (STATUS);
 8001646:	2007      	movs	r0, #7
 8001648:	f7ff ff28 	bl	800149c <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	4619      	mov	r1, r3
 8001650:	2005      	movs	r0, #5
 8001652:	f7ff fe85 	bl	8001360 <nrf24_WriteReg>

	// select data pipe 1
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8001656:	2002      	movs	r0, #2
 8001658:	f7ff feca 	bl	80013f0 <nrf24_ReadReg>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	4619      	mov	r1, r3
 800166c:	2002      	movs	r0, #2
 800166e:	f7ff fe77 	bl	8001360 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8001672:	2205      	movs	r2, #5
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	200b      	movs	r0, #11
 8001678:	f7ff fe94 	bl	80013a4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 800167c:	21ee      	movs	r1, #238	@ 0xee
 800167e:	200c      	movs	r0, #12
 8001680:	f7ff fe6e 	bl	8001360 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8001684:	2120      	movs	r1, #32
 8001686:	2013      	movs	r0, #19
 8001688:	f7ff fe6a 	bl	8001360 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff feaf 	bl	80013f0 <nrf24_ReadReg>
 8001692:	4603      	mov	r3, r0
 8001694:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	f043 0303 	orr.w	r3, r3, #3
 800169c:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800169e:	7bbb      	ldrb	r3, [r7, #14]
 80016a0:	4619      	mov	r1, r3
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fe5c 	bl	8001360 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80016a8:	f7ff fe42 	bl	8001330 <CE_Enable>
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80016bc:	2007      	movs	r0, #7
 80016be:	f7ff fe97 	bl	80013f0 <nrf24_ReadReg>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <isDataAvailable+0x34>
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80016dc:	2140      	movs	r1, #64	@ 0x40
 80016de:	2007      	movs	r0, #7
 80016e0:	f7ff fe3e 	bl	8001360 <nrf24_WriteReg>

		return 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <isDataAvailable+0x36>
	}

	return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8001700:	f7ff fdfe 	bl	8001300 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8001704:	2361      	movs	r3, #97	@ 0x61
 8001706:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001708:	f107 010f 	add.w	r1, r7, #15
 800170c:	2364      	movs	r3, #100	@ 0x64
 800170e:	2201      	movs	r2, #1
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <NRF24_Receive+0x50>)
 8001712:	f004 fef2 	bl	80064fa <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8001716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171a:	2220      	movs	r2, #32
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4809      	ldr	r0, [pc, #36]	@ (8001744 <NRF24_Receive+0x50>)
 8001720:	f005 f82f 	bl	8006782 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8001724:	f7ff fdf8 	bl	8001318 <CS_UnSelect>

	HAL_Delay(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f003 f973 	bl	8004a14 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800172e:	23e2      	movs	r3, #226	@ 0xe2
 8001730:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe9b 	bl	8001470 <nrfsendCmd>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000929c 	.word	0x2000929c

08001748 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e00c      	b.n	8001770 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	b2d9      	uxtb	r1, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	18d4      	adds	r4, r2, r3
 8001760:	4608      	mov	r0, r1
 8001762:	f7ff fe45 	bl	80013f0 <nrf24_ReadReg>
 8001766:	4603      	mov	r3, r0
 8001768:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b09      	cmp	r3, #9
 8001774:	ddef      	ble.n	8001756 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	330a      	adds	r3, #10
 800177a:	2205      	movs	r2, #5
 800177c:	4619      	mov	r1, r3
 800177e:	200a      	movs	r0, #10
 8001780:	f7ff fe56 	bl	8001430 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	330f      	adds	r3, #15
 8001788:	2205      	movs	r2, #5
 800178a:	4619      	mov	r1, r3
 800178c:	200b      	movs	r0, #11
 800178e:	f7ff fe4f 	bl	8001430 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f103 0414 	add.w	r4, r3, #20
 8001798:	200c      	movs	r0, #12
 800179a:	f7ff fe29 	bl	80013f0 <nrf24_ReadReg>
 800179e:	4603      	mov	r3, r0
 80017a0:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f103 0415 	add.w	r4, r3, #21
 80017a8:	200d      	movs	r0, #13
 80017aa:	f7ff fe21 	bl	80013f0 <nrf24_ReadReg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f103 0416 	add.w	r4, r3, #22
 80017b8:	200e      	movs	r0, #14
 80017ba:	f7ff fe19 	bl	80013f0 <nrf24_ReadReg>
 80017be:	4603      	mov	r3, r0
 80017c0:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f103 0417 	add.w	r4, r3, #23
 80017c8:	200f      	movs	r0, #15
 80017ca:	f7ff fe11 	bl	80013f0 <nrf24_ReadReg>
 80017ce:	4603      	mov	r3, r0
 80017d0:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3318      	adds	r3, #24
 80017d6:	2205      	movs	r2, #5
 80017d8:	4619      	mov	r1, r3
 80017da:	200a      	movs	r0, #10
 80017dc:	f7ff fe28 	bl	8001430 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80017e0:	231d      	movs	r3, #29
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	e00e      	b.n	8001804 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3b0c      	subs	r3, #12
 80017ec:	b2d9      	uxtb	r1, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	18d4      	adds	r4, r2, r3
 80017f4:	4608      	mov	r0, r1
 80017f6:	f7ff fdfb 	bl	80013f0 <nrf24_ReadReg>
 80017fa:	4603      	mov	r3, r0
 80017fc:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3301      	adds	r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b25      	cmp	r3, #37	@ 0x25
 8001808:	dded      	ble.n	80017e6 <NRF24_ReadAll+0x9e>
	}

}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}

08001814 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001820:	f009 f9e0 	bl	800abe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001824:	4b5a      	ldr	r3, [pc, #360]	@ (8001990 <pvPortMallocMicroROS+0x17c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800182c:	f000 f986 	bl	8001b3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001830:	4b58      	ldr	r3, [pc, #352]	@ (8001994 <pvPortMallocMicroROS+0x180>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	f040 8090 	bne.w	800195e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01e      	beq.n	8001882 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001844:	2208      	movs	r2, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	2b00      	cmp	r3, #0
 8001854:	d015      	beq.n	8001882 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f023 0307 	bic.w	r3, r3, #7
 800185c:	3308      	adds	r3, #8
 800185e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800186a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800186e:	f383 8811 	msr	BASEPRI, r3
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	f3bf 8f4f 	dsb	sy
 800187a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	e7fd      	b.n	800187e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d06a      	beq.n	800195e <pvPortMallocMicroROS+0x14a>
 8001888:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <pvPortMallocMicroROS+0x184>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	429a      	cmp	r2, r3
 8001890:	d865      	bhi.n	800195e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001892:	4b42      	ldr	r3, [pc, #264]	@ (800199c <pvPortMallocMicroROS+0x188>)
 8001894:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <pvPortMallocMicroROS+0x188>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800189c:	e004      	b.n	80018a8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d903      	bls.n	80018ba <pvPortMallocMicroROS+0xa6>
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f1      	bne.n	800189e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80018ba:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <pvPortMallocMicroROS+0x17c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d04c      	beq.n	800195e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2208      	movs	r2, #8
 80018ca:	4413      	add	r3, r2
 80018cc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	1ad2      	subs	r2, r2, r3
 80018de:	2308      	movs	r3, #8
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d920      	bls.n	8001928 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80018e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00b      	beq.n	8001910 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80018f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	613b      	str	r3, [r7, #16]
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	1ad2      	subs	r2, r2, r3
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001922:	69b8      	ldr	r0, [r7, #24]
 8001924:	f000 f96c 	bl	8001c00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <pvPortMallocMicroROS+0x184>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	4a19      	ldr	r2, [pc, #100]	@ (8001998 <pvPortMallocMicroROS+0x184>)
 8001934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <pvPortMallocMicroROS+0x184>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <pvPortMallocMicroROS+0x18c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d203      	bcs.n	800194a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <pvPortMallocMicroROS+0x184>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <pvPortMallocMicroROS+0x18c>)
 8001948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <pvPortMallocMicroROS+0x180>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800195e:	f009 f94f 	bl	800ac00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00b      	beq.n	8001984 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800196c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001970:	f383 8811 	msr	BASEPRI, r3
 8001974:	f3bf 8f6f 	isb	sy
 8001978:	f3bf 8f4f 	dsb	sy
 800197c:	60fb      	str	r3, [r7, #12]
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001984:	69fb      	ldr	r3, [r7, #28]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000928c 	.word	0x2000928c
 8001994:	20009298 	.word	0x20009298
 8001998:	20009290 	.word	0x20009290
 800199c:	20009284 	.word	0x20009284
 80019a0:	20009294 	.word	0x20009294

080019a4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d04a      	beq.n	8001a4c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80019b6:	2308      	movs	r3, #8
 80019b8:	425b      	negs	r3, r3
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <vPortFreeMicroROS+0xb0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10b      	bne.n	80019ea <vPortFreeMicroROS+0x46>
	__asm volatile
 80019d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019d6:	f383 8811 	msr	BASEPRI, r3
 80019da:	f3bf 8f6f 	isb	sy
 80019de:	f3bf 8f4f 	dsb	sy
 80019e2:	60fb      	str	r3, [r7, #12]
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	e7fd      	b.n	80019e6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <vPortFreeMicroROS+0x66>
	__asm volatile
 80019f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f6:	f383 8811 	msr	BASEPRI, r3
 80019fa:	f3bf 8f6f 	isb	sy
 80019fe:	f3bf 8f4f 	dsb	sy
 8001a02:	60bb      	str	r3, [r7, #8]
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	e7fd      	b.n	8001a06 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <vPortFreeMicroROS+0xb0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d019      	beq.n	8001a4c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d115      	bne.n	8001a4c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <vPortFreeMicroROS+0xb0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001a30:	f009 f8d8 	bl	800abe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <vPortFreeMicroROS+0xb4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <vPortFreeMicroROS+0xb4>)
 8001a40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a42:	6938      	ldr	r0, [r7, #16]
 8001a44:	f000 f8dc 	bl	8001c00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001a48:	f009 f8da 	bl	800ac00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20009298 	.word	0x20009298
 8001a58:	20009290 	.word	0x20009290

08001a5c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	425b      	negs	r3, r3
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4413      	add	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <getBlockSize+0x38>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

	return count;
 8001a84:	68fb      	ldr	r3, [r7, #12]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20009298 	.word	0x20009298

08001a98 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001aa2:	f009 f89f 	bl	800abe4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f7ff feb4 	bl	8001814 <pvPortMallocMicroROS>
 8001aac:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <pvPortReallocMicroROS+0x4c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d014      	beq.n	8001ae4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffce 	bl	8001a5c <getBlockSize>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d201      	bcs.n	8001ad4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68b8      	ldr	r0, [r7, #8]
 8001ada:	f01a f824 	bl	801bb26 <memcpy>

		vPortFreeMicroROS(pv);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ff60 	bl	80019a4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001ae4:	f009 f88c 	bl	800ac00 <xTaskResumeAll>

	return newmem;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001afc:	f009 f872 	bl	800abe4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff fe82 	bl	8001814 <pvPortMallocMicroROS>
 8001b10:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001b16:	e004      	b.n	8001b22 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	613a      	str	r2, [r7, #16]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	1e5a      	subs	r2, r3, #1
 8001b26:	617a      	str	r2, [r7, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f5      	bne.n	8001b18 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001b2c:	f009 f868 	bl	800ac00 <xTaskResumeAll>
  	return mem;
 8001b30:	68fb      	ldr	r3, [r7, #12]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b42:	f647 6368 	movw	r3, #32360	@ 0x7e68
 8001b46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001b48:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <prvHeapInit+0xac>)
 8001b4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3307      	adds	r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001be8 <prvHeapInit+0xac>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b74:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <prvHeapInit+0xb0>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <prvHeapInit+0xb0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001b88:	2208      	movs	r2, #8
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f023 0307 	bic.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a15      	ldr	r2, [pc, #84]	@ (8001bf0 <prvHeapInit+0xb4>)
 8001b9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <prvHeapInit+0xb4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <prvHeapInit+0xb4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <prvHeapInit+0xb4>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <prvHeapInit+0xb8>)
 8001bca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <prvHeapInit+0xbc>)
 8001bd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <prvHeapInit+0xc0>)
 8001bd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001bda:	601a      	str	r2, [r3, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	2000141c 	.word	0x2000141c
 8001bec:	20009284 	.word	0x20009284
 8001bf0:	2000928c 	.word	0x2000928c
 8001bf4:	20009294 	.word	0x20009294
 8001bf8:	20009290 	.word	0x20009290
 8001bfc:	20009298 	.word	0x20009298

08001c00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001c08:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <prvInsertBlockIntoFreeList+0xac>)
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e002      	b.n	8001c14 <prvInsertBlockIntoFreeList+0x14>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d8f7      	bhi.n	8001c0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	4413      	add	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d108      	bne.n	8001c42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	441a      	add	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	441a      	add	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d118      	bne.n	8001c88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <prvInsertBlockIntoFreeList+0xb0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d00d      	beq.n	8001c7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	441a      	add	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e008      	b.n	8001c90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <prvInsertBlockIntoFreeList+0xb0>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e003      	b.n	8001c90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d002      	beq.n	8001c9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20009284 	.word	0x20009284
 8001cb0:	2000928c 	.word	0x2000928c

08001cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb8:	f002 fe6a 	bl	8004990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cbc:	f000 f884 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc0:	f000 fcc0 	bl	8002644 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cc4:	f000 fc86 	bl	80025d4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001cc8:	f000 fc5a 	bl	8002580 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001ccc:	f000 f91e 	bl	8001f0c <MX_TIM1_Init>
  MX_TIM9_Init();
 8001cd0:	f000 fac0 	bl	8002254 <MX_TIM9_Init>
  MX_TIM3_Init();
 8001cd4:	f000 f9c6 	bl	8002064 <MX_TIM3_Init>
  MX_TIM10_Init();
 8001cd8:	f000 fb34 	bl	8002344 <MX_TIM10_Init>
  MX_TIM4_Init();
 8001cdc:	f000 fa16 	bl	800210c <MX_TIM4_Init>
  MX_TIM2_Init();
 8001ce0:	f000 f96c 	bl	8001fbc <MX_TIM2_Init>
  MX_TIM5_Init();
 8001ce4:	f000 fa66 	bl	80021b4 <MX_TIM5_Init>
  MX_TIM11_Init();
 8001ce8:	f000 fb84 	bl	80023f4 <MX_TIM11_Init>
  MX_TIM13_Init();
 8001cec:	f000 fbd0 	bl	8002490 <MX_TIM13_Init>
  MX_SPI1_Init();
 8001cf0:	f000 f8d6 	bl	8001ea0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001cf4:	f000 fc1a 	bl	800252c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cf8:	f007 fe36 	bl	8009968 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <main+0xc0>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	481d      	ldr	r0, [pc, #116]	@ (8001d78 <main+0xc4>)
 8001d02:	f007 fe7b 	bl	80099fc <osThreadNew>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <main+0xc8>)
 8001d0a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d80 <main+0xcc>)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	481c      	ldr	r0, [pc, #112]	@ (8001d84 <main+0xd0>)
 8001d12:	f007 fe73 	bl	80099fc <osThreadNew>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <main+0xd4>)
 8001d1a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <main+0xd8>)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	481b      	ldr	r0, [pc, #108]	@ (8001d90 <main+0xdc>)
 8001d22:	f007 fe6b 	bl	80099fc <osThreadNew>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a1a      	ldr	r2, [pc, #104]	@ (8001d94 <main+0xe0>)
 8001d2a:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d98 <main+0xe4>)
 8001d2e:	2100      	movs	r1, #0
 8001d30:	481a      	ldr	r0, [pc, #104]	@ (8001d9c <main+0xe8>)
 8001d32:	f007 fe63 	bl	80099fc <osThreadNew>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a19      	ldr	r2, [pc, #100]	@ (8001da0 <main+0xec>)
 8001d3a:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <main+0xf0>)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4819      	ldr	r0, [pc, #100]	@ (8001da8 <main+0xf4>)
 8001d42:	f007 fe5b 	bl	80099fc <osThreadNew>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4a18      	ldr	r2, [pc, #96]	@ (8001dac <main+0xf8>)
 8001d4a:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 8001d4c:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <main+0xfc>)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4818      	ldr	r0, [pc, #96]	@ (8001db4 <main+0x100>)
 8001d52:	f007 fe53 	bl	80099fc <osThreadNew>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <main+0x104>)
 8001d5a:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 8001d5c:	4a17      	ldr	r2, [pc, #92]	@ (8001dbc <main+0x108>)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4817      	ldr	r0, [pc, #92]	@ (8001dc0 <main+0x10c>)
 8001d62:	f007 fe4b 	bl	80099fc <osThreadNew>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a16      	ldr	r2, [pc, #88]	@ (8001dc4 <main+0x110>)
 8001d6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d6c:	f007 fe20 	bl	80099b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <main+0xbc>
 8001d74:	0801effc 	.word	0x0801effc
 8001d78:	08002951 	.word	0x08002951
 8001d7c:	2000978c 	.word	0x2000978c
 8001d80:	0801f020 	.word	0x0801f020
 8001d84:	08002c7d 	.word	0x08002c7d
 8001d88:	20009790 	.word	0x20009790
 8001d8c:	0801f044 	.word	0x0801f044
 8001d90:	08002d49 	.word	0x08002d49
 8001d94:	20009794 	.word	0x20009794
 8001d98:	0801f068 	.word	0x0801f068
 8001d9c:	08002ddd 	.word	0x08002ddd
 8001da0:	20009798 	.word	0x20009798
 8001da4:	0801f08c 	.word	0x0801f08c
 8001da8:	08002e79 	.word	0x08002e79
 8001dac:	2000979c 	.word	0x2000979c
 8001db0:	0801f0b0 	.word	0x0801f0b0
 8001db4:	08002f2d 	.word	0x08002f2d
 8001db8:	200097a0 	.word	0x200097a0
 8001dbc:	0801f0d4 	.word	0x0801f0d4
 8001dc0:	08002f4d 	.word	0x08002f4d
 8001dc4:	200097a4 	.word	0x200097a4

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	@ 0x50
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	2234      	movs	r2, #52	@ 0x34
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f019 fd70 	bl	801b8bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <SystemClock_Config+0xd0>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	4a28      	ldr	r2, [pc, #160]	@ (8001e98 <SystemClock_Config+0xd0>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfc:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <SystemClock_Config+0xd0>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <SystemClock_Config+0xd4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <SystemClock_Config+0xd4>)
 8001e12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <SystemClock_Config+0xd4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e3c:	23a8      	movs	r3, #168	@ 0xa8
 8001e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e44:	2307      	movs	r3, #7
 8001e46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 f82b 	bl	8005eac <HAL_RCC_OscConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e5c:	f001 f95a 	bl	8003114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e60:	230f      	movs	r3, #15
 8001e62:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e64:	2302      	movs	r3, #2
 8001e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001e72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fc98 	bl	80057b4 <HAL_RCC_ClockConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e8a:	f001 f943 	bl	8003114 <Error_Handler>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3750      	adds	r7, #80	@ 0x50
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ea6:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <MX_SPI1_Init+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001eec:	220a      	movs	r2, #10
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <MX_SPI1_Init+0x64>)
 8001ef2:	f004 fa79 	bl	80063e8 <HAL_SPI_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001efc:	f001 f90a 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000929c 	.word	0x2000929c
 8001f08:	40013000 	.word	0x40013000

08001f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	@ 0x30
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2224      	movs	r2, #36	@ 0x24
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f019 fcce 	bl	801b8bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f2a:	4a23      	ldr	r2, [pc, #140]	@ (8001fb8 <MX_TIM1_Init+0xac>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f2e:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f54:	2303      	movs	r3, #3
 8001f56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480d      	ldr	r0, [pc, #52]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f80:	f005 f9e6 	bl	8007350 <HAL_TIM_Encoder_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f8a:	f001 f8c3 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4806      	ldr	r0, [pc, #24]	@ (8001fb4 <MX_TIM1_Init+0xa8>)
 8001f9c:	f006 f8ca 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001fa6:	f001 f8b5 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	3730      	adds	r7, #48	@ 0x30
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200092f4 	.word	0x200092f4
 8001fb8:	40010000 	.word	0x40010000

08001fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08c      	sub	sp, #48	@ 0x30
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	2224      	movs	r2, #36	@ 0x24
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f019 fc76 	bl	801b8bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd8:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <MX_TIM2_Init+0xa4>)
 8001fda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <MX_TIM2_Init+0xa4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <MX_TIM2_Init+0xa4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fec:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <MX_TIM2_Init+0xa4>)
 8001fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <MX_TIM2_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffa:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <MX_TIM2_Init+0xa4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002000:	2303      	movs	r3, #3
 8002002:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002008:	2301      	movs	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002018:	2301      	movs	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4619      	mov	r1, r3
 800202a:	480d      	ldr	r0, [pc, #52]	@ (8002060 <MX_TIM2_Init+0xa4>)
 800202c:	f005 f990 	bl	8007350 <HAL_TIM_Encoder_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002036:	f001 f86d 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	@ (8002060 <MX_TIM2_Init+0xa4>)
 8002048:	f006 f874 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002052:	f001 f85f 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	3730      	adds	r7, #48	@ 0x30
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000933c 	.word	0x2000933c

08002064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	@ 0x30
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2224      	movs	r2, #36	@ 0x24
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f019 fc22 	bl	801b8bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002080:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <MX_TIM3_Init+0xa0>)
 8002082:	4a21      	ldr	r2, [pc, #132]	@ (8002108 <MX_TIM3_Init+0xa4>)
 8002084:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002086:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <MX_TIM3_Init+0xa0>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <MX_TIM3_Init+0xa0>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002092:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <MX_TIM3_Init+0xa0>)
 8002094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002098:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209a:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <MX_TIM3_Init+0xa0>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a0:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <MX_TIM3_Init+0xa0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020a6:	2303      	movs	r3, #3
 80020a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ae:	2301      	movs	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020be:	2301      	movs	r3, #1
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4619      	mov	r1, r3
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <MX_TIM3_Init+0xa0>)
 80020d2:	f005 f93d 	bl	8007350 <HAL_TIM_Encoder_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020dc:	f001 f81a 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	@ (8002104 <MX_TIM3_Init+0xa0>)
 80020ee:	f006 f821 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020f8:	f001 f80c 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3730      	adds	r7, #48	@ 0x30
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20009384 	.word	0x20009384
 8002108:	40000400 	.word	0x40000400

0800210c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	@ 0x30
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	2224      	movs	r2, #36	@ 0x24
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f019 fbce 	bl	801b8bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <MX_TIM4_Init+0xa0>)
 800212a:	4a21      	ldr	r2, [pc, #132]	@ (80021b0 <MX_TIM4_Init+0xa4>)
 800212c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800212e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <MX_TIM4_Init+0xa0>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <MX_TIM4_Init+0xa0>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800213a:	4b1c      	ldr	r3, [pc, #112]	@ (80021ac <MX_TIM4_Init+0xa0>)
 800213c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002140:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <MX_TIM4_Init+0xa0>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002148:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <MX_TIM4_Init+0xa0>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800214e:	2303      	movs	r3, #3
 8002150:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002156:	2301      	movs	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002166:	2301      	movs	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	4619      	mov	r1, r3
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <MX_TIM4_Init+0xa0>)
 800217a:	f005 f8e9 	bl	8007350 <HAL_TIM_Encoder_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002184:	f000 ffc6 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	@ (80021ac <MX_TIM4_Init+0xa0>)
 8002196:	f005 ffcd 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80021a0:	f000 ffb8 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	3730      	adds	r7, #48	@ 0x30
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200093cc 	.word	0x200093cc
 80021b0:	40000800 	.word	0x40000800

080021b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021d0:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <MX_TIM5_Init+0x98>)
 80021d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002250 <MX_TIM5_Init+0x9c>)
 80021d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <MX_TIM5_Init+0x98>)
 80021d8:	2229      	movs	r2, #41	@ 0x29
 80021da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <MX_TIM5_Init+0x98>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <MX_TIM5_Init+0x98>)
 80021e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <MX_TIM5_Init+0x98>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <MX_TIM5_Init+0x98>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021f6:	4815      	ldr	r0, [pc, #84]	@ (800224c <MX_TIM5_Init+0x98>)
 80021f8:	f004 fec8 	bl	8006f8c <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002202:	f000 ff87 	bl	8003114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800220a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	4619      	mov	r1, r3
 8002212:	480e      	ldr	r0, [pc, #56]	@ (800224c <MX_TIM5_Init+0x98>)
 8002214:	f005 fb82 	bl	800791c <HAL_TIM_ConfigClockSource>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800221e:	f000 ff79 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800222a:	463b      	mov	r3, r7
 800222c:	4619      	mov	r1, r3
 800222e:	4807      	ldr	r0, [pc, #28]	@ (800224c <MX_TIM5_Init+0x98>)
 8002230:	f005 ff80 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800223a:	f000 ff6b 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
	HAL_TIM_Base_Start_IT(&htim5);
 800223e:	4803      	ldr	r0, [pc, #12]	@ (800224c <MX_TIM5_Init+0x98>)
 8002240:	f004 fef4 	bl	800702c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM5_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20009414 	.word	0x20009414
 8002250:	40000c00 	.word	0x40000c00

08002254 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	@ 0x30
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225a:	f107 0320 	add.w	r3, r7, #32
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	615a      	str	r2, [r3, #20]
 8002278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800227a:	4b2f      	ldr	r3, [pc, #188]	@ (8002338 <MX_TIM9_Init+0xe4>)
 800227c:	4a2f      	ldr	r2, [pc, #188]	@ (800233c <MX_TIM9_Init+0xe8>)
 800227e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 83;
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <MX_TIM9_Init+0xe4>)
 8002282:	2253      	movs	r2, #83	@ 0x53
 8002284:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002286:	4b2c      	ldr	r3, [pc, #176]	@ (8002338 <MX_TIM9_Init+0xe4>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800228c:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <MX_TIM9_Init+0xe4>)
 800228e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002292:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <MX_TIM9_Init+0xe4>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <MX_TIM9_Init+0xe4>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80022a0:	4825      	ldr	r0, [pc, #148]	@ (8002338 <MX_TIM9_Init+0xe4>)
 80022a2:	f004 fe73 	bl	8006f8c <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80022ac:	f000 ff32 	bl	8003114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80022b6:	f107 0320 	add.w	r3, r7, #32
 80022ba:	4619      	mov	r1, r3
 80022bc:	481e      	ldr	r0, [pc, #120]	@ (8002338 <MX_TIM9_Init+0xe4>)
 80022be:	f005 fb2d 	bl	800791c <HAL_TIM_ConfigClockSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80022c8:	f000 ff24 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80022cc:	481a      	ldr	r0, [pc, #104]	@ (8002338 <MX_TIM9_Init+0xe4>)
 80022ce:	f004 ff1d 	bl	800710c <HAL_TIM_PWM_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80022d8:	f000 ff1c 	bl	8003114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022dc:	2360      	movs	r3, #96	@ 0x60
 80022de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	4619      	mov	r1, r3
 80022f2:	4811      	ldr	r0, [pc, #68]	@ (8002338 <MX_TIM9_Init+0xe4>)
 80022f4:	f005 fa50 	bl	8007798 <HAL_TIM_PWM_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80022fe:	f000 ff09 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2204      	movs	r2, #4
 8002306:	4619      	mov	r1, r3
 8002308:	480b      	ldr	r0, [pc, #44]	@ (8002338 <MX_TIM9_Init+0xe4>)
 800230a:	f005 fa45 	bl	8007798 <HAL_TIM_PWM_ConfigChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8002314:	f000 fefe 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  HAL_TIM_PWM_Start(motor_a.htim_motor,motor_a.htim_motor_ch);
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <MX_TIM9_Init+0xec>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <MX_TIM9_Init+0xec>)
 800231e:	6852      	ldr	r2, [r2, #4]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f004 ff4c 	bl	80071c0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002328:	4803      	ldr	r0, [pc, #12]	@ (8002338 <MX_TIM9_Init+0xe4>)
 800232a:	f001 fe9b 	bl	8004064 <HAL_TIM_MspPostInit>

}
 800232e:	bf00      	nop
 8002330:	3730      	adds	r7, #48	@ 0x30
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000945c 	.word	0x2000945c
 800233c:	40014000 	.word	0x40014000
 8002340:	20000110 	.word	0x20000110

08002344 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800235c:	4b22      	ldr	r3, [pc, #136]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 800235e:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <MX_TIM10_Init+0xa8>)
 8002360:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8002362:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 8002364:	2253      	movs	r2, #83	@ 0x53
 8002366:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002368:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800236e:	4b1e      	ldr	r3, [pc, #120]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 8002370:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002374:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002382:	4819      	ldr	r0, [pc, #100]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 8002384:	f004 fe02 	bl	8006f8c <HAL_TIM_Base_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800238e:	f000 fec1 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002392:	4815      	ldr	r0, [pc, #84]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 8002394:	f004 feba 	bl	800710c <HAL_TIM_PWM_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800239e:	f000 feb9 	bl	8003114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a2:	2360      	movs	r3, #96	@ 0x60
 80023a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	4619      	mov	r1, r3
 80023b8:	480b      	ldr	r0, [pc, #44]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 80023ba:	f005 f9ed 	bl	8007798 <HAL_TIM_PWM_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80023c4:	f000 fea6 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */
  HAL_TIM_PWM_Start(motor_b.htim_motor,motor_b.htim_motor_ch);
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <MX_TIM10_Init+0xac>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <MX_TIM10_Init+0xac>)
 80023ce:	6852      	ldr	r2, [r2, #4]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 fef4 	bl	80071c0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80023d8:	4803      	ldr	r0, [pc, #12]	@ (80023e8 <MX_TIM10_Init+0xa4>)
 80023da:	f001 fe43 	bl	8004064 <HAL_TIM_MspPostInit>

}
 80023de:	bf00      	nop
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200094a4 	.word	0x200094a4
 80023ec:	40014400 	.word	0x40014400
 80023f0:	20000128 	.word	0x20000128

080023f4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	615a      	str	r2, [r3, #20]
 800240a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800240c:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <MX_TIM11_Init+0x94>)
 800240e:	4a1f      	ldr	r2, [pc, #124]	@ (800248c <MX_TIM11_Init+0x98>)
 8002410:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 41;
 8002412:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <MX_TIM11_Init+0x94>)
 8002414:	2229      	movs	r2, #41	@ 0x29
 8002416:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <MX_TIM11_Init+0x94>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800241e:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <MX_TIM11_Init+0x94>)
 8002420:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002424:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <MX_TIM11_Init+0x94>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242c:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <MX_TIM11_Init+0x94>)
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002432:	4815      	ldr	r0, [pc, #84]	@ (8002488 <MX_TIM11_Init+0x94>)
 8002434:	f004 fdaa 	bl	8006f8c <HAL_TIM_Base_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800243e:	f000 fe69 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002442:	4811      	ldr	r0, [pc, #68]	@ (8002488 <MX_TIM11_Init+0x94>)
 8002444:	f004 fe62 	bl	800710c <HAL_TIM_PWM_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800244e:	f000 fe61 	bl	8003114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002452:	2360      	movs	r3, #96	@ 0x60
 8002454:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	4619      	mov	r1, r3
 8002468:	4807      	ldr	r0, [pc, #28]	@ (8002488 <MX_TIM11_Init+0x94>)
 800246a:	f005 f995 	bl	8007798 <HAL_TIM_PWM_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002474:	f000 fe4e 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002478:	4803      	ldr	r0, [pc, #12]	@ (8002488 <MX_TIM11_Init+0x94>)
 800247a:	f001 fdf3 	bl	8004064 <HAL_TIM_MspPostInit>

}
 800247e:	bf00      	nop
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200094ec 	.word	0x200094ec
 800248c:	40014800 	.word	0x40014800

08002490 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
 80024a4:	615a      	str	r2, [r3, #20]
 80024a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80024a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <MX_TIM13_Init+0x94>)
 80024aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002528 <MX_TIM13_Init+0x98>)
 80024ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 80024ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <MX_TIM13_Init+0x94>)
 80024b0:	2229      	movs	r2, #41	@ 0x29
 80024b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <MX_TIM13_Init+0x94>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_TIM13_Init+0x94>)
 80024bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <MX_TIM13_Init+0x94>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <MX_TIM13_Init+0x94>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80024ce:	4815      	ldr	r0, [pc, #84]	@ (8002524 <MX_TIM13_Init+0x94>)
 80024d0:	f004 fd5c 	bl	8006f8c <HAL_TIM_Base_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80024da:	f000 fe1b 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80024de:	4811      	ldr	r0, [pc, #68]	@ (8002524 <MX_TIM13_Init+0x94>)
 80024e0:	f004 fe14 	bl	800710c <HAL_TIM_PWM_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80024ea:	f000 fe13 	bl	8003114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ee:	2360      	movs	r3, #96	@ 0x60
 80024f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	4619      	mov	r1, r3
 8002504:	4807      	ldr	r0, [pc, #28]	@ (8002524 <MX_TIM13_Init+0x94>)
 8002506:	f005 f947 	bl	8007798 <HAL_TIM_PWM_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002510:	f000 fe00 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002514:	4803      	ldr	r0, [pc, #12]	@ (8002524 <MX_TIM13_Init+0x94>)
 8002516:	f001 fda5 	bl	8004064 <HAL_TIM_MspPostInit>

}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20009534 	.word	0x20009534
 8002528:	40001c00 	.word	0x40001c00

0800252c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 8002532:	4a12      	ldr	r2, [pc, #72]	@ (800257c <MX_USART2_UART_Init+0x50>)
 8002534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 8002538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800253c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002550:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 8002552:	220c      	movs	r2, #12
 8002554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	@ (8002578 <MX_USART2_UART_Init+0x4c>)
 8002564:	f005 fe76 	bl	8008254 <HAL_UART_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800256e:	f000 fdd1 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000957c 	.word	0x2000957c
 800257c:	40004400 	.word	0x40004400

08002580 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <MX_USART3_UART_Init+0x50>)
 8002588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 800258c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025a4:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 80025a6:	220c      	movs	r2, #12
 80025a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	@ (80025cc <MX_USART3_UART_Init+0x4c>)
 80025b8:	f005 fe4c 	bl	8008254 <HAL_UART_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025c2:	f000 fda7 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200095c4 	.word	0x200095c4
 80025d0:	40004800 	.word	0x40004800

080025d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <MX_DMA_Init+0x6c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <MX_DMA_Init+0x6c>)
 80025e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <MX_DMA_Init+0x6c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2105      	movs	r1, #5
 80025fa:	200c      	movs	r0, #12
 80025fc:	f002 fae6 	bl	8004bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002600:	200c      	movs	r0, #12
 8002602:	f002 faff 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2105      	movs	r1, #5
 800260a:	200e      	movs	r0, #14
 800260c:	f002 fade 	bl	8004bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002610:	200e      	movs	r0, #14
 8002612:	f002 faf7 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2105      	movs	r1, #5
 800261a:	2010      	movs	r0, #16
 800261c:	f002 fad6 	bl	8004bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002620:	2010      	movs	r0, #16
 8002622:	f002 faef 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2105      	movs	r1, #5
 800262a:	2011      	movs	r0, #17
 800262c:	f002 face 	bl	8004bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002630:	2011      	movs	r0, #17
 8002632:	f002 fae7 	bl	8004c04 <HAL_NVIC_EnableIRQ>

}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	@ 0x38
 8002648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	4b98      	ldr	r3, [pc, #608]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a97      	ldr	r2, [pc, #604]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b95      	ldr	r3, [pc, #596]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	4b91      	ldr	r3, [pc, #580]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a90      	ldr	r2, [pc, #576]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b8e      	ldr	r3, [pc, #568]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	4b8a      	ldr	r3, [pc, #552]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a89      	ldr	r2, [pc, #548]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 800269c:	f043 0320 	orr.w	r3, r3, #32
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b87      	ldr	r3, [pc, #540]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	4b83      	ldr	r3, [pc, #524]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	4a82      	ldr	r2, [pc, #520]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026be:	4b80      	ldr	r3, [pc, #512]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	4b7c      	ldr	r3, [pc, #496]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a7b      	ldr	r2, [pc, #492]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b79      	ldr	r3, [pc, #484]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b75      	ldr	r3, [pc, #468]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a74      	ldr	r2, [pc, #464]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b72      	ldr	r3, [pc, #456]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b6e      	ldr	r3, [pc, #440]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4a6d      	ldr	r2, [pc, #436]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 800270c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002710:	6313      	str	r3, [r2, #48]	@ 0x30
 8002712:	4b6b      	ldr	r3, [pc, #428]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	4b67      	ldr	r3, [pc, #412]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a66      	ldr	r2, [pc, #408]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b64      	ldr	r3, [pc, #400]	@ (80028c0 <MX_GPIO_Init+0x27c>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin
 800273a:	2200      	movs	r2, #0
 800273c:	f644 4181 	movw	r1, #19585	@ 0x4c81
 8002740:	4860      	ldr	r0, [pc, #384]	@ (80028c4 <MX_GPIO_Init+0x280>)
 8002742:	f003 f803 	bl	800574c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800274c:	485e      	ldr	r0, [pc, #376]	@ (80028c8 <MX_GPIO_Init+0x284>)
 800274e:	f002 fffd 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8002752:	2201      	movs	r2, #1
 8002754:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002758:	485b      	ldr	r0, [pc, #364]	@ (80028c8 <MX_GPIO_Init+0x284>)
 800275a:	f002 fff7 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 800275e:	2201      	movs	r2, #1
 8002760:	2102      	movs	r1, #2
 8002762:	485a      	ldr	r0, [pc, #360]	@ (80028cc <MX_GPIO_Init+0x288>)
 8002764:	f002 fff2 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800276e:	4858      	ldr	r0, [pc, #352]	@ (80028d0 <MX_GPIO_Init+0x28c>)
 8002770:	f002 ffec 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800277a:	4855      	ldr	r0, [pc, #340]	@ (80028d0 <MX_GPIO_Init+0x28c>)
 800277c:	f002 ffe6 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002786:	4853      	ldr	r0, [pc, #332]	@ (80028d4 <MX_GPIO_Init+0x290>)
 8002788:	f002 ffe0 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	2140      	movs	r1, #64	@ 0x40
 8002790:	484e      	ldr	r0, [pc, #312]	@ (80028cc <MX_GPIO_Init+0x288>)
 8002792:	f002 ffdb 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800279c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027aa:	4619      	mov	r1, r3
 80027ac:	484a      	ldr	r0, [pc, #296]	@ (80028d8 <MX_GPIO_Init+0x294>)
 80027ae:	f002 fe39 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80027b2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b8:	2301      	movs	r3, #1
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c8:	4619      	mov	r1, r3
 80027ca:	483e      	ldr	r0, [pc, #248]	@ (80028c4 <MX_GPIO_Init+0x280>)
 80027cc:	f002 fe2a 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin PF14 */
  GPIO_InitStruct.Pin = CSN_Pin|GPIO_PIN_14;
 80027d0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d6:	2301      	movs	r3, #1
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e6:	4619      	mov	r1, r3
 80027e8:	4837      	ldr	r0, [pc, #220]	@ (80028c8 <MX_GPIO_Init+0x284>)
 80027ea:	f002 fe1b 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80027ee:	2342      	movs	r3, #66	@ 0x42
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002802:	4619      	mov	r1, r3
 8002804:	4831      	ldr	r0, [pc, #196]	@ (80028cc <MX_GPIO_Init+0x288>)
 8002806:	f002 fe0d 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800280a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002810:	2301      	movs	r3, #1
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800281c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002820:	4619      	mov	r1, r3
 8002822:	482b      	ldr	r0, [pc, #172]	@ (80028d0 <MX_GPIO_Init+0x28c>)
 8002824:	f002 fdfe 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002828:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800282e:	2311      	movs	r3, #17
 8002830:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002832:	2301      	movs	r3, #1
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800283e:	4619      	mov	r1, r3
 8002840:	4820      	ldr	r0, [pc, #128]	@ (80028c4 <MX_GPIO_Init+0x280>)
 8002842:	f002 fdef 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8002846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284c:	2301      	movs	r3, #1
 800284e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800285c:	4619      	mov	r1, r3
 800285e:	481d      	ldr	r0, [pc, #116]	@ (80028d4 <MX_GPIO_Init+0x290>)
 8002860:	f002 fde0 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002864:	2380      	movs	r3, #128	@ 0x80
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002874:	4619      	mov	r1, r3
 8002876:	4815      	ldr	r0, [pc, #84]	@ (80028cc <MX_GPIO_Init+0x288>)
 8002878:	f002 fdd4 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800287c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288a:	2303      	movs	r3, #3
 800288c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800288e:	230a      	movs	r3, #10
 8002890:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002896:	4619      	mov	r1, r3
 8002898:	4810      	ldr	r0, [pc, #64]	@ (80028dc <MX_GPIO_Init+0x298>)
 800289a:	f002 fdc3 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800289e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80028ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	480a      	ldr	r0, [pc, #40]	@ (80028dc <MX_GPIO_Init+0x298>)
 80028b4:	f002 fdb6 	bl	8005424 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028b8:	bf00      	nop
 80028ba:	3738      	adds	r7, #56	@ 0x38
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40021400 	.word	0x40021400
 80028cc:	40021800 	.word	0x40021800
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020000 	.word	0x40020000

080028e0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
 {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
   /* Place your implementation of fputc here */
   /* e.g. write a character to the USART1 and Loop until the end of transmission */
   HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80028e8:	1d39      	adds	r1, r7, #4
 80028ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028ee:	2201      	movs	r2, #1
 80028f0:	4803      	ldr	r0, [pc, #12]	@ (8002900 <__io_putchar+0x20>)
 80028f2:	f005 fcff 	bl	80082f4 <HAL_UART_Transmit>

   return ch;
 80028f6:	687b      	ldr	r3, [r7, #4]
 }
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200095c4 	.word	0x200095c4

08002904 <subscription_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void subscription_callback(const void * msgin)
  {
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

    const std_msgs__msg__Float32MultiArray * msg = (const std_msgs__msg__Float32MultiArray *)msgin;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	60bb      	str	r3, [r7, #8]

        // Process the received message
      //  printf("Received array: ");
        for (size_t i = 0; i <msg->data.size; i++) {
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e010      	b.n	8002938 <subscription_callback+0x34>

            printf("%.2f ", msg->data.data[i]); // Print float values
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fe40 	bl	80005a8 <__aeabi_f2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4807      	ldr	r0, [pc, #28]	@ (800294c <subscription_callback+0x48>)
 800292e:	f018 fdc7 	bl	801b4c0 <iprintf>
        for (size_t i = 0; i <msg->data.size; i++) {
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3301      	adds	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3e9      	bcc.n	8002916 <subscription_callback+0x12>
        }

  }
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	0801eee4 	.word	0x0801eee4

08002950 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b09a      	sub	sp, #104	@ 0x68
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  uint8_t RxAddress[] = {0xEE,0xDD,0xCC,0xBB,0xAA};
 8002958:	4ab7      	ldr	r2, [pc, #732]	@ (8002c38 <StartDefaultTask+0x2e8>)
 800295a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800295e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002962:	6018      	str	r0, [r3, #0]
 8002964:	3304      	adds	r3, #4
 8002966:	7019      	strb	r1, [r3, #0]
	  uint8_t RxData[32];
	  uint8_t data[50];
	  NRF24_Init();
 8002968:	f7fe fe3e 	bl	80015e8 <NRF24_Init>
	  NRF24_RxMode(RxAddress, 10);
 800296c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002970:	210a      	movs	r1, #10
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fe5f 	bl	8001636 <NRF24_RxMode>
	  NRF24_ReadAll(data);
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fee3 	bl	8001748 <NRF24_ReadAll>

	  while (1)
	  {
		if (isDataAvailable(2) == 1)
 8002982:	2002      	movs	r0, #2
 8002984:	f7fe fe96 	bl	80016b4 <isDataAvailable>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d1f9      	bne.n	8002982 <StartDefaultTask+0x32>
		 	  {
			 NRF24_Receive(RxData); // Receive data
 800298e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe feae 	bl	80016f4 <NRF24_Receive>
			 printf("Received Data: %d\n", RxData); // Debugging output
 8002998:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800299c:	4619      	mov	r1, r3
 800299e:	48a7      	ldr	r0, [pc, #668]	@ (8002c3c <StartDefaultTask+0x2ec>)
 80029a0:	f018 fd8e 	bl	801b4c0 <iprintf>

			  // Parse command (assuming first byte is the command)
			 if (RxData[0] != '\0')
 80029a4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ea      	beq.n	8002982 <StartDefaultTask+0x32>
			  {
			      int8_t command = RxData[0] - 0x30;
 80029ac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80029b0:	3b30      	subs	r3, #48	@ 0x30
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67


	    //  command=2;

			             switch (command)
 80029b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80029bc:	2b08      	cmp	r3, #8
 80029be:	f200 8128 	bhi.w	8002c12 <StartDefaultTask+0x2c2>
 80029c2:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <StartDefaultTask+0x78>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002c0d 	.word	0x08002c0d
 80029cc:	080029ed 	.word	0x080029ed
 80029d0:	08002a55 	.word	0x08002a55
 80029d4:	08002ac5 	.word	0x08002ac5
 80029d8:	08002c13 	.word	0x08002c13
 80029dc:	08002bcd 	.word	0x08002bcd
 80029e0:	08002c13 	.word	0x08002c13
 80029e4:	08002c13 	.word	0x08002c13
 80029e8:	08002b49 	.word	0x08002b49
			             {
			                 case CMD_FORWARD:
			                   printf("Command: FORWARD\n");
 80029ec:	4894      	ldr	r0, [pc, #592]	@ (8002c40 <StartDefaultTask+0x2f0>)
 80029ee:	f018 fdcf 	bl	801b590 <puts>
			                    // disable_motor(&motor_a);
			                    // disable_motor(&motor_b);
			                  //   disable_motor(&motor_c);
			                   //  disable_motor(&motor_d);
			                     target_a = target; // Set target speed
 80029f2:	4b94      	ldr	r3, [pc, #592]	@ (8002c44 <StartDefaultTask+0x2f4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fe:	4b92      	ldr	r3, [pc, #584]	@ (8002c48 <StartDefaultTask+0x2f8>)
 8002a00:	edc3 7a00 	vstr	s15, [r3]
			                     target_b = target;
 8002a04:	4b8f      	ldr	r3, [pc, #572]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a10:	4b8e      	ldr	r3, [pc, #568]	@ (8002c4c <StartDefaultTask+0x2fc>)
 8002a12:	edc3 7a00 	vstr	s15, [r3]
			                     target_c = target;
 8002a16:	4b8b      	ldr	r3, [pc, #556]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a22:	4b8b      	ldr	r3, [pc, #556]	@ (8002c50 <StartDefaultTask+0x300>)
 8002a24:	edc3 7a00 	vstr	s15, [r3]
			                     target_d =target;
 8002a28:	4b86      	ldr	r3, [pc, #536]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a34:	4b87      	ldr	r3, [pc, #540]	@ (8002c54 <StartDefaultTask+0x304>)
 8002a36:	edc3 7a00 	vstr	s15, [r3]
			                     enable_motor(&motor_a);
 8002a3a:	4887      	ldr	r0, [pc, #540]	@ (8002c58 <StartDefaultTask+0x308>)
 8002a3c:	f000 fcd3 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_b);
 8002a40:	4886      	ldr	r0, [pc, #536]	@ (8002c5c <StartDefaultTask+0x30c>)
 8002a42:	f000 fcd0 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_c);
 8002a46:	4886      	ldr	r0, [pc, #536]	@ (8002c60 <StartDefaultTask+0x310>)
 8002a48:	f000 fccd 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_d);
 8002a4c:	4885      	ldr	r0, [pc, #532]	@ (8002c64 <StartDefaultTask+0x314>)
 8002a4e:	f000 fcca 	bl	80033e6 <enable_motor>
			                     break;
 8002a52:	e0ef      	b.n	8002c34 <StartDefaultTask+0x2e4>

			                 case CMD_BACKWARD:
			                     printf("Command: BACKWARD\n");
 8002a54:	4884      	ldr	r0, [pc, #528]	@ (8002c68 <StartDefaultTask+0x318>)
 8002a56:	f018 fd9b 	bl	801b590 <puts>

			                    // disable_motor(&motor_a);
			                     //disable_motor(&motor_b);
			                     //disable_motor(&motor_c);
			                     //disable_motor(&motor_d);
			                     target_a = -target; // Set negative target for reverse
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	425b      	negs	r3, r3
 8002a60:	ee07 3a90 	vmov	s15, r3
 8002a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a68:	4b77      	ldr	r3, [pc, #476]	@ (8002c48 <StartDefaultTask+0x2f8>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]
			                     target_b = -target;
 8002a6e:	4b75      	ldr	r3, [pc, #468]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	425b      	negs	r3, r3
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7c:	4b73      	ldr	r3, [pc, #460]	@ (8002c4c <StartDefaultTask+0x2fc>)
 8002a7e:	edc3 7a00 	vstr	s15, [r3]
			                     target_c = -target;
 8002a82:	4b70      	ldr	r3, [pc, #448]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	425b      	negs	r3, r3
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a90:	4b6f      	ldr	r3, [pc, #444]	@ (8002c50 <StartDefaultTask+0x300>)
 8002a92:	edc3 7a00 	vstr	s15, [r3]
			                     target_d = -target;
 8002a96:	4b6b      	ldr	r3, [pc, #428]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	425b      	negs	r3, r3
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c54 <StartDefaultTask+0x304>)
 8002aa6:	edc3 7a00 	vstr	s15, [r3]
			                     enable_motor(&motor_a);
 8002aaa:	486b      	ldr	r0, [pc, #428]	@ (8002c58 <StartDefaultTask+0x308>)
 8002aac:	f000 fc9b 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_b);
 8002ab0:	486a      	ldr	r0, [pc, #424]	@ (8002c5c <StartDefaultTask+0x30c>)
 8002ab2:	f000 fc98 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_c);
 8002ab6:	486a      	ldr	r0, [pc, #424]	@ (8002c60 <StartDefaultTask+0x310>)
 8002ab8:	f000 fc95 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_d);
 8002abc:	4869      	ldr	r0, [pc, #420]	@ (8002c64 <StartDefaultTask+0x314>)
 8002abe:	f000 fc92 	bl	80033e6 <enable_motor>
			                     break;
 8002ac2:	e0b7      	b.n	8002c34 <StartDefaultTask+0x2e4>

			                 case CMD_LEFT:
			                     printf("Command: LEFT\n");
 8002ac4:	4869      	ldr	r0, [pc, #420]	@ (8002c6c <StartDefaultTask+0x31c>)
 8002ac6:	f018 fd63 	bl	801b590 <puts>
			                     disable_motor(&motor_a);
 8002aca:	4863      	ldr	r0, [pc, #396]	@ (8002c58 <StartDefaultTask+0x308>)
 8002acc:	f000 fc9b 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_b);
 8002ad0:	4862      	ldr	r0, [pc, #392]	@ (8002c5c <StartDefaultTask+0x30c>)
 8002ad2:	f000 fc98 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_c);
 8002ad6:	4862      	ldr	r0, [pc, #392]	@ (8002c60 <StartDefaultTask+0x310>)
 8002ad8:	f000 fc95 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_d);
 8002adc:	4861      	ldr	r0, [pc, #388]	@ (8002c64 <StartDefaultTask+0x314>)
 8002ade:	f000 fc92 	bl	8003406 <disable_motor>
			                     target_a = target ; // Reduce speed or reverse for turning
 8002ae2:	4b58      	ldr	r3, [pc, #352]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aee:	4b56      	ldr	r3, [pc, #344]	@ (8002c48 <StartDefaultTask+0x2f8>)
 8002af0:	edc3 7a00 	vstr	s15, [r3]
			                     target_b =  -target ;
 8002af4:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	425b      	negs	r3, r3
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b02:	4b52      	ldr	r3, [pc, #328]	@ (8002c4c <StartDefaultTask+0x2fc>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
			                     target_c = target;
 8002b08:	4b4e      	ldr	r3, [pc, #312]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	4b4e      	ldr	r3, [pc, #312]	@ (8002c50 <StartDefaultTask+0x300>)
 8002b16:	edc3 7a00 	vstr	s15, [r3]
			                     target_d = - target;
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	425b      	negs	r3, r3
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b28:	4b4a      	ldr	r3, [pc, #296]	@ (8002c54 <StartDefaultTask+0x304>)
 8002b2a:	edc3 7a00 	vstr	s15, [r3]
			                     enable_motor(&motor_a);
 8002b2e:	484a      	ldr	r0, [pc, #296]	@ (8002c58 <StartDefaultTask+0x308>)
 8002b30:	f000 fc59 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_b);
 8002b34:	4849      	ldr	r0, [pc, #292]	@ (8002c5c <StartDefaultTask+0x30c>)
 8002b36:	f000 fc56 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_c);
 8002b3a:	4849      	ldr	r0, [pc, #292]	@ (8002c60 <StartDefaultTask+0x310>)
 8002b3c:	f000 fc53 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_d);
 8002b40:	4848      	ldr	r0, [pc, #288]	@ (8002c64 <StartDefaultTask+0x314>)
 8002b42:	f000 fc50 	bl	80033e6 <enable_motor>

			                     break;
 8002b46:	e075      	b.n	8002c34 <StartDefaultTask+0x2e4>

			                 case CMD_RIGHT:
			                     printf("Command: RIGHT\n");
 8002b48:	4849      	ldr	r0, [pc, #292]	@ (8002c70 <StartDefaultTask+0x320>)
 8002b4a:	f018 fd21 	bl	801b590 <puts>
			                     disable_motor(&motor_a);
 8002b4e:	4842      	ldr	r0, [pc, #264]	@ (8002c58 <StartDefaultTask+0x308>)
 8002b50:	f000 fc59 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_b);
 8002b54:	4841      	ldr	r0, [pc, #260]	@ (8002c5c <StartDefaultTask+0x30c>)
 8002b56:	f000 fc56 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_c);
 8002b5a:	4841      	ldr	r0, [pc, #260]	@ (8002c60 <StartDefaultTask+0x310>)
 8002b5c:	f000 fc53 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_d);
 8002b60:	4840      	ldr	r0, [pc, #256]	@ (8002c64 <StartDefaultTask+0x314>)
 8002b62:	f000 fc50 	bl	8003406 <disable_motor>
			                     target_a = - target ;
 8002b66:	4b37      	ldr	r3, [pc, #220]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b74:	4b34      	ldr	r3, [pc, #208]	@ (8002c48 <StartDefaultTask+0x2f8>)
 8002b76:	edc3 7a00 	vstr	s15, [r3]
			                     target_b = target ;
 8002b7a:	4b32      	ldr	r3, [pc, #200]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b86:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <StartDefaultTask+0x2fc>)
 8002b88:	edc3 7a00 	vstr	s15, [r3]
			                     target_c =  -target;
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	425b      	negs	r3, r3
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c50 <StartDefaultTask+0x300>)
 8002b9c:	edc3 7a00 	vstr	s15, [r3]
			                     target_d = target;
 8002ba0:	4b28      	ldr	r3, [pc, #160]	@ (8002c44 <StartDefaultTask+0x2f4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	ee07 3a90 	vmov	s15, r3
 8002ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bac:	4b29      	ldr	r3, [pc, #164]	@ (8002c54 <StartDefaultTask+0x304>)
 8002bae:	edc3 7a00 	vstr	s15, [r3]
			                     enable_motor(&motor_a);
 8002bb2:	4829      	ldr	r0, [pc, #164]	@ (8002c58 <StartDefaultTask+0x308>)
 8002bb4:	f000 fc17 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_b);
 8002bb8:	4828      	ldr	r0, [pc, #160]	@ (8002c5c <StartDefaultTask+0x30c>)
 8002bba:	f000 fc14 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_c);
 8002bbe:	4828      	ldr	r0, [pc, #160]	@ (8002c60 <StartDefaultTask+0x310>)
 8002bc0:	f000 fc11 	bl	80033e6 <enable_motor>
			                     enable_motor(&motor_d);
 8002bc4:	4827      	ldr	r0, [pc, #156]	@ (8002c64 <StartDefaultTask+0x314>)
 8002bc6:	f000 fc0e 	bl	80033e6 <enable_motor>
			                     break;
 8002bca:	e033      	b.n	8002c34 <StartDefaultTask+0x2e4>

			                 case CMD_STOP:
			                     printf("Command: STOP\n");
 8002bcc:	4829      	ldr	r0, [pc, #164]	@ (8002c74 <StartDefaultTask+0x324>)
 8002bce:	f018 fcdf 	bl	801b590 <puts>


			                     target_a = 0;
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <StartDefaultTask+0x2f8>)
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
			                     target_b = 0;
 8002bda:	4b1c      	ldr	r3, [pc, #112]	@ (8002c4c <StartDefaultTask+0x2fc>)
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
			                     target_c = 0;
 8002be2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <StartDefaultTask+0x300>)
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
			                     target_d = 0;
 8002bea:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <StartDefaultTask+0x304>)
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
			                     disable_motor(&motor_a);
 8002bf2:	4819      	ldr	r0, [pc, #100]	@ (8002c58 <StartDefaultTask+0x308>)
 8002bf4:	f000 fc07 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_b);
 8002bf8:	4818      	ldr	r0, [pc, #96]	@ (8002c5c <StartDefaultTask+0x30c>)
 8002bfa:	f000 fc04 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_c);
 8002bfe:	4818      	ldr	r0, [pc, #96]	@ (8002c60 <StartDefaultTask+0x310>)
 8002c00:	f000 fc01 	bl	8003406 <disable_motor>
			                     disable_motor(&motor_d);
 8002c04:	4817      	ldr	r0, [pc, #92]	@ (8002c64 <StartDefaultTask+0x314>)
 8002c06:	f000 fbfe 	bl	8003406 <disable_motor>

			                     break;
 8002c0a:	e013      	b.n	8002c34 <StartDefaultTask+0x2e4>
			                 case CMD_IDLE:
			                	 printf("Command: IDLE\n");
 8002c0c:	481a      	ldr	r0, [pc, #104]	@ (8002c78 <StartDefaultTask+0x328>)
 8002c0e:	f018 fcbf 	bl	801b590 <puts>
			                 default:
			                	 target_a = 0;
 8002c12:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <StartDefaultTask+0x2f8>)
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
			                	 target_b = 0;
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <StartDefaultTask+0x2fc>)
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
			                	 target_c = 0;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <StartDefaultTask+0x300>)
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
			                	 target_d = 0;
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <StartDefaultTask+0x304>)
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
			                	 break;
 8002c32:	bf00      	nop
		if (isDataAvailable(2) == 1)
 8002c34:	e6a5      	b.n	8002982 <StartDefaultTask+0x32>
 8002c36:	bf00      	nop
 8002c38:	0801ef68 	.word	0x0801ef68
 8002c3c:	0801eeec 	.word	0x0801eeec
 8002c40:	0801ef00 	.word	0x0801ef00
 8002c44:	20000170 	.word	0x20000170
 8002c48:	200097b8 	.word	0x200097b8
 8002c4c:	200097bc 	.word	0x200097bc
 8002c50:	200097c0 	.word	0x200097c0
 8002c54:	200097c4 	.word	0x200097c4
 8002c58:	20000110 	.word	0x20000110
 8002c5c:	20000128 	.word	0x20000128
 8002c60:	20000140 	.word	0x20000140
 8002c64:	20000158 	.word	0x20000158
 8002c68:	0801ef14 	.word	0x0801ef14
 8002c6c:	0801ef28 	.word	0x0801ef28
 8002c70:	0801ef38 	.word	0x0801ef38
 8002c74:	0801ef48 	.word	0x0801ef48
 8002c78:	0801ef58 	.word	0x0801ef58

08002c7c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	HAL_TIM_PWM_Start(motor_b.htim_motor,motor_b.htim_motor_ch);
 8002c84:	4b29      	ldr	r3, [pc, #164]	@ (8002d2c <StartTask02+0xb0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a28      	ldr	r2, [pc, #160]	@ (8002d2c <StartTask02+0xb0>)
 8002c8a:	6852      	ldr	r2, [r2, #4]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 fa96 	bl	80071c0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(motorb_enc.htim_encoder, TIM_CHANNEL_ALL);
 8002c94:	4b26      	ldr	r3, [pc, #152]	@ (8002d30 <StartTask02+0xb4>)
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	213c      	movs	r1, #60	@ 0x3c
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 fbfe 	bl	800749c <HAL_TIM_Encoder_Start>

	for(;;)
	   {
	if (timer_flag_b) // Replace with a semaphore for better control
 8002ca0:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <StartTask02+0xb8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0fb      	beq.n	8002ca0 <StartTask02+0x24>
	        {
		timer_flag_b= 0;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <StartTask02+0xb8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
	            get_encoder_speed(&motorb_enc);
 8002cae:	4820      	ldr	r0, [pc, #128]	@ (8002d30 <StartTask02+0xb4>)
 8002cb0:	f000 fcea 	bl	8003688 <get_encoder_speed>
	            float current_velocity = motorb_enc.velocity;
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <StartTask02+0xb4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
	            apply_pid(&motb_pid,target_b- current_velocity);
 8002cba:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <StartTask02+0xbc>)
 8002cbc:	ed93 7a00 	vldr	s14, [r3]
 8002cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ccc:	481b      	ldr	r0, [pc, #108]	@ (8002d3c <StartTask02+0xc0>)
 8002cce:	f000 fe8f 	bl	80039f0 <apply_pid>
	            float pwm_duty = get_pwm_from_velocity(motb_pid.output);
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <StartTask02+0xc0>)
 8002cd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cdc:	f000 ff38 	bl	8003b50 <get_pwm_from_velocity>
 8002ce0:	ed87 0a02 	vstr	s0, [r7, #8]
	           pwm_duty = pwm_duty < 0 ? 0 : (pwm_duty > 100 ? 100 : pwm_duty); // Clamp duty cycle
 8002ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	d502      	bpl.n	8002cf8 <StartTask02+0x7c>
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e00b      	b.n	8002d10 <StartTask02+0x94>
 8002cf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cfc:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002d40 <StartTask02+0xc4>
 8002d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d08:	dd01      	ble.n	8002d0e <StartTask02+0x92>
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <StartTask02+0xc8>)
 8002d0c:	e000      	b.n	8002d10 <StartTask02+0x94>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	60bb      	str	r3, [r7, #8]
	          // set_speed_open(&motor_b, pwm_duty);
	           set_speed_open((motor_inst*)&motor_b, motb_pid.output);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <StartTask02+0xc0>)
 8002d14:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d18:	eeb0 0a67 	vmov.f32	s0, s15
 8002d1c:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <StartTask02+0xb0>)
 8002d1e:	f000 fb83 	bl	8003428 <set_speed_open>
	           // set_speed_open(&motor_d, pwm_duty);
	       osDelay(10);
 8002d22:	200a      	movs	r0, #10
 8002d24:	f006 fefc 	bl	8009b20 <osDelay>
	if (timer_flag_b) // Replace with a semaphore for better control
 8002d28:	e7ba      	b.n	8002ca0 <StartTask02+0x24>
 8002d2a:	bf00      	nop
 8002d2c:	20000128 	.word	0x20000128
 8002d30:	20000020 	.word	0x20000020
 8002d34:	200097ac 	.word	0x200097ac
 8002d38:	200097bc 	.word	0x200097bc
 8002d3c:	200000a4 	.word	0x200000a4
 8002d40:	42c80000 	.word	0x42c80000
 8002d44:	42c80000 	.word	0x42c80000

08002d48 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	HAL_TIM_PWM_Start(motor_c.htim_motor,motor_c.htim_motor_ch);
 8002d50:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <StartTask03+0x80>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc8 <StartTask03+0x80>)
 8002d56:	6852      	ldr	r2, [r2, #4]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 fa30 	bl	80071c0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(motorc_enc.htim_encoder, TIM_CHANNEL_ALL);
 8002d60:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <StartTask03+0x84>)
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	213c      	movs	r1, #60	@ 0x3c
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 fb98 	bl	800749c <HAL_TIM_Encoder_Start>

  for(;;)
  {
	  if (timer_flag_c) // Replace with a semaphore for better control
 8002d6c:	4b18      	ldr	r3, [pc, #96]	@ (8002dd0 <StartTask03+0x88>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0fb      	beq.n	8002d6c <StartTask03+0x24>
	  	        {
		  timer_flag_c= 0;
 8002d74:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <StartTask03+0x88>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
	  	            get_encoder_speed(&motorc_enc);
 8002d7a:	4814      	ldr	r0, [pc, #80]	@ (8002dcc <StartTask03+0x84>)
 8002d7c:	f000 fc84 	bl	8003688 <get_encoder_speed>
	  	            float current_velocity = motorc_enc.velocity;
 8002d80:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <StartTask03+0x84>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
	  	            apply_pid(&motc_pid,  current_velocity- target_c);
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <StartTask03+0x8c>)
 8002d88:	edd3 7a00 	vldr	s15, [r3]
 8002d8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	480f      	ldr	r0, [pc, #60]	@ (8002dd8 <StartTask03+0x90>)
 8002d9a:	f000 fe29 	bl	80039f0 <apply_pid>
	  	            float pwm_duty = get_pwm_from_velocity(motc_pid.output);
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <StartTask03+0x90>)
 8002da0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002da4:	eeb0 0a67 	vmov.f32	s0, s15
 8002da8:	f000 fed2 	bl	8003b50 <get_pwm_from_velocity>
 8002dac:	ed87 0a02 	vstr	s0, [r7, #8]
	  	          //  pwm_duty = pwm_duty < 0 ? 0 : (pwm_duty > 100 ? 100 : pwm_duty); // Clamp duty cycle
	  	            set_speed_open(&motor_c, motc_pid.output);
 8002db0:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <StartTask03+0x90>)
 8002db2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002db6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dba:	4803      	ldr	r0, [pc, #12]	@ (8002dc8 <StartTask03+0x80>)
 8002dbc:	f000 fb34 	bl	8003428 <set_speed_open>
	  	        //  set_speed_open(&motor_c, pwm_duty);
	  	         // printf("mot=%f \n", motorc_enc.velocity);
	  	        osDelay(60);
 8002dc0:	203c      	movs	r0, #60	@ 0x3c
 8002dc2:	f006 fead 	bl	8009b20 <osDelay>
	  if (timer_flag_c) // Replace with a semaphore for better control
 8002dc6:	e7d1      	b.n	8002d6c <StartTask03+0x24>
 8002dc8:	20000140 	.word	0x20000140
 8002dcc:	20000040 	.word	0x20000040
 8002dd0:	200097b0 	.word	0x200097b0
 8002dd4:	200097c0 	.word	0x200097c0
 8002dd8:	200000c8 	.word	0x200000c8

08002ddc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	HAL_TIM_PWM_Start(motor_d.htim_motor,motor_d.htim_motor_ch);
 8002de4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <StartTask04+0x88>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e64 <StartTask04+0x88>)
 8002dea:	6852      	ldr	r2, [r2, #4]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 f9e6 	bl	80071c0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(motord_enc.htim_encoder, TIM_CHANNEL_ALL);
 8002df4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <StartTask04+0x8c>)
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	213c      	movs	r1, #60	@ 0x3c
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f004 fb4e 	bl	800749c <HAL_TIM_Encoder_Start>
	volatile float target_speed = 0;
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if (timer_flag_d) // Replace with a semaphore for better control
 8002e06:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <StartTask04+0x90>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0fb      	beq.n	8002e06 <StartTask04+0x2a>
		        {
			timer_flag_d = 0;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <StartTask04+0x90>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
		            get_encoder_speed(&motord_enc);
 8002e14:	4814      	ldr	r0, [pc, #80]	@ (8002e68 <StartTask04+0x8c>)
 8002e16:	f000 fc37 	bl	8003688 <get_encoder_speed>
		            float current_velocity = motord_enc.velocity;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	@ (8002e68 <StartTask04+0x8c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	617b      	str	r3, [r7, #20]
		            apply_pid(&motd_pid, current_velocity- target_d);
 8002e20:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <StartTask04+0x94>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e32:	4810      	ldr	r0, [pc, #64]	@ (8002e74 <StartTask04+0x98>)
 8002e34:	f000 fddc 	bl	80039f0 <apply_pid>
		            float pwm_duty = get_pwm_from_velocity(motd_pid.output);
 8002e38:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <StartTask04+0x98>)
 8002e3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e42:	f000 fe85 	bl	8003b50 <get_pwm_from_velocity>
 8002e46:	ed87 0a04 	vstr	s0, [r7, #16]
		            set_speed_open(&motor_d,motd_pid.output);
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <StartTask04+0x98>)
 8002e4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e50:	eeb0 0a67 	vmov.f32	s0, s15
 8002e54:	4803      	ldr	r0, [pc, #12]	@ (8002e64 <StartTask04+0x88>)
 8002e56:	f000 fae7 	bl	8003428 <set_speed_open>
		            //set_speed_open(&motor_d, pwm_duty);
		        osDelay(50);
 8002e5a:	2032      	movs	r0, #50	@ 0x32
 8002e5c:	f006 fe60 	bl	8009b20 <osDelay>
		if (timer_flag_d) // Replace with a semaphore for better control
 8002e60:	e7d1      	b.n	8002e06 <StartTask04+0x2a>
 8002e62:	bf00      	nop
 8002e64:	20000158 	.word	0x20000158
 8002e68:	20000060 	.word	0x20000060
 8002e6c:	200097b4 	.word	0x200097b4
 8002e70:	200097c4 	.word	0x200097c4
 8002e74:	200000ec 	.word	0x200000ec

08002e78 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
	HAL_TIM_PWM_Start(motor_a.htim_motor,motor_a.htim_motor_ch);
 8002e80:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <StartTask05+0x9c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a23      	ldr	r2, [pc, #140]	@ (8002f14 <StartTask05+0x9c>)
 8002e86:	6852      	ldr	r2, [r2, #4]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 f998 	bl	80071c0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002e90:	213c      	movs	r1, #60	@ 0x3c
 8002e92:	4821      	ldr	r0, [pc, #132]	@ (8002f18 <StartTask05+0xa0>)
 8002e94:	f004 fb02 	bl	800749c <HAL_TIM_Encoder_Start>

	reset_encoder(&motora_enc);
 8002e98:	4820      	ldr	r0, [pc, #128]	@ (8002f1c <StartTask05+0xa4>)
 8002e9a:	f000 fd8d 	bl	80039b8 <reset_encoder>
	float pwm_duty = get_pwm_from_velocity(target_a);
 8002e9e:	4b20      	ldr	r3, [pc, #128]	@ (8002f20 <StartTask05+0xa8>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea8:	f000 fe52 	bl	8003b50 <get_pwm_from_velocity>
 8002eac:	ed87 0a03 	vstr	s0, [r7, #12]
	set_speed_open((motor_inst*)&motor_a,pwm_duty);
 8002eb0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002eb4:	4817      	ldr	r0, [pc, #92]	@ (8002f14 <StartTask05+0x9c>)
 8002eb6:	f000 fab7 	bl	8003428 <set_speed_open>
  /* Infinite loop */
  for(;;)
  {


 while(timer_flag_a){
 8002eba:	e025      	b.n	8002f08 <StartTask05+0x90>
	 timer_flag_a=0;
 8002ebc:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <StartTask05+0xac>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
	  get_encoder_speed(&motora_enc);
 8002ec2:	4816      	ldr	r0, [pc, #88]	@ (8002f1c <StartTask05+0xa4>)
 8002ec4:	f000 fbe0 	bl	8003688 <get_encoder_speed>
	  float  temp_velocity = motora_enc.velocity;
 8002ec8:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <StartTask05+0xa4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60bb      	str	r3, [r7, #8]
	  apply_pid(&mota_pid,target_a-temp_velocity);
 8002ece:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <StartTask05+0xa8>)
 8002ed0:	ed93 7a00 	vldr	s14, [r3]
 8002ed4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002edc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee0:	4811      	ldr	r0, [pc, #68]	@ (8002f28 <StartTask05+0xb0>)
 8002ee2:	f000 fd85 	bl	80039f0 <apply_pid>
//	printf("motor velecity =%f pidout =%f  dutycyle	%f\r\n", motora_enc.velocity,mota_pid.output,pwm_duty);
	pwm_duty=get_pwm_from_velocity(mota_pid.output);
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <StartTask05+0xb0>)
 8002ee8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002eec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef0:	f000 fe2e 	bl	8003b50 <get_pwm_from_velocity>
 8002ef4:	ed87 0a03 	vstr	s0, [r7, #12]
	//set_speed_open((motor_inst*)&motor_a, mota_pid.output);
	set_speed_open((motor_inst*)&motor_a, pwm_duty);
 8002ef8:	ed97 0a03 	vldr	s0, [r7, #12]
 8002efc:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <StartTask05+0x9c>)
 8002efe:	f000 fa93 	bl	8003428 <set_speed_open>
	osDelay(50);
 8002f02:	2032      	movs	r0, #50	@ 0x32
 8002f04:	f006 fe0c 	bl	8009b20 <osDelay>
 while(timer_flag_a){
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <StartTask05+0xac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1d5      	bne.n	8002ebc <StartTask05+0x44>
 8002f10:	e7fa      	b.n	8002f08 <StartTask05+0x90>
 8002f12:	bf00      	nop
 8002f14:	20000110 	.word	0x20000110
 8002f18:	200092f4 	.word	0x200092f4
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	200097b8 	.word	0x200097b8
 8002f24:	200097a8 	.word	0x200097a8
 8002f28:	20000080 	.word	0x20000080

08002f2c <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8002f34:	2101      	movs	r1, #1
 8002f36:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <StartTask06+0x1c>)
 8002f38:	f002 fc21 	bl	800577e <HAL_GPIO_TogglePin>
    osDelay(100);
 8002f3c:	2064      	movs	r0, #100	@ 0x64
 8002f3e:	f006 fdef 	bl	8009b20 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8002f42:	bf00      	nop
 8002f44:	e7f6      	b.n	8002f34 <StartTask06+0x8>
 8002f46:	bf00      	nop
 8002f48:	40020400 	.word	0x40020400

08002f4c <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b0d2      	sub	sp, #328	@ 0x148
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f56:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f5a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for(;;)
  {
	     rmw_uros_set_custom_transport(
 8002f5c:	4b47      	ldr	r3, [pc, #284]	@ (800307c <StartTask07+0x130>)
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	4b47      	ldr	r3, [pc, #284]	@ (8003080 <StartTask07+0x134>)
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4b47      	ldr	r3, [pc, #284]	@ (8003084 <StartTask07+0x138>)
 8002f66:	4a48      	ldr	r2, [pc, #288]	@ (8003088 <StartTask07+0x13c>)
 8002f68:	4948      	ldr	r1, [pc, #288]	@ (800308c <StartTask07+0x140>)
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f00a fa4c 	bl	800d408 <rmw_uros_set_custom_transport>
	            cubemx_transport_open,
	            cubemx_transport_close,
	            cubemx_transport_write,
	            cubemx_transport_read);

	          rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002f70:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00a f979 	bl	800d26c <rcutils_get_zero_initialized_allocator>
	          freeRTOS_allocator.allocate = microros_allocate;
 8002f7a:	4b45      	ldr	r3, [pc, #276]	@ (8003090 <StartTask07+0x144>)
 8002f7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	          freeRTOS_allocator.deallocate = microros_deallocate;
 8002f80:	4b44      	ldr	r3, [pc, #272]	@ (8003094 <StartTask07+0x148>)
 8002f82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	          freeRTOS_allocator.reallocate = microros_reallocate;
 8002f86:	4b44      	ldr	r3, [pc, #272]	@ (8003098 <StartTask07+0x14c>)
 8002f88:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	          freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002f8c:	4b43      	ldr	r3, [pc, #268]	@ (800309c <StartTask07+0x150>)
 8002f8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	          if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002f92:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f96:	4618      	mov	r0, r3
 8002f98:	f00a f984 	bl	800d2a4 <rcutils_set_default_allocator>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f083 0301 	eor.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <StartTask07+0x66>
	              printf("Error on default allocators (line %d)\n", __LINE__);
 8002fa8:	f240 51d6 	movw	r1, #1494	@ 0x5d6
 8002fac:	483c      	ldr	r0, [pc, #240]	@ (80030a0 <StartTask07+0x154>)
 8002fae:	f018 fa87 	bl	801b4c0 <iprintf>
	              rcl_allocator_t allocator;
	              rcl_node_t node;
	              rcl_subscription_t subscriber;

	              // Initialize micro-ROS allocator
	              allocator = rcl_get_default_allocator();
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f00a f967 	bl	800d288 <rcutils_get_default_allocator>
 8002fba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fbe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fc2:	f107 04f4 	add.w	r4, r7, #244	@ 0xf4
 8002fc6:	461d      	mov	r5, r3
 8002fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	6023      	str	r3, [r4, #0]

	              // Create init_options
	              rclc_support_init(&support, 0, NULL, &allocator);
 8002fd0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002fd4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f00a f850 	bl	800d080 <rclc_support_init>

	              // Create node
	              rclc_node_init_default(&node, "cubemx_node", "", &support);
 8002fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fe4:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 8002fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80030a4 <StartTask07+0x158>)
 8002fea:	492f      	ldr	r1, [pc, #188]	@ (80030a8 <StartTask07+0x15c>)
 8002fec:	f00a f892 	bl	800d114 <rclc_node_init_default>

	              // Create publisher (if needed)
	              rclc_publisher_init_default(&publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32), "dummy_publisher");
 8002ff0:	f00a fa20 	bl	800d434 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8002ffc:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 8003000:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <StartTask07+0x160>)
 8003002:	f00a f8c3 	bl	800d18c <rclc_publisher_init_default>

	              // Create subscription
	              const char * topic_name = "subscriber1"; // Topic to subscribe to
 8003006:	4b2a      	ldr	r3, [pc, #168]	@ (80030b0 <StartTask07+0x164>)
 8003008:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	              rclc_subscription_init_default(
 800300c:	f00a fa2a 	bl	800d464 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 8003010:	4602      	mov	r2, r0
 8003012:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8003016:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 800301a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800301e:	f00a f8e9 	bl	800d1f4 <rclc_subscription_init_default>
	                  &node,
	                  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
	                  topic_name);

	              // Initialize message data structure
	              msg1.data.size = 0; // Initially set size to 0
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	              msg1.data.capacity = 6; // Set capacity of the array
 8003028:	2306      	movs	r3, #6
 800302a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	              msg1.data.data = (float *)malloc(msg1.data.capacity * sizeof(float)); // Allocate memory for float array
 800302e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f017 f8e3 	bl	801a200 <malloc>
 800303a:	4603      	mov	r3, r0
 800303c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	              // Initialize executor
	              rclc_executor_t executor;
	              rclc_executor_init(&executor, &support.context, 1, &allocator);
 8003040:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003044:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003048:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800304c:	2201      	movs	r2, #1
 800304e:	f009 fdc7 	bl	800cbe0 <rclc_executor_init>

	              // Add subscription to executor
	              rclc_executor_add_subscription(&executor, &subscriber, &msg1, &subscription_callback, ON_NEW_DATA);
 8003052:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8003056:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800305a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800305e:	2300      	movs	r3, #0
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <StartTask07+0x168>)
 8003064:	f009 fe28 	bl	800ccb8 <rclc_executor_add_subscription>

	              for(;;) {
	                  // Spin executor to handle incoming messages
	                  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10)); // Handle callbacks
 8003068:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800306c:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <StartTask07+0x16c>)
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	4608      	mov	r0, r1
 8003074:	f009 fe9e 	bl	800cdb4 <rclc_executor_spin_some>
 8003078:	e7f6      	b.n	8003068 <StartTask07+0x11c>
 800307a:	bf00      	nop
 800307c:	08004895 	.word	0x08004895
 8003080:	0800482d 	.word	0x0800482d
 8003084:	0800480d 	.word	0x0800480d
 8003088:	080047e1 	.word	0x080047e1
 800308c:	200095c4 	.word	0x200095c4
 8003090:	08003121 	.word	0x08003121
 8003094:	08003165 	.word	0x08003165
 8003098:	0800319d 	.word	0x0800319d
 800309c:	08003209 	.word	0x08003209
 80030a0:	0801ef70 	.word	0x0801ef70
 80030a4:	0801ef98 	.word	0x0801ef98
 80030a8:	0801ef9c 	.word	0x0801ef9c
 80030ac:	0801efa8 	.word	0x0801efa8
 80030b0:	0801efb8 	.word	0x0801efb8
 80030b4:	08002905 	.word	0x08002905
 80030b8:	00989680 	.word	0x00989680

080030bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0c      	ldr	r2, [pc, #48]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030ce:	f001 fc81 	bl	80049d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 0 */
    if (htim->Instance == TIM5) {
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10b      	bne.n	80030f4 <HAL_TIM_PeriodElapsedCallback+0x38>
    	 timer_flag_a=1;
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    	 timer_flag_b=1;
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
    	 timer_flag_c=1;
 80030e8:	4b08      	ldr	r3, [pc, #32]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
    	 timer_flag_d=1;
 80030ee:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
    }

  /* USER CODE END Callback 1 */
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40001400 	.word	0x40001400
 8003100:	40000c00 	.word	0x40000c00
 8003104:	200097a8 	.word	0x200097a8
 8003108:	200097ac 	.word	0x200097ac
 800310c:	200097b0 	.word	0x200097b0
 8003110:	200097b4 	.word	0x200097b4

08003114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
}
 800311a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <Error_Handler+0x8>

08003120 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800312a:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <microros_allocate+0x3c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4b09      	ldr	r3, [pc, #36]	@ (800315c <microros_allocate+0x3c>)
 8003138:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <microros_allocate+0x40>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <microros_allocate+0x40>)
 8003148:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe fb62 	bl	8001814 <pvPortMallocMicroROS>
 8003150:	4603      	mov	r3, r0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200097c8 	.word	0x200097c8
 8003160:	200097cc 	.word	0x200097cc

08003164 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00c      	beq.n	800318e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fe fc71 	bl	8001a5c <getBlockSize>
 800317a:	4603      	mov	r3, r0
 800317c:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <microros_deallocate+0x34>)
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	461a      	mov	r2, r3
 8003184:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <microros_deallocate+0x34>)
 8003186:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7fe fc0b 	bl	80019a4 <vPortFreeMicroROS>
  }
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200097cc 	.word	0x200097cc

0800319c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80031a8:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <microros_reallocate+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <microros_reallocate+0x64>)
 80031b6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031b8:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <microros_reallocate+0x68>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4413      	add	r3, r2
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <microros_reallocate+0x68>)
 80031c6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80031ce:	68b8      	ldr	r0, [r7, #8]
 80031d0:	f7fe fb20 	bl	8001814 <pvPortMallocMicroROS>
 80031d4:	4603      	mov	r3, r0
 80031d6:	e00e      	b.n	80031f6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7fe fc3f 	bl	8001a5c <getBlockSize>
 80031de:	4603      	mov	r3, r0
 80031e0:	4a08      	ldr	r2, [pc, #32]	@ (8003204 <microros_reallocate+0x68>)
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <microros_reallocate+0x68>)
 80031ea:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7fe fc52 	bl	8001a98 <pvPortReallocMicroROS>
 80031f4:	4603      	mov	r3, r0
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200097c8 	.word	0x200097c8
 8003204:	200097cc 	.word	0x200097cc

08003208 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <microros_zero_allocate+0x48>)
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4413      	add	r3, r2
 8003222:	461a      	mov	r2, r3
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <microros_zero_allocate+0x48>)
 8003226:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	4a08      	ldr	r2, [pc, #32]	@ (8003254 <microros_zero_allocate+0x4c>)
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	4413      	add	r3, r2
 8003236:	461a      	mov	r2, r3
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <microros_zero_allocate+0x4c>)
 800323a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7fe fc57 	bl	8001af2 <pvPortCallocMicroROS>
 8003244:	4603      	mov	r3, r0
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200097c8 	.word	0x200097c8
 8003254:	200097cc 	.word	0x200097cc

08003258 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800326a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800326e:	a320      	add	r3, pc, #128	@ (adr r3, 80032f0 <UTILS_NanosecondsToTimespec+0x98>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd fe46 	bl	8000f04 <__aeabi_ldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003286:	a31a      	add	r3, pc, #104	@ (adr r3, 80032f0 <UTILS_NanosecondsToTimespec+0x98>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fd fe3a 	bl	8000f04 <__aeabi_ldivmod>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	da20      	bge.n	80032de <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a11      	ldr	r2, [pc, #68]	@ (80032e8 <UTILS_NanosecondsToTimespec+0x90>)
 80032a2:	fb82 1203 	smull	r1, r2, r2, r3
 80032a6:	1712      	asrs	r2, r2, #28
 80032a8:	17db      	asrs	r3, r3, #31
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	6979      	ldr	r1, [r7, #20]
 80032b8:	17c8      	asrs	r0, r1, #31
 80032ba:	460c      	mov	r4, r1
 80032bc:	4605      	mov	r5, r0
 80032be:	ebb2 0804 	subs.w	r8, r2, r4
 80032c2:	eb63 0905 	sbc.w	r9, r3, r5
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	4906      	ldr	r1, [pc, #24]	@ (80032ec <UTILS_NanosecondsToTimespec+0x94>)
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	609a      	str	r2, [r3, #8]
    }
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032e8:	44b82fa1 	.word	0x44b82fa1
 80032ec:	3b9aca00 	.word	0x3b9aca00
 80032f0:	3b9aca00 	.word	0x3b9aca00
 80032f4:	00000000 	.word	0x00000000

080032f8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b08e      	sub	sp, #56	@ 0x38
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6278      	str	r0, [r7, #36]	@ 0x24
 8003302:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003304:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003308:	2300      	movs	r3, #0
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800331a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800331e:	4618      	mov	r0, r3
 8003320:	f007 fef2 	bl	800b108 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	17da      	asrs	r2, r3, #31
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	61fa      	str	r2, [r7, #28]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	69b9      	ldr	r1, [r7, #24]
 8003336:	000b      	movs	r3, r1
 8003338:	2200      	movs	r2, #0
 800333a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800333e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003340:	2200      	movs	r2, #0
 8003342:	461c      	mov	r4, r3
 8003344:	4615      	mov	r5, r2
 8003346:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800334a:	1911      	adds	r1, r2, r4
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	416b      	adcs	r3, r5
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003356:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800335a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	f04f 0400 	mov.w	r4, #0
 8003366:	f04f 0500 	mov.w	r5, #0
 800336a:	015d      	lsls	r5, r3, #5
 800336c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003370:	0154      	lsls	r4, r2, #5
 8003372:	4622      	mov	r2, r4
 8003374:	462b      	mov	r3, r5
 8003376:	ebb2 0800 	subs.w	r8, r2, r0
 800337a:	eb63 0901 	sbc.w	r9, r3, r1
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800338a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800338e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003392:	4690      	mov	r8, r2
 8003394:	4699      	mov	r9, r3
 8003396:	eb18 0a00 	adds.w	sl, r8, r0
 800339a:	eb49 0b01 	adc.w	fp, r9, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033b2:	ebb2 040a 	subs.w	r4, r2, sl
 80033b6:	603c      	str	r4, [r7, #0]
 80033b8:	eb63 030b 	sbc.w	r3, r3, fp
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4623      	mov	r3, r4
 80033c4:	181b      	adds	r3, r3, r0
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	462b      	mov	r3, r5
 80033ca:	eb41 0303 	adc.w	r3, r1, r3
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033d6:	f7ff ff3f 	bl	8003258 <UTILS_NanosecondsToTimespec>

    return 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	3738      	adds	r7, #56	@ 0x38
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033e6 <enable_motor>:
  * @param  motor is the motor struct.
  * @retval None
  */

void enable_motor(motor_inst *motor)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(motor -> rst_pin_port, motor -> rst_pin_number,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6918      	ldr	r0, [r3, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8a9b      	ldrh	r3, [r3, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	4619      	mov	r1, r3
 80033fa:	f002 f9a7 	bl	800574c <HAL_GPIO_WritePin>
					 	 	 	 GPIO_PIN_RESET);
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <disable_motor>:
  * @param  motor is the motor struct.
  * @retval None
  */

void disable_motor(motor_inst *motor)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(motor -> rst_pin_port, motor -> rst_pin_number,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6918      	ldr	r0, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8a9b      	ldrh	r3, [r3, #20]
 8003416:	2201      	movs	r2, #1
 8003418:	4619      	mov	r1, r3
 800341a:	f002 f997 	bl	800574c <HAL_GPIO_WritePin>
					 	 	 	 GPIO_PIN_SET);
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <set_speed_open>:
  * @param  duty_cycle_percent in percentage ([+100; -100])
  * @retval None
  */

void set_speed_open(motor_inst *motor, float duty_cycle_percent)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	ed87 0a00 	vstr	s0, [r7]
	 if(duty_cycle_percent > 100.0)
 8003434:	edd7 7a00 	vldr	s15, [r7]
 8003438:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003678 <set_speed_open+0x250>
 800343c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd01      	ble.n	800344a <set_speed_open+0x22>
	 {
		 duty_cycle_percent = 100.0;
 8003446:	4b8d      	ldr	r3, [pc, #564]	@ (800367c <set_speed_open+0x254>)
 8003448:	603b      	str	r3, [r7, #0]
	 }

	 if(duty_cycle_percent < -100.0)
 800344a:	edd7 7a00 	vldr	s15, [r7]
 800344e:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8003680 <set_speed_open+0x258>
 8003452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	d501      	bpl.n	8003460 <set_speed_open+0x38>
	 {
		 duty_cycle_percent = -100.0;
 800345c:	4b89      	ldr	r3, [pc, #548]	@ (8003684 <set_speed_open+0x25c>)
 800345e:	603b      	str	r3, [r7, #0]
	 }

	 if(duty_cycle_percent > 0)
 8003460:	edd7 7a00 	vldr	s15, [r7]
 8003464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	dd7b      	ble.n	8003566 <set_speed_open+0x13e>
	 {
		 // duty_cycle = 100 * (CCR / (arr + 1))
		 // CCR = (duty_cycle) * (arr + 1) / 100
	HAL_GPIO_WritePin(motor->mdir_pin_port, motor->mdir_pin_number,	 GPIO_PIN_SET);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6898      	ldr	r0, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	899b      	ldrh	r3, [r3, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	4619      	mov	r1, r3
 800347a:	f002 f967 	bl	800574c <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(motor ->htim_motor, motor -> htim_motor_ch, duty_cycle_percent *(motor ->htim_motor->Instance ->ARR + 1) / 100);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d119      	bne.n	80034ba <set_speed_open+0x92>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	3301      	adds	r3, #1
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003498:	edd7 7a00 	vldr	s15, [r7]
 800349c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a0:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8003678 <set_speed_open+0x250>
 80034a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b2:	ee17 2a90 	vmov	r2, s15
 80034b6:	635a      	str	r2, [r3, #52]	@ 0x34
				 motor -> htim_motor_ch,- duty_cycle_percent *
				 (motor ->htim_motor->Instance ->ARR + 1) / 100);

	 }

}
 80034b8:	e0d9      	b.n	800366e <set_speed_open+0x246>
		 __HAL_TIM_SET_COMPARE(motor ->htim_motor, motor -> htim_motor_ch, duty_cycle_percent *(motor ->htim_motor->Instance ->ARR + 1) / 100);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d119      	bne.n	80034f6 <set_speed_open+0xce>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	3301      	adds	r3, #1
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034d4:	edd7 7a00 	vldr	s15, [r7]
 80034d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034dc:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003678 <set_speed_open+0x250>
 80034e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ee:	ee17 3a90 	vmov	r3, s15
 80034f2:	6393      	str	r3, [r2, #56]	@ 0x38
 80034f4:	e0bb      	b.n	800366e <set_speed_open+0x246>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d119      	bne.n	8003532 <set_speed_open+0x10a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003506:	3301      	adds	r3, #1
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003510:	edd7 7a00 	vldr	s15, [r7]
 8003514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003518:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8003678 <set_speed_open+0x250>
 800351c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352a:	ee17 3a90 	vmov	r3, s15
 800352e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003530:	e09d      	b.n	800366e <set_speed_open+0x246>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353a:	3301      	adds	r3, #1
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003544:	edd7 7a00 	vldr	s15, [r7]
 8003548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800354c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003678 <set_speed_open+0x250>
 8003550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800355e:	ee17 3a90 	vmov	r3, s15
 8003562:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003564:	e083      	b.n	800366e <set_speed_open+0x246>
	 HAL_GPIO_WritePin(motor -> mdir_pin_port, motor -> mdir_pin_number,GPIO_PIN_RESET);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6898      	ldr	r0, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	899b      	ldrh	r3, [r3, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	4619      	mov	r1, r3
 8003572:	f002 f8eb 	bl	800574c <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(motor ->htim_motor,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11b      	bne.n	80035b6 <set_speed_open+0x18e>
 800357e:	edd7 7a00 	vldr	s15, [r7]
 8003582:	eeb1 7a67 	vneg.f32	s14, s15
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	3301      	adds	r3, #1
 8003590:	ee07 3a90 	vmov	s15, r3
 8003594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800359c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003678 <set_speed_open+0x250>
 80035a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ae:	ee17 2a90 	vmov	r2, s15
 80035b2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80035b4:	e05b      	b.n	800366e <set_speed_open+0x246>
		 __HAL_TIM_SET_COMPARE(motor ->htim_motor,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d11b      	bne.n	80035f6 <set_speed_open+0x1ce>
 80035be:	edd7 7a00 	vldr	s15, [r7]
 80035c2:	eeb1 7a67 	vneg.f32	s14, s15
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	3301      	adds	r3, #1
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035dc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003678 <set_speed_open+0x250>
 80035e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ee:	ee17 3a90 	vmov	r3, s15
 80035f2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035f4:	e03b      	b.n	800366e <set_speed_open+0x246>
		 __HAL_TIM_SET_COMPARE(motor ->htim_motor,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d11b      	bne.n	8003636 <set_speed_open+0x20e>
 80035fe:	edd7 7a00 	vldr	s15, [r7]
 8003602:	eeb1 7a67 	vneg.f32	s14, s15
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	3301      	adds	r3, #1
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800361c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8003678 <set_speed_open+0x250>
 8003620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362e:	ee17 3a90 	vmov	r3, s15
 8003632:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003634:	e01b      	b.n	800366e <set_speed_open+0x246>
		 __HAL_TIM_SET_COMPARE(motor ->htim_motor,
 8003636:	edd7 7a00 	vldr	s15, [r7]
 800363a:	eeb1 7a67 	vneg.f32	s14, s15
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	3301      	adds	r3, #1
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003654:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8003678 <set_speed_open+0x250>
 8003658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003666:	ee17 3a90 	vmov	r3, s15
 800366a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800366c:	e7ff      	b.n	800366e <set_speed_open+0x246>
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	42c80000 	.word	0x42c80000
 800367c:	42c80000 	.word	0x42c80000
 8003680:	c2c80000 	.word	0xc2c80000
 8003684:	c2c80000 	.word	0xc2c80000

08003688 <get_encoder_speed>:
/* @brief compute velocity of the motor using the timer encoder
 * @param encoder: Encoder instance
 * @retval: none:
 */
void get_encoder_speed(encoder_inst *encoder)
{
 8003688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800368c:	b0a8      	sub	sp, #160	@ 0xa0
 800368e:	af00      	add	r7, sp, #0
 8003690:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

	    int32_t temp_counter = __HAL_TIM_GET_COUNTER(encoder->htim_encoder);
 8003694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	    int32_t temp_timer = HAL_GetTick();
 80036a2:	f001 f9ab 	bl	80049fc <HAL_GetTick>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	    // Calculate the time period in seconds (HAL_GetTick() returns milliseconds, so divide by 1000)
	    encoder->timer_period = (temp_timer - encoder->last_timer) / 1000.0f;
 80036ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80036c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036c4:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 80039ac <get_encoder_speed+0x324>
 80036c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d0:	edc3 7a04 	vstr	s15, [r3, #16]

	    // Avoid division by zero by checking the time period and adjusting accordingly
	    if (encoder->timer_period == 0)
 80036d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80036dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	d105      	bne.n	80036f2 <get_encoder_speed+0x6a>
	    {
	        encoder->velocity = 0;
 80036e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
	        return;
 80036f0:	e157      	b.n	80039a2 <get_encoder_speed+0x31a>
	    }

	    // Scaling factor: 60 is used to convert from seconds to minutes (for RPM)
	    float scaling = 60.0f / (PPR * encoder->timer_period);
 80036f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80036fa:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80039b0 <get_encoder_speed+0x328>
 80036fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003702:	eddf 6aac 	vldr	s13, [pc, #688]	@ 80039b4 <get_encoder_speed+0x32c>
 8003706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94

	    // If running this code for the first time after reset, set velocity to zero
	    if (encoder->first_time)
 800370e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003712:	7e1b      	ldrb	r3, [r3, #24]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <get_encoder_speed+0xae>
	    {
	        encoder->velocity = 0;
 8003718:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
	        encoder->first_time = 0;
 8003722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003726:	2200      	movs	r2, #0
 8003728:	761a      	strb	r2, [r3, #24]
	        encoder->timer_period = 0;
 800372a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
 8003734:	e10c      	b.n	8003950 <get_encoder_speed+0x2c8>
	    }
	    else
	    {
	        // If the counter value is equal to the old value, the velocity is zero
	        if (temp_counter == encoder->last_counter_value)
 8003736:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800373a:	17da      	asrs	r2, r3, #31
 800373c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003740:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003748:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800374c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003750:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003754:	4298      	cmp	r0, r3
 8003756:	bf08      	it	eq
 8003758:	4291      	cmpeq	r1, r2
 800375a:	d105      	bne.n	8003768 <get_encoder_speed+0xe0>
	        {
	            encoder->velocity = 0;
 800375c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e0f3      	b.n	8003950 <get_encoder_speed+0x2c8>
	        }
	        // If the counter value is higher (normal case)
	        else if (temp_counter > encoder->last_counter_value)
 8003768:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800376c:	17da      	asrs	r2, r3, #31
 800376e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003770:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800377a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800377c:	428a      	cmp	r2, r1
 800377e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003780:	418b      	sbcs	r3, r1
 8003782:	da71      	bge.n	8003868 <get_encoder_speed+0x1e0>
	        {
	            // Check for overflow
	            if (temp_counter - encoder->last_counter_value > __HAL_TIM_GET_AUTORELOAD(encoder->htim_encoder) / 2)
 8003784:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003788:	17da      	asrs	r2, r3, #31
 800378a:	673b      	str	r3, [r7, #112]	@ 0x70
 800378c:	677a      	str	r2, [r7, #116]	@ 0x74
 800378e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003792:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003796:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800379a:	4641      	mov	r1, r8
 800379c:	1a89      	subs	r1, r1, r2
 800379e:	66b9      	str	r1, [r7, #104]	@ 0x68
 80037a0:	4649      	mov	r1, r9
 80037a2:	eb61 0303 	sbc.w	r3, r1, r3
 80037a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	2200      	movs	r2, #0
 80037b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80037b8:	667a      	str	r2, [r7, #100]	@ 0x64
 80037ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037be:	4643      	mov	r3, r8
 80037c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037c4:	4602      	mov	r2, r0
 80037c6:	4293      	cmp	r3, r2
 80037c8:	464b      	mov	r3, r9
 80037ca:	460a      	mov	r2, r1
 80037cc:	4193      	sbcs	r3, r2
 80037ce:	da2a      	bge.n	8003826 <get_encoder_speed+0x19e>
	            {
	                encoder->velocity = scaling * (-(encoder->last_counter_value) -
 80037d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80037d8:	2100      	movs	r1, #0
 80037da:	4254      	negs	r4, r2
 80037dc:	eb61 0503 	sbc.w	r5, r1, r3
	                        (__HAL_TIM_GET_AUTORELOAD(encoder->htim_encoder) - temp_counter));
 80037e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037f4:	65fa      	str	r2, [r7, #92]	@ 0x5c
	                encoder->velocity = scaling * (-(encoder->last_counter_value) -
 80037f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80037fa:	460b      	mov	r3, r1
 80037fc:	1ae3      	subs	r3, r4, r3
 80037fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003800:	4613      	mov	r3, r2
 8003802:	eb65 0303 	sbc.w	r3, r5, r3
 8003806:	657b      	str	r3, [r7, #84]	@ 0x54
 8003808:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800380c:	f7fd fb3c 	bl	8000e88 <__aeabi_l2f>
 8003810:	ee07 0a10 	vmov	s14, r0
 8003814:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003820:	edc3 7a00 	vstr	s15, [r3]
 8003824:	e094      	b.n	8003950 <get_encoder_speed+0x2c8>
	            }
	            else
	            {
	                encoder->velocity = scaling * (temp_counter - encoder->last_counter_value);
 8003826:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800382a:	17da      	asrs	r2, r3, #31
 800382c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003830:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003834:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003838:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800383c:	4621      	mov	r1, r4
 800383e:	1a89      	subs	r1, r1, r2
 8003840:	6439      	str	r1, [r7, #64]	@ 0x40
 8003842:	4629      	mov	r1, r5
 8003844:	eb61 0303 	sbc.w	r3, r1, r3
 8003848:	647b      	str	r3, [r7, #68]	@ 0x44
 800384a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800384e:	f7fd fb1b 	bl	8000e88 <__aeabi_l2f>
 8003852:	ee07 0a10 	vmov	s14, r0
 8003856:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003862:	edc3 7a00 	vstr	s15, [r3]
 8003866:	e073      	b.n	8003950 <get_encoder_speed+0x2c8>
	        }
	        // If the counter value is lower (counter wrapping around)
	        else
	        {
	            // Check for overflow
	            if ((encoder->last_counter_value - temp_counter) < __HAL_TIM_GET_AUTORELOAD(encoder->htim_encoder) / 2)
 8003868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800386c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003870:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003874:	17c8      	asrs	r0, r1, #31
 8003876:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003878:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800387a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800387e:	4621      	mov	r1, r4
 8003880:	ebb2 0a01 	subs.w	sl, r2, r1
 8003884:	4629      	mov	r1, r5
 8003886:	eb63 0b01 	sbc.w	fp, r3, r1
 800388a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	2200      	movs	r2, #0
 8003898:	633b      	str	r3, [r7, #48]	@ 0x30
 800389a:	637a      	str	r2, [r7, #52]	@ 0x34
 800389c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80038a0:	460b      	mov	r3, r1
 80038a2:	459a      	cmp	sl, r3
 80038a4:	4613      	mov	r3, r2
 80038a6:	eb7b 0303 	sbcs.w	r3, fp, r3
 80038aa:	da20      	bge.n	80038ee <get_encoder_speed+0x266>
	            {
	                encoder->velocity = scaling * (temp_counter - encoder->last_counter_value);
 80038ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b0:	17da      	asrs	r2, r3, #31
 80038b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038be:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80038c2:	4621      	mov	r1, r4
 80038c4:	1a89      	subs	r1, r1, r2
 80038c6:	6239      	str	r1, [r7, #32]
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb61 0303 	sbc.w	r3, r1, r3
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038d4:	f7fd fad8 	bl	8000e88 <__aeabi_l2f>
 80038d8:	ee07 0a10 	vmov	s14, r0
 80038dc:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80038e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e8:	edc3 7a00 	vstr	s15, [r3]
 80038ec:	e030      	b.n	8003950 <get_encoder_speed+0x2c8>
	            }
	            else
	            {
	                encoder->velocity = scaling * (temp_counter +
 80038ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038f2:	17da      	asrs	r2, r3, #31
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	61fa      	str	r2, [r7, #28]
	                        (__HAL_TIM_GET_AUTORELOAD(encoder->htim_encoder) - encoder->last_counter_value));
 80038f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	2200      	movs	r2, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	617a      	str	r2, [r7, #20]
 8003908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800390c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003910:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003914:	4621      	mov	r1, r4
 8003916:	ebb1 0802 	subs.w	r8, r1, r2
 800391a:	4629      	mov	r1, r5
 800391c:	eb61 0903 	sbc.w	r9, r1, r3
	                encoder->velocity = scaling * (temp_counter +
 8003920:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003924:	460b      	mov	r3, r1
 8003926:	eb13 0308 	adds.w	r3, r3, r8
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	4613      	mov	r3, r2
 800392e:	eb43 0309 	adc.w	r3, r3, r9
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003938:	f7fd faa6 	bl	8000e88 <__aeabi_l2f>
 800393c:	ee07 0a10 	vmov	s14, r0
 8003940:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800394c:	edc3 7a00 	vstr	s15, [r3]
	            }
	        }
	    }

	    // Update position based on velocity and time period
	    encoder->position += encoder->velocity * encoder->timer_period;
 8003950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003954:	ed93 7a01 	vldr	s14, [r3, #4]
 8003958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800395c:	edd3 6a00 	vldr	s13, [r3]
 8003960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003964:	edd3 7a04 	vldr	s15, [r3, #16]
 8003968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003974:	edc3 7a01 	vstr	s15, [r3, #4]

	    // Save the current counter and time for the next cycle
	    encoder->last_timer = temp_timer;
 8003978:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003988:	edc3 7a07 	vstr	s15, [r3, #28]
	    encoder->last_counter_value = temp_counter;
 800398c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003990:	17da      	asrs	r2, r3, #31
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800399a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800399e:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 80039a2:	37a0      	adds	r7, #160	@ 0xa0
 80039a4:	46bd      	mov	sp, r7
 80039a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039aa:	bf00      	nop
 80039ac:	447a0000 	.word	0x447a0000
 80039b0:	45160000 	.word	0x45160000
 80039b4:	42700000 	.word	0x42700000

080039b8 <reset_encoder>:
/* @brief resetting the encoder state
 * @param encoder: encoder instance
 * @retval: none
 */
void reset_encoder(encoder_inst *encoder)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	encoder -> position = 0;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
	encoder -> first_time = 1;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	761a      	strb	r2, [r3, #24]
	encoder -> last_counter_value = 0;
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	encoder -> velocity = 0;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <apply_pid>:
 * 	@param pid: pid instance
 * 	@param input_error: input error
 * 	@retval: none
 * */
pid_typedef apply_pid(pid_instance *pid, float input_error)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	ed87 0a00 	vstr	s0, [r7]
    pid->error_integral += input_error;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a02:	edd7 7a00 	vldr	s15, [r7]
 8003a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	edc3 7a04 	vstr	s15, [r3, #16]

    // Anti-windup: Clamp integral term
    if (pid->error_integral > pid->integral_max) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	dd03      	ble.n	8003a2e <apply_pid+0x3e>
        pid->error_integral = pid->integral_max;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
    }
    if (pid->error_integral < -pid->integral_max) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a3a:	eef1 7a67 	vneg.f32	s15, s15
 8003a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d507      	bpl.n	8003a58 <apply_pid+0x68>
        pid->error_integral = -pid->integral_max;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a4e:	eef1 7a67 	vneg.f32	s15, s15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    // Prevent division by zero
    if (pid->sam_rate == 0) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8b1b      	ldrh	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <apply_pid+0x76>
        pid->sam_rate = 1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	831a      	strh	r2, [r3, #24]
    }

    // Compute PID output with corrected D-term scaling
    pid->output = pid->p_gain * input_error +
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	ed93 7a00 	vldr	s14, [r3]
 8003a6c:	edd7 7a00 	vldr	s15, [r7]
 8003a70:	ee27 7a27 	vmul.f32	s14, s14, s15
                  pid->i_gain * (pid->error_integral) / pid->sam_rate +
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	edd3 6a01 	vldr	s13, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a80:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8b1b      	ldrh	r3, [r3, #24]
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a90:	eec6 7a26 	vdiv.f32	s15, s12, s13
    pid->output = pid->p_gain * input_error +
 8003a94:	ee37 7a27 	vadd.f32	s14, s14, s15
                  pid->d_gain * (input_error - pid->last_error) / pid->sam_rate;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aa4:	ed97 6a00 	vldr	s12, [r7]
 8003aa8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003aac:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8b1b      	ldrh	r3, [r3, #24]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003abc:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  pid->i_gain * (pid->error_integral) / pid->sam_rate +
 8003ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->output = pid->p_gain * input_error +
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	edc3 7a05 	vstr	s15, [r3, #20]

    // Output saturation (clamping)
    if (pid->output > pid->pid_max) {
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	dd0d      	ble.n	8003afc <apply_pid+0x10c>
        pid->output = pid->pid_max;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1a      	ldr	r2, [r3, #32]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	615a      	str	r2, [r3, #20]
        pid->error_integral -= input_error; // Stop integrating when max is reached
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	ed93 7a04 	vldr	s14, [r3, #16]
 8003aee:	edd7 7a00 	vldr	s15, [r7]
 8003af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	edc3 7a04 	vstr	s15, [r3, #16]
    }
    if (pid->output < -pid->pid_max) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b08:	eef1 7a67 	vneg.f32	s15, s15
 8003b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b14:	d511      	bpl.n	8003b3a <apply_pid+0x14a>
        pid->output = -pid->pid_max;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b1c:	eef1 7a67 	vneg.f32	s15, s15
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	edc3 7a05 	vstr	s15, [r3, #20]
        pid->error_integral -= input_error; // Stop integrating when min is reached
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b2c:	edd7 7a00 	vldr	s15, [r7]
 8003b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    pid->last_error = input_error;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	60da      	str	r2, [r3, #12]

    return pid_ok;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <get_pwm_from_velocity>:
/**
 * @brief Get PWM duty cycle for a given velocity using linear interpolation.
 * @param desired_velocity: Target velocity (RPM).
 * @return PWM duty cycle (0-100%).
 */
float get_pwm_from_velocity(float desired_velocity) {
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	@ 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < TABLE_SIZE - 1; i++) {
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e054      	b.n	8003c0a <get_pwm_from_velocity+0xba>
        if (desired_velocity >= velocity_pwm_table[i].velocity &&
 8003b60:	4a3c      	ldr	r2, [pc, #240]	@ (8003c54 <get_pwm_from_velocity+0x104>)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b78:	db44      	blt.n	8003c04 <get_pwm_from_velocity+0xb4>
            desired_velocity <= velocity_pwm_table[i + 1].velocity) {
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	4a35      	ldr	r2, [pc, #212]	@ (8003c54 <get_pwm_from_velocity+0x104>)
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	edd3 7a00 	vldr	s15, [r3]
        if (desired_velocity >= velocity_pwm_table[i].velocity &&
 8003b88:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b94:	d836      	bhi.n	8003c04 <get_pwm_from_velocity+0xb4>

            float v1 = velocity_pwm_table[i].velocity;
 8003b96:	4a2f      	ldr	r2, [pc, #188]	@ (8003c54 <get_pwm_from_velocity+0x104>)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]
            float v2 = velocity_pwm_table[i + 1].velocity;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c54 <get_pwm_from_velocity+0x104>)
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]
            float pwm1 = velocity_pwm_table[i].pwm_duty;
 8003bb0:	4a28      	ldr	r2, [pc, #160]	@ (8003c54 <get_pwm_from_velocity+0x104>)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	613b      	str	r3, [r7, #16]
            float pwm2 = velocity_pwm_table[i + 1].pwm_duty;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a24      	ldr	r2, [pc, #144]	@ (8003c54 <get_pwm_from_velocity+0x104>)
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]

            // Linear Interpolation
            return pwm1 + ((desired_velocity - v1) / (v2 - v1)) * (pwm2 - pwm1);
 8003bce:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003bda:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bde:	edd7 7a06 	vldr	s15, [r7, #24]
 8003be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	edd7 6a03 	vldr	s13, [r7, #12]
 8003bee:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bf2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c02:	e01f      	b.n	8003c44 <get_pwm_from_velocity+0xf4>
    for (int i = 0; i < TABLE_SIZE - 1; i++) {
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	3301      	adds	r3, #1
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2b15      	cmp	r3, #21
 8003c0e:	d9a7      	bls.n	8003b60 <get_pwm_from_velocity+0x10>
        }
    }

    // Clamp PWM if velocity is outside the range
    if (desired_velocity < velocity_pwm_table[0].velocity)
 8003c10:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003c58 <get_pwm_from_velocity+0x108>
 8003c14:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	d502      	bpl.n	8003c28 <get_pwm_from_velocity+0xd8>
        return velocity_pwm_table[0].pwm_duty;
 8003c22:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003c5c <get_pwm_from_velocity+0x10c>
 8003c26:	e00d      	b.n	8003c44 <get_pwm_from_velocity+0xf4>
    if (desired_velocity > velocity_pwm_table[TABLE_SIZE - 1].velocity)
 8003c28:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003c60 <get_pwm_from_velocity+0x110>
 8003c2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	dd02      	ble.n	8003c40 <get_pwm_from_velocity+0xf0>
        return velocity_pwm_table[TABLE_SIZE - 1].pwm_duty;
 8003c3a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8003c64 <get_pwm_from_velocity+0x114>
 8003c3e:	e001      	b.n	8003c44 <get_pwm_from_velocity+0xf4>

    return 0.0; // Default case (should not occur)
 8003c40:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8003c68 <get_pwm_from_velocity+0x118>
}
 8003c44:	eeb0 0a67 	vmov.f32	s0, s15
 8003c48:	3724      	adds	r7, #36	@ 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	0801f0f8 	.word	0x0801f0f8
 8003c58:	c2880000 	.word	0xc2880000
 8003c5c:	c2c80000 	.word	0xc2c80000
 8003c60:	42880000 	.word	0x42880000
 8003c64:	42c80000 	.word	0x42c80000
 8003c68:	00000000 	.word	0x00000000

08003c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	4b12      	ldr	r3, [pc, #72]	@ (8003cc0 <HAL_MspInit+0x54>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	4a11      	ldr	r2, [pc, #68]	@ (8003cc0 <HAL_MspInit+0x54>)
 8003c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c82:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc0 <HAL_MspInit+0x54>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <HAL_MspInit+0x54>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc0 <HAL_MspInit+0x54>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c9e:	4b08      	ldr	r3, [pc, #32]	@ (8003cc0 <HAL_MspInit+0x54>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	210f      	movs	r1, #15
 8003cae:	f06f 0001 	mvn.w	r0, #1
 8003cb2:	f000 ff8b 	bl	8004bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	@ (8003d48 <HAL_SPI_MspInit+0x84>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d12b      	bne.n	8003d3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cf6:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	4a10      	ldr	r2, [pc, #64]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003d0c:	f043 0302 	orr.w	r3, r3, #2
 8003d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003d1e:	2338      	movs	r3, #56	@ 0x38
 8003d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	2302      	movs	r3, #2
 8003d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d2e:	2305      	movs	r3, #5
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	4619      	mov	r1, r3
 8003d38:	4805      	ldr	r0, [pc, #20]	@ (8003d50 <HAL_SPI_MspInit+0x8c>)
 8003d3a:	f001 fb73 	bl	8005424 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003d3e:	bf00      	nop
 8003d40:	3728      	adds	r7, #40	@ 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40013000 	.word	0x40013000
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40020400 	.word	0x40020400

08003d54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b090      	sub	sp, #64	@ 0x40
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a74      	ldr	r2, [pc, #464]	@ (8003f44 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d12d      	bne.n	8003dd2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d7a:	4b73      	ldr	r3, [pc, #460]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	4a72      	ldr	r2, [pc, #456]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d86:	4b70      	ldr	r3, [pc, #448]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d96:	4b6c      	ldr	r3, [pc, #432]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	4a6b      	ldr	r2, [pc, #428]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003d9c:	f043 0310 	orr.w	r3, r3, #16
 8003da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da2:	4b69      	ldr	r3, [pc, #420]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003dae:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4860      	ldr	r0, [pc, #384]	@ (8003f4c <HAL_TIM_Encoder_MspInit+0x1f8>)
 8003dcc:	f001 fb2a 	bl	8005424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003dd0:	e0b4      	b.n	8003f3c <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(htim_encoder->Instance==TIM2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dda:	d14b      	bne.n	8003e74 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ddc:	2300      	movs	r3, #0
 8003dde:	623b      	str	r3, [r7, #32]
 8003de0:	4b59      	ldr	r3, [pc, #356]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	4a58      	ldr	r2, [pc, #352]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dec:	4b56      	ldr	r3, [pc, #344]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	4b52      	ldr	r3, [pc, #328]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e00:	4a51      	ldr	r2, [pc, #324]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e08:	4b4f      	ldr	r3, [pc, #316]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	4b4b      	ldr	r3, [pc, #300]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e24:	4b48      	ldr	r3, [pc, #288]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e30:	2320      	movs	r3, #32
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e40:	2301      	movs	r3, #1
 8003e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4841      	ldr	r0, [pc, #260]	@ (8003f50 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8003e4c:	f001 faea 	bl	8005424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e56:	2302      	movs	r3, #2
 8003e58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e62:	2301      	movs	r3, #1
 8003e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4839      	ldr	r0, [pc, #228]	@ (8003f54 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e6e:	f001 fad9 	bl	8005424 <HAL_GPIO_Init>
}
 8003e72:	e063      	b.n	8003f3c <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(htim_encoder->Instance==TIM3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a37      	ldr	r2, [pc, #220]	@ (8003f58 <HAL_TIM_Encoder_MspInit+0x204>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d12c      	bne.n	8003ed8 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	4a29      	ldr	r2, [pc, #164]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eaa:	4b27      	ldr	r3, [pc, #156]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003eb6:	23c0      	movs	r3, #192	@ 0xc0
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ece:	4619      	mov	r1, r3
 8003ed0:	481f      	ldr	r0, [pc, #124]	@ (8003f50 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8003ed2:	f001 faa7 	bl	8005424 <HAL_GPIO_Init>
}
 8003ed6:	e031      	b.n	8003f3c <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(htim_encoder->Instance==TIM4)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f5c <HAL_TIM_Encoder_MspInit+0x208>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d12c      	bne.n	8003f3c <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b18      	ldr	r3, [pc, #96]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	4a17      	ldr	r2, [pc, #92]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	4a10      	ldr	r2, [pc, #64]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003f08:	f043 0308 	orr.w	r3, r3, #8
 8003f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f48 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f1a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f20:	2302      	movs	r3, #2
 8003f22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f34:	4619      	mov	r1, r3
 8003f36:	480a      	ldr	r0, [pc, #40]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003f38:	f001 fa74 	bl	8005424 <HAL_GPIO_Init>
}
 8003f3c:	bf00      	nop
 8003f3e:	3740      	adds	r7, #64	@ 0x40
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40020000 	.word	0x40020000
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40020c00 	.word	0x40020c00

08003f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a36      	ldr	r2, [pc, #216]	@ (800404c <HAL_TIM_Base_MspInit+0xe8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d116      	bne.n	8003fa4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	4b35      	ldr	r3, [pc, #212]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003f80:	f043 0308 	orr.w	r3, r3, #8
 8003f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f86:	4b32      	ldr	r3, [pc, #200]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	2105      	movs	r1, #5
 8003f96:	2032      	movs	r0, #50	@ 0x32
 8003f98:	f000 fe18 	bl	8004bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003f9c:	2032      	movs	r0, #50	@ 0x32
 8003f9e:	f000 fe31 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003fa2:	e04e      	b.n	8004042 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM9)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8004054 <HAL_TIM_Base_MspInit+0xf0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10e      	bne.n	8003fcc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	4b27      	ldr	r3, [pc, #156]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	4a26      	ldr	r2, [pc, #152]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
}
 8003fca:	e03a      	b.n	8004042 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM10)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a21      	ldr	r2, [pc, #132]	@ (8004058 <HAL_TIM_Base_MspInit+0xf4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	4a1c      	ldr	r2, [pc, #112]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]
}
 8003ff2:	e026      	b.n	8004042 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM11)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	@ (800405c <HAL_TIM_Base_MspInit+0xf8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10e      	bne.n	800401c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	4a12      	ldr	r2, [pc, #72]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8004008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800400c:	6453      	str	r3, [r2, #68]	@ 0x44
 800400e:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	693b      	ldr	r3, [r7, #16]
}
 800401a:	e012      	b.n	8004042 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM13)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0f      	ldr	r2, [pc, #60]	@ (8004060 <HAL_TIM_Base_MspInit+0xfc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10d      	bne.n	8004042 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	4a08      	ldr	r2, [pc, #32]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8004030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004034:	6413      	str	r3, [r2, #64]	@ 0x40
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_TIM_Base_MspInit+0xec>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40023800 	.word	0x40023800
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800
 8004060:	40001c00 	.word	0x40001c00

08004064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	@ 0x30
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	f107 031c 	add.w	r3, r7, #28
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a49      	ldr	r2, [pc, #292]	@ (80041a8 <HAL_TIM_MspPostInit+0x144>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d11e      	bne.n	80040c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	4b48      	ldr	r3, [pc, #288]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	4a47      	ldr	r2, [pc, #284]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 8004090:	f043 0310 	orr.w	r3, r3, #16
 8004094:	6313      	str	r3, [r2, #48]	@ 0x30
 8004096:	4b45      	ldr	r3, [pc, #276]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	69bb      	ldr	r3, [r7, #24]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80040a2:	2360      	movs	r3, #96	@ 0x60
 80040a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ae:	2300      	movs	r3, #0
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80040b2:	2303      	movs	r3, #3
 80040b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040b6:	f107 031c 	add.w	r3, r7, #28
 80040ba:	4619      	mov	r1, r3
 80040bc:	483c      	ldr	r0, [pc, #240]	@ (80041b0 <HAL_TIM_MspPostInit+0x14c>)
 80040be:	f001 f9b1 	bl	8005424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80040c2:	e06c      	b.n	800419e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a3a      	ldr	r2, [pc, #232]	@ (80041b4 <HAL_TIM_MspPostInit+0x150>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d11f      	bne.n	800410e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	4b36      	ldr	r3, [pc, #216]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	4a35      	ldr	r2, [pc, #212]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040de:	4b33      	ldr	r3, [pc, #204]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80040ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f8:	2300      	movs	r3, #0
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80040fc:	2303      	movs	r3, #3
 80040fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004100:	f107 031c 	add.w	r3, r7, #28
 8004104:	4619      	mov	r1, r3
 8004106:	482c      	ldr	r0, [pc, #176]	@ (80041b8 <HAL_TIM_MspPostInit+0x154>)
 8004108:	f001 f98c 	bl	8005424 <HAL_GPIO_Init>
}
 800410c:	e047      	b.n	800419e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM11)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <HAL_TIM_MspPostInit+0x158>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d11e      	bne.n	8004156 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	4a22      	ldr	r2, [pc, #136]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 8004122:	f043 0320 	orr.w	r3, r3, #32
 8004126:	6313      	str	r3, [r2, #48]	@ 0x30
 8004128:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004144:	2303      	movs	r3, #3
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	4619      	mov	r1, r3
 800414e:	481c      	ldr	r0, [pc, #112]	@ (80041c0 <HAL_TIM_MspPostInit+0x15c>)
 8004150:	f001 f968 	bl	8005424 <HAL_GPIO_Init>
}
 8004154:	e023      	b.n	800419e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM13)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1a      	ldr	r2, [pc, #104]	@ (80041c4 <HAL_TIM_MspPostInit+0x160>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d11e      	bne.n	800419e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	4a10      	ldr	r2, [pc, #64]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 800416a:	f043 0320 	orr.w	r3, r3, #32
 800416e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004170:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <HAL_TIM_MspPostInit+0x148>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800417c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418a:	2300      	movs	r3, #0
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800418e:	2309      	movs	r3, #9
 8004190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004192:	f107 031c 	add.w	r3, r7, #28
 8004196:	4619      	mov	r1, r3
 8004198:	4809      	ldr	r0, [pc, #36]	@ (80041c0 <HAL_TIM_MspPostInit+0x15c>)
 800419a:	f001 f943 	bl	8005424 <HAL_GPIO_Init>
}
 800419e:	bf00      	nop
 80041a0:	3730      	adds	r7, #48	@ 0x30
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40020400 	.word	0x40020400
 80041bc:	40014800 	.word	0x40014800
 80041c0:	40021400 	.word	0x40021400
 80041c4:	40001c00 	.word	0x40001c00

080041c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	@ 0x30
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d0:	f107 031c 	add.w	r3, r7, #28
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a96      	ldr	r2, [pc, #600]	@ (8004440 <HAL_UART_MspInit+0x278>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	f040 808c 	bne.w	8004304 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	4b94      	ldr	r3, [pc, #592]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	4a93      	ldr	r2, [pc, #588]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80041fc:	4b91      	ldr	r3, [pc, #580]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	4b8d      	ldr	r3, [pc, #564]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	4a8c      	ldr	r2, [pc, #560]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6313      	str	r3, [r2, #48]	@ 0x30
 8004218:	4b8a      	ldr	r3, [pc, #552]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004224:	230c      	movs	r3, #12
 8004226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	2302      	movs	r3, #2
 800422a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004230:	2303      	movs	r3, #3
 8004232:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004234:	2307      	movs	r3, #7
 8004236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004238:	f107 031c 	add.w	r3, r7, #28
 800423c:	4619      	mov	r1, r3
 800423e:	4882      	ldr	r0, [pc, #520]	@ (8004448 <HAL_UART_MspInit+0x280>)
 8004240:	f001 f8f0 	bl	8005424 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004244:	4b81      	ldr	r3, [pc, #516]	@ (800444c <HAL_UART_MspInit+0x284>)
 8004246:	4a82      	ldr	r2, [pc, #520]	@ (8004450 <HAL_UART_MspInit+0x288>)
 8004248:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800424a:	4b80      	ldr	r3, [pc, #512]	@ (800444c <HAL_UART_MspInit+0x284>)
 800424c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004250:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004252:	4b7e      	ldr	r3, [pc, #504]	@ (800444c <HAL_UART_MspInit+0x284>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004258:	4b7c      	ldr	r3, [pc, #496]	@ (800444c <HAL_UART_MspInit+0x284>)
 800425a:	2200      	movs	r2, #0
 800425c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800425e:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <HAL_UART_MspInit+0x284>)
 8004260:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004264:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004266:	4b79      	ldr	r3, [pc, #484]	@ (800444c <HAL_UART_MspInit+0x284>)
 8004268:	2200      	movs	r2, #0
 800426a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800426c:	4b77      	ldr	r3, [pc, #476]	@ (800444c <HAL_UART_MspInit+0x284>)
 800426e:	2200      	movs	r2, #0
 8004270:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004272:	4b76      	ldr	r3, [pc, #472]	@ (800444c <HAL_UART_MspInit+0x284>)
 8004274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004278:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800427a:	4b74      	ldr	r3, [pc, #464]	@ (800444c <HAL_UART_MspInit+0x284>)
 800427c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004280:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004282:	4b72      	ldr	r3, [pc, #456]	@ (800444c <HAL_UART_MspInit+0x284>)
 8004284:	2200      	movs	r2, #0
 8004286:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004288:	4870      	ldr	r0, [pc, #448]	@ (800444c <HAL_UART_MspInit+0x284>)
 800428a:	f000 fcc9 	bl	8004c20 <HAL_DMA_Init>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004294:	f7fe ff3e 	bl	8003114 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a6c      	ldr	r2, [pc, #432]	@ (800444c <HAL_UART_MspInit+0x284>)
 800429c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800429e:	4a6b      	ldr	r2, [pc, #428]	@ (800444c <HAL_UART_MspInit+0x284>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80042a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004458 <HAL_UART_MspInit+0x290>)
 80042a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80042aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80042b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042b2:	4b68      	ldr	r3, [pc, #416]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042b4:	2240      	movs	r2, #64	@ 0x40
 80042b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042b8:	4b66      	ldr	r3, [pc, #408]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042be:	4b65      	ldr	r3, [pc, #404]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042c6:	4b63      	ldr	r3, [pc, #396]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042cc:	4b61      	ldr	r3, [pc, #388]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042d2:	4b60      	ldr	r3, [pc, #384]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80042de:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042e6:	485b      	ldr	r0, [pc, #364]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042e8:	f000 fc9a 	bl	8004c20 <HAL_DMA_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80042f2:	f7fe ff0f 	bl	8003114 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a56      	ldr	r2, [pc, #344]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80042fc:	4a55      	ldr	r2, [pc, #340]	@ (8004454 <HAL_UART_MspInit+0x28c>)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004302:	e099      	b.n	8004438 <HAL_UART_MspInit+0x270>
  else if(huart->Instance==USART3)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a54      	ldr	r2, [pc, #336]	@ (800445c <HAL_UART_MspInit+0x294>)
 800430a:	4293      	cmp	r3, r2
 800430c:	f040 8094 	bne.w	8004438 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	4b4b      	ldr	r3, [pc, #300]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	4a4a      	ldr	r2, [pc, #296]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 800431a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800431e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004320:	4b48      	ldr	r3, [pc, #288]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	4b44      	ldr	r3, [pc, #272]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	4a43      	ldr	r2, [pc, #268]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 8004336:	f043 0308 	orr.w	r3, r3, #8
 800433a:	6313      	str	r3, [r2, #48]	@ 0x30
 800433c:	4b41      	ldr	r3, [pc, #260]	@ (8004444 <HAL_UART_MspInit+0x27c>)
 800433e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004348:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800434c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434e:	2302      	movs	r3, #2
 8004350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	2300      	movs	r3, #0
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004356:	2303      	movs	r3, #3
 8004358:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800435a:	2307      	movs	r3, #7
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800435e:	f107 031c 	add.w	r3, r7, #28
 8004362:	4619      	mov	r1, r3
 8004364:	483e      	ldr	r0, [pc, #248]	@ (8004460 <HAL_UART_MspInit+0x298>)
 8004366:	f001 f85d 	bl	8005424 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800436a:	4b3e      	ldr	r3, [pc, #248]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 800436c:	4a3e      	ldr	r2, [pc, #248]	@ (8004468 <HAL_UART_MspInit+0x2a0>)
 800436e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004370:	4b3c      	ldr	r3, [pc, #240]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 8004372:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004376:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004378:	4b3a      	ldr	r3, [pc, #232]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 800437a:	2200      	movs	r2, #0
 800437c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800437e:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 8004380:	2200      	movs	r2, #0
 8004382:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004384:	4b37      	ldr	r3, [pc, #220]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 8004386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800438a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800438c:	4b35      	ldr	r3, [pc, #212]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 800438e:	2200      	movs	r2, #0
 8004390:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004392:	4b34      	ldr	r3, [pc, #208]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 8004394:	2200      	movs	r2, #0
 8004396:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004398:	4b32      	ldr	r3, [pc, #200]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 800439a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800439e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043a0:	4b30      	ldr	r3, [pc, #192]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 80043a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80043a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80043ae:	482d      	ldr	r0, [pc, #180]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 80043b0:	f000 fc36 	bl	8004c20 <HAL_DMA_Init>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 80043ba:	f7fe feab 	bl	8003114 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a28      	ldr	r2, [pc, #160]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 80043c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043c4:	4a27      	ldr	r2, [pc, #156]	@ (8004464 <HAL_UART_MspInit+0x29c>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80043ca:	4b28      	ldr	r3, [pc, #160]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 80043cc:	4a28      	ldr	r2, [pc, #160]	@ (8004470 <HAL_UART_MspInit+0x2a8>)
 80043ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80043d0:	4b26      	ldr	r3, [pc, #152]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 80043d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80043d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043d8:	4b24      	ldr	r3, [pc, #144]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 80043da:	2240      	movs	r2, #64	@ 0x40
 80043dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043de:	4b23      	ldr	r3, [pc, #140]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043e4:	4b21      	ldr	r3, [pc, #132]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 80043e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043ec:	4b1f      	ldr	r3, [pc, #124]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043f2:	4b1e      	ldr	r3, [pc, #120]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80043f8:	4b1c      	ldr	r3, [pc, #112]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043fe:	4b1b      	ldr	r3, [pc, #108]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 8004400:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004404:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004406:	4b19      	ldr	r3, [pc, #100]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 8004408:	2200      	movs	r2, #0
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800440c:	4817      	ldr	r0, [pc, #92]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 800440e:	f000 fc07 	bl	8004c20 <HAL_DMA_Init>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_UART_MspInit+0x254>
      Error_Handler();
 8004418:	f7fe fe7c 	bl	8003114 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a13      	ldr	r2, [pc, #76]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 8004420:	639a      	str	r2, [r3, #56]	@ 0x38
 8004422:	4a12      	ldr	r2, [pc, #72]	@ (800446c <HAL_UART_MspInit+0x2a4>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004428:	2200      	movs	r2, #0
 800442a:	2105      	movs	r1, #5
 800442c:	2027      	movs	r0, #39	@ 0x27
 800442e:	f000 fbcd 	bl	8004bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004432:	2027      	movs	r0, #39	@ 0x27
 8004434:	f000 fbe6 	bl	8004c04 <HAL_NVIC_EnableIRQ>
}
 8004438:	bf00      	nop
 800443a:	3730      	adds	r7, #48	@ 0x30
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40004400 	.word	0x40004400
 8004444:	40023800 	.word	0x40023800
 8004448:	40020000 	.word	0x40020000
 800444c:	2000960c 	.word	0x2000960c
 8004450:	40026088 	.word	0x40026088
 8004454:	2000966c 	.word	0x2000966c
 8004458:	400260a0 	.word	0x400260a0
 800445c:	40004800 	.word	0x40004800
 8004460:	40020c00 	.word	0x40020c00
 8004464:	200096cc 	.word	0x200096cc
 8004468:	40026028 	.word	0x40026028
 800446c:	2000972c 	.word	0x2000972c
 8004470:	40026058 	.word	0x40026058

08004474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08e      	sub	sp, #56	@ 0x38
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	4b33      	ldr	r3, [pc, #204]	@ (8004558 <HAL_InitTick+0xe4>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	4a32      	ldr	r2, [pc, #200]	@ (8004558 <HAL_InitTick+0xe4>)
 800448e:	f043 0320 	orr.w	r3, r3, #32
 8004492:	6413      	str	r3, [r2, #64]	@ 0x40
 8004494:	4b30      	ldr	r3, [pc, #192]	@ (8004558 <HAL_InitTick+0xe4>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044a0:	f107 0210 	add.w	r2, r7, #16
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fa9c 	bl	80059e8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80044b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80044ba:	f001 fa6d 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 80044be:	6378      	str	r0, [r7, #52]	@ 0x34
 80044c0:	e004      	b.n	80044cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80044c2:	f001 fa69 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 80044c6:	4603      	mov	r3, r0
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80044cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ce:	4a23      	ldr	r2, [pc, #140]	@ (800455c <HAL_InitTick+0xe8>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	0c9b      	lsrs	r3, r3, #18
 80044d6:	3b01      	subs	r3, #1
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80044da:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <HAL_InitTick+0xec>)
 80044dc:	4a21      	ldr	r2, [pc, #132]	@ (8004564 <HAL_InitTick+0xf0>)
 80044de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80044e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004560 <HAL_InitTick+0xec>)
 80044e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80044e6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80044e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004560 <HAL_InitTick+0xec>)
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80044ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004560 <HAL_InitTick+0xec>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <HAL_InitTick+0xec>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044fa:	4b19      	ldr	r3, [pc, #100]	@ (8004560 <HAL_InitTick+0xec>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8004500:	4817      	ldr	r0, [pc, #92]	@ (8004560 <HAL_InitTick+0xec>)
 8004502:	f002 fd43 	bl	8006f8c <HAL_TIM_Base_Init>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800450c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004510:	2b00      	cmp	r3, #0
 8004512:	d11b      	bne.n	800454c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8004514:	4812      	ldr	r0, [pc, #72]	@ (8004560 <HAL_InitTick+0xec>)
 8004516:	f002 fd89 	bl	800702c <HAL_TIM_Base_Start_IT>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004520:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004524:	2b00      	cmp	r3, #0
 8004526:	d111      	bne.n	800454c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004528:	2037      	movs	r0, #55	@ 0x37
 800452a:	f000 fb6b 	bl	8004c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b0f      	cmp	r3, #15
 8004532:	d808      	bhi.n	8004546 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8004534:	2200      	movs	r2, #0
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	2037      	movs	r0, #55	@ 0x37
 800453a:	f000 fb47 	bl	8004bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800453e:	4a0a      	ldr	r2, [pc, #40]	@ (8004568 <HAL_InitTick+0xf4>)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e002      	b.n	800454c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800454c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004550:	4618      	mov	r0, r3
 8004552:	3738      	adds	r7, #56	@ 0x38
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	431bde83 	.word	0x431bde83
 8004560:	200097d0 	.word	0x200097d0
 8004564:	40001400 	.word	0x40001400
 8004568:	2000017c 	.word	0x2000017c

0800456c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <NMI_Handler+0x4>

08004574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <HardFault_Handler+0x4>

0800457c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <MemManage_Handler+0x4>

08004584 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <BusFault_Handler+0x4>

0800458c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <UsageFault_Handler+0x4>

08004594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80045a8:	4802      	ldr	r0, [pc, #8]	@ (80045b4 <DMA1_Stream1_IRQHandler+0x10>)
 80045aa:	f000 fcd1 	bl	8004f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	200096cc 	.word	0x200096cc

080045b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80045bc:	4802      	ldr	r0, [pc, #8]	@ (80045c8 <DMA1_Stream3_IRQHandler+0x10>)
 80045be:	f000 fcc7 	bl	8004f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000972c 	.word	0x2000972c

080045cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80045d0:	4802      	ldr	r0, [pc, #8]	@ (80045dc <DMA1_Stream5_IRQHandler+0x10>)
 80045d2:	f000 fcbd 	bl	8004f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	2000960c 	.word	0x2000960c

080045e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80045e4:	4802      	ldr	r0, [pc, #8]	@ (80045f0 <DMA1_Stream6_IRQHandler+0x10>)
 80045e6:	f000 fcb3 	bl	8004f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	2000966c 	.word	0x2000966c

080045f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80045f8:	4802      	ldr	r0, [pc, #8]	@ (8004604 <USART3_IRQHandler+0x10>)
 80045fa:	f004 f81b 	bl	8008634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	200095c4 	.word	0x200095c4

08004608 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800460c:	4802      	ldr	r0, [pc, #8]	@ (8004618 <TIM5_IRQHandler+0x10>)
 800460e:	f002 ffd3 	bl	80075b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20009414 	.word	0x20009414

0800461c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004620:	4802      	ldr	r0, [pc, #8]	@ (800462c <TIM7_IRQHandler+0x10>)
 8004622:	f002 ffc9 	bl	80075b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200097d0 	.word	0x200097d0

08004630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return 1;
 8004634:	2301      	movs	r3, #1
}
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_kill>:

int _kill(int pid, int sig)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800464a:	f017 fa37 	bl	801babc <__errno>
 800464e:	4603      	mov	r3, r0
 8004650:	2216      	movs	r2, #22
 8004652:	601a      	str	r2, [r3, #0]
  return -1;
 8004654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_exit>:

void _exit (int status)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004668:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ffe7 	bl	8004640 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004672:	bf00      	nop
 8004674:	e7fd      	b.n	8004672 <_exit+0x12>

08004676 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e00a      	b.n	800469e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004688:	f3af 8000 	nop.w
 800468c:	4601      	mov	r1, r0
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	60ba      	str	r2, [r7, #8]
 8004694:	b2ca      	uxtb	r2, r1
 8004696:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3301      	adds	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	dbf0      	blt.n	8004688 <_read+0x12>
  }

  return len;
 80046a6:	687b      	ldr	r3, [r7, #4]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e009      	b.n	80046d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	60ba      	str	r2, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe f908 	bl	80028e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3301      	adds	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	dbf1      	blt.n	80046c2 <_write+0x12>
  }
  return len;
 80046de:	687b      	ldr	r3, [r7, #4]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <_close>:

int _close(int file)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004710:	605a      	str	r2, [r3, #4]
  return 0;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <_isatty>:

int _isatty(int file)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004728:	2301      	movs	r3, #1
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004758:	4a14      	ldr	r2, [pc, #80]	@ (80047ac <_sbrk+0x5c>)
 800475a:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <_sbrk+0x60>)
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004764:	4b13      	ldr	r3, [pc, #76]	@ (80047b4 <_sbrk+0x64>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <_sbrk+0x64>)
 800476e:	4a12      	ldr	r2, [pc, #72]	@ (80047b8 <_sbrk+0x68>)
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <_sbrk+0x64>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	429a      	cmp	r2, r3
 800477e:	d207      	bcs.n	8004790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004780:	f017 f99c 	bl	801babc <__errno>
 8004784:	4603      	mov	r3, r0
 8004786:	220c      	movs	r2, #12
 8004788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800478e:	e009      	b.n	80047a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004790:	4b08      	ldr	r3, [pc, #32]	@ (80047b4 <_sbrk+0x64>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004796:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <_sbrk+0x64>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	4a05      	ldr	r2, [pc, #20]	@ (80047b4 <_sbrk+0x64>)
 80047a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047a2:	68fb      	ldr	r3, [r7, #12]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20020000 	.word	0x20020000
 80047b0:	00000800 	.word	0x00000800
 80047b4:	2000981c 	.word	0x2000981c
 80047b8:	20017a78 	.word	0x20017a78

080047bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047c0:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <SystemInit+0x20>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	4a05      	ldr	r2, [pc, #20]	@ (80047dc <SystemInit+0x20>)
 80047c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80047ee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80047f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047f4:	4904      	ldr	r1, [pc, #16]	@ (8004808 <cubemx_transport_open+0x28>)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f003 fe78 	bl	80084ec <HAL_UART_Receive_DMA>
    return true;
 80047fc:	2301      	movs	r3, #1
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20009820 	.word	0x20009820

0800480c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800481a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f003 fe8a 	bl	8008536 <HAL_UART_DMAStop>
    return true;
 8004822:	2301      	movs	r3, #1
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8004840:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b20      	cmp	r3, #32
 800484c:	d11c      	bne.n	8004888 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	b29b      	uxth	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	6978      	ldr	r0, [r7, #20]
 8004858:	f003 fdd8 	bl	800840c <HAL_UART_Transmit_DMA>
 800485c:	4603      	mov	r3, r0
 800485e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8004860:	e002      	b.n	8004868 <cubemx_transport_write+0x3c>
            osDelay(1);
 8004862:	2001      	movs	r0, #1
 8004864:	f005 f95c 	bl	8009b20 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <cubemx_transport_write+0x4e>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b20      	cmp	r3, #32
 8004878:	d1f3      	bne.n	8004862 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <cubemx_transport_write+0x58>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	e002      	b.n	800488a <cubemx_transport_write+0x5e>
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8004888:	2300      	movs	r3, #0
    }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80048a8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80048ae:	b672      	cpsid	i
}
 80048b0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80048be:	4a1c      	ldr	r2, [pc, #112]	@ (8004930 <cubemx_transport_read+0x9c>)
 80048c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048c2:	b662      	cpsie	i
}
 80048c4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3301      	adds	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80048cc:	2001      	movs	r0, #1
 80048ce:	f005 f927 	bl	8009b20 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80048d2:	4b18      	ldr	r3, [pc, #96]	@ (8004934 <cubemx_transport_read+0xa0>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b16      	ldr	r3, [pc, #88]	@ (8004930 <cubemx_transport_read+0x9c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d103      	bne.n	80048e6 <cubemx_transport_read+0x52>
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	dbe3      	blt.n	80048ae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80048ea:	e011      	b.n	8004910 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80048ec:	4b11      	ldr	r3, [pc, #68]	@ (8004934 <cubemx_transport_read+0xa0>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	440b      	add	r3, r1
 80048f6:	4910      	ldr	r1, [pc, #64]	@ (8004938 <cubemx_transport_read+0xa4>)
 80048f8:	5c8a      	ldrb	r2, [r1, r2]
 80048fa:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80048fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004934 <cubemx_transport_read+0xa0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004906:	4a0b      	ldr	r2, [pc, #44]	@ (8004934 <cubemx_transport_read+0xa0>)
 8004908:	6013      	str	r3, [r2, #0]
        wrote++;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	3301      	adds	r3, #1
 800490e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8004910:	4b08      	ldr	r3, [pc, #32]	@ (8004934 <cubemx_transport_read+0xa0>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <cubemx_transport_read+0x9c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d003      	beq.n	8004924 <cubemx_transport_read+0x90>
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d3e3      	bcc.n	80048ec <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8004924:	69bb      	ldr	r3, [r7, #24]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	2000a024 	.word	0x2000a024
 8004934:	2000a020 	.word	0x2000a020
 8004938:	20009820 	.word	0x20009820

0800493c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800493c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004974 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004940:	f7ff ff3c 	bl	80047bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004944:	480c      	ldr	r0, [pc, #48]	@ (8004978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004946:	490d      	ldr	r1, [pc, #52]	@ (800497c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004948:	4a0d      	ldr	r2, [pc, #52]	@ (8004980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800494a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800494c:	e002      	b.n	8004954 <LoopCopyDataInit>

0800494e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800494e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004952:	3304      	adds	r3, #4

08004954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004956:	428c      	cmp	r4, r1
	  bcc CopyDataInit
 8004958:	d3f9      	bcc.n	800494e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800495a:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800495c:	4c0a      	ldr	r4, [pc, #40]	@ (8004988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800495e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004960:	e001      	b.n	8004966 <LoopFillZerobss>

08004962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004964:	3204      	adds	r2, #4

08004966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004968:	d3fb      	bcc.n	8004962 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800496a:	f017 f8ad 	bl	801bac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800496e:	f7fd f9a1 	bl	8001cb4 <main>
  bx  lr    
 8004972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800497c:	200013fc 	.word	0x200013fc
  ldr r2, =_sidata
 8004980:	08020704 	.word	0x08020704
  ldr r2, =_sbss
 8004984:	20001400 	.word	0x20001400
  ldr r4, =_ebss
 8004988:	20017a78 	.word	0x20017a78

0800498c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800498c:	e7fe      	b.n	800498c <ADC_IRQHandler>
	...

08004990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004994:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <HAL_Init+0x40>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0d      	ldr	r2, [pc, #52]	@ (80049d0 <HAL_Init+0x40>)
 800499a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800499e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <HAL_Init+0x40>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	@ (80049d0 <HAL_Init+0x40>)
 80049a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049ac:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <HAL_Init+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a07      	ldr	r2, [pc, #28]	@ (80049d0 <HAL_Init+0x40>)
 80049b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049b8:	2003      	movs	r0, #3
 80049ba:	f000 f8fc 	bl	8004bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049be:	200f      	movs	r0, #15
 80049c0:	f7ff fd58 	bl	8004474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049c4:	f7ff f952 	bl	8003c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00

080049d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049d8:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <HAL_IncTick+0x20>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <HAL_IncTick+0x24>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	4a04      	ldr	r2, [pc, #16]	@ (80049f8 <HAL_IncTick+0x24>)
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000180 	.word	0x20000180
 80049f8:	2000a028 	.word	0x2000a028

080049fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004a00:	4b03      	ldr	r3, [pc, #12]	@ (8004a10 <HAL_GetTick+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	2000a028 	.word	0x2000a028

08004a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a1c:	f7ff ffee 	bl	80049fc <HAL_GetTick>
 8004a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a2c:	d005      	beq.n	8004a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_Delay+0x44>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a3a:	bf00      	nop
 8004a3c:	f7ff ffde 	bl	80049fc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d8f7      	bhi.n	8004a3c <HAL_Delay+0x28>
  {
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000180 	.word	0x20000180

08004a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a8e:	4a04      	ldr	r2, [pc, #16]	@ (8004aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	60d3      	str	r3, [r2, #12]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa8:	4b04      	ldr	r3, [pc, #16]	@ (8004abc <__NVIC_GetPriorityGrouping+0x18>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	f003 0307 	and.w	r3, r3, #7
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	db0b      	blt.n	8004aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	f003 021f 	and.w	r2, r3, #31
 8004ad8:	4907      	ldr	r1, [pc, #28]	@ (8004af8 <__NVIC_EnableIRQ+0x38>)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000e100 	.word	0xe000e100

08004afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	6039      	str	r1, [r7, #0]
 8004b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	db0a      	blt.n	8004b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	490c      	ldr	r1, [pc, #48]	@ (8004b48 <__NVIC_SetPriority+0x4c>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	0112      	lsls	r2, r2, #4
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	440b      	add	r3, r1
 8004b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b24:	e00a      	b.n	8004b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	4908      	ldr	r1, [pc, #32]	@ (8004b4c <__NVIC_SetPriority+0x50>)
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	3b04      	subs	r3, #4
 8004b34:	0112      	lsls	r2, r2, #4
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	440b      	add	r3, r1
 8004b3a:	761a      	strb	r2, [r3, #24]
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	e000e100 	.word	0xe000e100
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	@ 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f1c3 0307 	rsb	r3, r3, #7
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	bf28      	it	cs
 8004b6e:	2304      	movcs	r3, #4
 8004b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d902      	bls.n	8004b80 <NVIC_EncodePriority+0x30>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3b03      	subs	r3, #3
 8004b7e:	e000      	b.n	8004b82 <NVIC_EncodePriority+0x32>
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	401a      	ands	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	43d9      	mvns	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba8:	4313      	orrs	r3, r2
         );
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3724      	adds	r7, #36	@ 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ff4c 	bl	8004a5c <__NVIC_SetPriorityGrouping>
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bde:	f7ff ff61 	bl	8004aa4 <__NVIC_GetPriorityGrouping>
 8004be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	6978      	ldr	r0, [r7, #20]
 8004bea:	f7ff ffb1 	bl	8004b50 <NVIC_EncodePriority>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff ff80 	bl	8004afc <__NVIC_SetPriority>
}
 8004bfc:	bf00      	nop
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff ff54 	bl	8004ac0 <__NVIC_EnableIRQ>
}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c2c:	f7ff fee6 	bl	80049fc <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e099      	b.n	8004d70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c5c:	e00f      	b.n	8004c7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c5e:	f7ff fecd 	bl	80049fc <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b05      	cmp	r3, #5
 8004c6a:	d908      	bls.n	8004c7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2203      	movs	r2, #3
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e078      	b.n	8004d70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e8      	bne.n	8004c5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4b38      	ldr	r3, [pc, #224]	@ (8004d78 <HAL_DMA_Init+0x158>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d107      	bne.n	8004ce8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d117      	bne.n	8004d42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fb01 	bl	800532c <DMA_CheckFifoParam>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2240      	movs	r2, #64	@ 0x40
 8004d34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e016      	b.n	8004d70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fab8 	bl	80052c0 <DMA_CalcBaseAndBitshift>
 8004d50:	4603      	mov	r3, r0
 8004d52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d58:	223f      	movs	r2, #63	@ 0x3f
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	f010803f 	.word	0xf010803f

08004d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_DMA_Start_IT+0x26>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e040      	b.n	8004e24 <HAL_DMA_Start_IT+0xa8>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d12f      	bne.n	8004e16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fa4a 	bl	8005264 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd4:	223f      	movs	r2, #63	@ 0x3f
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0216 	orr.w	r2, r2, #22
 8004dea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0208 	orr.w	r2, r2, #8
 8004e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e005      	b.n	8004e22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
 8004e20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e3a:	f7ff fddf 	bl	80049fc <HAL_GetTick>
 8004e3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d008      	beq.n	8004e5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2280      	movs	r2, #128	@ 0x80
 8004e50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e052      	b.n	8004f04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0216 	bic.w	r2, r2, #22
 8004e6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <HAL_DMA_Abort+0x62>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0208 	bic.w	r2, r2, #8
 8004e9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004eae:	e013      	b.n	8004ed8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004eb0:	f7ff fda4 	bl	80049fc <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d90c      	bls.n	8004ed8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e015      	b.n	8004f04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e4      	bne.n	8004eb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eea:	223f      	movs	r2, #63	@ 0x3f
 8004eec:	409a      	lsls	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d004      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2280      	movs	r2, #128	@ 0x80
 8004f24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e00c      	b.n	8004f44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f5c:	4b8e      	ldr	r3, [pc, #568]	@ (8005198 <HAL_DMA_IRQHandler+0x248>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a8e      	ldr	r2, [pc, #568]	@ (800519c <HAL_DMA_IRQHandler+0x24c>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	0a9b      	lsrs	r3, r3, #10
 8004f68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01a      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0204 	bic.w	r2, r2, #4
 8004fa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa8:	2208      	movs	r2, #8
 8004faa:	409a      	lsls	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	f043 0201 	orr.w	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d012      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fde:	2201      	movs	r2, #1
 8004fe0:	409a      	lsls	r2, r3
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fea:	f043 0202 	orr.w	r2, r3, #2
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d012      	beq.n	8005028 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00b      	beq.n	8005028 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	2204      	movs	r2, #4
 8005016:	409a      	lsls	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005020:	f043 0204 	orr.w	r2, r3, #4
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502c:	2210      	movs	r2, #16
 800502e:	409a      	lsls	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d043      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d03c      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504a:	2210      	movs	r2, #16
 800504c:	409a      	lsls	r2, r3
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d018      	beq.n	8005092 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d108      	bne.n	8005080 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d024      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	4798      	blx	r3
 800507e:	e01f      	b.n	80050c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4798      	blx	r3
 8005090:	e016      	b.n	80050c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d107      	bne.n	80050b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0208 	bic.w	r2, r2, #8
 80050ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c4:	2220      	movs	r2, #32
 80050c6:	409a      	lsls	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 808f 	beq.w	80051f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8087 	beq.w	80051f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e6:	2220      	movs	r2, #32
 80050e8:	409a      	lsls	r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d136      	bne.n	8005168 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0216 	bic.w	r2, r2, #22
 8005108:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005118:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <HAL_DMA_IRQHandler+0x1da>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0208 	bic.w	r2, r2, #8
 8005138:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513e:	223f      	movs	r2, #63	@ 0x3f
 8005140:	409a      	lsls	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515a:	2b00      	cmp	r3, #0
 800515c:	d07e      	beq.n	800525c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
        }
        return;
 8005166:	e079      	b.n	800525c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01d      	beq.n	80051b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10d      	bne.n	80051a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005188:	2b00      	cmp	r3, #0
 800518a:	d031      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	4798      	blx	r3
 8005194:	e02c      	b.n	80051f0 <HAL_DMA_IRQHandler+0x2a0>
 8005196:	bf00      	nop
 8005198:	20000178 	.word	0x20000178
 800519c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d023      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
 80051b0:	e01e      	b.n	80051f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0210 	bic.w	r2, r2, #16
 80051ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d032      	beq.n	800525e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d022      	beq.n	800524a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2205      	movs	r2, #5
 8005208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0201 	bic.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	3301      	adds	r3, #1
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	429a      	cmp	r2, r3
 8005226:	d307      	bcc.n	8005238 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f2      	bne.n	800521c <HAL_DMA_IRQHandler+0x2cc>
 8005236:	e000      	b.n	800523a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005238:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
 800525a:	e000      	b.n	800525e <HAL_DMA_IRQHandler+0x30e>
        return;
 800525c:	bf00      	nop
    }
  }
}
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005280:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b40      	cmp	r3, #64	@ 0x40
 8005290:	d108      	bne.n	80052a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052a2:	e007      	b.n	80052b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	60da      	str	r2, [r3, #12]
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	3b10      	subs	r3, #16
 80052d0:	4a14      	ldr	r2, [pc, #80]	@ (8005324 <DMA_CalcBaseAndBitshift+0x64>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	091b      	lsrs	r3, r3, #4
 80052d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052da:	4a13      	ldr	r2, [pc, #76]	@ (8005328 <DMA_CalcBaseAndBitshift+0x68>)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d909      	bls.n	8005302 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8005300:	e007      	b.n	8005312 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	aaaaaaab 	.word	0xaaaaaaab
 8005328:	0801f1c8 	.word	0x0801f1c8

0800532c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d11f      	bne.n	8005386 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d856      	bhi.n	80053fa <DMA_CheckFifoParam+0xce>
 800534c:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <DMA_CheckFifoParam+0x28>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005365 	.word	0x08005365
 8005358:	08005377 	.word	0x08005377
 800535c:	08005365 	.word	0x08005365
 8005360:	080053fb 	.word	0x080053fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d046      	beq.n	80053fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005374:	e043      	b.n	80053fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800537e:	d140      	bne.n	8005402 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005384:	e03d      	b.n	8005402 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	d121      	bne.n	80053d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b03      	cmp	r3, #3
 8005394:	d837      	bhi.n	8005406 <DMA_CheckFifoParam+0xda>
 8005396:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <DMA_CheckFifoParam+0x70>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053b3 	.word	0x080053b3
 80053a4:	080053ad 	.word	0x080053ad
 80053a8:	080053c5 	.word	0x080053c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
      break;
 80053b0:	e030      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d025      	beq.n	800540a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c2:	e022      	b.n	800540a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053cc:	d11f      	bne.n	800540e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053d2:	e01c      	b.n	800540e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d903      	bls.n	80053e2 <DMA_CheckFifoParam+0xb6>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d003      	beq.n	80053e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053e0:	e018      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
      break;
 80053e6:	e015      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
      break;
 80053f8:	e00b      	b.n	8005412 <DMA_CheckFifoParam+0xe6>
      break;
 80053fa:	bf00      	nop
 80053fc:	e00a      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
      break;
 80053fe:	bf00      	nop
 8005400:	e008      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
      break;
 8005402:	bf00      	nop
 8005404:	e006      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
      break;
 8005406:	bf00      	nop
 8005408:	e004      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
      break;
 800540a:	bf00      	nop
 800540c:	e002      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
      break;   
 800540e:	bf00      	nop
 8005410:	e000      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
      break;
 8005412:	bf00      	nop
    }
  } 
  
  return status; 
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop

08005424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	@ 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e165      	b.n	800570c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005440:	2201      	movs	r2, #1
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4013      	ands	r3, r2
 8005452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	429a      	cmp	r2, r3
 800545a:	f040 8154 	bne.w	8005706 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d005      	beq.n	8005476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005472:	2b02      	cmp	r3, #2
 8005474:	d130      	bne.n	80054d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	2203      	movs	r2, #3
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4013      	ands	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4313      	orrs	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054ac:	2201      	movs	r2, #1
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 0201 	and.w	r2, r3, #1
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d017      	beq.n	8005514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	2203      	movs	r2, #3
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	43db      	mvns	r3, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4013      	ands	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d123      	bne.n	8005568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	08da      	lsrs	r2, r3, #3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3208      	adds	r2, #8
 8005528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	220f      	movs	r2, #15
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	4013      	ands	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	08da      	lsrs	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3208      	adds	r2, #8
 8005562:	69b9      	ldr	r1, [r7, #24]
 8005564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	2203      	movs	r2, #3
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 0203 	and.w	r2, r3, #3
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80ae 	beq.w	8005706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005724 <HAL_GPIO_Init+0x300>)
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	4a5c      	ldr	r2, [pc, #368]	@ (8005724 <HAL_GPIO_Init+0x300>)
 80055b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80055ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005724 <HAL_GPIO_Init+0x300>)
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055c6:	4a58      	ldr	r2, [pc, #352]	@ (8005728 <HAL_GPIO_Init+0x304>)
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	089b      	lsrs	r3, r3, #2
 80055cc:	3302      	adds	r3, #2
 80055ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	220f      	movs	r2, #15
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4013      	ands	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a4f      	ldr	r2, [pc, #316]	@ (800572c <HAL_GPIO_Init+0x308>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d025      	beq.n	800563e <HAL_GPIO_Init+0x21a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a4e      	ldr	r2, [pc, #312]	@ (8005730 <HAL_GPIO_Init+0x30c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01f      	beq.n	800563a <HAL_GPIO_Init+0x216>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a4d      	ldr	r2, [pc, #308]	@ (8005734 <HAL_GPIO_Init+0x310>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d019      	beq.n	8005636 <HAL_GPIO_Init+0x212>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a4c      	ldr	r2, [pc, #304]	@ (8005738 <HAL_GPIO_Init+0x314>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_GPIO_Init+0x20e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a4b      	ldr	r2, [pc, #300]	@ (800573c <HAL_GPIO_Init+0x318>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00d      	beq.n	800562e <HAL_GPIO_Init+0x20a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a4a      	ldr	r2, [pc, #296]	@ (8005740 <HAL_GPIO_Init+0x31c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <HAL_GPIO_Init+0x206>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a49      	ldr	r2, [pc, #292]	@ (8005744 <HAL_GPIO_Init+0x320>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d101      	bne.n	8005626 <HAL_GPIO_Init+0x202>
 8005622:	2306      	movs	r3, #6
 8005624:	e00c      	b.n	8005640 <HAL_GPIO_Init+0x21c>
 8005626:	2307      	movs	r3, #7
 8005628:	e00a      	b.n	8005640 <HAL_GPIO_Init+0x21c>
 800562a:	2305      	movs	r3, #5
 800562c:	e008      	b.n	8005640 <HAL_GPIO_Init+0x21c>
 800562e:	2304      	movs	r3, #4
 8005630:	e006      	b.n	8005640 <HAL_GPIO_Init+0x21c>
 8005632:	2303      	movs	r3, #3
 8005634:	e004      	b.n	8005640 <HAL_GPIO_Init+0x21c>
 8005636:	2302      	movs	r3, #2
 8005638:	e002      	b.n	8005640 <HAL_GPIO_Init+0x21c>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_GPIO_Init+0x21c>
 800563e:	2300      	movs	r3, #0
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	f002 0203 	and.w	r2, r2, #3
 8005646:	0092      	lsls	r2, r2, #2
 8005648:	4093      	lsls	r3, r2
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005650:	4935      	ldr	r1, [pc, #212]	@ (8005728 <HAL_GPIO_Init+0x304>)
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	3302      	adds	r3, #2
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800565e:	4b3a      	ldr	r3, [pc, #232]	@ (8005748 <HAL_GPIO_Init+0x324>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	43db      	mvns	r3, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4013      	ands	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005682:	4a31      	ldr	r2, [pc, #196]	@ (8005748 <HAL_GPIO_Init+0x324>)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005688:	4b2f      	ldr	r3, [pc, #188]	@ (8005748 <HAL_GPIO_Init+0x324>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056ac:	4a26      	ldr	r2, [pc, #152]	@ (8005748 <HAL_GPIO_Init+0x324>)
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056b2:	4b25      	ldr	r3, [pc, #148]	@ (8005748 <HAL_GPIO_Init+0x324>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	43db      	mvns	r3, r3
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	4013      	ands	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005748 <HAL_GPIO_Init+0x324>)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005748 <HAL_GPIO_Init+0x324>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005700:	4a11      	ldr	r2, [pc, #68]	@ (8005748 <HAL_GPIO_Init+0x324>)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3301      	adds	r3, #1
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b0f      	cmp	r3, #15
 8005710:	f67f ae96 	bls.w	8005440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	3724      	adds	r7, #36	@ 0x24
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800
 8005728:	40013800 	.word	0x40013800
 800572c:	40020000 	.word	0x40020000
 8005730:	40020400 	.word	0x40020400
 8005734:	40020800 	.word	0x40020800
 8005738:	40020c00 	.word	0x40020c00
 800573c:	40021000 	.word	0x40021000
 8005740:	40021400 	.word	0x40021400
 8005744:	40021800 	.word	0x40021800
 8005748:	40013c00 	.word	0x40013c00

0800574c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
 8005758:	4613      	mov	r3, r2
 800575a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800575c:	787b      	ldrb	r3, [r7, #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005768:	e003      	b.n	8005772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800576a:	887b      	ldrh	r3, [r7, #2]
 800576c:	041a      	lsls	r2, r3, #16
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	619a      	str	r2, [r3, #24]
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005790:	887a      	ldrh	r2, [r7, #2]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4013      	ands	r3, r2
 8005796:	041a      	lsls	r2, r3, #16
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	43d9      	mvns	r1, r3
 800579c:	887b      	ldrh	r3, [r7, #2]
 800579e:	400b      	ands	r3, r1
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	619a      	str	r2, [r3, #24]
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0cc      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057c8:	4b68      	ldr	r3, [pc, #416]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d90c      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d6:	4b65      	ldr	r3, [pc, #404]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	4b63      	ldr	r3, [pc, #396]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0b8      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d020      	beq.n	800583e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005808:	4b59      	ldr	r3, [pc, #356]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4a58      	ldr	r2, [pc, #352]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005812:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005820:	4b53      	ldr	r3, [pc, #332]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	4a52      	ldr	r2, [pc, #328]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800582a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800582c:	4b50      	ldr	r3, [pc, #320]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	494d      	ldr	r1, [pc, #308]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	4313      	orrs	r3, r2
 800583c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d044      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b47      	ldr	r3, [pc, #284]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d119      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e07f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d003      	beq.n	8005872 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586e:	2b03      	cmp	r3, #3
 8005870:	d107      	bne.n	8005882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005872:	4b3f      	ldr	r3, [pc, #252]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e06f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005882:	4b3b      	ldr	r3, [pc, #236]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e067      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005892:	4b37      	ldr	r3, [pc, #220]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 0203 	bic.w	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4934      	ldr	r1, [pc, #208]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a4:	f7ff f8aa 	bl	80049fc <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ac:	f7ff f8a6 	bl	80049fc <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e04f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 020c 	and.w	r2, r3, #12
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d1eb      	bne.n	80058ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058d4:	4b25      	ldr	r3, [pc, #148]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d20c      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e2:	4b22      	ldr	r3, [pc, #136]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b20      	ldr	r3, [pc, #128]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e032      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005908:	4b19      	ldr	r3, [pc, #100]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4916      	ldr	r1, [pc, #88]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005926:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	490e      	ldr	r1, [pc, #56]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800593a:	f000 f887 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 800593e:	4602      	mov	r2, r0
 8005940:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	490a      	ldr	r1, [pc, #40]	@ (8005974 <HAL_RCC_ClockConfig+0x1c0>)
 800594c:	5ccb      	ldrb	r3, [r1, r3]
 800594e:	fa22 f303 	lsr.w	r3, r2, r3
 8005952:	4a09      	ldr	r2, [pc, #36]	@ (8005978 <HAL_RCC_ClockConfig+0x1c4>)
 8005954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005956:	4b09      	ldr	r3, [pc, #36]	@ (800597c <HAL_RCC_ClockConfig+0x1c8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fd8a 	bl	8004474 <HAL_InitTick>

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40023c00 	.word	0x40023c00
 8005970:	40023800 	.word	0x40023800
 8005974:	0801f1b0 	.word	0x0801f1b0
 8005978:	20000178 	.word	0x20000178
 800597c:	2000017c 	.word	0x2000017c

08005980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005984:	4b03      	ldr	r3, [pc, #12]	@ (8005994 <HAL_RCC_GetHCLKFreq+0x14>)
 8005986:	681b      	ldr	r3, [r3, #0]
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000178 	.word	0x20000178

08005998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800599c:	f7ff fff0 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	0a9b      	lsrs	r3, r3, #10
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	4903      	ldr	r1, [pc, #12]	@ (80059bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40023800 	.word	0x40023800
 80059bc:	0801f1c0 	.word	0x0801f1c0

080059c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059c4:	f7ff ffdc 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	0b5b      	lsrs	r3, r3, #13
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4903      	ldr	r1, [pc, #12]	@ (80059e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40023800 	.word	0x40023800
 80059e4:	0801f1c0 	.word	0x0801f1c0

080059e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	220f      	movs	r2, #15
 80059f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059f8:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <HAL_RCC_GetClockConfig+0x5c>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0203 	and.w	r2, r3, #3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a04:	4b0f      	ldr	r3, [pc, #60]	@ (8005a44 <HAL_RCC_GetClockConfig+0x5c>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a10:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <HAL_RCC_GetClockConfig+0x5c>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a1c:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <HAL_RCC_GetClockConfig+0x5c>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	08db      	lsrs	r3, r3, #3
 8005a22:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a2a:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <HAL_RCC_GetClockConfig+0x60>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	601a      	str	r2, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40023c00 	.word	0x40023c00

08005a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a50:	b0ae      	sub	sp, #184	@ 0xb8
 8005a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a72:	4bcb      	ldr	r3, [pc, #812]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b0c      	cmp	r3, #12
 8005a7c:	f200 8206 	bhi.w	8005e8c <HAL_RCC_GetSysClockFreq+0x440>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005e8d 	.word	0x08005e8d
 8005a90:	08005e8d 	.word	0x08005e8d
 8005a94:	08005e8d 	.word	0x08005e8d
 8005a98:	08005ac5 	.word	0x08005ac5
 8005a9c:	08005e8d 	.word	0x08005e8d
 8005aa0:	08005e8d 	.word	0x08005e8d
 8005aa4:	08005e8d 	.word	0x08005e8d
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005e8d 	.word	0x08005e8d
 8005ab0:	08005e8d 	.word	0x08005e8d
 8005ab4:	08005e8d 	.word	0x08005e8d
 8005ab8:	08005cbd 	.word	0x08005cbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005abc:	4bb9      	ldr	r3, [pc, #740]	@ (8005da4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005ac2:	e1e7      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ac4:	4bb8      	ldr	r3, [pc, #736]	@ (8005da8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005aca:	e1e3      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005acc:	4bb4      	ldr	r3, [pc, #720]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ad8:	4bb1      	ldr	r3, [pc, #708]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d071      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae4:	4bae      	ldr	r3, [pc, #696]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	099b      	lsrs	r3, r3, #6
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005af0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b00:	2300      	movs	r3, #0
 8005b02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	f04f 0000 	mov.w	r0, #0
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	0159      	lsls	r1, r3, #5
 8005b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b1c:	0150      	lsls	r0, r2, #5
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4621      	mov	r1, r4
 8005b24:	1a51      	subs	r1, r2, r1
 8005b26:	6439      	str	r1, [r7, #64]	@ 0x40
 8005b28:	4629      	mov	r1, r5
 8005b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	018b      	lsls	r3, r1, #6
 8005b40:	4641      	mov	r1, r8
 8005b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b46:	4641      	mov	r1, r8
 8005b48:	018a      	lsls	r2, r1, #6
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	1a51      	subs	r1, r2, r1
 8005b4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b50:	4649      	mov	r1, r9
 8005b52:	eb63 0301 	sbc.w	r3, r3, r1
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005b64:	4649      	mov	r1, r9
 8005b66:	00cb      	lsls	r3, r1, #3
 8005b68:	4641      	mov	r1, r8
 8005b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6e:	4641      	mov	r1, r8
 8005b70:	00ca      	lsls	r2, r1, #3
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	4622      	mov	r2, r4
 8005b7a:	189b      	adds	r3, r3, r2
 8005b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b7e:	462b      	mov	r3, r5
 8005b80:	460a      	mov	r2, r1
 8005b82:	eb42 0303 	adc.w	r3, r2, r3
 8005b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b94:	4629      	mov	r1, r5
 8005b96:	024b      	lsls	r3, r1, #9
 8005b98:	4621      	mov	r1, r4
 8005b9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	024a      	lsls	r2, r1, #9
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005bb8:	f7fb f9f4 	bl	8000fa4 <__aeabi_uldivmod>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bc6:	e067      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc8:	4b75      	ldr	r3, [pc, #468]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	099b      	lsrs	r3, r3, #6
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bd4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005be2:	2300      	movs	r3, #0
 8005be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005be6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005bea:	4622      	mov	r2, r4
 8005bec:	462b      	mov	r3, r5
 8005bee:	f04f 0000 	mov.w	r0, #0
 8005bf2:	f04f 0100 	mov.w	r1, #0
 8005bf6:	0159      	lsls	r1, r3, #5
 8005bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bfc:	0150      	lsls	r0, r2, #5
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4621      	mov	r1, r4
 8005c04:	1a51      	subs	r1, r2, r1
 8005c06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005c08:	4629      	mov	r1, r5
 8005c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	018b      	lsls	r3, r1, #6
 8005c20:	4641      	mov	r1, r8
 8005c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c26:	4641      	mov	r1, r8
 8005c28:	018a      	lsls	r2, r1, #6
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c30:	4649      	mov	r1, r9
 8005c32:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c4a:	4692      	mov	sl, r2
 8005c4c:	469b      	mov	fp, r3
 8005c4e:	4623      	mov	r3, r4
 8005c50:	eb1a 0303 	adds.w	r3, sl, r3
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	462b      	mov	r3, r5
 8005c58:	eb4b 0303 	adc.w	r3, fp, r3
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	028b      	lsls	r3, r1, #10
 8005c6e:	4621      	mov	r1, r4
 8005c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c74:	4621      	mov	r1, r4
 8005c76:	028a      	lsls	r2, r1, #10
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c80:	2200      	movs	r2, #0
 8005c82:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c84:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005c8a:	f7fb f98b 	bl	8000fa4 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4613      	mov	r3, r2
 8005c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c98:	4b41      	ldr	r3, [pc, #260]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	0c1b      	lsrs	r3, r3, #16
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005cba:	e0eb      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cbc:	4b38      	ldr	r3, [pc, #224]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cc8:	4b35      	ldr	r3, [pc, #212]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d06b      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cd4:	4b32      	ldr	r3, [pc, #200]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	099b      	lsrs	r3, r3, #6
 8005cda:	2200      	movs	r2, #0
 8005cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ce0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce8:	2300      	movs	r3, #0
 8005cea:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	462b      	mov	r3, r5
 8005cf4:	f04f 0000 	mov.w	r0, #0
 8005cf8:	f04f 0100 	mov.w	r1, #0
 8005cfc:	0159      	lsls	r1, r3, #5
 8005cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d02:	0150      	lsls	r0, r2, #5
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4621      	mov	r1, r4
 8005d0a:	1a51      	subs	r1, r2, r1
 8005d0c:	61b9      	str	r1, [r7, #24]
 8005d0e:	4629      	mov	r1, r5
 8005d10:	eb63 0301 	sbc.w	r3, r3, r1
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005d22:	4659      	mov	r1, fp
 8005d24:	018b      	lsls	r3, r1, #6
 8005d26:	4651      	mov	r1, sl
 8005d28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	018a      	lsls	r2, r1, #6
 8005d30:	4651      	mov	r1, sl
 8005d32:	ebb2 0801 	subs.w	r8, r2, r1
 8005d36:	4659      	mov	r1, fp
 8005d38:	eb63 0901 	sbc.w	r9, r3, r1
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d50:	4690      	mov	r8, r2
 8005d52:	4699      	mov	r9, r3
 8005d54:	4623      	mov	r3, r4
 8005d56:	eb18 0303 	adds.w	r3, r8, r3
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	eb49 0303 	adc.w	r3, r9, r3
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005d70:	4629      	mov	r1, r5
 8005d72:	024b      	lsls	r3, r1, #9
 8005d74:	4621      	mov	r1, r4
 8005d76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	024a      	lsls	r2, r1, #9
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d86:	2200      	movs	r2, #0
 8005d88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d8a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005d8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d90:	f7fb f908 	bl	8000fa4 <__aeabi_uldivmod>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4613      	mov	r3, r2
 8005d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d9e:	e065      	b.n	8005e6c <HAL_RCC_GetSysClockFreq+0x420>
 8005da0:	40023800 	.word	0x40023800
 8005da4:	00f42400 	.word	0x00f42400
 8005da8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dac:	4b3d      	ldr	r3, [pc, #244]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	099b      	lsrs	r3, r3, #6
 8005db2:	2200      	movs	r2, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	4611      	mov	r1, r2
 8005db8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dc2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005dc6:	4642      	mov	r2, r8
 8005dc8:	464b      	mov	r3, r9
 8005dca:	f04f 0000 	mov.w	r0, #0
 8005dce:	f04f 0100 	mov.w	r1, #0
 8005dd2:	0159      	lsls	r1, r3, #5
 8005dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dd8:	0150      	lsls	r0, r2, #5
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4641      	mov	r1, r8
 8005de0:	1a51      	subs	r1, r2, r1
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	4649      	mov	r1, r9
 8005de6:	eb63 0301 	sbc.w	r3, r3, r1
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005df8:	4659      	mov	r1, fp
 8005dfa:	018b      	lsls	r3, r1, #6
 8005dfc:	4651      	mov	r1, sl
 8005dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e02:	4651      	mov	r1, sl
 8005e04:	018a      	lsls	r2, r1, #6
 8005e06:	4651      	mov	r1, sl
 8005e08:	1a54      	subs	r4, r2, r1
 8005e0a:	4659      	mov	r1, fp
 8005e0c:	eb63 0501 	sbc.w	r5, r3, r1
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	00eb      	lsls	r3, r5, #3
 8005e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e1e:	00e2      	lsls	r2, r4, #3
 8005e20:	4614      	mov	r4, r2
 8005e22:	461d      	mov	r5, r3
 8005e24:	4643      	mov	r3, r8
 8005e26:	18e3      	adds	r3, r4, r3
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	eb45 0303 	adc.w	r3, r5, r3
 8005e30:	607b      	str	r3, [r7, #4]
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e3e:	4629      	mov	r1, r5
 8005e40:	028b      	lsls	r3, r1, #10
 8005e42:	4621      	mov	r1, r4
 8005e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e48:	4621      	mov	r1, r4
 8005e4a:	028a      	lsls	r2, r1, #10
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e54:	2200      	movs	r2, #0
 8005e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e58:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005e5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e5e:	f7fb f8a1 	bl	8000fa4 <__aeabi_uldivmod>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4613      	mov	r3, r2
 8005e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	0f1b      	lsrs	r3, r3, #28
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e8a:	e003      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	37b8      	adds	r7, #184	@ 0xb8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	00f42400 	.word	0x00f42400

08005eac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e28d      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8083 	beq.w	8005fd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ecc:	4b94      	ldr	r3, [pc, #592]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d019      	beq.n	8005f0c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005ed8:	4b91      	ldr	r3, [pc, #580]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 030c 	and.w	r3, r3, #12
        || \
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ef0:	d00c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ef2:	4b8b      	ldr	r3, [pc, #556]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d112      	bne.n	8005f24 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005efe:	4b88      	ldr	r3, [pc, #544]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f0a:	d10b      	bne.n	8005f24 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	4b84      	ldr	r3, [pc, #528]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05b      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x124>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d157      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e25a      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2c:	d106      	bne.n	8005f3c <HAL_RCC_OscConfig+0x90>
 8005f2e:	4b7c      	ldr	r3, [pc, #496]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a7b      	ldr	r2, [pc, #492]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e01d      	b.n	8005f78 <HAL_RCC_OscConfig+0xcc>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0xb4>
 8005f46:	4b76      	ldr	r3, [pc, #472]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a75      	ldr	r2, [pc, #468]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	4b73      	ldr	r3, [pc, #460]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a72      	ldr	r2, [pc, #456]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e00b      	b.n	8005f78 <HAL_RCC_OscConfig+0xcc>
 8005f60:	4b6f      	ldr	r3, [pc, #444]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6e      	ldr	r2, [pc, #440]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a6b      	ldr	r2, [pc, #428]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d013      	beq.n	8005fa8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fe fd3c 	bl	80049fc <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fe fd38 	bl	80049fc <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	@ 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e21f      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9a:	4b61      	ldr	r3, [pc, #388]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0f0      	beq.n	8005f88 <HAL_RCC_OscConfig+0xdc>
 8005fa6:	e014      	b.n	8005fd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fe fd28 	bl	80049fc <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb0:	f7fe fd24 	bl	80049fc <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	@ 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e20b      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc2:	4b57      	ldr	r3, [pc, #348]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x104>
 8005fce:	e000      	b.n	8005fd2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d06f      	beq.n	80060be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005fde:	4b50      	ldr	r3, [pc, #320]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d017      	beq.n	800601a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005fea:	4b4d      	ldr	r3, [pc, #308]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
        || \
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d105      	bne.n	8006002 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006002:	4b47      	ldr	r3, [pc, #284]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800600a:	2b0c      	cmp	r3, #12
 800600c:	d11c      	bne.n	8006048 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800600e:	4b44      	ldr	r3, [pc, #272]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d116      	bne.n	8006048 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800601a:	4b41      	ldr	r3, [pc, #260]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_RCC_OscConfig+0x186>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d001      	beq.n	8006032 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e1d3      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006032:	4b3b      	ldr	r3, [pc, #236]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	4937      	ldr	r1, [pc, #220]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8006042:	4313      	orrs	r3, r2
 8006044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006046:	e03a      	b.n	80060be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d020      	beq.n	8006092 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006050:	4b34      	ldr	r3, [pc, #208]	@ (8006124 <HAL_RCC_OscConfig+0x278>)
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006056:	f7fe fcd1 	bl	80049fc <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800605e:	f7fe fccd 	bl	80049fc <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e1b4      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006070:	4b2b      	ldr	r3, [pc, #172]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0f0      	beq.n	800605e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607c:	4b28      	ldr	r3, [pc, #160]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	4925      	ldr	r1, [pc, #148]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 800608c:	4313      	orrs	r3, r2
 800608e:	600b      	str	r3, [r1, #0]
 8006090:	e015      	b.n	80060be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006092:	4b24      	ldr	r3, [pc, #144]	@ (8006124 <HAL_RCC_OscConfig+0x278>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006098:	f7fe fcb0 	bl	80049fc <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a0:	f7fe fcac 	bl	80049fc <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e193      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d036      	beq.n	8006138 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d016      	beq.n	8006100 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d2:	4b15      	ldr	r3, [pc, #84]	@ (8006128 <HAL_RCC_OscConfig+0x27c>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d8:	f7fe fc90 	bl	80049fc <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e0:	f7fe fc8c 	bl	80049fc <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e173      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006120 <HAL_RCC_OscConfig+0x274>)
 80060f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f0      	beq.n	80060e0 <HAL_RCC_OscConfig+0x234>
 80060fe:	e01b      	b.n	8006138 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006100:	4b09      	ldr	r3, [pc, #36]	@ (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006106:	f7fe fc79 	bl	80049fc <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800610c:	e00e      	b.n	800612c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800610e:	f7fe fc75 	bl	80049fc <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d907      	bls.n	800612c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e15c      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
 8006120:	40023800 	.word	0x40023800
 8006124:	42470000 	.word	0x42470000
 8006128:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800612c:	4b8a      	ldr	r3, [pc, #552]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 800612e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1ea      	bne.n	800610e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8097 	beq.w	8006274 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006146:	2300      	movs	r3, #0
 8006148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800614a:	4b83      	ldr	r3, [pc, #524]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]
 800615a:	4b7f      	ldr	r3, [pc, #508]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	4a7e      	ldr	r2, [pc, #504]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 8006160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006164:	6413      	str	r3, [r2, #64]	@ 0x40
 8006166:	4b7c      	ldr	r3, [pc, #496]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800616e:	60bb      	str	r3, [r7, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006176:	4b79      	ldr	r3, [pc, #484]	@ (800635c <HAL_RCC_OscConfig+0x4b0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d118      	bne.n	80061b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006182:	4b76      	ldr	r3, [pc, #472]	@ (800635c <HAL_RCC_OscConfig+0x4b0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a75      	ldr	r2, [pc, #468]	@ (800635c <HAL_RCC_OscConfig+0x4b0>)
 8006188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800618c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618e:	f7fe fc35 	bl	80049fc <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006196:	f7fe fc31 	bl	80049fc <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e118      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a8:	4b6c      	ldr	r3, [pc, #432]	@ (800635c <HAL_RCC_OscConfig+0x4b0>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0f0      	beq.n	8006196 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d106      	bne.n	80061ca <HAL_RCC_OscConfig+0x31e>
 80061bc:	4b66      	ldr	r3, [pc, #408]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c0:	4a65      	ldr	r2, [pc, #404]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061c2:	f043 0301 	orr.w	r3, r3, #1
 80061c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061c8:	e01c      	b.n	8006204 <HAL_RCC_OscConfig+0x358>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d10c      	bne.n	80061ec <HAL_RCC_OscConfig+0x340>
 80061d2:	4b61      	ldr	r3, [pc, #388]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d6:	4a60      	ldr	r2, [pc, #384]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061d8:	f043 0304 	orr.w	r3, r3, #4
 80061dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80061de:	4b5e      	ldr	r3, [pc, #376]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e2:	4a5d      	ldr	r2, [pc, #372]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ea:	e00b      	b.n	8006204 <HAL_RCC_OscConfig+0x358>
 80061ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f0:	4a59      	ldr	r2, [pc, #356]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061f8:	4b57      	ldr	r3, [pc, #348]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fc:	4a56      	ldr	r2, [pc, #344]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80061fe:	f023 0304 	bic.w	r3, r3, #4
 8006202:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d015      	beq.n	8006238 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620c:	f7fe fbf6 	bl	80049fc <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006212:	e00a      	b.n	800622a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006214:	f7fe fbf2 	bl	80049fc <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006222:	4293      	cmp	r3, r2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e0d7      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622a:	4b4b      	ldr	r3, [pc, #300]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0ee      	beq.n	8006214 <HAL_RCC_OscConfig+0x368>
 8006236:	e014      	b.n	8006262 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fe fbe0 	bl	80049fc <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800623e:	e00a      	b.n	8006256 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006240:	f7fe fbdc 	bl	80049fc <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800624e:	4293      	cmp	r3, r2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e0c1      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006256:	4b40      	ldr	r3, [pc, #256]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1ee      	bne.n	8006240 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d105      	bne.n	8006274 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006268:	4b3b      	ldr	r3, [pc, #236]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	4a3a      	ldr	r2, [pc, #232]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 800626e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006272:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 80ad 	beq.w	80063d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800627e:	4b36      	ldr	r3, [pc, #216]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b08      	cmp	r3, #8
 8006288:	d060      	beq.n	800634c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d145      	bne.n	800631e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006292:	4b33      	ldr	r3, [pc, #204]	@ (8006360 <HAL_RCC_OscConfig+0x4b4>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fe fbb0 	bl	80049fc <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fe fbac 	bl	80049fc <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e093      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b2:	4b29      	ldr	r3, [pc, #164]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f0      	bne.n	80062a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69da      	ldr	r2, [r3, #28]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	019b      	lsls	r3, r3, #6
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	3b01      	subs	r3, #1
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e0:	061b      	lsls	r3, r3, #24
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	071b      	lsls	r3, r3, #28
 80062ea:	491b      	ldr	r1, [pc, #108]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006360 <HAL_RCC_OscConfig+0x4b4>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f6:	f7fe fb81 	bl	80049fc <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fe:	f7fe fb7d 	bl	80049fc <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e064      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006310:	4b11      	ldr	r3, [pc, #68]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <HAL_RCC_OscConfig+0x452>
 800631c:	e05c      	b.n	80063d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631e:	4b10      	ldr	r3, [pc, #64]	@ (8006360 <HAL_RCC_OscConfig+0x4b4>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fe fb6a 	bl	80049fc <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632c:	f7fe fb66 	bl	80049fc <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e04d      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	4b06      	ldr	r3, [pc, #24]	@ (8006358 <HAL_RCC_OscConfig+0x4ac>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x480>
 800634a:	e045      	b.n	80063d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d107      	bne.n	8006364 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e040      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
 8006358:	40023800 	.word	0x40023800
 800635c:	40007000 	.word	0x40007000
 8006360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006364:	4b1f      	ldr	r3, [pc, #124]	@ (80063e4 <HAL_RCC_OscConfig+0x538>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d030      	beq.n	80063d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800637c:	429a      	cmp	r2, r3
 800637e:	d129      	bne.n	80063d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638a:	429a      	cmp	r2, r3
 800638c:	d122      	bne.n	80063d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800639a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800639c:	4293      	cmp	r3, r2
 800639e:	d119      	bne.n	80063d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	3b01      	subs	r3, #1
 80063ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d10f      	bne.n	80063d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d107      	bne.n	80063d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d001      	beq.n	80063d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800

080063e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e07b      	b.n	80064f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d108      	bne.n	8006414 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800640a:	d009      	beq.n	8006420 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	61da      	str	r2, [r3, #28]
 8006412:	e005      	b.n	8006420 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fd fc42 	bl	8003cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006456:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a4:	ea42 0103 	orr.w	r1, r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	f003 0104 	and.w	r1, r3, #4
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	f003 0210 	and.w	r2, r3, #16
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b088      	sub	sp, #32
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800650a:	f7fe fa77 	bl	80049fc <HAL_GetTick>
 800650e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d001      	beq.n	8006524 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
 8006522:	e12a      	b.n	800677a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_SPI_Transmit+0x36>
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e122      	b.n	800677a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_SPI_Transmit+0x48>
 800653e:	2302      	movs	r3, #2
 8006540:	e11b      	b.n	800677a <HAL_SPI_Transmit+0x280>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2203      	movs	r2, #3
 800654e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006590:	d10f      	bne.n	80065b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065bc:	2b40      	cmp	r3, #64	@ 0x40
 80065be:	d007      	beq.n	80065d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065d8:	d152      	bne.n	8006680 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_SPI_Transmit+0xee>
 80065e2:	8b7b      	ldrh	r3, [r7, #26]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d145      	bne.n	8006674 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ec:	881a      	ldrh	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	1c9a      	adds	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800660c:	e032      	b.n	8006674 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b02      	cmp	r3, #2
 800661a:	d112      	bne.n	8006642 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006620:	881a      	ldrh	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662c:	1c9a      	adds	r2, r3, #2
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006640:	e018      	b.n	8006674 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006642:	f7fe f9db 	bl	80049fc <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d803      	bhi.n	800665a <HAL_SPI_Transmit+0x160>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006658:	d102      	bne.n	8006660 <HAL_SPI_Transmit+0x166>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e082      	b.n	800677a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1c7      	bne.n	800660e <HAL_SPI_Transmit+0x114>
 800667e:	e053      	b.n	8006728 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_SPI_Transmit+0x194>
 8006688:	8b7b      	ldrh	r3, [r7, #26]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d147      	bne.n	800671e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	330c      	adds	r3, #12
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066b4:	e033      	b.n	800671e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d113      	bne.n	80066ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	7812      	ldrb	r2, [r2, #0]
 80066d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066ea:	e018      	b.n	800671e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ec:	f7fe f986 	bl	80049fc <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d803      	bhi.n	8006704 <HAL_SPI_Transmit+0x20a>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006702:	d102      	bne.n	800670a <HAL_SPI_Transmit+0x210>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e02d      	b.n	800677a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1c6      	bne.n	80066b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fbd9 	bl	8006ee4 <SPI_EndRxTxTransaction>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006778:	2300      	movs	r3, #0
  }
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b088      	sub	sp, #32
 8006786:	af02      	add	r7, sp, #8
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b01      	cmp	r3, #1
 800679c:	d001      	beq.n	80067a2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800679e:	2302      	movs	r3, #2
 80067a0:	e104      	b.n	80069ac <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067aa:	d112      	bne.n	80067d2 <HAL_SPI_Receive+0x50>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10e      	bne.n	80067d2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2204      	movs	r2, #4
 80067b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	4613      	mov	r3, r2
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f8f3 	bl	80069b4 <HAL_SPI_TransmitReceive>
 80067ce:	4603      	mov	r3, r0
 80067d0:	e0ec      	b.n	80069ac <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d2:	f7fe f913 	bl	80049fc <HAL_GetTick>
 80067d6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_Receive+0x62>
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0e1      	b.n	80069ac <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_SPI_Receive+0x74>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e0da      	b.n	80069ac <HAL_SPI_Receive+0x22a>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2204      	movs	r2, #4
 8006802:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	88fa      	ldrh	r2, [r7, #6]
 8006816:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	88fa      	ldrh	r2, [r7, #6]
 800681c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006844:	d10f      	bne.n	8006866 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006854:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006864:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006870:	2b40      	cmp	r3, #64	@ 0x40
 8006872:	d007      	beq.n	8006884 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006882:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d170      	bne.n	800696e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800688c:	e035      	b.n	80068fa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b01      	cmp	r3, #1
 800689a:	d115      	bne.n	80068c8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f103 020c 	add.w	r2, r3, #12
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a8:	7812      	ldrb	r2, [r2, #0]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068c6:	e018      	b.n	80068fa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068c8:	f7fe f898 	bl	80049fc <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d803      	bhi.n	80068e0 <HAL_SPI_Receive+0x15e>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068de:	d102      	bne.n	80068e6 <HAL_SPI_Receive+0x164>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e058      	b.n	80069ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1c4      	bne.n	800688e <HAL_SPI_Receive+0x10c>
 8006904:	e038      	b.n	8006978 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b01      	cmp	r3, #1
 8006912:	d113      	bne.n	800693c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691e:	b292      	uxth	r2, r2
 8006920:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006926:	1c9a      	adds	r2, r3, #2
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800693a:	e018      	b.n	800696e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800693c:	f7fe f85e 	bl	80049fc <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d803      	bhi.n	8006954 <HAL_SPI_Receive+0x1d2>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006952:	d102      	bne.n	800695a <HAL_SPI_Receive+0x1d8>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e01e      	b.n	80069ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1c6      	bne.n	8006906 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fa4b 	bl	8006e18 <SPI_EndRxTransaction>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80069aa:	2300      	movs	r3, #0
  }
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	@ 0x28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069c2:	2301      	movs	r3, #1
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c6:	f7fe f819 	bl	80049fc <HAL_GetTick>
 80069ca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069d2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069da:	887b      	ldrh	r3, [r7, #2]
 80069dc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069de:	7ffb      	ldrb	r3, [r7, #31]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d00c      	beq.n	80069fe <HAL_SPI_TransmitReceive+0x4a>
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069ea:	d106      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x46>
 80069f4:	7ffb      	ldrb	r3, [r7, #31]
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d001      	beq.n	80069fe <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80069fa:	2302      	movs	r3, #2
 80069fc:	e17f      	b.n	8006cfe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x5c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x5c>
 8006a0a:	887b      	ldrh	r3, [r7, #2]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e174      	b.n	8006cfe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_SPI_TransmitReceive+0x6e>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e16d      	b.n	8006cfe <HAL_SPI_TransmitReceive+0x34a>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d003      	beq.n	8006a3e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2205      	movs	r2, #5
 8006a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	887a      	ldrh	r2, [r7, #2]
 8006a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	887a      	ldrh	r2, [r7, #2]
 8006a54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	887a      	ldrh	r2, [r7, #2]
 8006a60:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	887a      	ldrh	r2, [r7, #2]
 8006a66:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d007      	beq.n	8006a92 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a9a:	d17e      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0xf6>
 8006aa4:	8afb      	ldrh	r3, [r7, #22]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d16c      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aae:	881a      	ldrh	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aba:	1c9a      	adds	r2, r3, #2
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ace:	e059      	b.n	8006b84 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d11b      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x162>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d016      	beq.n	8006b16 <HAL_SPI_TransmitReceive+0x162>
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d113      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af2:	881a      	ldrh	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afe:	1c9a      	adds	r2, r3, #2
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d119      	bne.n	8006b58 <HAL_SPI_TransmitReceive+0x1a4>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d014      	beq.n	8006b58 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b38:	b292      	uxth	r2, r2
 8006b3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b40:	1c9a      	adds	r2, r3, #2
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b54:	2301      	movs	r3, #1
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b58:	f7fd ff50 	bl	80049fc <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d80d      	bhi.n	8006b84 <HAL_SPI_TransmitReceive+0x1d0>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b6e:	d009      	beq.n	8006b84 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e0bc      	b.n	8006cfe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1a0      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x11c>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d19b      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x11c>
 8006b98:	e082      	b.n	8006ca0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SPI_TransmitReceive+0x1f4>
 8006ba2:	8afb      	ldrh	r3, [r7, #22]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d171      	bne.n	8006c8c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	7812      	ldrb	r2, [r2, #0]
 8006bb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bce:	e05d      	b.n	8006c8c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d11c      	bne.n	8006c18 <HAL_SPI_TransmitReceive+0x264>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d017      	beq.n	8006c18 <HAL_SPI_TransmitReceive+0x264>
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d114      	bne.n	8006c18 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	330c      	adds	r3, #12
 8006bf8:	7812      	ldrb	r2, [r2, #0]
 8006bfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d119      	bne.n	8006c5a <HAL_SPI_TransmitReceive+0x2a6>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d014      	beq.n	8006c5a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c56:	2301      	movs	r3, #1
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c5a:	f7fd fecf 	bl	80049fc <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d803      	bhi.n	8006c72 <HAL_SPI_TransmitReceive+0x2be>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c70:	d102      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x2c4>
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d109      	bne.n	8006c8c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e038      	b.n	8006cfe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d19c      	bne.n	8006bd0 <HAL_SPI_TransmitReceive+0x21c>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d197      	bne.n	8006bd0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ca0:	6a3a      	ldr	r2, [r7, #32]
 8006ca2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f91d 	bl	8006ee4 <SPI_EndRxTxTransaction>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e01d      	b.n	8006cfe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	613b      	str	r3, [r7, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
  }
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3728      	adds	r7, #40	@ 0x28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d18:	f7fd fe70 	bl	80049fc <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	1a9b      	subs	r3, r3, r2
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d28:	f7fd fe68 	bl	80049fc <HAL_GetTick>
 8006d2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d2e:	4b39      	ldr	r3, [pc, #228]	@ (8006e14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	015b      	lsls	r3, r3, #5
 8006d34:	0d1b      	lsrs	r3, r3, #20
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d3e:	e054      	b.n	8006dea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d46:	d050      	beq.n	8006dea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d48:	f7fd fe58 	bl	80049fc <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d902      	bls.n	8006d5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d13d      	bne.n	8006dda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d76:	d111      	bne.n	8006d9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d80:	d004      	beq.n	8006d8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d8a:	d107      	bne.n	8006d9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006da4:	d10f      	bne.n	8006dc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e017      	b.n	8006e0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4013      	ands	r3, r2
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d19b      	bne.n	8006d40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000178 	.word	0x20000178

08006e18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e2c:	d111      	bne.n	8006e52 <SPI_EndRxTransaction+0x3a>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e36:	d004      	beq.n	8006e42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e40:	d107      	bne.n	8006e52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e50:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e5a:	d12a      	bne.n	8006eb2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e64:	d012      	beq.n	8006e8c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2180      	movs	r1, #128	@ 0x80
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f7ff ff49 	bl	8006d08 <SPI_WaitFlagStateUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d02d      	beq.n	8006ed8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e80:	f043 0220 	orr.w	r2, r3, #32
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e026      	b.n	8006eda <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	2101      	movs	r1, #1
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff ff36 	bl	8006d08 <SPI_WaitFlagStateUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01a      	beq.n	8006ed8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea6:	f043 0220 	orr.w	r2, r3, #32
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e013      	b.n	8006eda <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2101      	movs	r1, #1
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff ff23 	bl	8006d08 <SPI_WaitFlagStateUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ecc:	f043 0220 	orr.w	r2, r3, #32
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e000      	b.n	8006eda <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	2102      	movs	r1, #2
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7ff ff04 	bl	8006d08 <SPI_WaitFlagStateUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0a:	f043 0220 	orr.w	r2, r3, #32
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e032      	b.n	8006f7c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f16:	4b1b      	ldr	r3, [pc, #108]	@ (8006f84 <SPI_EndRxTxTransaction+0xa0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f88 <SPI_EndRxTxTransaction+0xa4>)
 8006f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f20:	0d5b      	lsrs	r3, r3, #21
 8006f22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f34:	d112      	bne.n	8006f5c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2180      	movs	r1, #128	@ 0x80
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7ff fee1 	bl	8006d08 <SPI_WaitFlagStateUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d016      	beq.n	8006f7a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f50:	f043 0220 	orr.w	r2, r3, #32
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e00f      	b.n	8006f7c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f72:	2b80      	cmp	r3, #128	@ 0x80
 8006f74:	d0f2      	beq.n	8006f5c <SPI_EndRxTxTransaction+0x78>
 8006f76:	e000      	b.n	8006f7a <SPI_EndRxTxTransaction+0x96>
        break;
 8006f78:	bf00      	nop
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20000178 	.word	0x20000178
 8006f88:	165e9f81 	.word	0x165e9f81

08006f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e041      	b.n	8007022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc ffd6 	bl	8003f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f000 fd96 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	d001      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e04e      	b.n	80070e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a23      	ldr	r2, [pc, #140]	@ (80070f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d022      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706e:	d01d      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1f      	ldr	r2, [pc, #124]	@ (80070f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d018      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1e      	ldr	r2, [pc, #120]	@ (80070f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1c      	ldr	r2, [pc, #112]	@ (80070fc <HAL_TIM_Base_Start_IT+0xd0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00e      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1b      	ldr	r2, [pc, #108]	@ (8007100 <HAL_TIM_Base_Start_IT+0xd4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d009      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a19      	ldr	r2, [pc, #100]	@ (8007104 <HAL_TIM_Base_Start_IT+0xd8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a18      	ldr	r2, [pc, #96]	@ (8007108 <HAL_TIM_Base_Start_IT+0xdc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d111      	bne.n	80070d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d010      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0201 	orr.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ce:	e007      	b.n	80070e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40010000 	.word	0x40010000
 80070f4:	40000400 	.word	0x40000400
 80070f8:	40000800 	.word	0x40000800
 80070fc:	40000c00 	.word	0x40000c00
 8007100:	40010400 	.word	0x40010400
 8007104:	40014000 	.word	0x40014000
 8007108:	40001800 	.word	0x40001800

0800710c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e041      	b.n	80071a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f839 	bl	80071aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3304      	adds	r3, #4
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f000 fcd6 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <HAL_TIM_PWM_Start+0x24>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	bf14      	ite	ne
 80071dc:	2301      	movne	r3, #1
 80071de:	2300      	moveq	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	e022      	b.n	800722a <HAL_TIM_PWM_Start+0x6a>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d109      	bne.n	80071fe <HAL_TIM_PWM_Start+0x3e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	e015      	b.n	800722a <HAL_TIM_PWM_Start+0x6a>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d109      	bne.n	8007218 <HAL_TIM_PWM_Start+0x58>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	e008      	b.n	800722a <HAL_TIM_PWM_Start+0x6a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e07c      	b.n	800732c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <HAL_TIM_PWM_Start+0x82>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007240:	e013      	b.n	800726a <HAL_TIM_PWM_Start+0xaa>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d104      	bne.n	8007252 <HAL_TIM_PWM_Start+0x92>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007250:	e00b      	b.n	800726a <HAL_TIM_PWM_Start+0xaa>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b08      	cmp	r3, #8
 8007256:	d104      	bne.n	8007262 <HAL_TIM_PWM_Start+0xa2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007260:	e003      	b.n	800726a <HAL_TIM_PWM_Start+0xaa>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2201      	movs	r2, #1
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 ff38 	bl	80080e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a2d      	ldr	r2, [pc, #180]	@ (8007334 <HAL_TIM_PWM_Start+0x174>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <HAL_TIM_PWM_Start+0xcc>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a2c      	ldr	r2, [pc, #176]	@ (8007338 <HAL_TIM_PWM_Start+0x178>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d101      	bne.n	8007290 <HAL_TIM_PWM_Start+0xd0>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <HAL_TIM_PWM_Start+0xd2>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a22      	ldr	r2, [pc, #136]	@ (8007334 <HAL_TIM_PWM_Start+0x174>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d022      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x136>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b8:	d01d      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x136>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1f      	ldr	r2, [pc, #124]	@ (800733c <HAL_TIM_PWM_Start+0x17c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d018      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x136>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007340 <HAL_TIM_PWM_Start+0x180>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x136>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007344 <HAL_TIM_PWM_Start+0x184>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00e      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x136>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a16      	ldr	r2, [pc, #88]	@ (8007338 <HAL_TIM_PWM_Start+0x178>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d009      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x136>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a18      	ldr	r2, [pc, #96]	@ (8007348 <HAL_TIM_PWM_Start+0x188>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d004      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x136>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a16      	ldr	r2, [pc, #88]	@ (800734c <HAL_TIM_PWM_Start+0x18c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d111      	bne.n	800731a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b06      	cmp	r3, #6
 8007306:	d010      	beq.n	800732a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007318:	e007      	b.n	800732a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f042 0201 	orr.w	r2, r2, #1
 8007328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40010000 	.word	0x40010000
 8007338:	40010400 	.word	0x40010400
 800733c:	40000400 	.word	0x40000400
 8007340:	40000800 	.word	0x40000800
 8007344:	40000c00 	.word	0x40000c00
 8007348:	40014000 	.word	0x40014000
 800734c:	40001800 	.word	0x40001800

08007350 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e097      	b.n	8007494 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7fc fceb 	bl	8003d54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007394:	f023 0307 	bic.w	r3, r3, #7
 8007398:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3304      	adds	r3, #4
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f000 fba9 	bl	8007afc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	4313      	orrs	r3, r2
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80073f0:	f023 030c 	bic.w	r3, r3, #12
 80073f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	021b      	lsls	r3, r3, #8
 800740c:	4313      	orrs	r3, r2
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	011a      	lsls	r2, r3, #4
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	031b      	lsls	r3, r3, #12
 8007420:	4313      	orrs	r3, r2
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800742e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007436:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4313      	orrs	r3, r2
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80074c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d110      	bne.n	80074ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d102      	bne.n	80074d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80074d2:	7b7b      	ldrb	r3, [r7, #13]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d001      	beq.n	80074dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e069      	b.n	80075b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074ec:	e031      	b.n	8007552 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d110      	bne.n	8007516 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d102      	bne.n	8007500 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074fa:	7b3b      	ldrb	r3, [r7, #12]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d001      	beq.n	8007504 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e055      	b.n	80075b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007514:	e01d      	b.n	8007552 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d108      	bne.n	800752e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d105      	bne.n	800752e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007522:	7b7b      	ldrb	r3, [r7, #13]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d102      	bne.n	800752e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007528:	7b3b      	ldrb	r3, [r7, #12]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d001      	beq.n	8007532 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e03e      	b.n	80075b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2202      	movs	r2, #2
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2202      	movs	r2, #2
 800753e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2202      	movs	r2, #2
 800754e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_TIM_Encoder_Start+0xc4>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b04      	cmp	r3, #4
 800755c:	d008      	beq.n	8007570 <HAL_TIM_Encoder_Start+0xd4>
 800755e:	e00f      	b.n	8007580 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2201      	movs	r2, #1
 8007566:	2100      	movs	r1, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fdbd 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 800756e:	e016      	b.n	800759e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2201      	movs	r2, #1
 8007576:	2104      	movs	r1, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fdb5 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 800757e:	e00e      	b.n	800759e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2201      	movs	r2, #1
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fdad 	bl	80080e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2201      	movs	r2, #1
 8007594:	2104      	movs	r1, #4
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fda6 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 800759c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0201 	orr.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d020      	beq.n	800761c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01b      	beq.n	800761c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f06f 0202 	mvn.w	r2, #2
 80075ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa5b 	bl	8007abe <HAL_TIM_IC_CaptureCallback>
 8007608:	e005      	b.n	8007616 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fa4d 	bl	8007aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fa5e 	bl	8007ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	d020      	beq.n	8007668 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01b      	beq.n	8007668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0204 	mvn.w	r2, #4
 8007638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2202      	movs	r2, #2
 800763e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa35 	bl	8007abe <HAL_TIM_IC_CaptureCallback>
 8007654:	e005      	b.n	8007662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa27 	bl	8007aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fa38 	bl	8007ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d020      	beq.n	80076b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 0308 	and.w	r3, r3, #8
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01b      	beq.n	80076b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0208 	mvn.w	r2, #8
 8007684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2204      	movs	r2, #4
 800768a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa0f 	bl	8007abe <HAL_TIM_IC_CaptureCallback>
 80076a0:	e005      	b.n	80076ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa01 	bl	8007aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa12 	bl	8007ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 0310 	and.w	r3, r3, #16
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d020      	beq.n	8007700 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01b      	beq.n	8007700 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0210 	mvn.w	r2, #16
 80076d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2208      	movs	r2, #8
 80076d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f9e9 	bl	8007abe <HAL_TIM_IC_CaptureCallback>
 80076ec:	e005      	b.n	80076fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9db 	bl	8007aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f9ec 	bl	8007ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f06f 0201 	mvn.w	r2, #1
 800771c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fb fccc 	bl	80030bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00c      	beq.n	8007748 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fd7c 	bl	8008240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00c      	beq.n	800776c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9bd 	bl	8007ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00c      	beq.n	8007790 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d007      	beq.n	8007790 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0220 	mvn.w	r2, #32
 8007788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fd4e 	bl	800822c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e0ae      	b.n	8007914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b0c      	cmp	r3, #12
 80077c2:	f200 809f 	bhi.w	8007904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077c6:	a201      	add	r2, pc, #4	@ (adr r2, 80077cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	08007801 	.word	0x08007801
 80077d0:	08007905 	.word	0x08007905
 80077d4:	08007905 	.word	0x08007905
 80077d8:	08007905 	.word	0x08007905
 80077dc:	08007841 	.word	0x08007841
 80077e0:	08007905 	.word	0x08007905
 80077e4:	08007905 	.word	0x08007905
 80077e8:	08007905 	.word	0x08007905
 80077ec:	08007883 	.word	0x08007883
 80077f0:	08007905 	.word	0x08007905
 80077f4:	08007905 	.word	0x08007905
 80077f8:	08007905 	.word	0x08007905
 80077fc:	080078c3 	.word	0x080078c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68b9      	ldr	r1, [r7, #8]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fa24 	bl	8007c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0208 	orr.w	r2, r2, #8
 800781a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0204 	bic.w	r2, r2, #4
 800782a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6999      	ldr	r1, [r3, #24]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	691a      	ldr	r2, [r3, #16]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	619a      	str	r2, [r3, #24]
      break;
 800783e:	e064      	b.n	800790a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fa74 	bl	8007d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800785a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699a      	ldr	r2, [r3, #24]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800786a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6999      	ldr	r1, [r3, #24]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	021a      	lsls	r2, r3, #8
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	619a      	str	r2, [r3, #24]
      break;
 8007880:	e043      	b.n	800790a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fac9 	bl	8007e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0208 	orr.w	r2, r2, #8
 800789c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0204 	bic.w	r2, r2, #4
 80078ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69d9      	ldr	r1, [r3, #28]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	61da      	str	r2, [r3, #28]
      break;
 80078c0:	e023      	b.n	800790a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fb1d 	bl	8007f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69da      	ldr	r2, [r3, #28]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69d9      	ldr	r1, [r3, #28]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	021a      	lsls	r2, r3, #8
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	61da      	str	r2, [r3, #28]
      break;
 8007902:	e002      	b.n	800790a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007912:	7dfb      	ldrb	r3, [r7, #23]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_TIM_ConfigClockSource+0x1c>
 8007934:	2302      	movs	r3, #2
 8007936:	e0b4      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x186>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800795e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007970:	d03e      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007976:	f200 8087 	bhi.w	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
 800797a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800797e:	f000 8086 	beq.w	8007a8e <HAL_TIM_ConfigClockSource+0x172>
 8007982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007986:	d87f      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b70      	cmp	r3, #112	@ 0x70
 800798a:	d01a      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0xa6>
 800798c:	2b70      	cmp	r3, #112	@ 0x70
 800798e:	d87b      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b60      	cmp	r3, #96	@ 0x60
 8007992:	d050      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x11a>
 8007994:	2b60      	cmp	r3, #96	@ 0x60
 8007996:	d877      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
 8007998:	2b50      	cmp	r3, #80	@ 0x50
 800799a:	d03c      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0xfa>
 800799c:	2b50      	cmp	r3, #80	@ 0x50
 800799e:	d873      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
 80079a0:	2b40      	cmp	r3, #64	@ 0x40
 80079a2:	d058      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x13a>
 80079a4:	2b40      	cmp	r3, #64	@ 0x40
 80079a6:	d86f      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
 80079a8:	2b30      	cmp	r3, #48	@ 0x30
 80079aa:	d064      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x15a>
 80079ac:	2b30      	cmp	r3, #48	@ 0x30
 80079ae:	d86b      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	d060      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x15a>
 80079b4:	2b20      	cmp	r3, #32
 80079b6:	d867      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d05c      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x15a>
 80079bc:	2b10      	cmp	r3, #16
 80079be:	d05a      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x15a>
 80079c0:	e062      	b.n	8007a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079d2:	f000 fb69 	bl	80080a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	609a      	str	r2, [r3, #8]
      break;
 80079ee:	e04f      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a00:	f000 fb52 	bl	80080a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a12:	609a      	str	r2, [r3, #8]
      break;
 8007a14:	e03c      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 fac6 	bl	8007fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2150      	movs	r1, #80	@ 0x50
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fb1f 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007a34:	e02c      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 fae5 	bl	8008012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2160      	movs	r1, #96	@ 0x60
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fb0f 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007a54:	e01c      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a62:	461a      	mov	r2, r3
 8007a64:	f000 faa6 	bl	8007fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2140      	movs	r1, #64	@ 0x40
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 faff 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007a74:	e00c      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f000 faf6 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007a86:	e003      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8c:	e000      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
	...

08007afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a46      	ldr	r2, [pc, #280]	@ (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1a:	d00f      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a43      	ldr	r2, [pc, #268]	@ (8007c2c <TIM_Base_SetConfig+0x130>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a42      	ldr	r2, [pc, #264]	@ (8007c30 <TIM_Base_SetConfig+0x134>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a41      	ldr	r2, [pc, #260]	@ (8007c34 <TIM_Base_SetConfig+0x138>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a40      	ldr	r2, [pc, #256]	@ (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d108      	bne.n	8007b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a35      	ldr	r2, [pc, #212]	@ (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d02b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5c:	d027      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a32      	ldr	r2, [pc, #200]	@ (8007c2c <TIM_Base_SetConfig+0x130>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d023      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a31      	ldr	r2, [pc, #196]	@ (8007c30 <TIM_Base_SetConfig+0x134>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d01f      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a30      	ldr	r2, [pc, #192]	@ (8007c34 <TIM_Base_SetConfig+0x138>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a2f      	ldr	r2, [pc, #188]	@ (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d017      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a2e      	ldr	r2, [pc, #184]	@ (8007c3c <TIM_Base_SetConfig+0x140>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d013      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a2d      	ldr	r2, [pc, #180]	@ (8007c40 <TIM_Base_SetConfig+0x144>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00f      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a2c      	ldr	r2, [pc, #176]	@ (8007c44 <TIM_Base_SetConfig+0x148>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a2b      	ldr	r2, [pc, #172]	@ (8007c48 <TIM_Base_SetConfig+0x14c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d007      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8007c4c <TIM_Base_SetConfig+0x150>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a29      	ldr	r2, [pc, #164]	@ (8007c50 <TIM_Base_SetConfig+0x154>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d108      	bne.n	8007bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a10      	ldr	r2, [pc, #64]	@ (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_Base_SetConfig+0xf8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a12      	ldr	r2, [pc, #72]	@ (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d103      	bne.n	8007bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d105      	bne.n	8007c1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f023 0201 	bic.w	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	611a      	str	r2, [r3, #16]
  }
}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	40000800 	.word	0x40000800
 8007c34:	40000c00 	.word	0x40000c00
 8007c38:	40010400 	.word	0x40010400
 8007c3c:	40014000 	.word	0x40014000
 8007c40:	40014400 	.word	0x40014400
 8007c44:	40014800 	.word	0x40014800
 8007c48:	40001800 	.word	0x40001800
 8007c4c:	40001c00 	.word	0x40001c00
 8007c50:	40002000 	.word	0x40002000

08007c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	f023 0201 	bic.w	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0303 	bic.w	r3, r3, #3
 8007c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f023 0302 	bic.w	r3, r3, #2
 8007c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a20      	ldr	r2, [pc, #128]	@ (8007d2c <TIM_OC1_SetConfig+0xd8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x64>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d30 <TIM_OC1_SetConfig+0xdc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d10c      	bne.n	8007cd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 0308 	bic.w	r3, r3, #8
 8007cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f023 0304 	bic.w	r3, r3, #4
 8007cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a15      	ldr	r2, [pc, #84]	@ (8007d2c <TIM_OC1_SetConfig+0xd8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d003      	beq.n	8007ce2 <TIM_OC1_SetConfig+0x8e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a14      	ldr	r2, [pc, #80]	@ (8007d30 <TIM_OC1_SetConfig+0xdc>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d111      	bne.n	8007d06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	621a      	str	r2, [r3, #32]
}
 8007d20:	bf00      	nop
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	40010000 	.word	0x40010000
 8007d30:	40010400 	.word	0x40010400

08007d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	f023 0210 	bic.w	r2, r3, #16
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0320 	bic.w	r3, r3, #32
 8007d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a22      	ldr	r2, [pc, #136]	@ (8007e18 <TIM_OC2_SetConfig+0xe4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_OC2_SetConfig+0x68>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a21      	ldr	r2, [pc, #132]	@ (8007e1c <TIM_OC2_SetConfig+0xe8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d10d      	bne.n	8007db8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a17      	ldr	r2, [pc, #92]	@ (8007e18 <TIM_OC2_SetConfig+0xe4>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_OC2_SetConfig+0x94>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a16      	ldr	r2, [pc, #88]	@ (8007e1c <TIM_OC2_SetConfig+0xe8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d113      	bne.n	8007df0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	621a      	str	r2, [r3, #32]
}
 8007e0a:	bf00      	nop
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	40010400 	.word	0x40010400

08007e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0303 	bic.w	r3, r3, #3
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a21      	ldr	r2, [pc, #132]	@ (8007f00 <TIM_OC3_SetConfig+0xe0>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_OC3_SetConfig+0x66>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a20      	ldr	r2, [pc, #128]	@ (8007f04 <TIM_OC3_SetConfig+0xe4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d10d      	bne.n	8007ea2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a16      	ldr	r2, [pc, #88]	@ (8007f00 <TIM_OC3_SetConfig+0xe0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d003      	beq.n	8007eb2 <TIM_OC3_SetConfig+0x92>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a15      	ldr	r2, [pc, #84]	@ (8007f04 <TIM_OC3_SetConfig+0xe4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d113      	bne.n	8007eda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	621a      	str	r2, [r3, #32]
}
 8007ef4:	bf00      	nop
 8007ef6:	371c      	adds	r7, #28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40010400 	.word	0x40010400

08007f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	031b      	lsls	r3, r3, #12
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a12      	ldr	r2, [pc, #72]	@ (8007fac <TIM_OC4_SetConfig+0xa4>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d003      	beq.n	8007f70 <TIM_OC4_SetConfig+0x68>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a11      	ldr	r2, [pc, #68]	@ (8007fb0 <TIM_OC4_SetConfig+0xa8>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d109      	bne.n	8007f84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	019b      	lsls	r3, r3, #6
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	621a      	str	r2, [r3, #32]
}
 8007f9e:	bf00      	nop
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40010400 	.word	0x40010400

08007fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	f023 0201 	bic.w	r2, r3, #1
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f023 030a 	bic.w	r3, r3, #10
 8007ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	f023 0210 	bic.w	r2, r3, #16
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800803c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	031b      	lsls	r3, r3, #12
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800804e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	f043 0307 	orr.w	r3, r3, #7
 8008094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	021a      	lsls	r2, r3, #8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	609a      	str	r2, [r3, #8]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2201      	movs	r2, #1
 80080fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1a      	ldr	r2, [r3, #32]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	43db      	mvns	r3, r3
 800810a:	401a      	ands	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a1a      	ldr	r2, [r3, #32]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 031f 	and.w	r3, r3, #31
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	fa01 f303 	lsl.w	r3, r1, r3
 8008120:	431a      	orrs	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
	...

08008134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008148:	2302      	movs	r3, #2
 800814a:	e05a      	b.n	8008202 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a21      	ldr	r2, [pc, #132]	@ (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d022      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008198:	d01d      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1d      	ldr	r2, [pc, #116]	@ (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d018      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008218 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d013      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1a      	ldr	r2, [pc, #104]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00e      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a18      	ldr	r2, [pc, #96]	@ (8008220 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d009      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a17      	ldr	r2, [pc, #92]	@ (8008224 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d004      	beq.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a15      	ldr	r2, [pc, #84]	@ (8008228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d10c      	bne.n	80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40010000 	.word	0x40010000
 8008214:	40000400 	.word	0x40000400
 8008218:	40000800 	.word	0x40000800
 800821c:	40000c00 	.word	0x40000c00
 8008220:	40010400 	.word	0x40010400
 8008224:	40014000 	.word	0x40014000
 8008228:	40001800 	.word	0x40001800

0800822c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e042      	b.n	80082ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fb ffa4 	bl	80041c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2224      	movs	r2, #36	@ 0x24
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 f8ad 	bl	80093f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691a      	ldr	r2, [r3, #16]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695a      	ldr	r2, [r3, #20]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2220      	movs	r2, #32
 80082e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	@ 0x28
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	4613      	mov	r3, r2
 8008302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b20      	cmp	r3, #32
 8008312:	d175      	bne.n	8008400 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <HAL_UART_Transmit+0x2c>
 800831a:	88fb      	ldrh	r3, [r7, #6]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e06e      	b.n	8008402 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2221      	movs	r2, #33	@ 0x21
 800832e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008332:	f7fc fb63 	bl	80049fc <HAL_GetTick>
 8008336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	88fa      	ldrh	r2, [r7, #6]
 800833c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	88fa      	ldrh	r2, [r7, #6]
 8008342:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834c:	d108      	bne.n	8008360 <HAL_UART_Transmit+0x6c>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d104      	bne.n	8008360 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	61bb      	str	r3, [r7, #24]
 800835e:	e003      	b.n	8008368 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008368:	e02e      	b.n	80083c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2200      	movs	r2, #0
 8008372:	2180      	movs	r1, #128	@ 0x80
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 fd86 	bl	8008e86 <UART_WaitOnFlagUntilTimeout>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e03a      	b.n	8008402 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	3302      	adds	r3, #2
 80083a6:	61bb      	str	r3, [r7, #24]
 80083a8:	e007      	b.n	80083ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	781a      	ldrb	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	3301      	adds	r3, #1
 80083b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1cb      	bne.n	800836a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2200      	movs	r2, #0
 80083da:	2140      	movs	r1, #64	@ 0x40
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 fd52 	bl	8008e86 <UART_WaitOnFlagUntilTimeout>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e006      	b.n	8008402 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e000      	b.n	8008402 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008400:	2302      	movs	r3, #2
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08c      	sub	sp, #48	@ 0x30
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b20      	cmp	r3, #32
 8008424:	d156      	bne.n	80084d4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <HAL_UART_Transmit_DMA+0x26>
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e04f      	b.n	80084d6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	88fa      	ldrh	r2, [r7, #6]
 8008440:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2221      	movs	r2, #33	@ 0x21
 8008452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845a:	4a21      	ldr	r2, [pc, #132]	@ (80084e0 <HAL_UART_Transmit_DMA+0xd4>)
 800845c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008462:	4a20      	ldr	r2, [pc, #128]	@ (80084e4 <HAL_UART_Transmit_DMA+0xd8>)
 8008464:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846a:	4a1f      	ldr	r2, [pc, #124]	@ (80084e8 <HAL_UART_Transmit_DMA+0xdc>)
 800846c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008472:	2200      	movs	r2, #0
 8008474:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008476:	f107 0308 	add.w	r3, r7, #8
 800847a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008482:	6819      	ldr	r1, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3304      	adds	r3, #4
 800848a:	461a      	mov	r2, r3
 800848c:	88fb      	ldrh	r3, [r7, #6]
 800848e:	f7fc fc75 	bl	8004d7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800849a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3314      	adds	r3, #20
 80084a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	617b      	str	r3, [r7, #20]
   return(result);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3314      	adds	r3, #20
 80084ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80084be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6a39      	ldr	r1, [r7, #32]
 80084c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e5      	bne.n	800849c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	e000      	b.n	80084d6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80084d4:	2302      	movs	r3, #2
  }
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3730      	adds	r7, #48	@ 0x30
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	08008bd5 	.word	0x08008bd5
 80084e4:	08008c6f 	.word	0x08008c6f
 80084e8:	08008df3 	.word	0x08008df3

080084ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b20      	cmp	r3, #32
 8008504:	d112      	bne.n	800852c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_UART_Receive_DMA+0x26>
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e00b      	b.n	800852e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	461a      	mov	r2, r3
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fd08 	bl	8008f38 <UART_Start_Receive_DMA>
 8008528:	4603      	mov	r3, r0
 800852a:	e000      	b.n	800852e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
  }
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b090      	sub	sp, #64	@ 0x40
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800854c:	2b80      	cmp	r3, #128	@ 0x80
 800854e:	bf0c      	ite	eq
 8008550:	2301      	moveq	r3, #1
 8008552:	2300      	movne	r3, #0
 8008554:	b2db      	uxtb	r3, r3
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b21      	cmp	r3, #33	@ 0x21
 8008562:	d128      	bne.n	80085b6 <HAL_UART_DMAStop+0x80>
 8008564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d025      	beq.n	80085b6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3314      	adds	r3, #20
 8008570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	623b      	str	r3, [r7, #32]
   return(result);
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008580:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3314      	adds	r3, #20
 8008588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800858a:	633a      	str	r2, [r7, #48]	@ 0x30
 800858c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d004      	beq.n	80085b0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fc fc3e 	bl	8004e2c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fd5b 	bl	800906c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c0:	2b40      	cmp	r3, #64	@ 0x40
 80085c2:	bf0c      	ite	eq
 80085c4:	2301      	moveq	r3, #1
 80085c6:	2300      	movne	r3, #0
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b22      	cmp	r3, #34	@ 0x22
 80085d6:	d128      	bne.n	800862a <HAL_UART_DMAStop+0xf4>
 80085d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d025      	beq.n	800862a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3314      	adds	r3, #20
 80085e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3314      	adds	r3, #20
 80085fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085fe:	61fa      	str	r2, [r7, #28]
 8008600:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	69b9      	ldr	r1, [r7, #24]
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	617b      	str	r3, [r7, #20]
   return(result);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e5      	bne.n	80085de <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861e:	4618      	mov	r0, r3
 8008620:	f7fc fc04 	bl	8004e2c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fd49 	bl	80090bc <UART_EndRxTransfer>
  }

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3740      	adds	r7, #64	@ 0x40
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b0ba      	sub	sp, #232	@ 0xe8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800865a:	2300      	movs	r3, #0
 800865c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008660:	2300      	movs	r3, #0
 8008662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10f      	bne.n	800869a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800867a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	d009      	beq.n	800869a <HAL_UART_IRQHandler+0x66>
 8008686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fdf1 	bl	800927a <UART_Receive_IT>
      return;
 8008698:	e25b      	b.n	8008b52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800869a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 80de 	beq.w	8008860 <HAL_UART_IRQHandler+0x22c>
 80086a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d106      	bne.n	80086be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80d1 	beq.w	8008860 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00b      	beq.n	80086e2 <HAL_UART_IRQHandler+0xae>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d005      	beq.n	80086e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086da:	f043 0201 	orr.w	r2, r3, #1
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <HAL_UART_IRQHandler+0xd2>
 80086ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fe:	f043 0202 	orr.w	r2, r3, #2
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00b      	beq.n	800872a <HAL_UART_IRQHandler+0xf6>
 8008712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008722:	f043 0204 	orr.w	r2, r3, #4
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800872a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d011      	beq.n	800875a <HAL_UART_IRQHandler+0x126>
 8008736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d105      	bne.n	800874e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	f043 0208 	orr.w	r2, r3, #8
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 81f2 	beq.w	8008b48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d008      	beq.n	8008782 <HAL_UART_IRQHandler+0x14e>
 8008770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008774:	f003 0320 	and.w	r3, r3, #32
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fd7c 	bl	800927a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800878c:	2b40      	cmp	r3, #64	@ 0x40
 800878e:	bf0c      	ite	eq
 8008790:	2301      	moveq	r3, #1
 8008792:	2300      	movne	r3, #0
 8008794:	b2db      	uxtb	r3, r3
 8008796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879e:	f003 0308 	and.w	r3, r3, #8
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d103      	bne.n	80087ae <HAL_UART_IRQHandler+0x17a>
 80087a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d04f      	beq.n	800884e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fc84 	bl	80090bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087be:	2b40      	cmp	r3, #64	@ 0x40
 80087c0:	d141      	bne.n	8008846 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3314      	adds	r3, #20
 80087c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3314      	adds	r3, #20
 80087ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80087ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80087f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1d9      	bne.n	80087c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d013      	beq.n	800883e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a14 <HAL_UART_IRQHandler+0x3e0>)
 800881c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008822:	4618      	mov	r0, r3
 8008824:	f7fc fb72 	bl	8004f0c <HAL_DMA_Abort_IT>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d016      	beq.n	800885c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008838:	4610      	mov	r0, r2
 800883a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883c:	e00e      	b.n	800885c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f9b2 	bl	8008ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	e00a      	b.n	800885c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f9ae 	bl	8008ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884c:	e006      	b.n	800885c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9aa 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800885a:	e175      	b.n	8008b48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800885c:	bf00      	nop
    return;
 800885e:	e173      	b.n	8008b48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008864:	2b01      	cmp	r3, #1
 8008866:	f040 814f 	bne.w	8008b08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800886a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800886e:	f003 0310 	and.w	r3, r3, #16
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 8148 	beq.w	8008b08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8141 	beq.w	8008b08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008886:	2300      	movs	r3, #0
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60bb      	str	r3, [r7, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	60bb      	str	r3, [r7, #8]
 800889a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a6:	2b40      	cmp	r3, #64	@ 0x40
 80088a8:	f040 80b6 	bne.w	8008a18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 8145 	beq.w	8008b4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088ca:	429a      	cmp	r2, r3
 80088cc:	f080 813e 	bcs.w	8008b4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e2:	f000 8088 	beq.w	80089f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	330c      	adds	r3, #12
 80088ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008904:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	330c      	adds	r3, #12
 800890e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800891e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800892a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1d9      	bne.n	80088e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3314      	adds	r3, #20
 8008938:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008942:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008944:	f023 0301 	bic.w	r3, r3, #1
 8008948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3314      	adds	r3, #20
 8008952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008956:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800895a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800895e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008968:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e1      	bne.n	8008932 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3314      	adds	r3, #20
 8008974:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800897e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3314      	adds	r3, #20
 800898e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008992:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008994:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008998:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e3      	bne.n	800896e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	330c      	adds	r3, #12
 80089ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089c6:	f023 0310 	bic.w	r3, r3, #16
 80089ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	330c      	adds	r3, #12
 80089d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80089d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80089da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e3      	bne.n	80089b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fc fa1b 	bl	8004e2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f8d5 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a12:	e09b      	b.n	8008b4c <HAL_UART_IRQHandler+0x518>
 8008a14:	08009183 	.word	0x08009183
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 808e 	beq.w	8008b50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 8089 	beq.w	8008b50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	330c      	adds	r3, #12
 8008a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008a62:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e3      	bne.n	8008a3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3314      	adds	r3, #20
 8008a7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	623b      	str	r3, [r7, #32]
   return(result);
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3314      	adds	r3, #20
 8008a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e3      	bne.n	8008a76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 0310 	bic.w	r3, r3, #16
 8008ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	330c      	adds	r3, #12
 8008adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ae0:	61fa      	str	r2, [r7, #28]
 8008ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	69b9      	ldr	r1, [r7, #24]
 8008ae6:	69fa      	ldr	r2, [r7, #28]
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	617b      	str	r3, [r7, #20]
   return(result);
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e3      	bne.n	8008abc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008afa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f85b 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b06:	e023      	b.n	8008b50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d009      	beq.n	8008b28 <HAL_UART_IRQHandler+0x4f4>
 8008b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fb42 	bl	80091aa <UART_Transmit_IT>
    return;
 8008b26:	e014      	b.n	8008b52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00e      	beq.n	8008b52 <HAL_UART_IRQHandler+0x51e>
 8008b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d008      	beq.n	8008b52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fb82 	bl	800924a <UART_EndTransmit_IT>
    return;
 8008b46:	e004      	b.n	8008b52 <HAL_UART_IRQHandler+0x51e>
    return;
 8008b48:	bf00      	nop
 8008b4a:	e002      	b.n	8008b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b4c:	bf00      	nop
 8008b4e:	e000      	b.n	8008b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b50:	bf00      	nop
  }
}
 8008b52:	37e8      	adds	r7, #232	@ 0xe8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b090      	sub	sp, #64	@ 0x40
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d137      	bne.n	8008c60 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3314      	adds	r3, #20
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	623b      	str	r3, [r7, #32]
   return(result);
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3314      	adds	r3, #20
 8008c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e5      	bne.n	8008bf6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	330c      	adds	r3, #12
 8008c30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	e853 3f00 	ldrex	r3, [r3]
 8008c38:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	330c      	adds	r3, #12
 8008c48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c4a:	61fa      	str	r2, [r7, #28]
 8008c4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4e:	69b9      	ldr	r1, [r7, #24]
 8008c50:	69fa      	ldr	r2, [r7, #28]
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	617b      	str	r3, [r7, #20]
   return(result);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1e5      	bne.n	8008c2a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c5e:	e002      	b.n	8008c66 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008c62:	f7ff ff79 	bl	8008b58 <HAL_UART_TxCpltCallback>
}
 8008c66:	bf00      	nop
 8008c68:	3740      	adds	r7, #64	@ 0x40
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff ff75 	bl	8008b6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c82:	bf00      	nop
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b09c      	sub	sp, #112	@ 0x70
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c96:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d172      	bne.n	8008d8c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ca8:	2200      	movs	r2, #0
 8008caa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	330c      	adds	r3, #12
 8008cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008ccc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008cce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e5      	bne.n	8008cac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3314      	adds	r3, #20
 8008ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf2:	f023 0301 	bic.w	r3, r3, #1
 8008cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3314      	adds	r3, #20
 8008cfe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d00:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d02:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e5      	bne.n	8008ce0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3314      	adds	r3, #20
 8008d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	623b      	str	r3, [r7, #32]
   return(result);
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3314      	adds	r3, #20
 8008d32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d34:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e5      	bne.n	8008d14 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d119      	bne.n	8008d8c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	330c      	adds	r3, #12
 8008d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0310 	bic.w	r3, r3, #16
 8008d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	330c      	adds	r3, #12
 8008d76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d78:	61fa      	str	r2, [r7, #28]
 8008d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	69b9      	ldr	r1, [r7, #24]
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	e841 2300 	strex	r3, r2, [r1]
 8008d84:	617b      	str	r3, [r7, #20]
   return(result);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e5      	bne.n	8008d58 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d8e:	2200      	movs	r2, #0
 8008d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d106      	bne.n	8008da8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008da2:	f7ff ff0b 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008da6:	e002      	b.n	8008dae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008da8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008daa:	f7ff fee9 	bl	8008b80 <HAL_UART_RxCpltCallback>
}
 8008dae:	bf00      	nop
 8008db0:	3770      	adds	r7, #112	@ 0x70
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d108      	bne.n	8008de4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	4619      	mov	r1, r3
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f7ff feed 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008de2:	e002      	b.n	8008dea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7ff fed5 	bl	8008b94 <HAL_UART_RxHalfCpltCallback>
}
 8008dea:	bf00      	nop
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e0e:	2b80      	cmp	r3, #128	@ 0x80
 8008e10:	bf0c      	ite	eq
 8008e12:	2301      	moveq	r3, #1
 8008e14:	2300      	movne	r3, #0
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b21      	cmp	r3, #33	@ 0x21
 8008e24:	d108      	bne.n	8008e38 <UART_DMAError+0x46>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008e32:	68b8      	ldr	r0, [r7, #8]
 8008e34:	f000 f91a 	bl	800906c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e42:	2b40      	cmp	r3, #64	@ 0x40
 8008e44:	bf0c      	ite	eq
 8008e46:	2301      	moveq	r3, #1
 8008e48:	2300      	movne	r3, #0
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b22      	cmp	r3, #34	@ 0x22
 8008e58:	d108      	bne.n	8008e6c <UART_DMAError+0x7a>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2200      	movs	r2, #0
 8008e64:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008e66:	68b8      	ldr	r0, [r7, #8]
 8008e68:	f000 f928 	bl	80090bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e70:	f043 0210 	orr.w	r2, r3, #16
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e78:	68b8      	ldr	r0, [r7, #8]
 8008e7a:	f7ff fe95 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e7e:	bf00      	nop
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	603b      	str	r3, [r7, #0]
 8008e92:	4613      	mov	r3, r2
 8008e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e96:	e03b      	b.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e9e:	d037      	beq.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ea0:	f7fb fdac 	bl	80049fc <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	6a3a      	ldr	r2, [r7, #32]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d302      	bcc.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e03a      	b.n	8008f30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d023      	beq.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2b80      	cmp	r3, #128	@ 0x80
 8008ecc:	d020      	beq.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b40      	cmp	r3, #64	@ 0x40
 8008ed2:	d01d      	beq.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0308 	and.w	r3, r3, #8
 8008ede:	2b08      	cmp	r3, #8
 8008ee0:	d116      	bne.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 f8df 	bl	80090bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2208      	movs	r2, #8
 8008f02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e00f      	b.n	8008f30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	bf0c      	ite	eq
 8008f20:	2301      	moveq	r3, #1
 8008f22:	2300      	movne	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d0b4      	beq.n	8008e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b098      	sub	sp, #96	@ 0x60
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	88fa      	ldrh	r2, [r7, #6]
 8008f50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2222      	movs	r2, #34	@ 0x22
 8008f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f64:	4a3e      	ldr	r2, [pc, #248]	@ (8009060 <UART_Start_Receive_DMA+0x128>)
 8008f66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8009064 <UART_Start_Receive_DMA+0x12c>)
 8008f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f74:	4a3c      	ldr	r2, [pc, #240]	@ (8009068 <UART_Start_Receive_DMA+0x130>)
 8008f76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008f80:	f107 0308 	add.w	r3, r7, #8
 8008f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4619      	mov	r1, r3
 8008f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	f7fb fef0 	bl	8004d7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	613b      	str	r3, [r7, #16]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	613b      	str	r3, [r7, #16]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d019      	beq.n	8008fee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	330c      	adds	r3, #12
 8008fd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008fe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e5      	bne.n	8008fba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009000:	f043 0301 	orr.w	r3, r3, #1
 8009004:	657b      	str	r3, [r7, #84]	@ 0x54
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3314      	adds	r3, #20
 800900c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800900e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009010:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e5      	bne.n	8008fee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3314      	adds	r3, #20
 8009028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	617b      	str	r3, [r7, #20]
   return(result);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009038:	653b      	str	r3, [r7, #80]	@ 0x50
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3314      	adds	r3, #20
 8009040:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009042:	627a      	str	r2, [r7, #36]	@ 0x24
 8009044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6a39      	ldr	r1, [r7, #32]
 8009048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e5      	bne.n	8009022 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3760      	adds	r7, #96	@ 0x60
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	08008c8b 	.word	0x08008c8b
 8009064:	08008db7 	.word	0x08008db7
 8009068:	08008df3 	.word	0x08008df3

0800906c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800906c:	b480      	push	{r7}
 800906e:	b089      	sub	sp, #36	@ 0x24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	330c      	adds	r3, #12
 800907a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	e853 3f00 	ldrex	r3, [r3]
 8009082:	60bb      	str	r3, [r7, #8]
   return(result);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	330c      	adds	r3, #12
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	61ba      	str	r2, [r7, #24]
 8009096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009098:	6979      	ldr	r1, [r7, #20]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	e841 2300 	strex	r3, r2, [r1]
 80090a0:	613b      	str	r3, [r7, #16]
   return(result);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1e5      	bne.n	8009074 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80090b0:	bf00      	nop
 80090b2:	3724      	adds	r7, #36	@ 0x24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b095      	sub	sp, #84	@ 0x54
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	330c      	adds	r3, #12
 80090e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80090e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e5      	bne.n	80090c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3314      	adds	r3, #20
 80090fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	61fb      	str	r3, [r7, #28]
   return(result);
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3314      	adds	r3, #20
 8009116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800911a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800911e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e5      	bne.n	80090f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009130:	2b01      	cmp	r3, #1
 8009132:	d119      	bne.n	8009168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	60bb      	str	r3, [r7, #8]
   return(result);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f023 0310 	bic.w	r3, r3, #16
 800914a:	647b      	str	r3, [r7, #68]	@ 0x44
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	330c      	adds	r3, #12
 8009152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009154:	61ba      	str	r2, [r7, #24]
 8009156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	613b      	str	r3, [r7, #16]
   return(result);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e5      	bne.n	8009134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2220      	movs	r2, #32
 800916c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009176:	bf00      	nop
 8009178:	3754      	adds	r7, #84	@ 0x54
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fd03 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b21      	cmp	r3, #33	@ 0x21
 80091bc:	d13e      	bne.n	800923c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091c6:	d114      	bne.n	80091f2 <UART_Transmit_IT+0x48>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d110      	bne.n	80091f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	1c9a      	adds	r2, r3, #2
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	621a      	str	r2, [r3, #32]
 80091f0:	e008      	b.n	8009204 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	1c59      	adds	r1, r3, #1
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6211      	str	r1, [r2, #32]
 80091fc:	781a      	ldrb	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009208:	b29b      	uxth	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	b29b      	uxth	r3, r3
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	4619      	mov	r1, r3
 8009212:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10f      	bne.n	8009238 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009226:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009236:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e000      	b.n	800923e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68da      	ldr	r2, [r3, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009260:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff fc74 	bl	8008b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b08c      	sub	sp, #48	@ 0x30
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b22      	cmp	r3, #34	@ 0x22
 800928c:	f040 80ae 	bne.w	80093ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009298:	d117      	bne.n	80092ca <UART_Receive_IT+0x50>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d113      	bne.n	80092ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c2:	1c9a      	adds	r2, r3, #2
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80092c8:	e026      	b.n	8009318 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092dc:	d007      	beq.n	80092ee <UART_Receive_IT+0x74>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <UART_Receive_IT+0x82>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	e008      	b.n	800930e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009308:	b2da      	uxtb	r2, r3
 800930a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800931c:	b29b      	uxth	r3, r3
 800931e:	3b01      	subs	r3, #1
 8009320:	b29b      	uxth	r3, r3
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4619      	mov	r1, r3
 8009326:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009328:	2b00      	cmp	r3, #0
 800932a:	d15d      	bne.n	80093e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0220 	bic.w	r2, r2, #32
 800933a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800934a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	695a      	ldr	r2, [r3, #20]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 0201 	bic.w	r2, r2, #1
 800935a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936e:	2b01      	cmp	r3, #1
 8009370:	d135      	bne.n	80093de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	613b      	str	r3, [r7, #16]
   return(result);
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f023 0310 	bic.w	r3, r3, #16
 800938e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	330c      	adds	r3, #12
 8009396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009398:	623a      	str	r2, [r7, #32]
 800939a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	69f9      	ldr	r1, [r7, #28]
 800939e:	6a3a      	ldr	r2, [r7, #32]
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e5      	bne.n	8009378 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0310 	and.w	r3, r3, #16
 80093b6:	2b10      	cmp	r3, #16
 80093b8:	d10a      	bne.n	80093d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fbf0 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
 80093dc:	e002      	b.n	80093e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fbce 	bl	8008b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	e002      	b.n	80093ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	e000      	b.n	80093ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80093ec:	2302      	movs	r3, #2
  }
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3730      	adds	r7, #48	@ 0x30
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093fc:	b0c0      	sub	sp, #256	@ 0x100
 80093fe:	af00      	add	r7, sp, #0
 8009400:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009414:	68d9      	ldr	r1, [r3, #12]
 8009416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	ea40 0301 	orr.w	r3, r0, r1
 8009420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	431a      	orrs	r2, r3
 8009430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	431a      	orrs	r2, r3
 8009438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	4313      	orrs	r3, r2
 8009440:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009450:	f021 010c 	bic.w	r1, r1, #12
 8009454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800945e:	430b      	orrs	r3, r1
 8009460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800946e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009472:	6999      	ldr	r1, [r3, #24]
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	ea40 0301 	orr.w	r3, r0, r1
 800947e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4b8f      	ldr	r3, [pc, #572]	@ (80096c4 <UART_SetConfig+0x2cc>)
 8009488:	429a      	cmp	r2, r3
 800948a:	d005      	beq.n	8009498 <UART_SetConfig+0xa0>
 800948c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b8d      	ldr	r3, [pc, #564]	@ (80096c8 <UART_SetConfig+0x2d0>)
 8009494:	429a      	cmp	r2, r3
 8009496:	d104      	bne.n	80094a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009498:	f7fc fa92 	bl	80059c0 <HAL_RCC_GetPCLK2Freq>
 800949c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80094a0:	e003      	b.n	80094aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094a2:	f7fc fa79 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 80094a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094b4:	f040 810c 	bne.w	80096d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094bc:	2200      	movs	r2, #0
 80094be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80094c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80094ca:	4622      	mov	r2, r4
 80094cc:	462b      	mov	r3, r5
 80094ce:	1891      	adds	r1, r2, r2
 80094d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80094d2:	415b      	adcs	r3, r3
 80094d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80094da:	4621      	mov	r1, r4
 80094dc:	eb12 0801 	adds.w	r8, r2, r1
 80094e0:	4629      	mov	r1, r5
 80094e2:	eb43 0901 	adc.w	r9, r3, r1
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	f04f 0300 	mov.w	r3, #0
 80094ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094fa:	4690      	mov	r8, r2
 80094fc:	4699      	mov	r9, r3
 80094fe:	4623      	mov	r3, r4
 8009500:	eb18 0303 	adds.w	r3, r8, r3
 8009504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009508:	462b      	mov	r3, r5
 800950a:	eb49 0303 	adc.w	r3, r9, r3
 800950e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800951e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009526:	460b      	mov	r3, r1
 8009528:	18db      	adds	r3, r3, r3
 800952a:	653b      	str	r3, [r7, #80]	@ 0x50
 800952c:	4613      	mov	r3, r2
 800952e:	eb42 0303 	adc.w	r3, r2, r3
 8009532:	657b      	str	r3, [r7, #84]	@ 0x54
 8009534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800953c:	f7f7 fd32 	bl	8000fa4 <__aeabi_uldivmod>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4b61      	ldr	r3, [pc, #388]	@ (80096cc <UART_SetConfig+0x2d4>)
 8009546:	fba3 2302 	umull	r2, r3, r3, r2
 800954a:	095b      	lsrs	r3, r3, #5
 800954c:	011c      	lsls	r4, r3, #4
 800954e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009552:	2200      	movs	r2, #0
 8009554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009558:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800955c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009560:	4642      	mov	r2, r8
 8009562:	464b      	mov	r3, r9
 8009564:	1891      	adds	r1, r2, r2
 8009566:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009568:	415b      	adcs	r3, r3
 800956a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800956c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009570:	4641      	mov	r1, r8
 8009572:	eb12 0a01 	adds.w	sl, r2, r1
 8009576:	4649      	mov	r1, r9
 8009578:	eb43 0b01 	adc.w	fp, r3, r1
 800957c:	f04f 0200 	mov.w	r2, #0
 8009580:	f04f 0300 	mov.w	r3, #0
 8009584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800958c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009590:	4692      	mov	sl, r2
 8009592:	469b      	mov	fp, r3
 8009594:	4643      	mov	r3, r8
 8009596:	eb1a 0303 	adds.w	r3, sl, r3
 800959a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800959e:	464b      	mov	r3, r9
 80095a0:	eb4b 0303 	adc.w	r3, fp, r3
 80095a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80095b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80095bc:	460b      	mov	r3, r1
 80095be:	18db      	adds	r3, r3, r3
 80095c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80095c2:	4613      	mov	r3, r2
 80095c4:	eb42 0303 	adc.w	r3, r2, r3
 80095c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80095ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80095d2:	f7f7 fce7 	bl	8000fa4 <__aeabi_uldivmod>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4611      	mov	r1, r2
 80095dc:	4b3b      	ldr	r3, [pc, #236]	@ (80096cc <UART_SetConfig+0x2d4>)
 80095de:	fba3 2301 	umull	r2, r3, r3, r1
 80095e2:	095b      	lsrs	r3, r3, #5
 80095e4:	2264      	movs	r2, #100	@ 0x64
 80095e6:	fb02 f303 	mul.w	r3, r2, r3
 80095ea:	1acb      	subs	r3, r1, r3
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80095f2:	4b36      	ldr	r3, [pc, #216]	@ (80096cc <UART_SetConfig+0x2d4>)
 80095f4:	fba3 2302 	umull	r2, r3, r3, r2
 80095f8:	095b      	lsrs	r3, r3, #5
 80095fa:	005b      	lsls	r3, r3, #1
 80095fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009600:	441c      	add	r4, r3
 8009602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009606:	2200      	movs	r2, #0
 8009608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800960c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009614:	4642      	mov	r2, r8
 8009616:	464b      	mov	r3, r9
 8009618:	1891      	adds	r1, r2, r2
 800961a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800961c:	415b      	adcs	r3, r3
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009624:	4641      	mov	r1, r8
 8009626:	1851      	adds	r1, r2, r1
 8009628:	6339      	str	r1, [r7, #48]	@ 0x30
 800962a:	4649      	mov	r1, r9
 800962c:	414b      	adcs	r3, r1
 800962e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009630:	f04f 0200 	mov.w	r2, #0
 8009634:	f04f 0300 	mov.w	r3, #0
 8009638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800963c:	4659      	mov	r1, fp
 800963e:	00cb      	lsls	r3, r1, #3
 8009640:	4651      	mov	r1, sl
 8009642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009646:	4651      	mov	r1, sl
 8009648:	00ca      	lsls	r2, r1, #3
 800964a:	4610      	mov	r0, r2
 800964c:	4619      	mov	r1, r3
 800964e:	4603      	mov	r3, r0
 8009650:	4642      	mov	r2, r8
 8009652:	189b      	adds	r3, r3, r2
 8009654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009658:	464b      	mov	r3, r9
 800965a:	460a      	mov	r2, r1
 800965c:	eb42 0303 	adc.w	r3, r2, r3
 8009660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009670:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009678:	460b      	mov	r3, r1
 800967a:	18db      	adds	r3, r3, r3
 800967c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800967e:	4613      	mov	r3, r2
 8009680:	eb42 0303 	adc.w	r3, r2, r3
 8009684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800968a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800968e:	f7f7 fc89 	bl	8000fa4 <__aeabi_uldivmod>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4b0d      	ldr	r3, [pc, #52]	@ (80096cc <UART_SetConfig+0x2d4>)
 8009698:	fba3 1302 	umull	r1, r3, r3, r2
 800969c:	095b      	lsrs	r3, r3, #5
 800969e:	2164      	movs	r1, #100	@ 0x64
 80096a0:	fb01 f303 	mul.w	r3, r1, r3
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	3332      	adds	r3, #50	@ 0x32
 80096aa:	4a08      	ldr	r2, [pc, #32]	@ (80096cc <UART_SetConfig+0x2d4>)
 80096ac:	fba2 2303 	umull	r2, r3, r2, r3
 80096b0:	095b      	lsrs	r3, r3, #5
 80096b2:	f003 0207 	and.w	r2, r3, #7
 80096b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4422      	add	r2, r4
 80096be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096c0:	e106      	b.n	80098d0 <UART_SetConfig+0x4d8>
 80096c2:	bf00      	nop
 80096c4:	40011000 	.word	0x40011000
 80096c8:	40011400 	.word	0x40011400
 80096cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80096de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80096e2:	4642      	mov	r2, r8
 80096e4:	464b      	mov	r3, r9
 80096e6:	1891      	adds	r1, r2, r2
 80096e8:	6239      	str	r1, [r7, #32]
 80096ea:	415b      	adcs	r3, r3
 80096ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80096ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096f2:	4641      	mov	r1, r8
 80096f4:	1854      	adds	r4, r2, r1
 80096f6:	4649      	mov	r1, r9
 80096f8:	eb43 0501 	adc.w	r5, r3, r1
 80096fc:	f04f 0200 	mov.w	r2, #0
 8009700:	f04f 0300 	mov.w	r3, #0
 8009704:	00eb      	lsls	r3, r5, #3
 8009706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800970a:	00e2      	lsls	r2, r4, #3
 800970c:	4614      	mov	r4, r2
 800970e:	461d      	mov	r5, r3
 8009710:	4643      	mov	r3, r8
 8009712:	18e3      	adds	r3, r4, r3
 8009714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009718:	464b      	mov	r3, r9
 800971a:	eb45 0303 	adc.w	r3, r5, r3
 800971e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800972e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	f04f 0300 	mov.w	r3, #0
 800973a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800973e:	4629      	mov	r1, r5
 8009740:	008b      	lsls	r3, r1, #2
 8009742:	4621      	mov	r1, r4
 8009744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009748:	4621      	mov	r1, r4
 800974a:	008a      	lsls	r2, r1, #2
 800974c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009750:	f7f7 fc28 	bl	8000fa4 <__aeabi_uldivmod>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4b60      	ldr	r3, [pc, #384]	@ (80098dc <UART_SetConfig+0x4e4>)
 800975a:	fba3 2302 	umull	r2, r3, r3, r2
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	011c      	lsls	r4, r3, #4
 8009762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009766:	2200      	movs	r2, #0
 8009768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800976c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	1891      	adds	r1, r2, r2
 800977a:	61b9      	str	r1, [r7, #24]
 800977c:	415b      	adcs	r3, r3
 800977e:	61fb      	str	r3, [r7, #28]
 8009780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009784:	4641      	mov	r1, r8
 8009786:	1851      	adds	r1, r2, r1
 8009788:	6139      	str	r1, [r7, #16]
 800978a:	4649      	mov	r1, r9
 800978c:	414b      	adcs	r3, r1
 800978e:	617b      	str	r3, [r7, #20]
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800979c:	4659      	mov	r1, fp
 800979e:	00cb      	lsls	r3, r1, #3
 80097a0:	4651      	mov	r1, sl
 80097a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097a6:	4651      	mov	r1, sl
 80097a8:	00ca      	lsls	r2, r1, #3
 80097aa:	4610      	mov	r0, r2
 80097ac:	4619      	mov	r1, r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	4642      	mov	r2, r8
 80097b2:	189b      	adds	r3, r3, r2
 80097b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097b8:	464b      	mov	r3, r9
 80097ba:	460a      	mov	r2, r1
 80097bc:	eb42 0303 	adc.w	r3, r2, r3
 80097c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80097dc:	4649      	mov	r1, r9
 80097de:	008b      	lsls	r3, r1, #2
 80097e0:	4641      	mov	r1, r8
 80097e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097e6:	4641      	mov	r1, r8
 80097e8:	008a      	lsls	r2, r1, #2
 80097ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80097ee:	f7f7 fbd9 	bl	8000fa4 <__aeabi_uldivmod>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4611      	mov	r1, r2
 80097f8:	4b38      	ldr	r3, [pc, #224]	@ (80098dc <UART_SetConfig+0x4e4>)
 80097fa:	fba3 2301 	umull	r2, r3, r3, r1
 80097fe:	095b      	lsrs	r3, r3, #5
 8009800:	2264      	movs	r2, #100	@ 0x64
 8009802:	fb02 f303 	mul.w	r3, r2, r3
 8009806:	1acb      	subs	r3, r1, r3
 8009808:	011b      	lsls	r3, r3, #4
 800980a:	3332      	adds	r3, #50	@ 0x32
 800980c:	4a33      	ldr	r2, [pc, #204]	@ (80098dc <UART_SetConfig+0x4e4>)
 800980e:	fba2 2303 	umull	r2, r3, r2, r3
 8009812:	095b      	lsrs	r3, r3, #5
 8009814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009818:	441c      	add	r4, r3
 800981a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800981e:	2200      	movs	r2, #0
 8009820:	673b      	str	r3, [r7, #112]	@ 0x70
 8009822:	677a      	str	r2, [r7, #116]	@ 0x74
 8009824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009828:	4642      	mov	r2, r8
 800982a:	464b      	mov	r3, r9
 800982c:	1891      	adds	r1, r2, r2
 800982e:	60b9      	str	r1, [r7, #8]
 8009830:	415b      	adcs	r3, r3
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009838:	4641      	mov	r1, r8
 800983a:	1851      	adds	r1, r2, r1
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	4649      	mov	r1, r9
 8009840:	414b      	adcs	r3, r1
 8009842:	607b      	str	r3, [r7, #4]
 8009844:	f04f 0200 	mov.w	r2, #0
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009850:	4659      	mov	r1, fp
 8009852:	00cb      	lsls	r3, r1, #3
 8009854:	4651      	mov	r1, sl
 8009856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800985a:	4651      	mov	r1, sl
 800985c:	00ca      	lsls	r2, r1, #3
 800985e:	4610      	mov	r0, r2
 8009860:	4619      	mov	r1, r3
 8009862:	4603      	mov	r3, r0
 8009864:	4642      	mov	r2, r8
 8009866:	189b      	adds	r3, r3, r2
 8009868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800986a:	464b      	mov	r3, r9
 800986c:	460a      	mov	r2, r1
 800986e:	eb42 0303 	adc.w	r3, r2, r3
 8009872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	663b      	str	r3, [r7, #96]	@ 0x60
 800987e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009880:	f04f 0200 	mov.w	r2, #0
 8009884:	f04f 0300 	mov.w	r3, #0
 8009888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800988c:	4649      	mov	r1, r9
 800988e:	008b      	lsls	r3, r1, #2
 8009890:	4641      	mov	r1, r8
 8009892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009896:	4641      	mov	r1, r8
 8009898:	008a      	lsls	r2, r1, #2
 800989a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800989e:	f7f7 fb81 	bl	8000fa4 <__aeabi_uldivmod>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4b0d      	ldr	r3, [pc, #52]	@ (80098dc <UART_SetConfig+0x4e4>)
 80098a8:	fba3 1302 	umull	r1, r3, r3, r2
 80098ac:	095b      	lsrs	r3, r3, #5
 80098ae:	2164      	movs	r1, #100	@ 0x64
 80098b0:	fb01 f303 	mul.w	r3, r1, r3
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	3332      	adds	r3, #50	@ 0x32
 80098ba:	4a08      	ldr	r2, [pc, #32]	@ (80098dc <UART_SetConfig+0x4e4>)
 80098bc:	fba2 2303 	umull	r2, r3, r2, r3
 80098c0:	095b      	lsrs	r3, r3, #5
 80098c2:	f003 020f 	and.w	r2, r3, #15
 80098c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4422      	add	r2, r4
 80098ce:	609a      	str	r2, [r3, #8]
}
 80098d0:	bf00      	nop
 80098d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80098d6:	46bd      	mov	sp, r7
 80098d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098dc:	51eb851f 	.word	0x51eb851f

080098e0 <__NVIC_SetPriority>:
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	db0a      	blt.n	800990a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	490c      	ldr	r1, [pc, #48]	@ (800992c <__NVIC_SetPriority+0x4c>)
 80098fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098fe:	0112      	lsls	r2, r2, #4
 8009900:	b2d2      	uxtb	r2, r2
 8009902:	440b      	add	r3, r1
 8009904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009908:	e00a      	b.n	8009920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	b2da      	uxtb	r2, r3
 800990e:	4908      	ldr	r1, [pc, #32]	@ (8009930 <__NVIC_SetPriority+0x50>)
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	f003 030f 	and.w	r3, r3, #15
 8009916:	3b04      	subs	r3, #4
 8009918:	0112      	lsls	r2, r2, #4
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	440b      	add	r3, r1
 800991e:	761a      	strb	r2, [r3, #24]
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	e000e100 	.word	0xe000e100
 8009930:	e000ed00 	.word	0xe000ed00

08009934 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009938:	4b05      	ldr	r3, [pc, #20]	@ (8009950 <SysTick_Handler+0x1c>)
 800993a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800993c:	f001 fd6e 	bl	800b41c <xTaskGetSchedulerState>
 8009940:	4603      	mov	r3, r0
 8009942:	2b01      	cmp	r3, #1
 8009944:	d001      	beq.n	800994a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009946:	f002 fb67 	bl	800c018 <xPortSysTickHandler>
  }
}
 800994a:	bf00      	nop
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	e000e010 	.word	0xe000e010

08009954 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009954:	b580      	push	{r7, lr}
 8009956:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009958:	2100      	movs	r1, #0
 800995a:	f06f 0004 	mvn.w	r0, #4
 800995e:	f7ff ffbf 	bl	80098e0 <__NVIC_SetPriority>
#endif
}
 8009962:	bf00      	nop
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800996e:	f3ef 8305 	mrs	r3, IPSR
 8009972:	603b      	str	r3, [r7, #0]
  return(result);
 8009974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800997a:	f06f 0305 	mvn.w	r3, #5
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	e00c      	b.n	800999c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009982:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <osKernelInitialize+0x44>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d105      	bne.n	8009996 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800998a:	4b08      	ldr	r3, [pc, #32]	@ (80099ac <osKernelInitialize+0x44>)
 800998c:	2201      	movs	r2, #1
 800998e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009990:	2300      	movs	r3, #0
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	e002      	b.n	800999c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800999a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800999c:	687b      	ldr	r3, [r7, #4]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	2000a02c 	.word	0x2000a02c

080099b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b6:	f3ef 8305 	mrs	r3, IPSR
 80099ba:	603b      	str	r3, [r7, #0]
  return(result);
 80099bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80099c2:	f06f 0305 	mvn.w	r3, #5
 80099c6:	607b      	str	r3, [r7, #4]
 80099c8:	e010      	b.n	80099ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099ca:	4b0b      	ldr	r3, [pc, #44]	@ (80099f8 <osKernelStart+0x48>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d109      	bne.n	80099e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80099d2:	f7ff ffbf 	bl	8009954 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80099d6:	4b08      	ldr	r3, [pc, #32]	@ (80099f8 <osKernelStart+0x48>)
 80099d8:	2202      	movs	r2, #2
 80099da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099dc:	f001 f892 	bl	800ab04 <vTaskStartScheduler>
      stat = osOK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	607b      	str	r3, [r7, #4]
 80099e4:	e002      	b.n	80099ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80099e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099ec:	687b      	ldr	r3, [r7, #4]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	2000a02c 	.word	0x2000a02c

080099fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08e      	sub	sp, #56	@ 0x38
 8009a00:	af04      	add	r7, sp, #16
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a0c:	f3ef 8305 	mrs	r3, IPSR
 8009a10:	617b      	str	r3, [r7, #20]
  return(result);
 8009a12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d17e      	bne.n	8009b16 <osThreadNew+0x11a>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d07b      	beq.n	8009b16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a1e:	2380      	movs	r3, #128	@ 0x80
 8009a20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a22:	2318      	movs	r3, #24
 8009a24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009a2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d045      	beq.n	8009ac2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <osThreadNew+0x48>
        name = attr->name;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d008      	beq.n	8009a6a <osThreadNew+0x6e>
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	2b38      	cmp	r3, #56	@ 0x38
 8009a5c:	d805      	bhi.n	8009a6a <osThreadNew+0x6e>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <osThreadNew+0x72>
        return (NULL);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e054      	b.n	8009b18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	089b      	lsrs	r3, r3, #2
 8009a7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00e      	beq.n	8009aa4 <osThreadNew+0xa8>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	2ba7      	cmp	r3, #167	@ 0xa7
 8009a8c:	d90a      	bls.n	8009aa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d006      	beq.n	8009aa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <osThreadNew+0xa8>
        mem = 1;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	61bb      	str	r3, [r7, #24]
 8009aa2:	e010      	b.n	8009ac6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10c      	bne.n	8009ac6 <osThreadNew+0xca>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d108      	bne.n	8009ac6 <osThreadNew+0xca>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <osThreadNew+0xca>
          mem = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	e001      	b.n	8009ac6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d110      	bne.n	8009aee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ad4:	9202      	str	r2, [sp, #8]
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	6a3a      	ldr	r2, [r7, #32]
 8009ae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fe1a 	bl	800a71c <xTaskCreateStatic>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	e013      	b.n	8009b16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d110      	bne.n	8009b16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	f107 0310 	add.w	r3, r7, #16
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 fe68 	bl	800a7dc <xTaskCreate>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d001      	beq.n	8009b16 <osThreadNew+0x11a>
            hTask = NULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b16:	693b      	ldr	r3, [r7, #16]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3728      	adds	r7, #40	@ 0x28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b28:	f3ef 8305 	mrs	r3, IPSR
 8009b2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <osDelay+0x1c>
    stat = osErrorISR;
 8009b34:	f06f 0305 	mvn.w	r3, #5
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e007      	b.n	8009b4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 ffa6 	bl	800aa98 <vTaskDelay>
    }
  }

  return (stat);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4a07      	ldr	r2, [pc, #28]	@ (8009b84 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	4a06      	ldr	r2, [pc, #24]	@ (8009b88 <vApplicationGetIdleTaskMemory+0x30>)
 8009b6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2280      	movs	r2, #128	@ 0x80
 8009b74:	601a      	str	r2, [r3, #0]
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	2000a030 	.word	0x2000a030
 8009b88:	2000a0d8 	.word	0x2000a0d8

08009b8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4a07      	ldr	r2, [pc, #28]	@ (8009bb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4a06      	ldr	r2, [pc, #24]	@ (8009bbc <vApplicationGetTimerTaskMemory+0x30>)
 8009ba2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009baa:	601a      	str	r2, [r3, #0]
}
 8009bac:	bf00      	nop
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	2000a2d8 	.word	0x2000a2d8
 8009bbc:	2000a380 	.word	0x2000a380

08009bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f103 0208 	add.w	r2, r3, #8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f103 0208 	add.w	r2, r3, #8
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f103 0208 	add.w	r2, r3, #8
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	601a      	str	r2, [r3, #0]
}
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c62:	b480      	push	{r7}
 8009c64:	b085      	sub	sp, #20
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c78:	d103      	bne.n	8009c82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e00c      	b.n	8009c9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	3308      	adds	r3, #8
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	e002      	b.n	8009c90 <vListInsert+0x2e>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d2f6      	bcs.n	8009c8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	601a      	str	r2, [r3, #0]
}
 8009cc8:	bf00      	nop
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	6892      	ldr	r2, [r2, #8]
 8009cea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6852      	ldr	r2, [r2, #4]
 8009cf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d103      	bne.n	8009d08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	1e5a      	subs	r2, r3, #1
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10b      	bne.n	8009d54 <xQueueGenericReset+0x2c>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	60bb      	str	r3, [r7, #8]
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	e7fd      	b.n	8009d50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d54:	f002 f8d0 	bl	800bef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d60:	68f9      	ldr	r1, [r7, #12]
 8009d62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d64:	fb01 f303 	mul.w	r3, r1, r3
 8009d68:	441a      	add	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d84:	3b01      	subs	r3, #1
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d8a:	fb01 f303 	mul.w	r3, r1, r3
 8009d8e:	441a      	add	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	22ff      	movs	r2, #255	@ 0xff
 8009d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	22ff      	movs	r2, #255	@ 0xff
 8009da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d114      	bne.n	8009dd4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d01a      	beq.n	8009de8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3310      	adds	r3, #16
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 f942 	bl	800b040 <xTaskRemoveFromEventList>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d012      	beq.n	8009de8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009df8 <xQueueGenericReset+0xd0>)
 8009dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	e009      	b.n	8009de8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3310      	adds	r3, #16
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fef1 	bl	8009bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3324      	adds	r3, #36	@ 0x24
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff feec 	bl	8009bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009de8:	f002 f8b8 	bl	800bf5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dec:	2301      	movs	r3, #1
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08e      	sub	sp, #56	@ 0x38
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	e7fd      	b.n	8009e24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10b      	bne.n	8009e46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
 8009e44:	e7fd      	b.n	8009e42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <xQueueGenericCreateStatic+0x56>
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <xQueueGenericCreateStatic+0x5a>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <xQueueGenericCreateStatic+0x5c>
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10b      	bne.n	8009e74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	623b      	str	r3, [r7, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d102      	bne.n	8009e80 <xQueueGenericCreateStatic+0x84>
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <xQueueGenericCreateStatic+0x88>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <xQueueGenericCreateStatic+0x8a>
 8009e84:	2300      	movs	r3, #0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10b      	bne.n	8009ea2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	61fb      	str	r3, [r7, #28]
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	e7fd      	b.n	8009e9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ea2:	2350      	movs	r3, #80	@ 0x50
 8009ea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2b50      	cmp	r3, #80	@ 0x50
 8009eaa:	d00b      	beq.n	8009ec4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	61bb      	str	r3, [r7, #24]
}
 8009ebe:	bf00      	nop
 8009ec0:	bf00      	nop
 8009ec2:	e7fd      	b.n	8009ec0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ec4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00d      	beq.n	8009eec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ed8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	68b9      	ldr	r1, [r7, #8]
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 f805 	bl	8009ef6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3730      	adds	r7, #48	@ 0x30
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	60f8      	str	r0, [r7, #12]
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	607a      	str	r2, [r7, #4]
 8009f02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d103      	bne.n	8009f12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	e002      	b.n	8009f18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f24:	2101      	movs	r1, #1
 8009f26:	69b8      	ldr	r0, [r7, #24]
 8009f28:	f7ff fefe 	bl	8009d28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	78fa      	ldrb	r2, [r7, #3]
 8009f30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f34:	bf00      	nop
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08e      	sub	sp, #56	@ 0x38
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10b      	bne.n	8009f70 <xQueueGenericSend+0x34>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	e7fd      	b.n	8009f6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d103      	bne.n	8009f7e <xQueueGenericSend+0x42>
 8009f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <xQueueGenericSend+0x46>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <xQueueGenericSend+0x48>
 8009f82:	2300      	movs	r3, #0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10b      	bne.n	8009fa0 <xQueueGenericSend+0x64>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	e7fd      	b.n	8009f9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d103      	bne.n	8009fae <xQueueGenericSend+0x72>
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d101      	bne.n	8009fb2 <xQueueGenericSend+0x76>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e000      	b.n	8009fb4 <xQueueGenericSend+0x78>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10b      	bne.n	8009fd0 <xQueueGenericSend+0x94>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	623b      	str	r3, [r7, #32]
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fd0:	f001 fa24 	bl	800b41c <xTaskGetSchedulerState>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d102      	bne.n	8009fe0 <xQueueGenericSend+0xa4>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <xQueueGenericSend+0xa8>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e000      	b.n	8009fe6 <xQueueGenericSend+0xaa>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10b      	bne.n	800a002 <xQueueGenericSend+0xc6>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	61fb      	str	r3, [r7, #28]
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a002:	f001 ff79 	bl	800bef8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a00e:	429a      	cmp	r2, r3
 800a010:	d302      	bcc.n	800a018 <xQueueGenericSend+0xdc>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d129      	bne.n	800a06c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a01e:	f000 fa0f 	bl	800a440 <prvCopyDataToQueue>
 800a022:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d010      	beq.n	800a04e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	3324      	adds	r3, #36	@ 0x24
 800a030:	4618      	mov	r0, r3
 800a032:	f001 f805 	bl	800b040 <xTaskRemoveFromEventList>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d013      	beq.n	800a064 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a03c:	4b3f      	ldr	r3, [pc, #252]	@ (800a13c <xQueueGenericSend+0x200>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	e00a      	b.n	800a064 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d007      	beq.n	800a064 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a054:	4b39      	ldr	r3, [pc, #228]	@ (800a13c <xQueueGenericSend+0x200>)
 800a056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a064:	f001 ff7a 	bl	800bf5c <vPortExitCritical>
				return pdPASS;
 800a068:	2301      	movs	r3, #1
 800a06a:	e063      	b.n	800a134 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d103      	bne.n	800a07a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a072:	f001 ff73 	bl	800bf5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a076:	2300      	movs	r3, #0
 800a078:	e05c      	b.n	800a134 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a07a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d106      	bne.n	800a08e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a080:	f107 0314 	add.w	r3, r7, #20
 800a084:	4618      	mov	r0, r3
 800a086:	f001 f867 	bl	800b158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a08a:	2301      	movs	r3, #1
 800a08c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a08e:	f001 ff65 	bl	800bf5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a092:	f000 fda7 	bl	800abe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a096:	f001 ff2f 	bl	800bef8 <vPortEnterCritical>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0a0:	b25b      	sxtb	r3, r3
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0a6:	d103      	bne.n	800a0b0 <xQueueGenericSend+0x174>
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0bc:	d103      	bne.n	800a0c6 <xQueueGenericSend+0x18a>
 800a0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0c6:	f001 ff49 	bl	800bf5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0ca:	1d3a      	adds	r2, r7, #4
 800a0cc:	f107 0314 	add.w	r3, r7, #20
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f001 f856 	bl	800b184 <xTaskCheckForTimeOut>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d124      	bne.n	800a128 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0e0:	f000 faa6 	bl	800a630 <prvIsQueueFull>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d018      	beq.n	800a11c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	3310      	adds	r3, #16
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 ff52 	bl	800af9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0fa:	f000 fa31 	bl	800a560 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0fe:	f000 fd7f 	bl	800ac00 <xTaskResumeAll>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	f47f af7c 	bne.w	800a002 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a10a:	4b0c      	ldr	r3, [pc, #48]	@ (800a13c <xQueueGenericSend+0x200>)
 800a10c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	e772      	b.n	800a002 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a11c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a11e:	f000 fa1f 	bl	800a560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a122:	f000 fd6d 	bl	800ac00 <xTaskResumeAll>
 800a126:	e76c      	b.n	800a002 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a12a:	f000 fa19 	bl	800a560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a12e:	f000 fd67 	bl	800ac00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a132:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a134:	4618      	mov	r0, r3
 800a136:	3738      	adds	r7, #56	@ 0x38
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	e000ed04 	.word	0xe000ed04

0800a140 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b090      	sub	sp, #64	@ 0x40
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	e7fd      	b.n	800a16c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d103      	bne.n	800a17e <xQueueGenericSendFromISR+0x3e>
 800a176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <xQueueGenericSendFromISR+0x42>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <xQueueGenericSendFromISR+0x44>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d103      	bne.n	800a1ae <xQueueGenericSendFromISR+0x6e>
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d101      	bne.n	800a1b2 <xQueueGenericSendFromISR+0x72>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e000      	b.n	800a1b4 <xQueueGenericSendFromISR+0x74>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10b      	bne.n	800a1d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	623b      	str	r3, [r7, #32]
}
 800a1ca:	bf00      	nop
 800a1cc:	bf00      	nop
 800a1ce:	e7fd      	b.n	800a1cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1d0:	f001 ff72 	bl	800c0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1d4:	f3ef 8211 	mrs	r2, BASEPRI
 800a1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	61fa      	str	r2, [r7, #28]
 800a1ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d302      	bcc.n	800a202 <xQueueGenericSendFromISR+0xc2>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d12f      	bne.n	800a262 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a208:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a210:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	68b9      	ldr	r1, [r7, #8]
 800a216:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a218:	f000 f912 	bl	800a440 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a21c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a224:	d112      	bne.n	800a24c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d016      	beq.n	800a25c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a230:	3324      	adds	r3, #36	@ 0x24
 800a232:	4618      	mov	r0, r3
 800a234:	f000 ff04 	bl	800b040 <xTaskRemoveFromEventList>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00e      	beq.n	800a25c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00b      	beq.n	800a25c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	e007      	b.n	800a25c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a24c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a250:	3301      	adds	r3, #1
 800a252:	b2db      	uxtb	r3, r3
 800a254:	b25a      	sxtb	r2, r3
 800a256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a25c:	2301      	movs	r3, #1
 800a25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a260:	e001      	b.n	800a266 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a262:	2300      	movs	r3, #0
 800a264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a268:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a270:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a274:	4618      	mov	r0, r3
 800a276:	3740      	adds	r7, #64	@ 0x40
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08c      	sub	sp, #48	@ 0x30
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a288:	2300      	movs	r3, #0
 800a28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10b      	bne.n	800a2ae <xQueueReceive+0x32>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	623b      	str	r3, [r7, #32]
}
 800a2a8:	bf00      	nop
 800a2aa:	bf00      	nop
 800a2ac:	e7fd      	b.n	800a2aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d103      	bne.n	800a2bc <xQueueReceive+0x40>
 800a2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <xQueueReceive+0x44>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e000      	b.n	800a2c2 <xQueueReceive+0x46>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10b      	bne.n	800a2de <xQueueReceive+0x62>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	61fb      	str	r3, [r7, #28]
}
 800a2d8:	bf00      	nop
 800a2da:	bf00      	nop
 800a2dc:	e7fd      	b.n	800a2da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2de:	f001 f89d 	bl	800b41c <xTaskGetSchedulerState>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <xQueueReceive+0x72>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <xQueueReceive+0x76>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <xQueueReceive+0x78>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10b      	bne.n	800a310 <xQueueReceive+0x94>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	61bb      	str	r3, [r7, #24]
}
 800a30a:	bf00      	nop
 800a30c:	bf00      	nop
 800a30e:	e7fd      	b.n	800a30c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a310:	f001 fdf2 	bl	800bef8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a318:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01f      	beq.n	800a360 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a320:	68b9      	ldr	r1, [r7, #8]
 800a322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a324:	f000 f8f6 	bl	800a514 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	1e5a      	subs	r2, r3, #1
 800a32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00f      	beq.n	800a358 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33a:	3310      	adds	r3, #16
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fe7f 	bl	800b040 <xTaskRemoveFromEventList>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d007      	beq.n	800a358 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a348:	4b3c      	ldr	r3, [pc, #240]	@ (800a43c <xQueueReceive+0x1c0>)
 800a34a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a358:	f001 fe00 	bl	800bf5c <vPortExitCritical>
				return pdPASS;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e069      	b.n	800a434 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d103      	bne.n	800a36e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a366:	f001 fdf9 	bl	800bf5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a36a:	2300      	movs	r3, #0
 800a36c:	e062      	b.n	800a434 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a374:	f107 0310 	add.w	r3, r7, #16
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 feed 	bl	800b158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a37e:	2301      	movs	r3, #1
 800a380:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a382:	f001 fdeb 	bl	800bf5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a386:	f000 fc2d 	bl	800abe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a38a:	f001 fdb5 	bl	800bef8 <vPortEnterCritical>
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a394:	b25b      	sxtb	r3, r3
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a39a:	d103      	bne.n	800a3a4 <xQueueReceive+0x128>
 800a39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3b0:	d103      	bne.n	800a3ba <xQueueReceive+0x13e>
 800a3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3ba:	f001 fdcf 	bl	800bf5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3be:	1d3a      	adds	r2, r7, #4
 800a3c0:	f107 0310 	add.w	r3, r7, #16
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 fedc 	bl	800b184 <xTaskCheckForTimeOut>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d123      	bne.n	800a41a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3d4:	f000 f916 	bl	800a604 <prvIsQueueEmpty>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d017      	beq.n	800a40e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e0:	3324      	adds	r3, #36	@ 0x24
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fdd8 	bl	800af9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ee:	f000 f8b7 	bl	800a560 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3f2:	f000 fc05 	bl	800ac00 <xTaskResumeAll>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d189      	bne.n	800a310 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a43c <xQueueReceive+0x1c0>)
 800a3fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	e780      	b.n	800a310 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a40e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a410:	f000 f8a6 	bl	800a560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a414:	f000 fbf4 	bl	800ac00 <xTaskResumeAll>
 800a418:	e77a      	b.n	800a310 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a41a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a41c:	f000 f8a0 	bl	800a560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a420:	f000 fbee 	bl	800ac00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a426:	f000 f8ed 	bl	800a604 <prvIsQueueEmpty>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f43f af6f 	beq.w	800a310 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a432:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a434:	4618      	mov	r0, r3
 800a436:	3730      	adds	r7, #48	@ 0x30
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	e000ed04 	.word	0xe000ed04

0800a440 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a454:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10d      	bne.n	800a47a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d14d      	bne.n	800a502 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 fff4 	bl	800b458 <xTaskPriorityDisinherit>
 800a470:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	609a      	str	r2, [r3, #8]
 800a478:	e043      	b.n	800a502 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d119      	bne.n	800a4b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6858      	ldr	r0, [r3, #4]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a488:	461a      	mov	r2, r3
 800a48a:	68b9      	ldr	r1, [r7, #8]
 800a48c:	f011 fb4b 	bl	801bb26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a498:	441a      	add	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d32b      	bcc.n	800a502 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	605a      	str	r2, [r3, #4]
 800a4b2:	e026      	b.n	800a502 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	68d8      	ldr	r0, [r3, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4bc:	461a      	mov	r2, r3
 800a4be:	68b9      	ldr	r1, [r7, #8]
 800a4c0:	f011 fb31 	bl	801bb26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4cc:	425b      	negs	r3, r3
 800a4ce:	441a      	add	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d207      	bcs.n	800a4f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e8:	425b      	negs	r3, r3
 800a4ea:	441a      	add	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d105      	bne.n	800a502 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a50a:	697b      	ldr	r3, [r7, #20]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	d018      	beq.n	800a558 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68da      	ldr	r2, [r3, #12]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a52e:	441a      	add	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68da      	ldr	r2, [r3, #12]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d303      	bcc.n	800a548 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68d9      	ldr	r1, [r3, #12]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a550:	461a      	mov	r2, r3
 800a552:	6838      	ldr	r0, [r7, #0]
 800a554:	f011 fae7 	bl	801bb26 <memcpy>
	}
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a568:	f001 fcc6 	bl	800bef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a572:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a574:	e011      	b.n	800a59a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d012      	beq.n	800a5a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	3324      	adds	r3, #36	@ 0x24
 800a582:	4618      	mov	r0, r3
 800a584:	f000 fd5c 	bl	800b040 <xTaskRemoveFromEventList>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a58e:	f000 fe5d 	bl	800b24c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	3b01      	subs	r3, #1
 800a596:	b2db      	uxtb	r3, r3
 800a598:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	dce9      	bgt.n	800a576 <prvUnlockQueue+0x16>
 800a5a2:	e000      	b.n	800a5a6 <prvUnlockQueue+0x46>
					break;
 800a5a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	22ff      	movs	r2, #255	@ 0xff
 800a5aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a5ae:	f001 fcd5 	bl	800bf5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5b2:	f001 fca1 	bl	800bef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5be:	e011      	b.n	800a5e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d012      	beq.n	800a5ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3310      	adds	r3, #16
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fd37 	bl	800b040 <xTaskRemoveFromEventList>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a5d8:	f000 fe38 	bl	800b24c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	dce9      	bgt.n	800a5c0 <prvUnlockQueue+0x60>
 800a5ec:	e000      	b.n	800a5f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a5ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	22ff      	movs	r2, #255	@ 0xff
 800a5f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a5f8:	f001 fcb0 	bl	800bf5c <vPortExitCritical>
}
 800a5fc:	bf00      	nop
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a60c:	f001 fc74 	bl	800bef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a618:	2301      	movs	r3, #1
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e001      	b.n	800a622 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a622:	f001 fc9b 	bl	800bf5c <vPortExitCritical>

	return xReturn;
 800a626:	68fb      	ldr	r3, [r7, #12]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a638:	f001 fc5e 	bl	800bef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a644:	429a      	cmp	r2, r3
 800a646:	d102      	bne.n	800a64e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a648:	2301      	movs	r3, #1
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e001      	b.n	800a652 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a652:	f001 fc83 	bl	800bf5c <vPortExitCritical>

	return xReturn;
 800a656:	68fb      	ldr	r3, [r7, #12]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
 800a66e:	e014      	b.n	800a69a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a670:	4a0f      	ldr	r2, [pc, #60]	@ (800a6b0 <vQueueAddToRegistry+0x50>)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10b      	bne.n	800a694 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a67c:	490c      	ldr	r1, [pc, #48]	@ (800a6b0 <vQueueAddToRegistry+0x50>)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a686:	4a0a      	ldr	r2, [pc, #40]	@ (800a6b0 <vQueueAddToRegistry+0x50>)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	4413      	add	r3, r2
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a692:	e006      	b.n	800a6a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3301      	adds	r3, #1
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b07      	cmp	r3, #7
 800a69e:	d9e7      	bls.n	800a670 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	2000a780 	.word	0x2000a780

0800a6b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a6c4:	f001 fc18 	bl	800bef8 <vPortEnterCritical>
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6ce:	b25b      	sxtb	r3, r3
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6d4:	d103      	bne.n	800a6de <vQueueWaitForMessageRestricted+0x2a>
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6e4:	b25b      	sxtb	r3, r3
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6ea:	d103      	bne.n	800a6f4 <vQueueWaitForMessageRestricted+0x40>
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6f4:	f001 fc32 	bl	800bf5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	3324      	adds	r3, #36	@ 0x24
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fc6d 	bl	800afe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a70e:	6978      	ldr	r0, [r7, #20]
 800a710:	f7ff ff26 	bl	800a560 <prvUnlockQueue>
	}
 800a714:	bf00      	nop
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08e      	sub	sp, #56	@ 0x38
 800a720:	af04      	add	r7, sp, #16
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10b      	bne.n	800a748 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	623b      	str	r3, [r7, #32]
}
 800a742:	bf00      	nop
 800a744:	bf00      	nop
 800a746:	e7fd      	b.n	800a744 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10b      	bne.n	800a766 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	61fb      	str	r3, [r7, #28]
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	e7fd      	b.n	800a762 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a766:	23a8      	movs	r3, #168	@ 0xa8
 800a768:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	2ba8      	cmp	r3, #168	@ 0xa8
 800a76e:	d00b      	beq.n	800a788 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	61bb      	str	r3, [r7, #24]
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a788:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d01e      	beq.n	800a7ce <xTaskCreateStatic+0xb2>
 800a790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a792:	2b00      	cmp	r3, #0
 800a794:	d01b      	beq.n	800a7ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a798:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a79e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	9303      	str	r3, [sp, #12]
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ae:	9302      	str	r3, [sp, #8]
 800a7b0:	f107 0314 	add.w	r3, r7, #20
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	68b9      	ldr	r1, [r7, #8]
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 f851 	bl	800a868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a7c8:	f000 f8f6 	bl	800a9b8 <prvAddNewTaskToReadyList>
 800a7cc:	e001      	b.n	800a7d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7d2:	697b      	ldr	r3, [r7, #20]
	}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3728      	adds	r7, #40	@ 0x28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08c      	sub	sp, #48	@ 0x30
 800a7e0:	af04      	add	r7, sp, #16
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f001 fca3 	bl	800c13c <pvPortMalloc>
 800a7f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00e      	beq.n	800a81c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7fe:	20a8      	movs	r0, #168	@ 0xa8
 800a800:	f001 fc9c 	bl	800c13c <pvPortMalloc>
 800a804:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	631a      	str	r2, [r3, #48]	@ 0x30
 800a812:	e005      	b.n	800a820 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a814:	6978      	ldr	r0, [r7, #20]
 800a816:	f001 fd5f 	bl	800c2d8 <vPortFree>
 800a81a:	e001      	b.n	800a820 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d017      	beq.n	800a856 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a82e:	88fa      	ldrh	r2, [r7, #6]
 800a830:	2300      	movs	r3, #0
 800a832:	9303      	str	r3, [sp, #12]
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	68b9      	ldr	r1, [r7, #8]
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 f80f 	bl	800a868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a84a:	69f8      	ldr	r0, [r7, #28]
 800a84c:	f000 f8b4 	bl	800a9b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a850:	2301      	movs	r3, #1
 800a852:	61bb      	str	r3, [r7, #24]
 800a854:	e002      	b.n	800a85c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a85a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a85c:	69bb      	ldr	r3, [r7, #24]
	}
 800a85e:	4618      	mov	r0, r3
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a878:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	461a      	mov	r2, r3
 800a880:	21a5      	movs	r1, #165	@ 0xa5
 800a882:	f011 f81b 	bl	801b8bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a890:	3b01      	subs	r3, #1
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	f023 0307 	bic.w	r3, r3, #7
 800a89e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	f003 0307 	and.w	r3, r3, #7
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00b      	beq.n	800a8c2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	617b      	str	r3, [r7, #20]
}
 800a8bc:	bf00      	nop
 800a8be:	bf00      	nop
 800a8c0:	e7fd      	b.n	800a8be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d01f      	beq.n	800a908 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	61fb      	str	r3, [r7, #28]
 800a8cc:	e012      	b.n	800a8f4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	7819      	ldrb	r1, [r3, #0]
 800a8d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	4413      	add	r3, r2
 800a8dc:	3334      	adds	r3, #52	@ 0x34
 800a8de:	460a      	mov	r2, r1
 800a8e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d006      	beq.n	800a8fc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	61fb      	str	r3, [r7, #28]
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	2b0f      	cmp	r3, #15
 800a8f8:	d9e9      	bls.n	800a8ce <prvInitialiseNewTask+0x66>
 800a8fa:	e000      	b.n	800a8fe <prvInitialiseNewTask+0x96>
			{
				break;
 800a8fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a906:	e003      	b.n	800a910 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a912:	2b37      	cmp	r3, #55	@ 0x37
 800a914:	d901      	bls.n	800a91a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a916:	2337      	movs	r3, #55	@ 0x37
 800a918:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a91e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a924:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a928:	2200      	movs	r2, #0
 800a92a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	3304      	adds	r3, #4
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff f965 	bl	8009c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a938:	3318      	adds	r3, #24
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff f960 	bl	8009c00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a944:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a948:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a954:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a960:	2200      	movs	r2, #0
 800a962:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a968:	3354      	adds	r3, #84	@ 0x54
 800a96a:	224c      	movs	r2, #76	@ 0x4c
 800a96c:	2100      	movs	r1, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f010 ffa4 	bl	801b8bc <memset>
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	4a0d      	ldr	r2, [pc, #52]	@ (800a9ac <prvInitialiseNewTask+0x144>)
 800a978:	659a      	str	r2, [r3, #88]	@ 0x58
 800a97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97c:	4a0c      	ldr	r2, [pc, #48]	@ (800a9b0 <prvInitialiseNewTask+0x148>)
 800a97e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a982:	4a0c      	ldr	r2, [pc, #48]	@ (800a9b4 <prvInitialiseNewTask+0x14c>)
 800a984:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	68f9      	ldr	r1, [r7, #12]
 800a98a:	69b8      	ldr	r0, [r7, #24]
 800a98c:	f001 f982 	bl	800bc94 <pxPortInitialiseStack>
 800a990:	4602      	mov	r2, r0
 800a992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a994:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9a2:	bf00      	nop
 800a9a4:	3720      	adds	r7, #32
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	20017934 	.word	0x20017934
 800a9b0:	2001799c 	.word	0x2001799c
 800a9b4:	20017a04 	.word	0x20017a04

0800a9b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9c0:	f001 fa9a 	bl	800bef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9c4:	4b2d      	ldr	r3, [pc, #180]	@ (800aa7c <prvAddNewTaskToReadyList+0xc4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	4a2c      	ldr	r2, [pc, #176]	@ (800aa7c <prvAddNewTaskToReadyList+0xc4>)
 800a9cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9ce:	4b2c      	ldr	r3, [pc, #176]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d109      	bne.n	800a9ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9d6:	4a2a      	ldr	r2, [pc, #168]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9dc:	4b27      	ldr	r3, [pc, #156]	@ (800aa7c <prvAddNewTaskToReadyList+0xc4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d110      	bne.n	800aa06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9e4:	f000 fc56 	bl	800b294 <prvInitialiseTaskLists>
 800a9e8:	e00d      	b.n	800aa06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9ea:	4b26      	ldr	r3, [pc, #152]	@ (800aa84 <prvAddNewTaskToReadyList+0xcc>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d109      	bne.n	800aa06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9f2:	4b23      	ldr	r3, [pc, #140]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d802      	bhi.n	800aa06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa00:	4a1f      	ldr	r2, [pc, #124]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa06:	4b20      	ldr	r3, [pc, #128]	@ (800aa88 <prvAddNewTaskToReadyList+0xd0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	4a1e      	ldr	r2, [pc, #120]	@ (800aa88 <prvAddNewTaskToReadyList+0xd0>)
 800aa0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa10:	4b1d      	ldr	r3, [pc, #116]	@ (800aa88 <prvAddNewTaskToReadyList+0xd0>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1c:	4b1b      	ldr	r3, [pc, #108]	@ (800aa8c <prvAddNewTaskToReadyList+0xd4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d903      	bls.n	800aa2c <prvAddNewTaskToReadyList+0x74>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa28:	4a18      	ldr	r2, [pc, #96]	@ (800aa8c <prvAddNewTaskToReadyList+0xd4>)
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa30:	4613      	mov	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4a15      	ldr	r2, [pc, #84]	@ (800aa90 <prvAddNewTaskToReadyList+0xd8>)
 800aa3a:	441a      	add	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7ff f8e9 	bl	8009c1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa48:	f001 fa88 	bl	800bf5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <prvAddNewTaskToReadyList+0xcc>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00e      	beq.n	800aa72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa54:	4b0a      	ldr	r3, [pc, #40]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d207      	bcs.n	800aa72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa62:	4b0c      	ldr	r3, [pc, #48]	@ (800aa94 <prvAddNewTaskToReadyList+0xdc>)
 800aa64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa72:	bf00      	nop
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	2000ac94 	.word	0x2000ac94
 800aa80:	2000a7c0 	.word	0x2000a7c0
 800aa84:	2000aca0 	.word	0x2000aca0
 800aa88:	2000acb0 	.word	0x2000acb0
 800aa8c:	2000ac9c 	.word	0x2000ac9c
 800aa90:	2000a7c4 	.word	0x2000a7c4
 800aa94:	e000ed04 	.word	0xe000ed04

0800aa98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d018      	beq.n	800aadc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aaaa:	4b14      	ldr	r3, [pc, #80]	@ (800aafc <vTaskDelay+0x64>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00b      	beq.n	800aaca <vTaskDelay+0x32>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	60bb      	str	r3, [r7, #8]
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop
 800aac8:	e7fd      	b.n	800aac6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aaca:	f000 f88b 	bl	800abe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aace:	2100      	movs	r1, #0
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fd31 	bl	800b538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aad6:	f000 f893 	bl	800ac00 <xTaskResumeAll>
 800aada:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d107      	bne.n	800aaf2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800aae2:	4b07      	ldr	r3, [pc, #28]	@ (800ab00 <vTaskDelay+0x68>)
 800aae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aaf2:	bf00      	nop
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	2000acbc 	.word	0x2000acbc
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08a      	sub	sp, #40	@ 0x28
 800ab08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab12:	463a      	mov	r2, r7
 800ab14:	1d39      	adds	r1, r7, #4
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff f81c 	bl	8009b58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	9202      	str	r2, [sp, #8]
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	460a      	mov	r2, r1
 800ab32:	4924      	ldr	r1, [pc, #144]	@ (800abc4 <vTaskStartScheduler+0xc0>)
 800ab34:	4824      	ldr	r0, [pc, #144]	@ (800abc8 <vTaskStartScheduler+0xc4>)
 800ab36:	f7ff fdf1 	bl	800a71c <xTaskCreateStatic>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	4a23      	ldr	r2, [pc, #140]	@ (800abcc <vTaskStartScheduler+0xc8>)
 800ab3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab40:	4b22      	ldr	r3, [pc, #136]	@ (800abcc <vTaskStartScheduler+0xc8>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	617b      	str	r3, [r7, #20]
 800ab4c:	e001      	b.n	800ab52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d102      	bne.n	800ab5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab58:	f000 fd42 	bl	800b5e0 <xTimerCreateTimerTask>
 800ab5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d11b      	bne.n	800ab9c <vTaskStartScheduler+0x98>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	613b      	str	r3, [r7, #16]
}
 800ab76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab78:	4b15      	ldr	r3, [pc, #84]	@ (800abd0 <vTaskStartScheduler+0xcc>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3354      	adds	r3, #84	@ 0x54
 800ab7e:	4a15      	ldr	r2, [pc, #84]	@ (800abd4 <vTaskStartScheduler+0xd0>)
 800ab80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab82:	4b15      	ldr	r3, [pc, #84]	@ (800abd8 <vTaskStartScheduler+0xd4>)
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab8a:	4b14      	ldr	r3, [pc, #80]	@ (800abdc <vTaskStartScheduler+0xd8>)
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab90:	4b13      	ldr	r3, [pc, #76]	@ (800abe0 <vTaskStartScheduler+0xdc>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab96:	f001 f90b 	bl	800bdb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab9a:	e00f      	b.n	800abbc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aba2:	d10b      	bne.n	800abbc <vTaskStartScheduler+0xb8>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	60fb      	str	r3, [r7, #12]
}
 800abb6:	bf00      	nop
 800abb8:	bf00      	nop
 800abba:	e7fd      	b.n	800abb8 <vTaskStartScheduler+0xb4>
}
 800abbc:	bf00      	nop
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	0801efc4 	.word	0x0801efc4
 800abc8:	0800b265 	.word	0x0800b265
 800abcc:	2000acb8 	.word	0x2000acb8
 800abd0:	2000a7c0 	.word	0x2000a7c0
 800abd4:	20001240 	.word	0x20001240
 800abd8:	2000acb4 	.word	0x2000acb4
 800abdc:	2000aca0 	.word	0x2000aca0
 800abe0:	2000ac98 	.word	0x2000ac98

0800abe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abe4:	b480      	push	{r7}
 800abe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800abe8:	4b04      	ldr	r3, [pc, #16]	@ (800abfc <vTaskSuspendAll+0x18>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	4a03      	ldr	r2, [pc, #12]	@ (800abfc <vTaskSuspendAll+0x18>)
 800abf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800abf2:	bf00      	nop
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	2000acbc 	.word	0x2000acbc

0800ac00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac0e:	4b42      	ldr	r3, [pc, #264]	@ (800ad18 <xTaskResumeAll+0x118>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10b      	bne.n	800ac2e <xTaskResumeAll+0x2e>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	603b      	str	r3, [r7, #0]
}
 800ac28:	bf00      	nop
 800ac2a:	bf00      	nop
 800ac2c:	e7fd      	b.n	800ac2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac2e:	f001 f963 	bl	800bef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac32:	4b39      	ldr	r3, [pc, #228]	@ (800ad18 <xTaskResumeAll+0x118>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3b01      	subs	r3, #1
 800ac38:	4a37      	ldr	r2, [pc, #220]	@ (800ad18 <xTaskResumeAll+0x118>)
 800ac3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac3c:	4b36      	ldr	r3, [pc, #216]	@ (800ad18 <xTaskResumeAll+0x118>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d162      	bne.n	800ad0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac44:	4b35      	ldr	r3, [pc, #212]	@ (800ad1c <xTaskResumeAll+0x11c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d05e      	beq.n	800ad0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac4c:	e02f      	b.n	800acae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac4e:	4b34      	ldr	r3, [pc, #208]	@ (800ad20 <xTaskResumeAll+0x120>)
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3318      	adds	r3, #24
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff f83a 	bl	8009cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff f835 	bl	8009cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac6e:	4b2d      	ldr	r3, [pc, #180]	@ (800ad24 <xTaskResumeAll+0x124>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d903      	bls.n	800ac7e <xTaskResumeAll+0x7e>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac7a:	4a2a      	ldr	r2, [pc, #168]	@ (800ad24 <xTaskResumeAll+0x124>)
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac82:	4613      	mov	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4a27      	ldr	r2, [pc, #156]	@ (800ad28 <xTaskResumeAll+0x128>)
 800ac8c:	441a      	add	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3304      	adds	r3, #4
 800ac92:	4619      	mov	r1, r3
 800ac94:	4610      	mov	r0, r2
 800ac96:	f7fe ffc0 	bl	8009c1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac9e:	4b23      	ldr	r3, [pc, #140]	@ (800ad2c <xTaskResumeAll+0x12c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d302      	bcc.n	800acae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aca8:	4b21      	ldr	r3, [pc, #132]	@ (800ad30 <xTaskResumeAll+0x130>)
 800acaa:	2201      	movs	r2, #1
 800acac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acae:	4b1c      	ldr	r3, [pc, #112]	@ (800ad20 <xTaskResumeAll+0x120>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1cb      	bne.n	800ac4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800acbc:	f000 fb8e 	bl	800b3dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800acc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad34 <xTaskResumeAll+0x134>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d010      	beq.n	800acee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800accc:	f000 f846 	bl	800ad5c <xTaskIncrementTick>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800acd6:	4b16      	ldr	r3, [pc, #88]	@ (800ad30 <xTaskResumeAll+0x130>)
 800acd8:	2201      	movs	r2, #1
 800acda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3b01      	subs	r3, #1
 800ace0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1f1      	bne.n	800accc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ace8:	4b12      	ldr	r3, [pc, #72]	@ (800ad34 <xTaskResumeAll+0x134>)
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acee:	4b10      	ldr	r3, [pc, #64]	@ (800ad30 <xTaskResumeAll+0x130>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d009      	beq.n	800ad0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acf6:	2301      	movs	r3, #1
 800acf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acfa:	4b0f      	ldr	r3, [pc, #60]	@ (800ad38 <xTaskResumeAll+0x138>)
 800acfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad0a:	f001 f927 	bl	800bf5c <vPortExitCritical>

	return xAlreadyYielded;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	2000acbc 	.word	0x2000acbc
 800ad1c:	2000ac94 	.word	0x2000ac94
 800ad20:	2000ac54 	.word	0x2000ac54
 800ad24:	2000ac9c 	.word	0x2000ac9c
 800ad28:	2000a7c4 	.word	0x2000a7c4
 800ad2c:	2000a7c0 	.word	0x2000a7c0
 800ad30:	2000aca8 	.word	0x2000aca8
 800ad34:	2000aca4 	.word	0x2000aca4
 800ad38:	e000ed04 	.word	0xe000ed04

0800ad3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad42:	4b05      	ldr	r3, [pc, #20]	@ (800ad58 <xTaskGetTickCount+0x1c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad48:	687b      	ldr	r3, [r7, #4]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	2000ac98 	.word	0x2000ac98

0800ad5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad66:	4b4f      	ldr	r3, [pc, #316]	@ (800aea4 <xTaskIncrementTick+0x148>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f040 8090 	bne.w	800ae90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad70:	4b4d      	ldr	r3, [pc, #308]	@ (800aea8 <xTaskIncrementTick+0x14c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad78:	4a4b      	ldr	r2, [pc, #300]	@ (800aea8 <xTaskIncrementTick+0x14c>)
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d121      	bne.n	800adc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad84:	4b49      	ldr	r3, [pc, #292]	@ (800aeac <xTaskIncrementTick+0x150>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00b      	beq.n	800ada6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	603b      	str	r3, [r7, #0]
}
 800ada0:	bf00      	nop
 800ada2:	bf00      	nop
 800ada4:	e7fd      	b.n	800ada2 <xTaskIncrementTick+0x46>
 800ada6:	4b41      	ldr	r3, [pc, #260]	@ (800aeac <xTaskIncrementTick+0x150>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	4b40      	ldr	r3, [pc, #256]	@ (800aeb0 <xTaskIncrementTick+0x154>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a3e      	ldr	r2, [pc, #248]	@ (800aeac <xTaskIncrementTick+0x150>)
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	4a3e      	ldr	r2, [pc, #248]	@ (800aeb0 <xTaskIncrementTick+0x154>)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	4b3e      	ldr	r3, [pc, #248]	@ (800aeb4 <xTaskIncrementTick+0x158>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3301      	adds	r3, #1
 800adc0:	4a3c      	ldr	r2, [pc, #240]	@ (800aeb4 <xTaskIncrementTick+0x158>)
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	f000 fb0a 	bl	800b3dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adc8:	4b3b      	ldr	r3, [pc, #236]	@ (800aeb8 <xTaskIncrementTick+0x15c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	429a      	cmp	r2, r3
 800add0:	d349      	bcc.n	800ae66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800add2:	4b36      	ldr	r3, [pc, #216]	@ (800aeac <xTaskIncrementTick+0x150>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d104      	bne.n	800ade6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800addc:	4b36      	ldr	r3, [pc, #216]	@ (800aeb8 <xTaskIncrementTick+0x15c>)
 800adde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ade2:	601a      	str	r2, [r3, #0]
					break;
 800ade4:	e03f      	b.n	800ae66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade6:	4b31      	ldr	r3, [pc, #196]	@ (800aeac <xTaskIncrementTick+0x150>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d203      	bcs.n	800ae06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800adfe:	4a2e      	ldr	r2, [pc, #184]	@ (800aeb8 <xTaskIncrementTick+0x15c>)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae04:	e02f      	b.n	800ae66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe ff62 	bl	8009cd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	3318      	adds	r3, #24
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe ff59 	bl	8009cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae26:	4b25      	ldr	r3, [pc, #148]	@ (800aebc <xTaskIncrementTick+0x160>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d903      	bls.n	800ae36 <xTaskIncrementTick+0xda>
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae32:	4a22      	ldr	r2, [pc, #136]	@ (800aebc <xTaskIncrementTick+0x160>)
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4a1f      	ldr	r2, [pc, #124]	@ (800aec0 <xTaskIncrementTick+0x164>)
 800ae44:	441a      	add	r2, r3
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	f7fe fee4 	bl	8009c1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae56:	4b1b      	ldr	r3, [pc, #108]	@ (800aec4 <xTaskIncrementTick+0x168>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d3b8      	bcc.n	800add2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ae60:	2301      	movs	r3, #1
 800ae62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae64:	e7b5      	b.n	800add2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae66:	4b17      	ldr	r3, [pc, #92]	@ (800aec4 <xTaskIncrementTick+0x168>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae6c:	4914      	ldr	r1, [pc, #80]	@ (800aec0 <xTaskIncrementTick+0x164>)
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	440b      	add	r3, r1
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d901      	bls.n	800ae82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae82:	4b11      	ldr	r3, [pc, #68]	@ (800aec8 <xTaskIncrementTick+0x16c>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d007      	beq.n	800ae9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	e004      	b.n	800ae9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae90:	4b0e      	ldr	r3, [pc, #56]	@ (800aecc <xTaskIncrementTick+0x170>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3301      	adds	r3, #1
 800ae96:	4a0d      	ldr	r2, [pc, #52]	@ (800aecc <xTaskIncrementTick+0x170>)
 800ae98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae9a:	697b      	ldr	r3, [r7, #20]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	2000acbc 	.word	0x2000acbc
 800aea8:	2000ac98 	.word	0x2000ac98
 800aeac:	2000ac4c 	.word	0x2000ac4c
 800aeb0:	2000ac50 	.word	0x2000ac50
 800aeb4:	2000acac 	.word	0x2000acac
 800aeb8:	2000acb4 	.word	0x2000acb4
 800aebc:	2000ac9c 	.word	0x2000ac9c
 800aec0:	2000a7c4 	.word	0x2000a7c4
 800aec4:	2000a7c0 	.word	0x2000a7c0
 800aec8:	2000aca8 	.word	0x2000aca8
 800aecc:	2000aca4 	.word	0x2000aca4

0800aed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aed6:	4b2b      	ldr	r3, [pc, #172]	@ (800af84 <vTaskSwitchContext+0xb4>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aede:	4b2a      	ldr	r3, [pc, #168]	@ (800af88 <vTaskSwitchContext+0xb8>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aee4:	e047      	b.n	800af76 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800aee6:	4b28      	ldr	r3, [pc, #160]	@ (800af88 <vTaskSwitchContext+0xb8>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeec:	4b27      	ldr	r3, [pc, #156]	@ (800af8c <vTaskSwitchContext+0xbc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	e011      	b.n	800af18 <vTaskSwitchContext+0x48>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10b      	bne.n	800af12 <vTaskSwitchContext+0x42>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	607b      	str	r3, [r7, #4]
}
 800af0c:	bf00      	nop
 800af0e:	bf00      	nop
 800af10:	e7fd      	b.n	800af0e <vTaskSwitchContext+0x3e>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3b01      	subs	r3, #1
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	491d      	ldr	r1, [pc, #116]	@ (800af90 <vTaskSwitchContext+0xc0>)
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	4613      	mov	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	440b      	add	r3, r1
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0e3      	beq.n	800aef4 <vTaskSwitchContext+0x24>
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4a16      	ldr	r2, [pc, #88]	@ (800af90 <vTaskSwitchContext+0xc0>)
 800af38:	4413      	add	r3, r2
 800af3a:	60bb      	str	r3, [r7, #8]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	605a      	str	r2, [r3, #4]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	3308      	adds	r3, #8
 800af4e:	429a      	cmp	r2, r3
 800af50:	d104      	bne.n	800af5c <vTaskSwitchContext+0x8c>
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	685a      	ldr	r2, [r3, #4]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	605a      	str	r2, [r3, #4]
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	4a0c      	ldr	r2, [pc, #48]	@ (800af94 <vTaskSwitchContext+0xc4>)
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	4a09      	ldr	r2, [pc, #36]	@ (800af8c <vTaskSwitchContext+0xbc>)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af6c:	4b09      	ldr	r3, [pc, #36]	@ (800af94 <vTaskSwitchContext+0xc4>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3354      	adds	r3, #84	@ 0x54
 800af72:	4a09      	ldr	r2, [pc, #36]	@ (800af98 <vTaskSwitchContext+0xc8>)
 800af74:	6013      	str	r3, [r2, #0]
}
 800af76:	bf00      	nop
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	2000acbc 	.word	0x2000acbc
 800af88:	2000aca8 	.word	0x2000aca8
 800af8c:	2000ac9c 	.word	0x2000ac9c
 800af90:	2000a7c4 	.word	0x2000a7c4
 800af94:	2000a7c0 	.word	0x2000a7c0
 800af98:	20001240 	.word	0x20001240

0800af9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10b      	bne.n	800afc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800afac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	60fb      	str	r3, [r7, #12]
}
 800afbe:	bf00      	nop
 800afc0:	bf00      	nop
 800afc2:	e7fd      	b.n	800afc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afc4:	4b07      	ldr	r3, [pc, #28]	@ (800afe4 <vTaskPlaceOnEventList+0x48>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3318      	adds	r3, #24
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7fe fe48 	bl	8009c62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800afd2:	2101      	movs	r1, #1
 800afd4:	6838      	ldr	r0, [r7, #0]
 800afd6:	f000 faaf 	bl	800b538 <prvAddCurrentTaskToDelayedList>
}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	2000a7c0 	.word	0x2000a7c0

0800afe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10b      	bne.n	800b012 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	617b      	str	r3, [r7, #20]
}
 800b00c:	bf00      	nop
 800b00e:	bf00      	nop
 800b010:	e7fd      	b.n	800b00e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b012:	4b0a      	ldr	r3, [pc, #40]	@ (800b03c <vTaskPlaceOnEventListRestricted+0x54>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3318      	adds	r3, #24
 800b018:	4619      	mov	r1, r3
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7fe fdfd 	bl	8009c1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b02a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	68b8      	ldr	r0, [r7, #8]
 800b030:	f000 fa82 	bl	800b538 <prvAddCurrentTaskToDelayedList>
	}
 800b034:	bf00      	nop
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	2000a7c0 	.word	0x2000a7c0

0800b040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10b      	bne.n	800b06e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	60fb      	str	r3, [r7, #12]
}
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
 800b06c:	e7fd      	b.n	800b06a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	3318      	adds	r3, #24
 800b072:	4618      	mov	r0, r3
 800b074:	f7fe fe2e 	bl	8009cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b078:	4b1d      	ldr	r3, [pc, #116]	@ (800b0f0 <xTaskRemoveFromEventList+0xb0>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d11d      	bne.n	800b0bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	3304      	adds	r3, #4
 800b084:	4618      	mov	r0, r3
 800b086:	f7fe fe25 	bl	8009cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b08e:	4b19      	ldr	r3, [pc, #100]	@ (800b0f4 <xTaskRemoveFromEventList+0xb4>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d903      	bls.n	800b09e <xTaskRemoveFromEventList+0x5e>
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09a:	4a16      	ldr	r2, [pc, #88]	@ (800b0f4 <xTaskRemoveFromEventList+0xb4>)
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4a13      	ldr	r2, [pc, #76]	@ (800b0f8 <xTaskRemoveFromEventList+0xb8>)
 800b0ac:	441a      	add	r2, r3
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	f7fe fdb0 	bl	8009c1a <vListInsertEnd>
 800b0ba:	e005      	b.n	800b0c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	3318      	adds	r3, #24
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	480e      	ldr	r0, [pc, #56]	@ (800b0fc <xTaskRemoveFromEventList+0xbc>)
 800b0c4:	f7fe fda9 	bl	8009c1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b100 <xTaskRemoveFromEventList+0xc0>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d905      	bls.n	800b0e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b0da:	4b0a      	ldr	r3, [pc, #40]	@ (800b104 <xTaskRemoveFromEventList+0xc4>)
 800b0dc:	2201      	movs	r2, #1
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	e001      	b.n	800b0e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b0e6:	697b      	ldr	r3, [r7, #20]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	2000acbc 	.word	0x2000acbc
 800b0f4:	2000ac9c 	.word	0x2000ac9c
 800b0f8:	2000a7c4 	.word	0x2000a7c4
 800b0fc:	2000ac54 	.word	0x2000ac54
 800b100:	2000a7c0 	.word	0x2000a7c0
 800b104:	2000aca8 	.word	0x2000aca8

0800b108 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10b      	bne.n	800b12e <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	60fb      	str	r3, [r7, #12]
}
 800b128:	bf00      	nop
 800b12a:	bf00      	nop
 800b12c:	e7fd      	b.n	800b12a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b12e:	f000 fee3 	bl	800bef8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b132:	4b07      	ldr	r3, [pc, #28]	@ (800b150 <vTaskSetTimeOutState+0x48>)
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b13a:	4b06      	ldr	r3, [pc, #24]	@ (800b154 <vTaskSetTimeOutState+0x4c>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b142:	f000 ff0b 	bl	800bf5c <vPortExitCritical>
}
 800b146:	bf00      	nop
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	2000acac 	.word	0x2000acac
 800b154:	2000ac98 	.word	0x2000ac98

0800b158 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b160:	4b06      	ldr	r3, [pc, #24]	@ (800b17c <vTaskInternalSetTimeOutState+0x24>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b168:	4b05      	ldr	r3, [pc, #20]	@ (800b180 <vTaskInternalSetTimeOutState+0x28>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	605a      	str	r2, [r3, #4]
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	2000acac 	.word	0x2000acac
 800b180:	2000ac98 	.word	0x2000ac98

0800b184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10b      	bne.n	800b1ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	613b      	str	r3, [r7, #16]
}
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
 800b1aa:	e7fd      	b.n	800b1a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10b      	bne.n	800b1ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	60fb      	str	r3, [r7, #12]
}
 800b1c4:	bf00      	nop
 800b1c6:	bf00      	nop
 800b1c8:	e7fd      	b.n	800b1c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b1ca:	f000 fe95 	bl	800bef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b244 <xTaskCheckForTimeOut+0xc0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1e6:	d102      	bne.n	800b1ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	61fb      	str	r3, [r7, #28]
 800b1ec:	e023      	b.n	800b236 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	4b15      	ldr	r3, [pc, #84]	@ (800b248 <xTaskCheckForTimeOut+0xc4>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d007      	beq.n	800b20a <xTaskCheckForTimeOut+0x86>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	429a      	cmp	r2, r3
 800b202:	d302      	bcc.n	800b20a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b204:	2301      	movs	r3, #1
 800b206:	61fb      	str	r3, [r7, #28]
 800b208:	e015      	b.n	800b236 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	429a      	cmp	r2, r3
 800b212:	d20b      	bcs.n	800b22c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	1ad2      	subs	r2, r2, r3
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff ff99 	bl	800b158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b226:	2300      	movs	r3, #0
 800b228:	61fb      	str	r3, [r7, #28]
 800b22a:	e004      	b.n	800b236 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b232:	2301      	movs	r3, #1
 800b234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b236:	f000 fe91 	bl	800bf5c <vPortExitCritical>

	return xReturn;
 800b23a:	69fb      	ldr	r3, [r7, #28]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3720      	adds	r7, #32
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	2000ac98 	.word	0x2000ac98
 800b248:	2000acac 	.word	0x2000acac

0800b24c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b250:	4b03      	ldr	r3, [pc, #12]	@ (800b260 <vTaskMissedYield+0x14>)
 800b252:	2201      	movs	r2, #1
 800b254:	601a      	str	r2, [r3, #0]
}
 800b256:	bf00      	nop
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	2000aca8 	.word	0x2000aca8

0800b264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b26c:	f000 f852 	bl	800b314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b270:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <prvIdleTask+0x28>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d9f9      	bls.n	800b26c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b278:	4b05      	ldr	r3, [pc, #20]	@ (800b290 <prvIdleTask+0x2c>)
 800b27a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b288:	e7f0      	b.n	800b26c <prvIdleTask+0x8>
 800b28a:	bf00      	nop
 800b28c:	2000a7c4 	.word	0x2000a7c4
 800b290:	e000ed04 	.word	0xe000ed04

0800b294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b29a:	2300      	movs	r3, #0
 800b29c:	607b      	str	r3, [r7, #4]
 800b29e:	e00c      	b.n	800b2ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4a12      	ldr	r2, [pc, #72]	@ (800b2f4 <prvInitialiseTaskLists+0x60>)
 800b2ac:	4413      	add	r3, r2
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fc86 	bl	8009bc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	607b      	str	r3, [r7, #4]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b37      	cmp	r3, #55	@ 0x37
 800b2be:	d9ef      	bls.n	800b2a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2c0:	480d      	ldr	r0, [pc, #52]	@ (800b2f8 <prvInitialiseTaskLists+0x64>)
 800b2c2:	f7fe fc7d 	bl	8009bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2c6:	480d      	ldr	r0, [pc, #52]	@ (800b2fc <prvInitialiseTaskLists+0x68>)
 800b2c8:	f7fe fc7a 	bl	8009bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2cc:	480c      	ldr	r0, [pc, #48]	@ (800b300 <prvInitialiseTaskLists+0x6c>)
 800b2ce:	f7fe fc77 	bl	8009bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2d2:	480c      	ldr	r0, [pc, #48]	@ (800b304 <prvInitialiseTaskLists+0x70>)
 800b2d4:	f7fe fc74 	bl	8009bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2d8:	480b      	ldr	r0, [pc, #44]	@ (800b308 <prvInitialiseTaskLists+0x74>)
 800b2da:	f7fe fc71 	bl	8009bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2de:	4b0b      	ldr	r3, [pc, #44]	@ (800b30c <prvInitialiseTaskLists+0x78>)
 800b2e0:	4a05      	ldr	r2, [pc, #20]	@ (800b2f8 <prvInitialiseTaskLists+0x64>)
 800b2e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b310 <prvInitialiseTaskLists+0x7c>)
 800b2e6:	4a05      	ldr	r2, [pc, #20]	@ (800b2fc <prvInitialiseTaskLists+0x68>)
 800b2e8:	601a      	str	r2, [r3, #0]
}
 800b2ea:	bf00      	nop
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	2000a7c4 	.word	0x2000a7c4
 800b2f8:	2000ac24 	.word	0x2000ac24
 800b2fc:	2000ac38 	.word	0x2000ac38
 800b300:	2000ac54 	.word	0x2000ac54
 800b304:	2000ac68 	.word	0x2000ac68
 800b308:	2000ac80 	.word	0x2000ac80
 800b30c:	2000ac4c 	.word	0x2000ac4c
 800b310:	2000ac50 	.word	0x2000ac50

0800b314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b31a:	e019      	b.n	800b350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b31c:	f000 fdec 	bl	800bef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b320:	4b10      	ldr	r3, [pc, #64]	@ (800b364 <prvCheckTasksWaitingTermination+0x50>)
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe fcd1 	bl	8009cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b332:	4b0d      	ldr	r3, [pc, #52]	@ (800b368 <prvCheckTasksWaitingTermination+0x54>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3b01      	subs	r3, #1
 800b338:	4a0b      	ldr	r2, [pc, #44]	@ (800b368 <prvCheckTasksWaitingTermination+0x54>)
 800b33a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b33c:	4b0b      	ldr	r3, [pc, #44]	@ (800b36c <prvCheckTasksWaitingTermination+0x58>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3b01      	subs	r3, #1
 800b342:	4a0a      	ldr	r2, [pc, #40]	@ (800b36c <prvCheckTasksWaitingTermination+0x58>)
 800b344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b346:	f000 fe09 	bl	800bf5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f810 	bl	800b370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b350:	4b06      	ldr	r3, [pc, #24]	@ (800b36c <prvCheckTasksWaitingTermination+0x58>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e1      	bne.n	800b31c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b358:	bf00      	nop
 800b35a:	bf00      	nop
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	2000ac68 	.word	0x2000ac68
 800b368:	2000ac94 	.word	0x2000ac94
 800b36c:	2000ac7c 	.word	0x2000ac7c

0800b370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	3354      	adds	r3, #84	@ 0x54
 800b37c:	4618      	mov	r0, r3
 800b37e:	f010 fb01 	bl	801b984 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d108      	bne.n	800b39e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b390:	4618      	mov	r0, r3
 800b392:	f000 ffa1 	bl	800c2d8 <vPortFree>
				vPortFree( pxTCB );
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 ff9e 	bl	800c2d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b39c:	e019      	b.n	800b3d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d103      	bne.n	800b3b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 ff95 	bl	800c2d8 <vPortFree>
	}
 800b3ae:	e010      	b.n	800b3d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d00b      	beq.n	800b3d2 <prvDeleteTCB+0x62>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	60fb      	str	r3, [r7, #12]
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	e7fd      	b.n	800b3ce <prvDeleteTCB+0x5e>
	}
 800b3d2:	bf00      	nop
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
	...

0800b3dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b414 <prvResetNextTaskUnblockTime+0x38>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d104      	bne.n	800b3f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b418 <prvResetNextTaskUnblockTime+0x3c>)
 800b3ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3f4:	e008      	b.n	800b408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f6:	4b07      	ldr	r3, [pc, #28]	@ (800b414 <prvResetNextTaskUnblockTime+0x38>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	4a04      	ldr	r2, [pc, #16]	@ (800b418 <prvResetNextTaskUnblockTime+0x3c>)
 800b406:	6013      	str	r3, [r2, #0]
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	2000ac4c 	.word	0x2000ac4c
 800b418:	2000acb4 	.word	0x2000acb4

0800b41c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b422:	4b0b      	ldr	r3, [pc, #44]	@ (800b450 <xTaskGetSchedulerState+0x34>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d102      	bne.n	800b430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b42a:	2301      	movs	r3, #1
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	e008      	b.n	800b442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b430:	4b08      	ldr	r3, [pc, #32]	@ (800b454 <xTaskGetSchedulerState+0x38>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d102      	bne.n	800b43e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b438:	2302      	movs	r3, #2
 800b43a:	607b      	str	r3, [r7, #4]
 800b43c:	e001      	b.n	800b442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b43e:	2300      	movs	r3, #0
 800b440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b442:	687b      	ldr	r3, [r7, #4]
	}
 800b444:	4618      	mov	r0, r3
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	2000aca0 	.word	0x2000aca0
 800b454:	2000acbc 	.word	0x2000acbc

0800b458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b464:	2300      	movs	r3, #0
 800b466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d058      	beq.n	800b520 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b46e:	4b2f      	ldr	r3, [pc, #188]	@ (800b52c <xTaskPriorityDisinherit+0xd4>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	429a      	cmp	r2, r3
 800b476:	d00b      	beq.n	800b490 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	60fb      	str	r3, [r7, #12]
}
 800b48a:	bf00      	nop
 800b48c:	bf00      	nop
 800b48e:	e7fd      	b.n	800b48c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10b      	bne.n	800b4b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	60bb      	str	r3, [r7, #8]
}
 800b4aa:	bf00      	nop
 800b4ac:	bf00      	nop
 800b4ae:	e7fd      	b.n	800b4ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4b4:	1e5a      	subs	r2, r3, #1
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d02c      	beq.n	800b520 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d128      	bne.n	800b520 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe fbfe 	bl	8009cd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b530 <xTaskPriorityDisinherit+0xd8>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d903      	bls.n	800b500 <xTaskPriorityDisinherit+0xa8>
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4fc:	4a0c      	ldr	r2, [pc, #48]	@ (800b530 <xTaskPriorityDisinherit+0xd8>)
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4a09      	ldr	r2, [pc, #36]	@ (800b534 <xTaskPriorityDisinherit+0xdc>)
 800b50e:	441a      	add	r2, r3
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	3304      	adds	r3, #4
 800b514:	4619      	mov	r1, r3
 800b516:	4610      	mov	r0, r2
 800b518:	f7fe fb7f 	bl	8009c1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b51c:	2301      	movs	r3, #1
 800b51e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b520:	697b      	ldr	r3, [r7, #20]
	}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	2000a7c0 	.word	0x2000a7c0
 800b530:	2000ac9c 	.word	0x2000ac9c
 800b534:	2000a7c4 	.word	0x2000a7c4

0800b538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b542:	4b21      	ldr	r3, [pc, #132]	@ (800b5c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b548:	4b20      	ldr	r3, [pc, #128]	@ (800b5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fbc0 	bl	8009cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b55a:	d10a      	bne.n	800b572 <prvAddCurrentTaskToDelayedList+0x3a>
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d007      	beq.n	800b572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b562:	4b1a      	ldr	r3, [pc, #104]	@ (800b5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3304      	adds	r3, #4
 800b568:	4619      	mov	r1, r3
 800b56a:	4819      	ldr	r0, [pc, #100]	@ (800b5d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b56c:	f7fe fb55 	bl	8009c1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b570:	e026      	b.n	800b5c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4413      	add	r3, r2
 800b578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b57a:	4b14      	ldr	r3, [pc, #80]	@ (800b5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	429a      	cmp	r2, r3
 800b588:	d209      	bcs.n	800b59e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b58a:	4b12      	ldr	r3, [pc, #72]	@ (800b5d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	4b0f      	ldr	r3, [pc, #60]	@ (800b5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3304      	adds	r3, #4
 800b594:	4619      	mov	r1, r3
 800b596:	4610      	mov	r0, r2
 800b598:	f7fe fb63 	bl	8009c62 <vListInsert>
}
 800b59c:	e010      	b.n	800b5c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b59e:	4b0e      	ldr	r3, [pc, #56]	@ (800b5d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	f7fe fb59 	bl	8009c62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d202      	bcs.n	800b5c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b5ba:	4a08      	ldr	r2, [pc, #32]	@ (800b5dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	6013      	str	r3, [r2, #0]
}
 800b5c0:	bf00      	nop
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	2000ac98 	.word	0x2000ac98
 800b5cc:	2000a7c0 	.word	0x2000a7c0
 800b5d0:	2000ac80 	.word	0x2000ac80
 800b5d4:	2000ac50 	.word	0x2000ac50
 800b5d8:	2000ac4c 	.word	0x2000ac4c
 800b5dc:	2000acb4 	.word	0x2000acb4

0800b5e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08a      	sub	sp, #40	@ 0x28
 800b5e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5ea:	f000 fb13 	bl	800bc14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b664 <xTimerCreateTimerTask+0x84>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d021      	beq.n	800b63a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5fe:	1d3a      	adds	r2, r7, #4
 800b600:	f107 0108 	add.w	r1, r7, #8
 800b604:	f107 030c 	add.w	r3, r7, #12
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe fabf 	bl	8009b8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	9202      	str	r2, [sp, #8]
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	2302      	movs	r3, #2
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2300      	movs	r3, #0
 800b61e:	460a      	mov	r2, r1
 800b620:	4911      	ldr	r1, [pc, #68]	@ (800b668 <xTimerCreateTimerTask+0x88>)
 800b622:	4812      	ldr	r0, [pc, #72]	@ (800b66c <xTimerCreateTimerTask+0x8c>)
 800b624:	f7ff f87a 	bl	800a71c <xTaskCreateStatic>
 800b628:	4603      	mov	r3, r0
 800b62a:	4a11      	ldr	r2, [pc, #68]	@ (800b670 <xTimerCreateTimerTask+0x90>)
 800b62c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b62e:	4b10      	ldr	r3, [pc, #64]	@ (800b670 <xTimerCreateTimerTask+0x90>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b636:	2301      	movs	r3, #1
 800b638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10b      	bne.n	800b658 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	613b      	str	r3, [r7, #16]
}
 800b652:	bf00      	nop
 800b654:	bf00      	nop
 800b656:	e7fd      	b.n	800b654 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b658:	697b      	ldr	r3, [r7, #20]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	2000acf0 	.word	0x2000acf0
 800b668:	0801efcc 	.word	0x0801efcc
 800b66c:	0800b7ad 	.word	0x0800b7ad
 800b670:	2000acf4 	.word	0x2000acf4

0800b674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08a      	sub	sp, #40	@ 0x28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
 800b680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b682:	2300      	movs	r3, #0
 800b684:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10b      	bne.n	800b6a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	623b      	str	r3, [r7, #32]
}
 800b69e:	bf00      	nop
 800b6a0:	bf00      	nop
 800b6a2:	e7fd      	b.n	800b6a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b6a4:	4b19      	ldr	r3, [pc, #100]	@ (800b70c <xTimerGenericCommand+0x98>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d02a      	beq.n	800b702 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b05      	cmp	r3, #5
 800b6bc:	dc18      	bgt.n	800b6f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6be:	f7ff fead 	bl	800b41c <xTaskGetSchedulerState>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d109      	bne.n	800b6dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6c8:	4b10      	ldr	r3, [pc, #64]	@ (800b70c <xTimerGenericCommand+0x98>)
 800b6ca:	6818      	ldr	r0, [r3, #0]
 800b6cc:	f107 0110 	add.w	r1, r7, #16
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6d4:	f7fe fc32 	bl	8009f3c <xQueueGenericSend>
 800b6d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6da:	e012      	b.n	800b702 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b70c <xTimerGenericCommand+0x98>)
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	f107 0110 	add.w	r1, r7, #16
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f7fe fc28 	bl	8009f3c <xQueueGenericSend>
 800b6ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6ee:	e008      	b.n	800b702 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6f0:	4b06      	ldr	r3, [pc, #24]	@ (800b70c <xTimerGenericCommand+0x98>)
 800b6f2:	6818      	ldr	r0, [r3, #0]
 800b6f4:	f107 0110 	add.w	r1, r7, #16
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	f7fe fd20 	bl	800a140 <xQueueGenericSendFromISR>
 800b700:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b704:	4618      	mov	r0, r3
 800b706:	3728      	adds	r7, #40	@ 0x28
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	2000acf0 	.word	0x2000acf0

0800b710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af02      	add	r7, sp, #8
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b71a:	4b23      	ldr	r3, [pc, #140]	@ (800b7a8 <prvProcessExpiredTimer+0x98>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	3304      	adds	r3, #4
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fad3 	bl	8009cd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b734:	f003 0304 	and.w	r3, r3, #4
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d023      	beq.n	800b784 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	699a      	ldr	r2, [r3, #24]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	18d1      	adds	r1, r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	6978      	ldr	r0, [r7, #20]
 800b74a:	f000 f8d5 	bl	800b8f8 <prvInsertTimerInActiveList>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d020      	beq.n	800b796 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b754:	2300      	movs	r3, #0
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	2300      	movs	r3, #0
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	2100      	movs	r1, #0
 800b75e:	6978      	ldr	r0, [r7, #20]
 800b760:	f7ff ff88 	bl	800b674 <xTimerGenericCommand>
 800b764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d114      	bne.n	800b796 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	60fb      	str	r3, [r7, #12]
}
 800b77e:	bf00      	nop
 800b780:	bf00      	nop
 800b782:	e7fd      	b.n	800b780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b78a:	f023 0301 	bic.w	r3, r3, #1
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	6978      	ldr	r0, [r7, #20]
 800b79c:	4798      	blx	r3
}
 800b79e:	bf00      	nop
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	2000ace8 	.word	0x2000ace8

0800b7ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7b4:	f107 0308 	add.w	r3, r7, #8
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 f859 	bl	800b870 <prvGetNextExpireTime>
 800b7be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f000 f805 	bl	800b7d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7ca:	f000 f8d7 	bl	800b97c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7ce:	bf00      	nop
 800b7d0:	e7f0      	b.n	800b7b4 <prvTimerTask+0x8>
	...

0800b7d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7de:	f7ff fa01 	bl	800abe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7e2:	f107 0308 	add.w	r3, r7, #8
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 f866 	bl	800b8b8 <prvSampleTimeNow>
 800b7ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d130      	bne.n	800b856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10a      	bne.n	800b810 <prvProcessTimerOrBlockTask+0x3c>
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d806      	bhi.n	800b810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b802:	f7ff f9fd 	bl	800ac00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b806:	68f9      	ldr	r1, [r7, #12]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff ff81 	bl	800b710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b80e:	e024      	b.n	800b85a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d008      	beq.n	800b828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b816:	4b13      	ldr	r3, [pc, #76]	@ (800b864 <prvProcessTimerOrBlockTask+0x90>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <prvProcessTimerOrBlockTask+0x50>
 800b820:	2301      	movs	r3, #1
 800b822:	e000      	b.n	800b826 <prvProcessTimerOrBlockTask+0x52>
 800b824:	2300      	movs	r3, #0
 800b826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b828:	4b0f      	ldr	r3, [pc, #60]	@ (800b868 <prvProcessTimerOrBlockTask+0x94>)
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	4619      	mov	r1, r3
 800b836:	f7fe ff3d 	bl	800a6b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b83a:	f7ff f9e1 	bl	800ac00 <xTaskResumeAll>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b844:	4b09      	ldr	r3, [pc, #36]	@ (800b86c <prvProcessTimerOrBlockTask+0x98>)
 800b846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	f3bf 8f6f 	isb	sy
}
 800b854:	e001      	b.n	800b85a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b856:	f7ff f9d3 	bl	800ac00 <xTaskResumeAll>
}
 800b85a:	bf00      	nop
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	2000acec 	.word	0x2000acec
 800b868:	2000acf0 	.word	0x2000acf0
 800b86c:	e000ed04 	.word	0xe000ed04

0800b870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b878:	4b0e      	ldr	r3, [pc, #56]	@ (800b8b4 <prvGetNextExpireTime+0x44>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d101      	bne.n	800b886 <prvGetNextExpireTime+0x16>
 800b882:	2201      	movs	r2, #1
 800b884:	e000      	b.n	800b888 <prvGetNextExpireTime+0x18>
 800b886:	2200      	movs	r2, #0
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d105      	bne.n	800b8a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b894:	4b07      	ldr	r3, [pc, #28]	@ (800b8b4 <prvGetNextExpireTime+0x44>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	e001      	b.n	800b8a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	2000ace8 	.word	0x2000ace8

0800b8b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b8c0:	f7ff fa3c 	bl	800ad3c <xTaskGetTickCount>
 800b8c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f4 <prvSampleTimeNow+0x3c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d205      	bcs.n	800b8dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8d0:	f000 f93a 	bl	800bb48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	e002      	b.n	800b8e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8e2:	4a04      	ldr	r2, [pc, #16]	@ (800b8f4 <prvSampleTimeNow+0x3c>)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	2000acf8 	.word	0x2000acf8

0800b8f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b906:	2300      	movs	r3, #0
 800b908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d812      	bhi.n	800b944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	1ad2      	subs	r2, r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d302      	bcc.n	800b932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b92c:	2301      	movs	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	e01b      	b.n	800b96a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b932:	4b10      	ldr	r3, [pc, #64]	@ (800b974 <prvInsertTimerInActiveList+0x7c>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3304      	adds	r3, #4
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fe f990 	bl	8009c62 <vListInsert>
 800b942:	e012      	b.n	800b96a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d206      	bcs.n	800b95a <prvInsertTimerInActiveList+0x62>
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d302      	bcc.n	800b95a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	617b      	str	r3, [r7, #20]
 800b958:	e007      	b.n	800b96a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b95a:	4b07      	ldr	r3, [pc, #28]	@ (800b978 <prvInsertTimerInActiveList+0x80>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	3304      	adds	r3, #4
 800b962:	4619      	mov	r1, r3
 800b964:	4610      	mov	r0, r2
 800b966:	f7fe f97c 	bl	8009c62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b96a:	697b      	ldr	r3, [r7, #20]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	2000acec 	.word	0x2000acec
 800b978:	2000ace8 	.word	0x2000ace8

0800b97c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08e      	sub	sp, #56	@ 0x38
 800b980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b982:	e0ce      	b.n	800bb22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	da19      	bge.n	800b9be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b98a:	1d3b      	adds	r3, r7, #4
 800b98c:	3304      	adds	r3, #4
 800b98e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10b      	bne.n	800b9ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	61fb      	str	r3, [r7, #28]
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	e7fd      	b.n	800b9aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9b4:	6850      	ldr	r0, [r2, #4]
 800b9b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9b8:	6892      	ldr	r2, [r2, #8]
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f2c0 80ae 	blt.w	800bb22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d004      	beq.n	800b9dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe f97c 	bl	8009cd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9dc:	463b      	mov	r3, r7
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff ff6a 	bl	800b8b8 <prvSampleTimeNow>
 800b9e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b09      	cmp	r3, #9
 800b9ea:	f200 8097 	bhi.w	800bb1c <prvProcessReceivedCommands+0x1a0>
 800b9ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b9f4 <prvProcessReceivedCommands+0x78>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba1d 	.word	0x0800ba1d
 800b9f8:	0800ba1d 	.word	0x0800ba1d
 800b9fc:	0800ba1d 	.word	0x0800ba1d
 800ba00:	0800ba93 	.word	0x0800ba93
 800ba04:	0800baa7 	.word	0x0800baa7
 800ba08:	0800baf3 	.word	0x0800baf3
 800ba0c:	0800ba1d 	.word	0x0800ba1d
 800ba10:	0800ba1d 	.word	0x0800ba1d
 800ba14:	0800ba93 	.word	0x0800ba93
 800ba18:	0800baa7 	.word	0x0800baa7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	18d1      	adds	r1, r2, r3
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba3c:	f7ff ff5c 	bl	800b8f8 <prvInsertTimerInActiveList>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d06c      	beq.n	800bb20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba54:	f003 0304 	and.w	r3, r3, #4
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d061      	beq.n	800bb20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	441a      	add	r2, r3
 800ba64:	2300      	movs	r3, #0
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba6e:	f7ff fe01 	bl	800b674 <xTimerGenericCommand>
 800ba72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba74:	6a3b      	ldr	r3, [r7, #32]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d152      	bne.n	800bb20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	61bb      	str	r3, [r7, #24]
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	e7fd      	b.n	800ba8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba98:	f023 0301 	bic.w	r3, r3, #1
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800baa4:	e03d      	b.n	800bb22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800baa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baac:	f043 0301 	orr.w	r3, r3, #1
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800babc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800babe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10b      	bne.n	800bade <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	617b      	str	r3, [r7, #20]
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	e7fd      	b.n	800bada <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae0:	699a      	ldr	r2, [r3, #24]
 800bae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae4:	18d1      	adds	r1, r2, r3
 800bae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800baec:	f7ff ff04 	bl	800b8f8 <prvInsertTimerInActiveList>
					break;
 800baf0:	e017      	b.n	800bb22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800baf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baf8:	f003 0302 	and.w	r3, r3, #2
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d103      	bne.n	800bb08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bb00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb02:	f000 fbe9 	bl	800c2d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb06:	e00c      	b.n	800bb22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb0e:	f023 0301 	bic.w	r3, r3, #1
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bb1a:	e002      	b.n	800bb22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bb1c:	bf00      	nop
 800bb1e:	e000      	b.n	800bb22 <prvProcessReceivedCommands+0x1a6>
					break;
 800bb20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb22:	4b08      	ldr	r3, [pc, #32]	@ (800bb44 <prvProcessReceivedCommands+0x1c8>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	1d39      	adds	r1, r7, #4
 800bb28:	2200      	movs	r2, #0
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fe fba6 	bl	800a27c <xQueueReceive>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f47f af26 	bne.w	800b984 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	3730      	adds	r7, #48	@ 0x30
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	2000acf0 	.word	0x2000acf0

0800bb48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb4e:	e049      	b.n	800bbe4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb50:	4b2e      	ldr	r3, [pc, #184]	@ (800bc0c <prvSwitchTimerLists+0xc4>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb5a:	4b2c      	ldr	r3, [pc, #176]	@ (800bc0c <prvSwitchTimerLists+0xc4>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3304      	adds	r3, #4
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe f8b3 	bl	8009cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb7c:	f003 0304 	and.w	r3, r3, #4
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d02f      	beq.n	800bbe4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d90e      	bls.n	800bbb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bba2:	4b1a      	ldr	r3, [pc, #104]	@ (800bc0c <prvSwitchTimerLists+0xc4>)
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f7fe f858 	bl	8009c62 <vListInsert>
 800bbb2:	e017      	b.n	800bbe4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f7ff fd58 	bl	800b674 <xTimerGenericCommand>
 800bbc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10b      	bne.n	800bbe4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd0:	f383 8811 	msr	BASEPRI, r3
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f3bf 8f4f 	dsb	sy
 800bbdc:	603b      	str	r3, [r7, #0]
}
 800bbde:	bf00      	nop
 800bbe0:	bf00      	nop
 800bbe2:	e7fd      	b.n	800bbe0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbe4:	4b09      	ldr	r3, [pc, #36]	@ (800bc0c <prvSwitchTimerLists+0xc4>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1b0      	bne.n	800bb50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbee:	4b07      	ldr	r3, [pc, #28]	@ (800bc0c <prvSwitchTimerLists+0xc4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbf4:	4b06      	ldr	r3, [pc, #24]	@ (800bc10 <prvSwitchTimerLists+0xc8>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a04      	ldr	r2, [pc, #16]	@ (800bc0c <prvSwitchTimerLists+0xc4>)
 800bbfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbfc:	4a04      	ldr	r2, [pc, #16]	@ (800bc10 <prvSwitchTimerLists+0xc8>)
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	6013      	str	r3, [r2, #0]
}
 800bc02:	bf00      	nop
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	2000ace8 	.word	0x2000ace8
 800bc10:	2000acec 	.word	0x2000acec

0800bc14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc1a:	f000 f96d 	bl	800bef8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc1e:	4b15      	ldr	r3, [pc, #84]	@ (800bc74 <prvCheckForValidListAndQueue+0x60>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d120      	bne.n	800bc68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc26:	4814      	ldr	r0, [pc, #80]	@ (800bc78 <prvCheckForValidListAndQueue+0x64>)
 800bc28:	f7fd ffca 	bl	8009bc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc2c:	4813      	ldr	r0, [pc, #76]	@ (800bc7c <prvCheckForValidListAndQueue+0x68>)
 800bc2e:	f7fd ffc7 	bl	8009bc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc32:	4b13      	ldr	r3, [pc, #76]	@ (800bc80 <prvCheckForValidListAndQueue+0x6c>)
 800bc34:	4a10      	ldr	r2, [pc, #64]	@ (800bc78 <prvCheckForValidListAndQueue+0x64>)
 800bc36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc38:	4b12      	ldr	r3, [pc, #72]	@ (800bc84 <prvCheckForValidListAndQueue+0x70>)
 800bc3a:	4a10      	ldr	r2, [pc, #64]	@ (800bc7c <prvCheckForValidListAndQueue+0x68>)
 800bc3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc3e:	2300      	movs	r3, #0
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	4b11      	ldr	r3, [pc, #68]	@ (800bc88 <prvCheckForValidListAndQueue+0x74>)
 800bc44:	4a11      	ldr	r2, [pc, #68]	@ (800bc8c <prvCheckForValidListAndQueue+0x78>)
 800bc46:	2110      	movs	r1, #16
 800bc48:	200a      	movs	r0, #10
 800bc4a:	f7fe f8d7 	bl	8009dfc <xQueueGenericCreateStatic>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	4a08      	ldr	r2, [pc, #32]	@ (800bc74 <prvCheckForValidListAndQueue+0x60>)
 800bc52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc54:	4b07      	ldr	r3, [pc, #28]	@ (800bc74 <prvCheckForValidListAndQueue+0x60>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d005      	beq.n	800bc68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc5c:	4b05      	ldr	r3, [pc, #20]	@ (800bc74 <prvCheckForValidListAndQueue+0x60>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	490b      	ldr	r1, [pc, #44]	@ (800bc90 <prvCheckForValidListAndQueue+0x7c>)
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fcfc 	bl	800a660 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc68:	f000 f978 	bl	800bf5c <vPortExitCritical>
}
 800bc6c:	bf00      	nop
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	2000acf0 	.word	0x2000acf0
 800bc78:	2000acc0 	.word	0x2000acc0
 800bc7c:	2000acd4 	.word	0x2000acd4
 800bc80:	2000ace8 	.word	0x2000ace8
 800bc84:	2000acec 	.word	0x2000acec
 800bc88:	2000ad9c 	.word	0x2000ad9c
 800bc8c:	2000acfc 	.word	0x2000acfc
 800bc90:	0801efd4 	.word	0x0801efd4

0800bc94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	3b04      	subs	r3, #4
 800bca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bcac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	3b04      	subs	r3, #4
 800bcb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	f023 0201 	bic.w	r2, r3, #1
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3b04      	subs	r3, #4
 800bcc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcc4:	4a0c      	ldr	r2, [pc, #48]	@ (800bcf8 <pxPortInitialiseStack+0x64>)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3b14      	subs	r3, #20
 800bcce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3b04      	subs	r3, #4
 800bcda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f06f 0202 	mvn.w	r2, #2
 800bce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3b20      	subs	r3, #32
 800bce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bcea:	68fb      	ldr	r3, [r7, #12]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	0800bcfd 	.word	0x0800bcfd

0800bcfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd06:	4b13      	ldr	r3, [pc, #76]	@ (800bd54 <prvTaskExitError+0x58>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd0e:	d00b      	beq.n	800bd28 <prvTaskExitError+0x2c>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	60fb      	str	r3, [r7, #12]
}
 800bd22:	bf00      	nop
 800bd24:	bf00      	nop
 800bd26:	e7fd      	b.n	800bd24 <prvTaskExitError+0x28>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	60bb      	str	r3, [r7, #8]
}
 800bd3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd3c:	bf00      	nop
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d0fc      	beq.n	800bd3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	20000184 	.word	0x20000184
	...

0800bd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd60:	4b07      	ldr	r3, [pc, #28]	@ (800bd80 <pxCurrentTCBConst2>)
 800bd62:	6819      	ldr	r1, [r3, #0]
 800bd64:	6808      	ldr	r0, [r1, #0]
 800bd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6a:	f380 8809 	msr	PSP, r0
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f04f 0000 	mov.w	r0, #0
 800bd76:	f380 8811 	msr	BASEPRI, r0
 800bd7a:	4770      	bx	lr
 800bd7c:	f3af 8000 	nop.w

0800bd80 <pxCurrentTCBConst2>:
 800bd80:	2000a7c0 	.word	0x2000a7c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop

0800bd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd88:	4808      	ldr	r0, [pc, #32]	@ (800bdac <prvPortStartFirstTask+0x24>)
 800bd8a:	6800      	ldr	r0, [r0, #0]
 800bd8c:	6800      	ldr	r0, [r0, #0]
 800bd8e:	f380 8808 	msr	MSP, r0
 800bd92:	f04f 0000 	mov.w	r0, #0
 800bd96:	f380 8814 	msr	CONTROL, r0
 800bd9a:	b662      	cpsie	i
 800bd9c:	b661      	cpsie	f
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	df00      	svc	0
 800bda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bdaa:	bf00      	nop
 800bdac:	e000ed08 	.word	0xe000ed08

0800bdb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bdb6:	4b47      	ldr	r3, [pc, #284]	@ (800bed4 <xPortStartScheduler+0x124>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a47      	ldr	r2, [pc, #284]	@ (800bed8 <xPortStartScheduler+0x128>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d10b      	bne.n	800bdd8 <xPortStartScheduler+0x28>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	613b      	str	r3, [r7, #16]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bdd8:	4b3e      	ldr	r3, [pc, #248]	@ (800bed4 <xPortStartScheduler+0x124>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a3f      	ldr	r2, [pc, #252]	@ (800bedc <xPortStartScheduler+0x12c>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d10b      	bne.n	800bdfa <xPortStartScheduler+0x4a>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	60fb      	str	r3, [r7, #12]
}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop
 800bdf8:	e7fd      	b.n	800bdf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bdfa:	4b39      	ldr	r3, [pc, #228]	@ (800bee0 <xPortStartScheduler+0x130>)
 800bdfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	22ff      	movs	r2, #255	@ 0xff
 800be0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	b2db      	uxtb	r3, r3
 800be12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be14:	78fb      	ldrb	r3, [r7, #3]
 800be16:	b2db      	uxtb	r3, r3
 800be18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	4b31      	ldr	r3, [pc, #196]	@ (800bee4 <xPortStartScheduler+0x134>)
 800be20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be22:	4b31      	ldr	r3, [pc, #196]	@ (800bee8 <xPortStartScheduler+0x138>)
 800be24:	2207      	movs	r2, #7
 800be26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be28:	e009      	b.n	800be3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800be2a:	4b2f      	ldr	r3, [pc, #188]	@ (800bee8 <xPortStartScheduler+0x138>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3b01      	subs	r3, #1
 800be30:	4a2d      	ldr	r2, [pc, #180]	@ (800bee8 <xPortStartScheduler+0x138>)
 800be32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be3e:	78fb      	ldrb	r3, [r7, #3]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be46:	2b80      	cmp	r3, #128	@ 0x80
 800be48:	d0ef      	beq.n	800be2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be4a:	4b27      	ldr	r3, [pc, #156]	@ (800bee8 <xPortStartScheduler+0x138>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f1c3 0307 	rsb	r3, r3, #7
 800be52:	2b04      	cmp	r3, #4
 800be54:	d00b      	beq.n	800be6e <xPortStartScheduler+0xbe>
	__asm volatile
 800be56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	60bb      	str	r3, [r7, #8]
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	e7fd      	b.n	800be6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bee8 <xPortStartScheduler+0x138>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	021b      	lsls	r3, r3, #8
 800be74:	4a1c      	ldr	r2, [pc, #112]	@ (800bee8 <xPortStartScheduler+0x138>)
 800be76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be78:	4b1b      	ldr	r3, [pc, #108]	@ (800bee8 <xPortStartScheduler+0x138>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be80:	4a19      	ldr	r2, [pc, #100]	@ (800bee8 <xPortStartScheduler+0x138>)
 800be82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	b2da      	uxtb	r2, r3
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be8c:	4b17      	ldr	r3, [pc, #92]	@ (800beec <xPortStartScheduler+0x13c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a16      	ldr	r2, [pc, #88]	@ (800beec <xPortStartScheduler+0x13c>)
 800be92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be98:	4b14      	ldr	r3, [pc, #80]	@ (800beec <xPortStartScheduler+0x13c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a13      	ldr	r2, [pc, #76]	@ (800beec <xPortStartScheduler+0x13c>)
 800be9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bea4:	f000 f8da 	bl	800c05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bea8:	4b11      	ldr	r3, [pc, #68]	@ (800bef0 <xPortStartScheduler+0x140>)
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800beae:	f000 f8f9 	bl	800c0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800beb2:	4b10      	ldr	r3, [pc, #64]	@ (800bef4 <xPortStartScheduler+0x144>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a0f      	ldr	r2, [pc, #60]	@ (800bef4 <xPortStartScheduler+0x144>)
 800beb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bebe:	f7ff ff63 	bl	800bd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bec2:	f7ff f805 	bl	800aed0 <vTaskSwitchContext>
	prvTaskExitError();
 800bec6:	f7ff ff19 	bl	800bcfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3718      	adds	r7, #24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	e000ed00 	.word	0xe000ed00
 800bed8:	410fc271 	.word	0x410fc271
 800bedc:	410fc270 	.word	0x410fc270
 800bee0:	e000e400 	.word	0xe000e400
 800bee4:	2000adec 	.word	0x2000adec
 800bee8:	2000adf0 	.word	0x2000adf0
 800beec:	e000ed20 	.word	0xe000ed20
 800bef0:	20000184 	.word	0x20000184
 800bef4:	e000ef34 	.word	0xe000ef34

0800bef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	607b      	str	r3, [r7, #4]
}
 800bf10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf12:	4b10      	ldr	r3, [pc, #64]	@ (800bf54 <vPortEnterCritical+0x5c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3301      	adds	r3, #1
 800bf18:	4a0e      	ldr	r2, [pc, #56]	@ (800bf54 <vPortEnterCritical+0x5c>)
 800bf1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf1c:	4b0d      	ldr	r3, [pc, #52]	@ (800bf54 <vPortEnterCritical+0x5c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d110      	bne.n	800bf46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf24:	4b0c      	ldr	r3, [pc, #48]	@ (800bf58 <vPortEnterCritical+0x60>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00b      	beq.n	800bf46 <vPortEnterCritical+0x4e>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	603b      	str	r3, [r7, #0]
}
 800bf40:	bf00      	nop
 800bf42:	bf00      	nop
 800bf44:	e7fd      	b.n	800bf42 <vPortEnterCritical+0x4a>
	}
}
 800bf46:	bf00      	nop
 800bf48:	370c      	adds	r7, #12
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	20000184 	.word	0x20000184
 800bf58:	e000ed04 	.word	0xe000ed04

0800bf5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf62:	4b12      	ldr	r3, [pc, #72]	@ (800bfac <vPortExitCritical+0x50>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10b      	bne.n	800bf82 <vPortExitCritical+0x26>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	607b      	str	r3, [r7, #4]
}
 800bf7c:	bf00      	nop
 800bf7e:	bf00      	nop
 800bf80:	e7fd      	b.n	800bf7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf82:	4b0a      	ldr	r3, [pc, #40]	@ (800bfac <vPortExitCritical+0x50>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	4a08      	ldr	r2, [pc, #32]	@ (800bfac <vPortExitCritical+0x50>)
 800bf8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf8c:	4b07      	ldr	r3, [pc, #28]	@ (800bfac <vPortExitCritical+0x50>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d105      	bne.n	800bfa0 <vPortExitCritical+0x44>
 800bf94:	2300      	movs	r3, #0
 800bf96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	f383 8811 	msr	BASEPRI, r3
}
 800bf9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	20000184 	.word	0x20000184

0800bfb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfb0:	f3ef 8009 	mrs	r0, PSP
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	4b15      	ldr	r3, [pc, #84]	@ (800c010 <pxCurrentTCBConst>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	f01e 0f10 	tst.w	lr, #16
 800bfc0:	bf08      	it	eq
 800bfc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfca:	6010      	str	r0, [r2, #0]
 800bfcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bfd4:	f380 8811 	msr	BASEPRI, r0
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f7fe ff76 	bl	800aed0 <vTaskSwitchContext>
 800bfe4:	f04f 0000 	mov.w	r0, #0
 800bfe8:	f380 8811 	msr	BASEPRI, r0
 800bfec:	bc09      	pop	{r0, r3}
 800bfee:	6819      	ldr	r1, [r3, #0]
 800bff0:	6808      	ldr	r0, [r1, #0]
 800bff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff6:	f01e 0f10 	tst.w	lr, #16
 800bffa:	bf08      	it	eq
 800bffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c000:	f380 8809 	msr	PSP, r0
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	f3af 8000 	nop.w

0800c010 <pxCurrentTCBConst>:
 800c010:	2000a7c0 	.word	0x2000a7c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop

0800c018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	607b      	str	r3, [r7, #4]
}
 800c030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c032:	f7fe fe93 	bl	800ad5c <xTaskIncrementTick>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d003      	beq.n	800c044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c03c:	4b06      	ldr	r3, [pc, #24]	@ (800c058 <xPortSysTickHandler+0x40>)
 800c03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	2300      	movs	r3, #0
 800c046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	f383 8811 	msr	BASEPRI, r3
}
 800c04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	e000ed04 	.word	0xe000ed04

0800c05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c05c:	b480      	push	{r7}
 800c05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c060:	4b0b      	ldr	r3, [pc, #44]	@ (800c090 <vPortSetupTimerInterrupt+0x34>)
 800c062:	2200      	movs	r2, #0
 800c064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c066:	4b0b      	ldr	r3, [pc, #44]	@ (800c094 <vPortSetupTimerInterrupt+0x38>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c06c:	4b0a      	ldr	r3, [pc, #40]	@ (800c098 <vPortSetupTimerInterrupt+0x3c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a0a      	ldr	r2, [pc, #40]	@ (800c09c <vPortSetupTimerInterrupt+0x40>)
 800c072:	fba2 2303 	umull	r2, r3, r2, r3
 800c076:	099b      	lsrs	r3, r3, #6
 800c078:	4a09      	ldr	r2, [pc, #36]	@ (800c0a0 <vPortSetupTimerInterrupt+0x44>)
 800c07a:	3b01      	subs	r3, #1
 800c07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c07e:	4b04      	ldr	r3, [pc, #16]	@ (800c090 <vPortSetupTimerInterrupt+0x34>)
 800c080:	2207      	movs	r2, #7
 800c082:	601a      	str	r2, [r3, #0]
}
 800c084:	bf00      	nop
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	e000e010 	.word	0xe000e010
 800c094:	e000e018 	.word	0xe000e018
 800c098:	20000178 	.word	0x20000178
 800c09c:	10624dd3 	.word	0x10624dd3
 800c0a0:	e000e014 	.word	0xe000e014

0800c0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c0b4 <vPortEnableVFP+0x10>
 800c0a8:	6801      	ldr	r1, [r0, #0]
 800c0aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c0ae:	6001      	str	r1, [r0, #0]
 800c0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c0b2:	bf00      	nop
 800c0b4:	e000ed88 	.word	0xe000ed88

0800c0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c0be:	f3ef 8305 	mrs	r3, IPSR
 800c0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b0f      	cmp	r3, #15
 800c0c8:	d915      	bls.n	800c0f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0ca:	4a18      	ldr	r2, [pc, #96]	@ (800c12c <vPortValidateInterruptPriority+0x74>)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0d4:	4b16      	ldr	r3, [pc, #88]	@ (800c130 <vPortValidateInterruptPriority+0x78>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	7afa      	ldrb	r2, [r7, #11]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d20b      	bcs.n	800c0f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	607b      	str	r3, [r7, #4]
}
 800c0f0:	bf00      	nop
 800c0f2:	bf00      	nop
 800c0f4:	e7fd      	b.n	800c0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c134 <vPortValidateInterruptPriority+0x7c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c138 <vPortValidateInterruptPriority+0x80>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	429a      	cmp	r2, r3
 800c104:	d90b      	bls.n	800c11e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	603b      	str	r3, [r7, #0]
}
 800c118:	bf00      	nop
 800c11a:	bf00      	nop
 800c11c:	e7fd      	b.n	800c11a <vPortValidateInterruptPriority+0x62>
	}
 800c11e:	bf00      	nop
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	e000e3f0 	.word	0xe000e3f0
 800c130:	2000adec 	.word	0x2000adec
 800c134:	e000ed0c 	.word	0xe000ed0c
 800c138:	2000adf0 	.word	0x2000adf0

0800c13c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08a      	sub	sp, #40	@ 0x28
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c144:	2300      	movs	r3, #0
 800c146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c148:	f7fe fd4c 	bl	800abe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c14c:	4b5c      	ldr	r3, [pc, #368]	@ (800c2c0 <pvPortMalloc+0x184>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d101      	bne.n	800c158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c154:	f000 f924 	bl	800c3a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c158:	4b5a      	ldr	r3, [pc, #360]	@ (800c2c4 <pvPortMalloc+0x188>)
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4013      	ands	r3, r2
 800c160:	2b00      	cmp	r3, #0
 800c162:	f040 8095 	bne.w	800c290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01e      	beq.n	800c1aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c16c:	2208      	movs	r2, #8
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4413      	add	r3, r2
 800c172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f003 0307 	and.w	r3, r3, #7
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d015      	beq.n	800c1aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f023 0307 	bic.w	r3, r3, #7
 800c184:	3308      	adds	r3, #8
 800c186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f003 0307 	and.w	r3, r3, #7
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00b      	beq.n	800c1aa <pvPortMalloc+0x6e>
	__asm volatile
 800c192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	617b      	str	r3, [r7, #20]
}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop
 800c1a8:	e7fd      	b.n	800c1a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d06f      	beq.n	800c290 <pvPortMalloc+0x154>
 800c1b0:	4b45      	ldr	r3, [pc, #276]	@ (800c2c8 <pvPortMalloc+0x18c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d86a      	bhi.n	800c290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c1ba:	4b44      	ldr	r3, [pc, #272]	@ (800c2cc <pvPortMalloc+0x190>)
 800c1bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c1be:	4b43      	ldr	r3, [pc, #268]	@ (800c2cc <pvPortMalloc+0x190>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1c4:	e004      	b.n	800c1d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d903      	bls.n	800c1e2 <pvPortMalloc+0xa6>
 800c1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1f1      	bne.n	800c1c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1e2:	4b37      	ldr	r3, [pc, #220]	@ (800c2c0 <pvPortMalloc+0x184>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d051      	beq.n	800c290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1ec:	6a3b      	ldr	r3, [r7, #32]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	4413      	add	r3, r2
 800c1f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	6a3b      	ldr	r3, [r7, #32]
 800c1fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	685a      	ldr	r2, [r3, #4]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	1ad2      	subs	r2, r2, r3
 800c206:	2308      	movs	r3, #8
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d920      	bls.n	800c250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c20e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4413      	add	r3, r2
 800c214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	f003 0307 	and.w	r3, r3, #7
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00b      	beq.n	800c238 <pvPortMalloc+0xfc>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	613b      	str	r3, [r7, #16]
}
 800c232:	bf00      	nop
 800c234:	bf00      	nop
 800c236:	e7fd      	b.n	800c234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	1ad2      	subs	r2, r2, r3
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c24a:	69b8      	ldr	r0, [r7, #24]
 800c24c:	f000 f90a 	bl	800c464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c250:	4b1d      	ldr	r3, [pc, #116]	@ (800c2c8 <pvPortMalloc+0x18c>)
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	4a1b      	ldr	r2, [pc, #108]	@ (800c2c8 <pvPortMalloc+0x18c>)
 800c25c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c25e:	4b1a      	ldr	r3, [pc, #104]	@ (800c2c8 <pvPortMalloc+0x18c>)
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	4b1b      	ldr	r3, [pc, #108]	@ (800c2d0 <pvPortMalloc+0x194>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	429a      	cmp	r2, r3
 800c268:	d203      	bcs.n	800c272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c26a:	4b17      	ldr	r3, [pc, #92]	@ (800c2c8 <pvPortMalloc+0x18c>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a18      	ldr	r2, [pc, #96]	@ (800c2d0 <pvPortMalloc+0x194>)
 800c270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	4b13      	ldr	r3, [pc, #76]	@ (800c2c4 <pvPortMalloc+0x188>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	431a      	orrs	r2, r3
 800c27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c286:	4b13      	ldr	r3, [pc, #76]	@ (800c2d4 <pvPortMalloc+0x198>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3301      	adds	r3, #1
 800c28c:	4a11      	ldr	r2, [pc, #68]	@ (800c2d4 <pvPortMalloc+0x198>)
 800c28e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c290:	f7fe fcb6 	bl	800ac00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00b      	beq.n	800c2b6 <pvPortMalloc+0x17a>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	60fb      	str	r3, [r7, #12]
}
 800c2b0:	bf00      	nop
 800c2b2:	bf00      	nop
 800c2b4:	e7fd      	b.n	800c2b2 <pvPortMalloc+0x176>
	return pvReturn;
 800c2b6:	69fb      	ldr	r3, [r7, #28]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3728      	adds	r7, #40	@ 0x28
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	20012c64 	.word	0x20012c64
 800c2c4:	20012c78 	.word	0x20012c78
 800c2c8:	20012c68 	.word	0x20012c68
 800c2cc:	20012c5c 	.word	0x20012c5c
 800c2d0:	20012c6c 	.word	0x20012c6c
 800c2d4:	20012c70 	.word	0x20012c70

0800c2d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b086      	sub	sp, #24
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d04f      	beq.n	800c38a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2ea:	2308      	movs	r3, #8
 800c2ec:	425b      	negs	r3, r3
 800c2ee:	697a      	ldr	r2, [r7, #20]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	4b25      	ldr	r3, [pc, #148]	@ (800c394 <vPortFree+0xbc>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4013      	ands	r3, r2
 800c302:	2b00      	cmp	r3, #0
 800c304:	d10b      	bne.n	800c31e <vPortFree+0x46>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	60fb      	str	r3, [r7, #12]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00b      	beq.n	800c33e <vPortFree+0x66>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	60bb      	str	r3, [r7, #8]
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	e7fd      	b.n	800c33a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	685a      	ldr	r2, [r3, #4]
 800c342:	4b14      	ldr	r3, [pc, #80]	@ (800c394 <vPortFree+0xbc>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4013      	ands	r3, r2
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01e      	beq.n	800c38a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d11a      	bne.n	800c38a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	4b0e      	ldr	r3, [pc, #56]	@ (800c394 <vPortFree+0xbc>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	43db      	mvns	r3, r3
 800c35e:	401a      	ands	r2, r3
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c364:	f7fe fc3e 	bl	800abe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	4b0a      	ldr	r3, [pc, #40]	@ (800c398 <vPortFree+0xc0>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4413      	add	r3, r2
 800c372:	4a09      	ldr	r2, [pc, #36]	@ (800c398 <vPortFree+0xc0>)
 800c374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c376:	6938      	ldr	r0, [r7, #16]
 800c378:	f000 f874 	bl	800c464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c37c:	4b07      	ldr	r3, [pc, #28]	@ (800c39c <vPortFree+0xc4>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3301      	adds	r3, #1
 800c382:	4a06      	ldr	r2, [pc, #24]	@ (800c39c <vPortFree+0xc4>)
 800c384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c386:	f7fe fc3b 	bl	800ac00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c38a:	bf00      	nop
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	20012c78 	.word	0x20012c78
 800c398:	20012c68 	.word	0x20012c68
 800c39c:	20012c74 	.word	0x20012c74

0800c3a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3a6:	f647 6368 	movw	r3, #32360	@ 0x7e68
 800c3aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3ac:	4b27      	ldr	r3, [pc, #156]	@ (800c44c <prvHeapInit+0xac>)
 800c3ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00c      	beq.n	800c3d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3307      	adds	r3, #7
 800c3be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f023 0307 	bic.w	r3, r3, #7
 800c3c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	4a1f      	ldr	r2, [pc, #124]	@ (800c44c <prvHeapInit+0xac>)
 800c3d0:	4413      	add	r3, r2
 800c3d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c450 <prvHeapInit+0xb0>)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c3de:	4b1c      	ldr	r3, [pc, #112]	@ (800c450 <prvHeapInit+0xb0>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c3ec:	2208      	movs	r2, #8
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	1a9b      	subs	r3, r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f023 0307 	bic.w	r3, r3, #7
 800c3fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4a15      	ldr	r2, [pc, #84]	@ (800c454 <prvHeapInit+0xb4>)
 800c400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c402:	4b14      	ldr	r3, [pc, #80]	@ (800c454 <prvHeapInit+0xb4>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2200      	movs	r2, #0
 800c408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c40a:	4b12      	ldr	r3, [pc, #72]	@ (800c454 <prvHeapInit+0xb4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2200      	movs	r2, #0
 800c410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	1ad2      	subs	r2, r2, r3
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c420:	4b0c      	ldr	r3, [pc, #48]	@ (800c454 <prvHeapInit+0xb4>)
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	4a0a      	ldr	r2, [pc, #40]	@ (800c458 <prvHeapInit+0xb8>)
 800c42e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	4a09      	ldr	r2, [pc, #36]	@ (800c45c <prvHeapInit+0xbc>)
 800c436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c438:	4b09      	ldr	r3, [pc, #36]	@ (800c460 <prvHeapInit+0xc0>)
 800c43a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c43e:	601a      	str	r2, [r3, #0]
}
 800c440:	bf00      	nop
 800c442:	3714      	adds	r7, #20
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	2000adf4 	.word	0x2000adf4
 800c450:	20012c5c 	.word	0x20012c5c
 800c454:	20012c64 	.word	0x20012c64
 800c458:	20012c6c 	.word	0x20012c6c
 800c45c:	20012c68 	.word	0x20012c68
 800c460:	20012c78 	.word	0x20012c78

0800c464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c46c:	4b28      	ldr	r3, [pc, #160]	@ (800c510 <prvInsertBlockIntoFreeList+0xac>)
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	e002      	b.n	800c478 <prvInsertBlockIntoFreeList+0x14>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d8f7      	bhi.n	800c472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	4413      	add	r3, r2
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d108      	bne.n	800c4a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	685a      	ldr	r2, [r3, #4]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	441a      	add	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	441a      	add	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d118      	bne.n	800c4ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	4b15      	ldr	r3, [pc, #84]	@ (800c514 <prvInsertBlockIntoFreeList+0xb0>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d00d      	beq.n	800c4e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	685a      	ldr	r2, [r3, #4]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	441a      	add	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	e008      	b.n	800c4f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c514 <prvInsertBlockIntoFreeList+0xb0>)
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	601a      	str	r2, [r3, #0]
 800c4ea:	e003      	b.n	800c4f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d002      	beq.n	800c502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c502:	bf00      	nop
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	20012c5c 	.word	0x20012c5c
 800c514:	20012c64 	.word	0x20012c64

0800c518 <_rclc_check_for_new_data>:
 800c518:	2800      	cmp	r0, #0
 800c51a:	d046      	beq.n	800c5aa <_rclc_check_for_new_data+0x92>
 800c51c:	b510      	push	{r4, lr}
 800c51e:	7802      	ldrb	r2, [r0, #0]
 800c520:	b084      	sub	sp, #16
 800c522:	4603      	mov	r3, r0
 800c524:	2a0a      	cmp	r2, #10
 800c526:	d842      	bhi.n	800c5ae <_rclc_check_for_new_data+0x96>
 800c528:	e8df f002 	tbb	[pc, r2]
 800c52c:	14181212 	.word	0x14181212
 800c530:	06060614 	.word	0x06060614
 800c534:	2e1a      	.short	0x2e1a
 800c536:	16          	.byte	0x16
 800c537:	00          	.byte	0x00
 800c538:	6a0a      	ldr	r2, [r1, #32]
 800c53a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c53c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c540:	3a00      	subs	r2, #0
 800c542:	bf18      	it	ne
 800c544:	2201      	movne	r2, #1
 800c546:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c54a:	2000      	movs	r0, #0
 800c54c:	b004      	add	sp, #16
 800c54e:	bd10      	pop	{r4, pc}
 800c550:	680a      	ldr	r2, [r1, #0]
 800c552:	e7f2      	b.n	800c53a <_rclc_check_for_new_data+0x22>
 800c554:	698a      	ldr	r2, [r1, #24]
 800c556:	e7f0      	b.n	800c53a <_rclc_check_for_new_data+0x22>
 800c558:	688a      	ldr	r2, [r1, #8]
 800c55a:	e7ee      	b.n	800c53a <_rclc_check_for_new_data+0x22>
 800c55c:	690a      	ldr	r2, [r1, #16]
 800c55e:	e7ec      	b.n	800c53a <_rclc_check_for_new_data+0x22>
 800c560:	685c      	ldr	r4, [r3, #4]
 800c562:	4608      	mov	r0, r1
 800c564:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c568:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c56c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c570:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c57a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c57e:	f104 0110 	add.w	r1, r4, #16
 800c582:	f005 f925 	bl	80117d0 <rcl_action_client_wait_set_get_entities_ready>
 800c586:	e7e1      	b.n	800c54c <_rclc_check_for_new_data+0x34>
 800c588:	685c      	ldr	r4, [r3, #4]
 800c58a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c58e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c592:	e9cd 3200 	strd	r3, r2, [sp]
 800c596:	4608      	mov	r0, r1
 800c598:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c59c:	f104 0220 	add.w	r2, r4, #32
 800c5a0:	f104 0110 	add.w	r1, r4, #16
 800c5a4:	f005 fb1a 	bl	8011bdc <rcl_action_server_wait_set_get_entities_ready>
 800c5a8:	e7d0      	b.n	800c54c <_rclc_check_for_new_data+0x34>
 800c5aa:	200b      	movs	r0, #11
 800c5ac:	4770      	bx	lr
 800c5ae:	2001      	movs	r0, #1
 800c5b0:	e7cc      	b.n	800c54c <_rclc_check_for_new_data+0x34>
 800c5b2:	bf00      	nop

0800c5b4 <_rclc_take_new_data>:
 800c5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b6:	b099      	sub	sp, #100	@ 0x64
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	f000 8082 	beq.w	800c6c2 <_rclc_take_new_data+0x10e>
 800c5be:	7803      	ldrb	r3, [r0, #0]
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	2b0a      	cmp	r3, #10
 800c5c4:	f200 815d 	bhi.w	800c882 <_rclc_take_new_data+0x2ce>
 800c5c8:	e8df f003 	tbb	[pc, r3]
 800c5cc:	31531f1f 	.word	0x31531f1f
 800c5d0:	06060631 	.word	0x06060631
 800c5d4:	4555      	.short	0x4555
 800c5d6:	53          	.byte	0x53
 800c5d7:	00          	.byte	0x00
 800c5d8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c5da:	6a0b      	ldr	r3, [r1, #32]
 800c5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d046      	beq.n	800c672 <_rclc_take_new_data+0xbe>
 800c5e4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c5e8:	f104 0110 	add.w	r1, r4, #16
 800c5ec:	f003 fcac 	bl	800ff48 <rcl_take_request>
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d03d      	beq.n	800c672 <_rclc_take_new_data+0xbe>
 800c5f6:	f240 2359 	movw	r3, #601	@ 0x259
 800c5fa:	4298      	cmp	r0, r3
 800c5fc:	d128      	bne.n	800c650 <_rclc_take_new_data+0x9c>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c604:	4628      	mov	r0, r5
 800c606:	b019      	add	sp, #100	@ 0x64
 800c608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c60a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c60c:	680b      	ldr	r3, [r1, #0]
 800c60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c612:	b373      	cbz	r3, 800c672 <_rclc_take_new_data+0xbe>
 800c614:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c618:	2300      	movs	r3, #0
 800c61a:	aa0a      	add	r2, sp, #40	@ 0x28
 800c61c:	f003 fe84 	bl	8010328 <rcl_take>
 800c620:	4605      	mov	r5, r0
 800c622:	b330      	cbz	r0, 800c672 <_rclc_take_new_data+0xbe>
 800c624:	f240 1391 	movw	r3, #401	@ 0x191
 800c628:	4298      	cmp	r0, r3
 800c62a:	d0e8      	beq.n	800c5fe <_rclc_take_new_data+0x4a>
 800c62c:	e010      	b.n	800c650 <_rclc_take_new_data+0x9c>
 800c62e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c630:	698b      	ldr	r3, [r1, #24]
 800c632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c636:	b1e3      	cbz	r3, 800c672 <_rclc_take_new_data+0xbe>
 800c638:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c63c:	f104 0110 	add.w	r1, r4, #16
 800c640:	f002 fc9e 	bl	800ef80 <rcl_take_response>
 800c644:	4605      	mov	r5, r0
 800c646:	b1a0      	cbz	r0, 800c672 <_rclc_take_new_data+0xbe>
 800c648:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c64c:	4298      	cmp	r0, r3
 800c64e:	d0d9      	beq.n	800c604 <_rclc_take_new_data+0x50>
 800c650:	f000 fe6a 	bl	800d328 <rcutils_reset_error>
 800c654:	e7d6      	b.n	800c604 <_rclc_take_new_data+0x50>
 800c656:	6840      	ldr	r0, [r0, #4]
 800c658:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d15f      	bne.n	800c720 <_rclc_take_new_data+0x16c>
 800c660:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c664:	2b00      	cmp	r3, #0
 800c666:	d179      	bne.n	800c75c <_rclc_take_new_data+0x1a8>
 800c668:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 8096 	bne.w	800c79e <_rclc_take_new_data+0x1ea>
 800c672:	2500      	movs	r5, #0
 800c674:	e7c6      	b.n	800c604 <_rclc_take_new_data+0x50>
 800c676:	6840      	ldr	r0, [r0, #4]
 800c678:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d138      	bne.n	800c6f2 <_rclc_take_new_data+0x13e>
 800c680:	69c3      	ldr	r3, [r0, #28]
 800c682:	b113      	cbz	r3, 800c68a <_rclc_take_new_data+0xd6>
 800c684:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c688:	b9fb      	cbnz	r3, 800c6ca <_rclc_take_new_data+0x116>
 800c68a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 80a8 	bne.w	800c7e4 <_rclc_take_new_data+0x230>
 800c694:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d0ea      	beq.n	800c672 <_rclc_take_new_data+0xbe>
 800c69c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c69e:	a90a      	add	r1, sp, #40	@ 0x28
 800c6a0:	3010      	adds	r0, #16
 800c6a2:	f004 ff79 	bl	8011598 <rcl_action_take_result_response>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d1d1      	bne.n	800c650 <_rclc_take_new_data+0x9c>
 800c6ac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6b0:	6860      	ldr	r0, [r4, #4]
 800c6b2:	f005 fbb9 	bl	8011e28 <rclc_action_find_handle_by_result_request_sequence_number>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d0db      	beq.n	800c672 <_rclc_take_new_data+0xbe>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c6c0:	e7d7      	b.n	800c672 <_rclc_take_new_data+0xbe>
 800c6c2:	250b      	movs	r5, #11
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	b019      	add	sp, #100	@ 0x64
 800c6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ca:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c6cc:	3010      	adds	r0, #16
 800c6ce:	f004 ffdf 	bl	8011690 <rcl_action_take_feedback>
 800c6d2:	4605      	mov	r5, r0
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d1bb      	bne.n	800c650 <_rclc_take_new_data+0x9c>
 800c6d8:	6860      	ldr	r0, [r4, #4]
 800c6da:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c6dc:	f005 fb62 	bl	8011da4 <rclc_action_find_goal_handle_by_uuid>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f000 80c4 	beq.w	800c870 <_rclc_take_new_data+0x2bc>
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	6860      	ldr	r0, [r4, #4]
 800c6ec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c6f0:	e7cb      	b.n	800c68a <_rclc_take_new_data+0xd6>
 800c6f2:	aa04      	add	r2, sp, #16
 800c6f4:	a90a      	add	r1, sp, #40	@ 0x28
 800c6f6:	3010      	adds	r0, #16
 800c6f8:	f004 fede 	bl	80114b8 <rcl_action_take_goal_response>
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	2800      	cmp	r0, #0
 800c700:	d1a6      	bne.n	800c650 <_rclc_take_new_data+0x9c>
 800c702:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c706:	6860      	ldr	r0, [r4, #4]
 800c708:	f005 fb7c 	bl	8011e04 <rclc_action_find_handle_by_goal_request_sequence_number>
 800c70c:	b130      	cbz	r0, 800c71c <_rclc_take_new_data+0x168>
 800c70e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c712:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c716:	2201      	movs	r2, #1
 800c718:	f880 2020 	strb.w	r2, [r0, #32]
 800c71c:	6860      	ldr	r0, [r4, #4]
 800c71e:	e7af      	b.n	800c680 <_rclc_take_new_data+0xcc>
 800c720:	f005 fb1a 	bl	8011d58 <rclc_action_take_goal_handle>
 800c724:	4606      	mov	r6, r0
 800c726:	6860      	ldr	r0, [r4, #4]
 800c728:	2e00      	cmp	r6, #0
 800c72a:	d099      	beq.n	800c660 <_rclc_take_new_data+0xac>
 800c72c:	6070      	str	r0, [r6, #4]
 800c72e:	69f2      	ldr	r2, [r6, #28]
 800c730:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c734:	3010      	adds	r0, #16
 800c736:	f005 f8db 	bl	80118f0 <rcl_action_take_goal_request>
 800c73a:	4605      	mov	r5, r0
 800c73c:	2800      	cmp	r0, #0
 800c73e:	f040 8099 	bne.w	800c874 <_rclc_take_new_data+0x2c0>
 800c742:	69f7      	ldr	r7, [r6, #28]
 800c744:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c746:	7235      	strb	r5, [r6, #8]
 800c748:	f8c6 0009 	str.w	r0, [r6, #9]
 800c74c:	f8c6 100d 	str.w	r1, [r6, #13]
 800c750:	6860      	ldr	r0, [r4, #4]
 800c752:	f8c6 2011 	str.w	r2, [r6, #17]
 800c756:	f8c6 3015 	str.w	r3, [r6, #21]
 800c75a:	e781      	b.n	800c660 <_rclc_take_new_data+0xac>
 800c75c:	aa04      	add	r2, sp, #16
 800c75e:	3010      	adds	r0, #16
 800c760:	a90a      	add	r1, sp, #40	@ 0x28
 800c762:	f005 f935 	bl	80119d0 <rcl_action_take_result_request>
 800c766:	4605      	mov	r5, r0
 800c768:	2800      	cmp	r0, #0
 800c76a:	f47f af71 	bne.w	800c650 <_rclc_take_new_data+0x9c>
 800c76e:	6860      	ldr	r0, [r4, #4]
 800c770:	a904      	add	r1, sp, #16
 800c772:	f005 fb17 	bl	8011da4 <rclc_action_find_goal_handle_by_uuid>
 800c776:	4607      	mov	r7, r0
 800c778:	b160      	cbz	r0, 800c794 <_rclc_take_new_data+0x1e0>
 800c77a:	ad0a      	add	r5, sp, #40	@ 0x28
 800c77c:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c782:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c784:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c788:	f04f 0c02 	mov.w	ip, #2
 800c78c:	e886 0003 	stmia.w	r6, {r0, r1}
 800c790:	f887 c008 	strb.w	ip, [r7, #8]
 800c794:	6860      	ldr	r0, [r4, #4]
 800c796:	2300      	movs	r3, #0
 800c798:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c79c:	e764      	b.n	800c668 <_rclc_take_new_data+0xb4>
 800c79e:	ae04      	add	r6, sp, #16
 800c7a0:	aa0a      	add	r2, sp, #40	@ 0x28
 800c7a2:	3010      	adds	r0, #16
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	f005 f951 	bl	8011a4c <rcl_action_take_cancel_request>
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	f47f af4f 	bne.w	800c650 <_rclc_take_new_data+0x9c>
 800c7b2:	6860      	ldr	r0, [r4, #4]
 800c7b4:	a90a      	add	r1, sp, #40	@ 0x28
 800c7b6:	f005 faf5 	bl	8011da4 <rclc_action_find_goal_handle_by_uuid>
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d04c      	beq.n	800c85a <_rclc_take_new_data+0x2a6>
 800c7c0:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	f005 fa75 	bl	8011cb4 <rcl_action_transition_goal_state>
 800c7ca:	2803      	cmp	r0, #3
 800c7cc:	4607      	mov	r7, r0
 800c7ce:	d139      	bne.n	800c844 <_rclc_take_new_data+0x290>
 800c7d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c7d2:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800c7d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7d8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c7dc:	e884 0003 	stmia.w	r4, {r0, r1}
 800c7e0:	722f      	strb	r7, [r5, #8]
 800c7e2:	e746      	b.n	800c672 <_rclc_take_new_data+0xbe>
 800c7e4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c7e8:	a90a      	add	r1, sp, #40	@ 0x28
 800c7ea:	3010      	adds	r0, #16
 800c7ec:	f004 ff12 	bl	8011614 <rcl_action_take_cancel_response>
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	f47f af2c 	bne.w	800c650 <_rclc_take_new_data+0x9c>
 800c7f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c7fc:	6860      	ldr	r0, [r4, #4]
 800c7fe:	f005 fb25 	bl	8011e4c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c802:	4606      	mov	r6, r0
 800c804:	6860      	ldr	r0, [r4, #4]
 800c806:	2e00      	cmp	r6, #0
 800c808:	f43f af44 	beq.w	800c694 <_rclc_take_new_data+0xe0>
 800c80c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c80e:	2701      	movs	r7, #1
 800c810:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c812:	2b00      	cmp	r3, #0
 800c814:	f43f af3e 	beq.w	800c694 <_rclc_take_new_data+0xe0>
 800c818:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c81a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c81e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c822:	f005 fabf 	bl	8011da4 <rclc_action_find_goal_handle_by_uuid>
 800c826:	b138      	cbz	r0, 800c838 <_rclc_take_new_data+0x284>
 800c828:	6860      	ldr	r0, [r4, #4]
 800c82a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c82c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c830:	3501      	adds	r5, #1
 800c832:	42ab      	cmp	r3, r5
 800c834:	d8f0      	bhi.n	800c818 <_rclc_take_new_data+0x264>
 800c836:	e72d      	b.n	800c694 <_rclc_take_new_data+0xe0>
 800c838:	6860      	ldr	r0, [r4, #4]
 800c83a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c83c:	3501      	adds	r5, #1
 800c83e:	42ab      	cmp	r3, r5
 800c840:	d8ea      	bhi.n	800c818 <_rclc_take_new_data+0x264>
 800c842:	e727      	b.n	800c694 <_rclc_take_new_data+0xe0>
 800c844:	ab06      	add	r3, sp, #24
 800c846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c848:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c84c:	2103      	movs	r1, #3
 800c84e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c852:	6860      	ldr	r0, [r4, #4]
 800c854:	f005 fb70 	bl	8011f38 <rclc_action_server_goal_cancel_reject>
 800c858:	e70b      	b.n	800c672 <_rclc_take_new_data+0xbe>
 800c85a:	ab06      	add	r3, sp, #24
 800c85c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c85e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c862:	2102      	movs	r1, #2
 800c864:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c868:	6860      	ldr	r0, [r4, #4]
 800c86a:	f005 fb65 	bl	8011f38 <rclc_action_server_goal_cancel_reject>
 800c86e:	e700      	b.n	800c672 <_rclc_take_new_data+0xbe>
 800c870:	6860      	ldr	r0, [r4, #4]
 800c872:	e70a      	b.n	800c68a <_rclc_take_new_data+0xd6>
 800c874:	6860      	ldr	r0, [r4, #4]
 800c876:	4631      	mov	r1, r6
 800c878:	f005 fa7e 	bl	8011d78 <rclc_action_remove_used_goal_handle>
 800c87c:	f000 fd54 	bl	800d328 <rcutils_reset_error>
 800c880:	e6c0      	b.n	800c604 <_rclc_take_new_data+0x50>
 800c882:	2501      	movs	r5, #1
 800c884:	e6be      	b.n	800c604 <_rclc_take_new_data+0x50>
 800c886:	bf00      	nop

0800c888 <rclc_executor_trigger_any>:
 800c888:	4603      	mov	r3, r0
 800c88a:	b370      	cbz	r0, 800c8ea <rclc_executor_trigger_any+0x62>
 800c88c:	b379      	cbz	r1, 800c8ee <rclc_executor_trigger_any+0x66>
 800c88e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c892:	2200      	movs	r2, #0
 800c894:	b350      	cbz	r0, 800c8ec <rclc_executor_trigger_any+0x64>
 800c896:	b430      	push	{r4, r5}
 800c898:	f893 c000 	ldrb.w	ip, [r3]
 800c89c:	f1bc 0f08 	cmp.w	ip, #8
 800c8a0:	d017      	beq.n	800c8d2 <rclc_executor_trigger_any+0x4a>
 800c8a2:	f1bc 0f09 	cmp.w	ip, #9
 800c8a6:	d00d      	beq.n	800c8c4 <rclc_executor_trigger_any+0x3c>
 800c8a8:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c8ac:	b940      	cbnz	r0, 800c8c0 <rclc_executor_trigger_any+0x38>
 800c8ae:	3201      	adds	r2, #1
 800c8b0:	4291      	cmp	r1, r2
 800c8b2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c8b6:	d003      	beq.n	800c8c0 <rclc_executor_trigger_any+0x38>
 800c8b8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d1eb      	bne.n	800c898 <rclc_executor_trigger_any+0x10>
 800c8c0:	bc30      	pop	{r4, r5}
 800c8c2:	4770      	bx	lr
 800c8c4:	685c      	ldr	r4, [r3, #4]
 800c8c6:	6a25      	ldr	r5, [r4, #32]
 800c8c8:	2d00      	cmp	r5, #0
 800c8ca:	d1f9      	bne.n	800c8c0 <rclc_executor_trigger_any+0x38>
 800c8cc:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c8d0:	e7ec      	b.n	800c8ac <rclc_executor_trigger_any+0x24>
 800c8d2:	685c      	ldr	r4, [r3, #4]
 800c8d4:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c8d6:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c8da:	d1f1      	bne.n	800c8c0 <rclc_executor_trigger_any+0x38>
 800c8dc:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d1ed      	bne.n	800c8c0 <rclc_executor_trigger_any+0x38>
 800c8e4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c8e8:	e7e0      	b.n	800c8ac <rclc_executor_trigger_any+0x24>
 800c8ea:	4770      	bx	lr
 800c8ec:	4770      	bx	lr
 800c8ee:	4608      	mov	r0, r1
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop

0800c8f4 <_rclc_execute>:
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	f000 80da 	beq.w	800caae <_rclc_execute+0x1ba>
 800c8fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8fc:	7843      	ldrb	r3, [r0, #1]
 800c8fe:	b087      	sub	sp, #28
 800c900:	4604      	mov	r4, r0
 800c902:	b123      	cbz	r3, 800c90e <_rclc_execute+0x1a>
 800c904:	2b01      	cmp	r3, #1
 800c906:	d01c      	beq.n	800c942 <_rclc_execute+0x4e>
 800c908:	2000      	movs	r0, #0
 800c90a:	b007      	add	sp, #28
 800c90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c90e:	7803      	ldrb	r3, [r0, #0]
 800c910:	2b08      	cmp	r3, #8
 800c912:	f000 809e 	beq.w	800ca52 <_rclc_execute+0x15e>
 800c916:	2b09      	cmp	r3, #9
 800c918:	d024      	beq.n	800c964 <_rclc_execute+0x70>
 800c91a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c91e:	2800      	cmp	r0, #0
 800c920:	d0f2      	beq.n	800c908 <_rclc_execute+0x14>
 800c922:	2b0a      	cmp	r3, #10
 800c924:	f200 8158 	bhi.w	800cbd8 <_rclc_execute+0x2e4>
 800c928:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c92c:	008c0071 	.word	0x008c0071
 800c930:	0071007e 	.word	0x0071007e
 800c934:	00590075 	.word	0x00590075
 800c938:	00590059 	.word	0x00590059
 800c93c:	01560156 	.word	0x01560156
 800c940:	007b      	.short	0x007b
 800c942:	7803      	ldrb	r3, [r0, #0]
 800c944:	2b0a      	cmp	r3, #10
 800c946:	f200 8147 	bhi.w	800cbd8 <_rclc_execute+0x2e4>
 800c94a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c94e:	00f7      	.short	0x00f7
 800c950:	006d0079 	.word	0x006d0079
 800c954:	00640060 	.word	0x00640060
 800c958:	00480048 	.word	0x00480048
 800c95c:	00fe0048 	.word	0x00fe0048
 800c960:	006a0100 	.word	0x006a0100
 800c964:	6840      	ldr	r0, [r0, #4]
 800c966:	6a02      	ldr	r2, [r0, #32]
 800c968:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c96c:	2a00      	cmp	r2, #0
 800c96e:	f040 80f1 	bne.w	800cb54 <_rclc_execute+0x260>
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0c8      	beq.n	800c908 <_rclc_execute+0x14>
 800c976:	e003      	b.n	800c980 <_rclc_execute+0x8c>
 800c978:	6858      	ldr	r0, [r3, #4]
 800c97a:	f005 f9fd 	bl	8011d78 <rclc_action_remove_used_goal_handle>
 800c97e:	6860      	ldr	r0, [r4, #4]
 800c980:	f005 fa34 	bl	8011dec <rclc_action_find_first_terminated_handle>
 800c984:	4603      	mov	r3, r0
 800c986:	4601      	mov	r1, r0
 800c988:	2800      	cmp	r0, #0
 800c98a:	d1f5      	bne.n	800c978 <_rclc_execute+0x84>
 800c98c:	6860      	ldr	r0, [r4, #4]
 800c98e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800c992:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c996:	2b00      	cmp	r3, #0
 800c998:	f000 80e9 	beq.w	800cb6e <_rclc_execute+0x27a>
 800c99c:	f640 0634 	movw	r6, #2100	@ 0x834
 800c9a0:	2701      	movs	r7, #1
 800c9a2:	e007      	b.n	800c9b4 <_rclc_execute+0xc0>
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	f005 fa7b 	bl	8011ea0 <rclc_action_server_response_goal_request>
 800c9aa:	6860      	ldr	r0, [r4, #4]
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	f005 f9e3 	bl	8011d78 <rclc_action_remove_used_goal_handle>
 800c9b2:	6860      	ldr	r0, [r4, #4]
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	f005 fa0d 	bl	8011dd4 <rclc_action_find_first_handle_by_status>
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	f000 80d3 	beq.w	800cb68 <_rclc_execute+0x274>
 800c9c2:	6863      	ldr	r3, [r4, #4]
 800c9c4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	4798      	blx	r3
 800c9ca:	42b0      	cmp	r0, r6
 800c9cc:	f04f 0100 	mov.w	r1, #0
 800c9d0:	d1e8      	bne.n	800c9a4 <_rclc_execute+0xb0>
 800c9d2:	2101      	movs	r1, #1
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f005 fa63 	bl	8011ea0 <rclc_action_server_response_goal_request>
 800c9da:	722f      	strb	r7, [r5, #8]
 800c9dc:	e7e9      	b.n	800c9b2 <_rclc_execute+0xbe>
 800c9de:	2b06      	cmp	r3, #6
 800c9e0:	68a0      	ldr	r0, [r4, #8]
 800c9e2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c9e4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800c9e6:	f000 80b9 	beq.w	800cb5c <_rclc_execute+0x268>
 800c9ea:	2b07      	cmp	r3, #7
 800c9ec:	f000 80ef 	beq.w	800cbce <_rclc_execute+0x2da>
 800c9f0:	47b0      	blx	r6
 800c9f2:	f104 0510 	add.w	r5, r4, #16
 800c9f6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c9f8:	6860      	ldr	r0, [r4, #4]
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	f003 faf4 	bl	800ffe8 <rcl_send_response>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d082      	beq.n	800c90a <_rclc_execute+0x16>
 800ca04:	9005      	str	r0, [sp, #20]
 800ca06:	f000 fc8f 	bl	800d328 <rcutils_reset_error>
 800ca0a:	9805      	ldr	r0, [sp, #20]
 800ca0c:	e77d      	b.n	800c90a <_rclc_execute+0x16>
 800ca0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ca10:	68a0      	ldr	r0, [r4, #8]
 800ca12:	4798      	blx	r3
 800ca14:	e778      	b.n	800c908 <_rclc_execute+0x14>
 800ca16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ca18:	68a0      	ldr	r0, [r4, #8]
 800ca1a:	f104 0110 	add.w	r1, r4, #16
 800ca1e:	4798      	blx	r3
 800ca20:	e772      	b.n	800c908 <_rclc_execute+0x14>
 800ca22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ca24:	4798      	blx	r3
 800ca26:	e76f      	b.n	800c908 <_rclc_execute+0x14>
 800ca28:	6860      	ldr	r0, [r4, #4]
 800ca2a:	f003 fda1 	bl	8010570 <rcl_timer_call>
 800ca2e:	f240 3321 	movw	r3, #801	@ 0x321
 800ca32:	4298      	cmp	r0, r3
 800ca34:	f43f af68 	beq.w	800c908 <_rclc_execute+0x14>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	f43f af66 	beq.w	800c90a <_rclc_execute+0x16>
 800ca3e:	e7e1      	b.n	800ca04 <_rclc_execute+0x110>
 800ca40:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800ca44:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d0e8      	beq.n	800ca1e <_rclc_execute+0x12a>
 800ca4c:	68a0      	ldr	r0, [r4, #8]
 800ca4e:	4798      	blx	r3
 800ca50:	e75a      	b.n	800c908 <_rclc_execute+0x14>
 800ca52:	6840      	ldr	r0, [r0, #4]
 800ca54:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ca56:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800ca5a:	d107      	bne.n	800ca6c <_rclc_execute+0x178>
 800ca5c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ca60:	b923      	cbnz	r3, 800ca6c <_rclc_execute+0x178>
 800ca62:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f43f af4e 	beq.w	800c908 <_rclc_execute+0x14>
 800ca6c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ca70:	b303      	cbz	r3, 800cab4 <_rclc_execute+0x1c0>
 800ca72:	2600      	movs	r6, #0
 800ca74:	2701      	movs	r7, #1
 800ca76:	e004      	b.n	800ca82 <_rclc_execute+0x18e>
 800ca78:	f005 f948 	bl	8011d0c <rclc_action_send_result_request>
 800ca7c:	b990      	cbnz	r0, 800caa4 <_rclc_execute+0x1b0>
 800ca7e:	722f      	strb	r7, [r5, #8]
 800ca80:	6860      	ldr	r0, [r4, #4]
 800ca82:	f005 f9f5 	bl	8011e70 <rclc_action_find_first_handle_with_goal_response>
 800ca86:	4605      	mov	r5, r0
 800ca88:	b198      	cbz	r0, 800cab2 <_rclc_execute+0x1be>
 800ca8a:	6863      	ldr	r3, [r4, #4]
 800ca8c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca8e:	699b      	ldr	r3, [r3, #24]
 800ca90:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ca94:	f885 6020 	strb.w	r6, [r5, #32]
 800ca98:	4798      	blx	r3
 800ca9a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ca9e:	4628      	mov	r0, r5
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1e9      	bne.n	800ca78 <_rclc_execute+0x184>
 800caa4:	6860      	ldr	r0, [r4, #4]
 800caa6:	4629      	mov	r1, r5
 800caa8:	f005 f966 	bl	8011d78 <rclc_action_remove_used_goal_handle>
 800caac:	e7e8      	b.n	800ca80 <_rclc_execute+0x18c>
 800caae:	200b      	movs	r0, #11
 800cab0:	4770      	bx	lr
 800cab2:	6860      	ldr	r0, [r4, #4]
 800cab4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cab8:	b18b      	cbz	r3, 800cade <_rclc_execute+0x1ea>
 800caba:	68c5      	ldr	r5, [r0, #12]
 800cabc:	b32d      	cbz	r5, 800cb0a <_rclc_execute+0x216>
 800cabe:	2600      	movs	r6, #0
 800cac0:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800cac4:	b143      	cbz	r3, 800cad8 <_rclc_execute+0x1e4>
 800cac6:	69c3      	ldr	r3, [r0, #28]
 800cac8:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800cacc:	b123      	cbz	r3, 800cad8 <_rclc_execute+0x1e4>
 800cace:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cad0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cad2:	4628      	mov	r0, r5
 800cad4:	4798      	blx	r3
 800cad6:	6860      	ldr	r0, [r4, #4]
 800cad8:	682d      	ldr	r5, [r5, #0]
 800cada:	2d00      	cmp	r5, #0
 800cadc:	d1f0      	bne.n	800cac0 <_rclc_execute+0x1cc>
 800cade:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cae2:	b193      	cbz	r3, 800cb0a <_rclc_execute+0x216>
 800cae4:	68c5      	ldr	r5, [r0, #12]
 800cae6:	b185      	cbz	r5, 800cb0a <_rclc_execute+0x216>
 800cae8:	2600      	movs	r6, #0
 800caea:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800caee:	b14b      	cbz	r3, 800cb04 <_rclc_execute+0x210>
 800caf0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800caf2:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800caf6:	b12b      	cbz	r3, 800cb04 <_rclc_execute+0x210>
 800caf8:	4628      	mov	r0, r5
 800cafa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cafc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cb00:	4798      	blx	r3
 800cb02:	6860      	ldr	r0, [r4, #4]
 800cb04:	682d      	ldr	r5, [r5, #0]
 800cb06:	2d00      	cmp	r5, #0
 800cb08:	d1ef      	bne.n	800caea <_rclc_execute+0x1f6>
 800cb0a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f43f aefa 	beq.w	800c908 <_rclc_execute+0x14>
 800cb14:	2700      	movs	r7, #0
 800cb16:	e00b      	b.n	800cb30 <_rclc_execute+0x23c>
 800cb18:	6863      	ldr	r3, [r4, #4]
 800cb1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cb1e:	6a1e      	ldr	r6, [r3, #32]
 800cb20:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cb24:	47b0      	blx	r6
 800cb26:	6860      	ldr	r0, [r4, #4]
 800cb28:	4629      	mov	r1, r5
 800cb2a:	f005 f925 	bl	8011d78 <rclc_action_remove_used_goal_handle>
 800cb2e:	6860      	ldr	r0, [r4, #4]
 800cb30:	f005 f9aa 	bl	8011e88 <rclc_action_find_first_handle_with_result_response>
 800cb34:	4605      	mov	r5, r0
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d1ee      	bne.n	800cb18 <_rclc_execute+0x224>
 800cb3a:	e6e5      	b.n	800c908 <_rclc_execute+0x14>
 800cb3c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800cb40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb42:	2800      	cmp	r0, #0
 800cb44:	f43f af65 	beq.w	800ca12 <_rclc_execute+0x11e>
 800cb48:	e762      	b.n	800ca10 <_rclc_execute+0x11c>
 800cb4a:	6840      	ldr	r0, [r0, #4]
 800cb4c:	e78e      	b.n	800ca6c <_rclc_execute+0x178>
 800cb4e:	6840      	ldr	r0, [r0, #4]
 800cb50:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f43f af1c 	beq.w	800c992 <_rclc_execute+0x9e>
 800cb5a:	e711      	b.n	800c980 <_rclc_execute+0x8c>
 800cb5c:	f104 0510 	add.w	r5, r4, #16
 800cb60:	460a      	mov	r2, r1
 800cb62:	4629      	mov	r1, r5
 800cb64:	47b0      	blx	r6
 800cb66:	e746      	b.n	800c9f6 <_rclc_execute+0x102>
 800cb68:	6860      	ldr	r0, [r4, #4]
 800cb6a:	f880 5020 	strb.w	r5, [r0, #32]
 800cb6e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f43f aec8 	beq.w	800c908 <_rclc_execute+0x14>
 800cb78:	68c5      	ldr	r5, [r0, #12]
 800cb7a:	b325      	cbz	r5, 800cbc6 <_rclc_execute+0x2d2>
 800cb7c:	2602      	movs	r6, #2
 800cb7e:	e001      	b.n	800cb84 <_rclc_execute+0x290>
 800cb80:	682d      	ldr	r5, [r5, #0]
 800cb82:	b305      	cbz	r5, 800cbc6 <_rclc_execute+0x2d2>
 800cb84:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800cb88:	2b03      	cmp	r3, #3
 800cb8a:	d1f9      	bne.n	800cb80 <_rclc_execute+0x28c>
 800cb8c:	69c3      	ldr	r3, [r0, #28]
 800cb8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb90:	4628      	mov	r0, r5
 800cb92:	4798      	blx	r3
 800cb94:	4603      	mov	r3, r0
 800cb96:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800cba0:	b11b      	cbz	r3, 800cbaa <_rclc_execute+0x2b6>
 800cba2:	f005 f99d 	bl	8011ee0 <rclc_action_server_goal_cancel_accept>
 800cba6:	6860      	ldr	r0, [r4, #4]
 800cba8:	e7ea      	b.n	800cb80 <_rclc_execute+0x28c>
 800cbaa:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cbac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cbb0:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800cbb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbb8:	6860      	ldr	r0, [r4, #4]
 800cbba:	2101      	movs	r1, #1
 800cbbc:	f005 f9bc 	bl	8011f38 <rclc_action_server_goal_cancel_reject>
 800cbc0:	722e      	strb	r6, [r5, #8]
 800cbc2:	6860      	ldr	r0, [r4, #4]
 800cbc4:	e7dc      	b.n	800cb80 <_rclc_execute+0x28c>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cbcc:	e69c      	b.n	800c908 <_rclc_execute+0x14>
 800cbce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cbd0:	47b0      	blx	r6
 800cbd2:	f104 0510 	add.w	r5, r4, #16
 800cbd6:	e70e      	b.n	800c9f6 <_rclc_execute+0x102>
 800cbd8:	2001      	movs	r0, #1
 800cbda:	e696      	b.n	800c90a <_rclc_execute+0x16>
 800cbdc:	0000      	movs	r0, r0
	...

0800cbe0 <rclc_executor_init>:
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d05a      	beq.n	800cc9a <rclc_executor_init+0xba>
 800cbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe8:	460d      	mov	r5, r1
 800cbea:	b0b2      	sub	sp, #200	@ 0xc8
 800cbec:	2900      	cmp	r1, #0
 800cbee:	d050      	beq.n	800cc92 <rclc_executor_init+0xb2>
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	4616      	mov	r6, r2
 800cbf6:	461f      	mov	r7, r3
 800cbf8:	f000 fb72 	bl	800d2e0 <rcutils_allocator_is_valid>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d048      	beq.n	800cc92 <rclc_executor_init+0xb2>
 800cc00:	2e00      	cmp	r6, #0
 800cc02:	d046      	beq.n	800cc92 <rclc_executor_init+0xb2>
 800cc04:	492a      	ldr	r1, [pc, #168]	@ (800ccb0 <rclc_executor_init+0xd0>)
 800cc06:	2290      	movs	r2, #144	@ 0x90
 800cc08:	a80e      	add	r0, sp, #56	@ 0x38
 800cc0a:	f00e ff8c 	bl	801bb26 <memcpy>
 800cc0e:	a90e      	add	r1, sp, #56	@ 0x38
 800cc10:	2290      	movs	r2, #144	@ 0x90
 800cc12:	4620      	mov	r0, r4
 800cc14:	f00e ff87 	bl	801bb26 <memcpy>
 800cc18:	6065      	str	r5, [r4, #4]
 800cc1a:	4668      	mov	r0, sp
 800cc1c:	60e6      	str	r6, [r4, #12]
 800cc1e:	466d      	mov	r5, sp
 800cc20:	f003 fdf4 	bl	801080c <rcl_get_zero_initialized_wait_set>
 800cc24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc26:	f104 0c18 	add.w	ip, r4, #24
 800cc2a:	f8d7 8000 	ldr.w	r8, [r7]
 800cc2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc3e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800cca8 <rclc_executor_init+0xc8>
 800cc42:	682b      	ldr	r3, [r5, #0]
 800cc44:	f8cc 3000 	str.w	r3, [ip]
 800cc48:	6939      	ldr	r1, [r7, #16]
 800cc4a:	6167      	str	r7, [r4, #20]
 800cc4c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800cc50:	01b0      	lsls	r0, r6, #6
 800cc52:	47c0      	blx	r8
 800cc54:	60a0      	str	r0, [r4, #8]
 800cc56:	b310      	cbz	r0, 800cc9e <rclc_executor_init+0xbe>
 800cc58:	2500      	movs	r5, #0
 800cc5a:	e000      	b.n	800cc5e <rclc_executor_init+0x7e>
 800cc5c:	68a0      	ldr	r0, [r4, #8]
 800cc5e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800cc62:	4631      	mov	r1, r6
 800cc64:	3501      	adds	r5, #1
 800cc66:	f000 f9fb 	bl	800d060 <rclc_executor_handle_init>
 800cc6a:	42ae      	cmp	r6, r5
 800cc6c:	d1f6      	bne.n	800cc5c <rclc_executor_init+0x7c>
 800cc6e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800cc72:	f000 f9eb 	bl	800d04c <rclc_executor_handle_counters_zero_init>
 800cc76:	490f      	ldr	r1, [pc, #60]	@ (800ccb4 <rclc_executor_init+0xd4>)
 800cc78:	68a2      	ldr	r2, [r4, #8]
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800cc80:	b12a      	cbz	r2, 800cc8e <rclc_executor_init+0xae>
 800cc82:	6962      	ldr	r2, [r4, #20]
 800cc84:	b11a      	cbz	r2, 800cc8e <rclc_executor_init+0xae>
 800cc86:	68e2      	ldr	r2, [r4, #12]
 800cc88:	b10a      	cbz	r2, 800cc8e <rclc_executor_init+0xae>
 800cc8a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800cc8e:	2000      	movs	r0, #0
 800cc90:	e000      	b.n	800cc94 <rclc_executor_init+0xb4>
 800cc92:	200b      	movs	r0, #11
 800cc94:	b032      	add	sp, #200	@ 0xc8
 800cc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9a:	200b      	movs	r0, #11
 800cc9c:	4770      	bx	lr
 800cc9e:	200a      	movs	r0, #10
 800cca0:	e7f8      	b.n	800cc94 <rclc_executor_init+0xb4>
 800cca2:	bf00      	nop
 800cca4:	f3af 8000 	nop.w
 800cca8:	3b9aca00 	.word	0x3b9aca00
 800ccac:	00000000 	.word	0x00000000
 800ccb0:	0801f1d0 	.word	0x0801f1d0
 800ccb4:	0800c889 	.word	0x0800c889

0800ccb8 <rclc_executor_add_subscription>:
 800ccb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccba:	f89d e018 	ldrb.w	lr, [sp, #24]
 800ccbe:	b338      	cbz	r0, 800cd10 <rclc_executor_add_subscription+0x58>
 800ccc0:	b331      	cbz	r1, 800cd10 <rclc_executor_add_subscription+0x58>
 800ccc2:	b32a      	cbz	r2, 800cd10 <rclc_executor_add_subscription+0x58>
 800ccc4:	b323      	cbz	r3, 800cd10 <rclc_executor_add_subscription+0x58>
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800cccc:	42a8      	cmp	r0, r5
 800ccce:	d301      	bcc.n	800ccd4 <rclc_executor_add_subscription+0x1c>
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd4:	68a6      	ldr	r6, [r4, #8]
 800ccd6:	0187      	lsls	r7, r0, #6
 800ccd8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800ccdc:	2500      	movs	r5, #0
 800ccde:	55f5      	strb	r5, [r6, r7]
 800cce0:	3001      	adds	r0, #1
 800cce2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800cce6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800ccea:	2301      	movs	r3, #1
 800ccec:	f104 0518 	add.w	r5, r4, #24
 800ccf0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800ccf4:	f88c e001 	strb.w	lr, [ip, #1]
 800ccf8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800ccfc:	6120      	str	r0, [r4, #16]
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f003 fd98 	bl	8010834 <rcl_wait_set_is_valid>
 800cd04:	b930      	cbnz	r0, 800cd14 <rclc_executor_add_subscription+0x5c>
 800cd06:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cd08:	3301      	adds	r3, #1
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd10:	200b      	movs	r0, #11
 800cd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd14:	4628      	mov	r0, r5
 800cd16:	f003 fd93 	bl	8010840 <rcl_wait_set_fini>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d0f3      	beq.n	800cd06 <rclc_executor_add_subscription+0x4e>
 800cd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd20 <rclc_executor_prepare>:
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d044      	beq.n	800cdae <rclc_executor_prepare+0x8e>
 800cd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd26:	f100 0518 	add.w	r5, r0, #24
 800cd2a:	b09b      	sub	sp, #108	@ 0x6c
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f003 fd80 	bl	8010834 <rcl_wait_set_is_valid>
 800cd34:	b110      	cbz	r0, 800cd3c <rclc_executor_prepare+0x1c>
 800cd36:	2000      	movs	r0, #0
 800cd38:	b01b      	add	sp, #108	@ 0x6c
 800cd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f003 fd7f 	bl	8010840 <rcl_wait_set_fini>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d130      	bne.n	800cda8 <rclc_executor_prepare+0x88>
 800cd46:	a80c      	add	r0, sp, #48	@ 0x30
 800cd48:	f003 fd60 	bl	801080c <rcl_get_zero_initialized_wait_set>
 800cd4c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800cd50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cd54:	46ae      	mov	lr, r5
 800cd56:	6967      	ldr	r7, [r4, #20]
 800cd58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cd5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cd60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cd64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cd68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cd6c:	f8dc 3000 	ldr.w	r3, [ip]
 800cd70:	f8ce 3000 	str.w	r3, [lr]
 800cd74:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cd76:	ae04      	add	r6, sp, #16
 800cd78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	6862      	ldr	r2, [r4, #4]
 800cd7e:	6033      	str	r3, [r6, #0]
 800cd80:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800cd82:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800cd84:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cd88:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800cd8c:	e9cd 2100 	strd	r2, r1, [sp]
 800cd90:	4628      	mov	r0, r5
 800cd92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd94:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800cd96:	f004 f86f 	bl	8010e78 <rcl_wait_set_init>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d0cc      	beq.n	800cd38 <rclc_executor_prepare+0x18>
 800cd9e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cda0:	f000 fac2 	bl	800d328 <rcutils_reset_error>
 800cda4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cda6:	e7c7      	b.n	800cd38 <rclc_executor_prepare+0x18>
 800cda8:	f000 fabe 	bl	800d328 <rcutils_reset_error>
 800cdac:	e7cb      	b.n	800cd46 <rclc_executor_prepare+0x26>
 800cdae:	200b      	movs	r0, #11
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <rclc_executor_spin_some>:
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	b083      	sub	sp, #12
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	f000 8091 	beq.w	800cee2 <rclc_executor_spin_some+0x12e>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	6840      	ldr	r0, [r0, #4]
 800cdc4:	4690      	mov	r8, r2
 800cdc6:	4699      	mov	r9, r3
 800cdc8:	f002 f970 	bl	800f0ac <rcl_context_is_valid>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d037      	beq.n	800ce40 <rclc_executor_spin_some+0x8c>
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f104 0718 	add.w	r7, r4, #24
 800cdd6:	f7ff ffa3 	bl	800cd20 <rclc_executor_prepare>
 800cdda:	4638      	mov	r0, r7
 800cddc:	f003 fe00 	bl	80109e0 <rcl_wait_set_clear>
 800cde0:	4606      	mov	r6, r0
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d177      	bne.n	800ced6 <rclc_executor_spin_some+0x122>
 800cde6:	68e3      	ldr	r3, [r4, #12]
 800cde8:	4605      	mov	r5, r0
 800cdea:	b1eb      	cbz	r3, 800ce28 <rclc_executor_spin_some+0x74>
 800cdec:	68a1      	ldr	r1, [r4, #8]
 800cdee:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800cdf2:	01aa      	lsls	r2, r5, #6
 800cdf4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cdf8:	b1b3      	cbz	r3, 800ce28 <rclc_executor_spin_some+0x74>
 800cdfa:	5c8b      	ldrb	r3, [r1, r2]
 800cdfc:	2b0a      	cmp	r3, #10
 800cdfe:	d81f      	bhi.n	800ce40 <rclc_executor_spin_some+0x8c>
 800ce00:	e8df f003 	tbb	[pc, r3]
 800ce04:	253e3434 	.word	0x253e3434
 800ce08:	06060625 	.word	0x06060625
 800ce0c:	525d      	.short	0x525d
 800ce0e:	48          	.byte	0x48
 800ce0f:	00          	.byte	0x00
 800ce10:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce14:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce18:	4638      	mov	r0, r7
 800ce1a:	f004 f941 	bl	80110a0 <rcl_wait_set_add_service>
 800ce1e:	b9f8      	cbnz	r0, 800ce60 <rclc_executor_spin_some+0xac>
 800ce20:	68e3      	ldr	r3, [r4, #12]
 800ce22:	3501      	adds	r5, #1
 800ce24:	42ab      	cmp	r3, r5
 800ce26:	d8e1      	bhi.n	800cdec <rclc_executor_spin_some+0x38>
 800ce28:	4642      	mov	r2, r8
 800ce2a:	464b      	mov	r3, r9
 800ce2c:	4638      	mov	r0, r7
 800ce2e:	f004 f963 	bl	80110f8 <rcl_wait>
 800ce32:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	f000 80ab 	beq.w	800cf92 <rclc_executor_spin_some+0x1de>
 800ce3c:	2d01      	cmp	r5, #1
 800ce3e:	d055      	beq.n	800ceec <rclc_executor_spin_some+0x138>
 800ce40:	f000 fa72 	bl	800d328 <rcutils_reset_error>
 800ce44:	2601      	movs	r6, #1
 800ce46:	4630      	mov	r0, r6
 800ce48:	b003      	add	sp, #12
 800ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce52:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce56:	4638      	mov	r0, r7
 800ce58:	f004 f8f6 	bl	8011048 <rcl_wait_set_add_client>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d0df      	beq.n	800ce20 <rclc_executor_spin_some+0x6c>
 800ce60:	9001      	str	r0, [sp, #4]
 800ce62:	f000 fa61 	bl	800d328 <rcutils_reset_error>
 800ce66:	9801      	ldr	r0, [sp, #4]
 800ce68:	4606      	mov	r6, r0
 800ce6a:	e7ec      	b.n	800ce46 <rclc_executor_spin_some+0x92>
 800ce6c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce70:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce74:	4638      	mov	r0, r7
 800ce76:	f003 fd87 	bl	8010988 <rcl_wait_set_add_subscription>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d0d0      	beq.n	800ce20 <rclc_executor_spin_some+0x6c>
 800ce7e:	e7ef      	b.n	800ce60 <rclc_executor_spin_some+0xac>
 800ce80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce84:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce88:	4638      	mov	r0, r7
 800ce8a:	f004 f8ad 	bl	8010fe8 <rcl_wait_set_add_timer>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d0c6      	beq.n	800ce20 <rclc_executor_spin_some+0x6c>
 800ce92:	e7e5      	b.n	800ce60 <rclc_executor_spin_some+0xac>
 800ce94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce98:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	f004 f877 	bl	8010f90 <rcl_wait_set_add_guard_condition>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d0bc      	beq.n	800ce20 <rclc_executor_spin_some+0x6c>
 800cea6:	e7db      	b.n	800ce60 <rclc_executor_spin_some+0xac>
 800cea8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ceac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ceb0:	3110      	adds	r1, #16
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	f004 fe3e 	bl	8011b34 <rcl_action_wait_set_add_action_server>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d0b1      	beq.n	800ce20 <rclc_executor_spin_some+0x6c>
 800cebc:	e7d0      	b.n	800ce60 <rclc_executor_spin_some+0xac>
 800cebe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cec2:	2300      	movs	r3, #0
 800cec4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cec8:	3110      	adds	r1, #16
 800ceca:	4638      	mov	r0, r7
 800cecc:	f004 fc20 	bl	8011710 <rcl_action_wait_set_add_action_client>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d0a5      	beq.n	800ce20 <rclc_executor_spin_some+0x6c>
 800ced4:	e7c4      	b.n	800ce60 <rclc_executor_spin_some+0xac>
 800ced6:	f000 fa27 	bl	800d328 <rcutils_reset_error>
 800ceda:	4630      	mov	r0, r6
 800cedc:	b003      	add	sp, #12
 800cede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee2:	260b      	movs	r6, #11
 800cee4:	4630      	mov	r0, r6
 800cee6:	b003      	add	sp, #12
 800cee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceec:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800cef0:	4663      	mov	r3, ip
 800cef2:	4615      	mov	r5, r2
 800cef4:	b1ca      	cbz	r2, 800cf2a <rclc_executor_spin_some+0x176>
 800cef6:	2500      	movs	r5, #0
 800cef8:	46a8      	mov	r8, r5
 800cefa:	f240 1991 	movw	r9, #401	@ 0x191
 800cefe:	e00c      	b.n	800cf1a <rclc_executor_spin_some+0x166>
 800cf00:	f7ff fb0a 	bl	800c518 <_rclc_check_for_new_data>
 800cf04:	f108 0801 	add.w	r8, r8, #1
 800cf08:	4605      	mov	r5, r0
 800cf0a:	b108      	cbz	r0, 800cf10 <rclc_executor_spin_some+0x15c>
 800cf0c:	4548      	cmp	r0, r9
 800cf0e:	d13e      	bne.n	800cf8e <rclc_executor_spin_some+0x1da>
 800cf10:	68e2      	ldr	r2, [r4, #12]
 800cf12:	4590      	cmp	r8, r2
 800cf14:	f080 808b 	bcs.w	800d02e <rclc_executor_spin_some+0x27a>
 800cf18:	68a3      	ldr	r3, [r4, #8]
 800cf1a:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800cf1e:	469c      	mov	ip, r3
 800cf20:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cf24:	4639      	mov	r1, r7
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1ea      	bne.n	800cf00 <rclc_executor_spin_some+0x14c>
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4660      	mov	r0, ip
 800cf2e:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800cf32:	4798      	blx	r3
 800cf34:	b358      	cbz	r0, 800cf8e <rclc_executor_spin_some+0x1da>
 800cf36:	68e3      	ldr	r3, [r4, #12]
 800cf38:	b34b      	cbz	r3, 800cf8e <rclc_executor_spin_some+0x1da>
 800cf3a:	f04f 0800 	mov.w	r8, #0
 800cf3e:	f240 1991 	movw	r9, #401	@ 0x191
 800cf42:	e00a      	b.n	800cf5a <rclc_executor_spin_some+0x1a6>
 800cf44:	f7ff fb36 	bl	800c5b4 <_rclc_take_new_data>
 800cf48:	f108 0801 	add.w	r8, r8, #1
 800cf4c:	4605      	mov	r5, r0
 800cf4e:	b108      	cbz	r0, 800cf54 <rclc_executor_spin_some+0x1a0>
 800cf50:	4548      	cmp	r0, r9
 800cf52:	d11c      	bne.n	800cf8e <rclc_executor_spin_some+0x1da>
 800cf54:	68e3      	ldr	r3, [r4, #12]
 800cf56:	4598      	cmp	r8, r3
 800cf58:	d26f      	bcs.n	800d03a <rclc_executor_spin_some+0x286>
 800cf5a:	68a3      	ldr	r3, [r4, #8]
 800cf5c:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800cf60:	4639      	mov	r1, r7
 800cf62:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cf66:	2a00      	cmp	r2, #0
 800cf68:	d1ec      	bne.n	800cf44 <rclc_executor_spin_some+0x190>
 800cf6a:	2700      	movs	r7, #0
 800cf6c:	e009      	b.n	800cf82 <rclc_executor_spin_some+0x1ce>
 800cf6e:	f7ff fcc1 	bl	800c8f4 <_rclc_execute>
 800cf72:	3701      	adds	r7, #1
 800cf74:	4605      	mov	r5, r0
 800cf76:	b950      	cbnz	r0, 800cf8e <rclc_executor_spin_some+0x1da>
 800cf78:	68e3      	ldr	r3, [r4, #12]
 800cf7a:	429f      	cmp	r7, r3
 800cf7c:	f4bf af63 	bcs.w	800ce46 <rclc_executor_spin_some+0x92>
 800cf80:	68a3      	ldr	r3, [r4, #8]
 800cf82:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800cf86:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1ef      	bne.n	800cf6e <rclc_executor_spin_some+0x1ba>
 800cf8e:	462e      	mov	r6, r5
 800cf90:	e759      	b.n	800ce46 <rclc_executor_spin_some+0x92>
 800cf92:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800cf96:	4663      	mov	r3, ip
 800cf98:	2a00      	cmp	r2, #0
 800cf9a:	d054      	beq.n	800d046 <rclc_executor_spin_some+0x292>
 800cf9c:	46a8      	mov	r8, r5
 800cf9e:	f240 1991 	movw	r9, #401	@ 0x191
 800cfa2:	e00b      	b.n	800cfbc <rclc_executor_spin_some+0x208>
 800cfa4:	f7ff fab8 	bl	800c518 <_rclc_check_for_new_data>
 800cfa8:	f108 0801 	add.w	r8, r8, #1
 800cfac:	4605      	mov	r5, r0
 800cfae:	b108      	cbz	r0, 800cfb4 <rclc_executor_spin_some+0x200>
 800cfb0:	4548      	cmp	r0, r9
 800cfb2:	d1ec      	bne.n	800cf8e <rclc_executor_spin_some+0x1da>
 800cfb4:	68e2      	ldr	r2, [r4, #12]
 800cfb6:	4590      	cmp	r8, r2
 800cfb8:	d23c      	bcs.n	800d034 <rclc_executor_spin_some+0x280>
 800cfba:	68a3      	ldr	r3, [r4, #8]
 800cfbc:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800cfc0:	469c      	mov	ip, r3
 800cfc2:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1eb      	bne.n	800cfa4 <rclc_executor_spin_some+0x1f0>
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4660      	mov	r0, ip
 800cfd0:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800cfd4:	4798      	blx	r3
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d0d9      	beq.n	800cf8e <rclc_executor_spin_some+0x1da>
 800cfda:	68e3      	ldr	r3, [r4, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d0d6      	beq.n	800cf8e <rclc_executor_spin_some+0x1da>
 800cfe0:	f04f 0a00 	mov.w	sl, #0
 800cfe4:	f240 1891 	movw	r8, #401	@ 0x191
 800cfe8:	f240 2959 	movw	r9, #601	@ 0x259
 800cfec:	e013      	b.n	800d016 <rclc_executor_spin_some+0x262>
 800cfee:	f7ff fae1 	bl	800c5b4 <_rclc_take_new_data>
 800cff2:	b118      	cbz	r0, 800cffc <rclc_executor_spin_some+0x248>
 800cff4:	4540      	cmp	r0, r8
 800cff6:	d001      	beq.n	800cffc <rclc_executor_spin_some+0x248>
 800cff8:	4548      	cmp	r0, r9
 800cffa:	d122      	bne.n	800d042 <rclc_executor_spin_some+0x28e>
 800cffc:	68a0      	ldr	r0, [r4, #8]
 800cffe:	4458      	add	r0, fp
 800d000:	f7ff fc78 	bl	800c8f4 <_rclc_execute>
 800d004:	f10a 0a01 	add.w	sl, sl, #1
 800d008:	4605      	mov	r5, r0
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d1bf      	bne.n	800cf8e <rclc_executor_spin_some+0x1da>
 800d00e:	68e3      	ldr	r3, [r4, #12]
 800d010:	459a      	cmp	sl, r3
 800d012:	f4bf af18 	bcs.w	800ce46 <rclc_executor_spin_some+0x92>
 800d016:	68a0      	ldr	r0, [r4, #8]
 800d018:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d01c:	4639      	mov	r1, r7
 800d01e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d022:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1e1      	bne.n	800cfee <rclc_executor_spin_some+0x23a>
 800d02a:	462e      	mov	r6, r5
 800d02c:	e70b      	b.n	800ce46 <rclc_executor_spin_some+0x92>
 800d02e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800d032:	e77a      	b.n	800cf2a <rclc_executor_spin_some+0x176>
 800d034:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800d038:	e7c8      	b.n	800cfcc <rclc_executor_spin_some+0x218>
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0a7      	beq.n	800cf8e <rclc_executor_spin_some+0x1da>
 800d03e:	68a3      	ldr	r3, [r4, #8]
 800d040:	e793      	b.n	800cf6a <rclc_executor_spin_some+0x1b6>
 800d042:	4606      	mov	r6, r0
 800d044:	e6ff      	b.n	800ce46 <rclc_executor_spin_some+0x92>
 800d046:	4615      	mov	r5, r2
 800d048:	e7c0      	b.n	800cfcc <rclc_executor_spin_some+0x218>
 800d04a:	bf00      	nop

0800d04c <rclc_executor_handle_counters_zero_init>:
 800d04c:	b130      	cbz	r0, 800d05c <rclc_executor_handle_counters_zero_init+0x10>
 800d04e:	b508      	push	{r3, lr}
 800d050:	2220      	movs	r2, #32
 800d052:	2100      	movs	r1, #0
 800d054:	f00e fc32 	bl	801b8bc <memset>
 800d058:	2000      	movs	r0, #0
 800d05a:	bd08      	pop	{r3, pc}
 800d05c:	200b      	movs	r0, #11
 800d05e:	4770      	bx	lr

0800d060 <rclc_executor_handle_init>:
 800d060:	b158      	cbz	r0, 800d07a <rclc_executor_handle_init+0x1a>
 800d062:	2300      	movs	r3, #0
 800d064:	220b      	movs	r2, #11
 800d066:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d06a:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800d06e:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d072:	8002      	strh	r2, [r0, #0]
 800d074:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d076:	4618      	mov	r0, r3
 800d078:	4770      	bx	lr
 800d07a:	200b      	movs	r0, #11
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <rclc_support_init>:
 800d080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d084:	b086      	sub	sp, #24
 800d086:	b3b8      	cbz	r0, 800d0f8 <rclc_support_init+0x78>
 800d088:	461c      	mov	r4, r3
 800d08a:	b3ab      	cbz	r3, 800d0f8 <rclc_support_init+0x78>
 800d08c:	460f      	mov	r7, r1
 800d08e:	4690      	mov	r8, r2
 800d090:	4606      	mov	r6, r0
 800d092:	f002 f9ab 	bl	800f3ec <rcl_get_zero_initialized_init_options>
 800d096:	f104 030c 	add.w	r3, r4, #12
 800d09a:	9005      	str	r0, [sp, #20]
 800d09c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0a0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d0a4:	a805      	add	r0, sp, #20
 800d0a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d0aa:	f002 f9a1 	bl	800f3f0 <rcl_init_options_init>
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	b9e0      	cbnz	r0, 800d0ec <rclc_support_init+0x6c>
 800d0b2:	ad02      	add	r5, sp, #8
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	f001 ffef 	bl	800f098 <rcl_get_zero_initialized_context>
 800d0ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d0be:	4633      	mov	r3, r6
 800d0c0:	e886 0003 	stmia.w	r6, {r0, r1}
 800d0c4:	aa05      	add	r2, sp, #20
 800d0c6:	4641      	mov	r1, r8
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f002 f855 	bl	800f178 <rcl_init>
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	b9b8      	cbnz	r0, 800d102 <rclc_support_init+0x82>
 800d0d2:	60b4      	str	r4, [r6, #8]
 800d0d4:	4622      	mov	r2, r4
 800d0d6:	f106 010c 	add.w	r1, r6, #12
 800d0da:	2003      	movs	r0, #3
 800d0dc:	f003 f9b0 	bl	8010440 <rcl_clock_init>
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	b970      	cbnz	r0, 800d102 <rclc_support_init+0x82>
 800d0e4:	a805      	add	r0, sp, #20
 800d0e6:	f002 f9df 	bl	800f4a8 <rcl_init_options_fini>
 800d0ea:	b108      	cbz	r0, 800d0f0 <rclc_support_init+0x70>
 800d0ec:	f000 f91c 	bl	800d328 <rcutils_reset_error>
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	b006      	add	sp, #24
 800d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f8:	250b      	movs	r5, #11
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	b006      	add	sp, #24
 800d0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d102:	f000 f911 	bl	800d328 <rcutils_reset_error>
 800d106:	a805      	add	r0, sp, #20
 800d108:	f002 f9ce 	bl	800f4a8 <rcl_init_options_fini>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d0ef      	beq.n	800d0f0 <rclc_support_init+0x70>
 800d110:	e7ec      	b.n	800d0ec <rclc_support_init+0x6c>
 800d112:	bf00      	nop

0800d114 <rclc_node_init_default>:
 800d114:	b3b8      	cbz	r0, 800d186 <rclc_node_init_default+0x72>
 800d116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d11a:	460d      	mov	r5, r1
 800d11c:	b0a1      	sub	sp, #132	@ 0x84
 800d11e:	b329      	cbz	r1, 800d16c <rclc_node_init_default+0x58>
 800d120:	4616      	mov	r6, r2
 800d122:	b31a      	cbz	r2, 800d16c <rclc_node_init_default+0x58>
 800d124:	461f      	mov	r7, r3
 800d126:	b30b      	cbz	r3, 800d16c <rclc_node_init_default+0x58>
 800d128:	f10d 0810 	add.w	r8, sp, #16
 800d12c:	4604      	mov	r4, r0
 800d12e:	4640      	mov	r0, r8
 800d130:	f002 fa62 	bl	800f5f8 <rcl_get_zero_initialized_node>
 800d134:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d138:	f10d 0918 	add.w	r9, sp, #24
 800d13c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d140:	4648      	mov	r0, r9
 800d142:	f002 fc01 	bl	800f948 <rcl_node_get_default_options>
 800d146:	4640      	mov	r0, r8
 800d148:	f002 fa56 	bl	800f5f8 <rcl_get_zero_initialized_node>
 800d14c:	f8cd 9000 	str.w	r9, [sp]
 800d150:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d154:	463b      	mov	r3, r7
 800d156:	e884 0003 	stmia.w	r4, {r0, r1}
 800d15a:	4632      	mov	r2, r6
 800d15c:	4629      	mov	r1, r5
 800d15e:	4620      	mov	r0, r4
 800d160:	f002 fa54 	bl	800f60c <rcl_node_init>
 800d164:	b930      	cbnz	r0, 800d174 <rclc_node_init_default+0x60>
 800d166:	b021      	add	sp, #132	@ 0x84
 800d168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d16c:	200b      	movs	r0, #11
 800d16e:	b021      	add	sp, #132	@ 0x84
 800d170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d174:	9003      	str	r0, [sp, #12]
 800d176:	f000 f8d7 	bl	800d328 <rcutils_reset_error>
 800d17a:	f000 f8d5 	bl	800d328 <rcutils_reset_error>
 800d17e:	9803      	ldr	r0, [sp, #12]
 800d180:	b021      	add	sp, #132	@ 0x84
 800d182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d186:	200b      	movs	r0, #11
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop

0800d18c <rclc_publisher_init_default>:
 800d18c:	b368      	cbz	r0, 800d1ea <rclc_publisher_init_default+0x5e>
 800d18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d192:	460d      	mov	r5, r1
 800d194:	b0a0      	sub	sp, #128	@ 0x80
 800d196:	b321      	cbz	r1, 800d1e2 <rclc_publisher_init_default+0x56>
 800d198:	4616      	mov	r6, r2
 800d19a:	b312      	cbz	r2, 800d1e2 <rclc_publisher_init_default+0x56>
 800d19c:	461f      	mov	r7, r3
 800d19e:	b303      	cbz	r3, 800d1e2 <rclc_publisher_init_default+0x56>
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	f002 fcc1 	bl	800fb28 <rcl_get_zero_initialized_publisher>
 800d1a6:	f10d 0810 	add.w	r8, sp, #16
 800d1aa:	6020      	str	r0, [r4, #0]
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	f002 fd59 	bl	800fc64 <rcl_publisher_get_default_options>
 800d1b2:	490f      	ldr	r1, [pc, #60]	@ (800d1f0 <rclc_publisher_init_default+0x64>)
 800d1b4:	2250      	movs	r2, #80	@ 0x50
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	f00e fcb5 	bl	801bb26 <memcpy>
 800d1bc:	f8cd 8000 	str.w	r8, [sp]
 800d1c0:	463b      	mov	r3, r7
 800d1c2:	4632      	mov	r2, r6
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f002 fcb4 	bl	800fb34 <rcl_publisher_init>
 800d1cc:	b910      	cbnz	r0, 800d1d4 <rclc_publisher_init_default+0x48>
 800d1ce:	b020      	add	sp, #128	@ 0x80
 800d1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d4:	9003      	str	r0, [sp, #12]
 800d1d6:	f000 f8a7 	bl	800d328 <rcutils_reset_error>
 800d1da:	9803      	ldr	r0, [sp, #12]
 800d1dc:	b020      	add	sp, #128	@ 0x80
 800d1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e2:	200b      	movs	r0, #11
 800d1e4:	b020      	add	sp, #128	@ 0x80
 800d1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ea:	200b      	movs	r0, #11
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	0801f260 	.word	0x0801f260

0800d1f4 <rclc_subscription_init_default>:
 800d1f4:	b368      	cbz	r0, 800d252 <rclc_subscription_init_default+0x5e>
 800d1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fa:	460d      	mov	r5, r1
 800d1fc:	b0a2      	sub	sp, #136	@ 0x88
 800d1fe:	b321      	cbz	r1, 800d24a <rclc_subscription_init_default+0x56>
 800d200:	4616      	mov	r6, r2
 800d202:	b312      	cbz	r2, 800d24a <rclc_subscription_init_default+0x56>
 800d204:	461f      	mov	r7, r3
 800d206:	b303      	cbz	r3, 800d24a <rclc_subscription_init_default+0x56>
 800d208:	4604      	mov	r4, r0
 800d20a:	f002 ffb1 	bl	8010170 <rcl_get_zero_initialized_subscription>
 800d20e:	f10d 0810 	add.w	r8, sp, #16
 800d212:	6020      	str	r0, [r4, #0]
 800d214:	4640      	mov	r0, r8
 800d216:	f003 f859 	bl	80102cc <rcl_subscription_get_default_options>
 800d21a:	490f      	ldr	r1, [pc, #60]	@ (800d258 <rclc_subscription_init_default+0x64>)
 800d21c:	2250      	movs	r2, #80	@ 0x50
 800d21e:	4640      	mov	r0, r8
 800d220:	f00e fc81 	bl	801bb26 <memcpy>
 800d224:	f8cd 8000 	str.w	r8, [sp]
 800d228:	463b      	mov	r3, r7
 800d22a:	4632      	mov	r2, r6
 800d22c:	4629      	mov	r1, r5
 800d22e:	4620      	mov	r0, r4
 800d230:	f002 ffa4 	bl	801017c <rcl_subscription_init>
 800d234:	b910      	cbnz	r0, 800d23c <rclc_subscription_init_default+0x48>
 800d236:	b022      	add	sp, #136	@ 0x88
 800d238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d23c:	9003      	str	r0, [sp, #12]
 800d23e:	f000 f873 	bl	800d328 <rcutils_reset_error>
 800d242:	9803      	ldr	r0, [sp, #12]
 800d244:	b022      	add	sp, #136	@ 0x88
 800d246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24a:	200b      	movs	r0, #11
 800d24c:	b022      	add	sp, #136	@ 0x88
 800d24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d252:	200b      	movs	r0, #11
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	0801f2b0 	.word	0x0801f2b0

0800d25c <__default_zero_allocate>:
 800d25c:	f00c bf5a 	b.w	801a114 <calloc>

0800d260 <__default_reallocate>:
 800d260:	f00d b8f8 	b.w	801a454 <realloc>

0800d264 <__default_deallocate>:
 800d264:	f00c bfd4 	b.w	801a210 <free>

0800d268 <__default_allocate>:
 800d268:	f00c bfca 	b.w	801a200 <malloc>

0800d26c <rcutils_get_zero_initialized_allocator>:
 800d26c:	b510      	push	{r4, lr}
 800d26e:	4c05      	ldr	r4, [pc, #20]	@ (800d284 <rcutils_get_zero_initialized_allocator+0x18>)
 800d270:	4686      	mov	lr, r0
 800d272:	4684      	mov	ip, r0
 800d274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	f8cc 3000 	str.w	r3, [ip]
 800d280:	4670      	mov	r0, lr
 800d282:	bd10      	pop	{r4, pc}
 800d284:	0801f300 	.word	0x0801f300

0800d288 <rcutils_get_default_allocator>:
 800d288:	b510      	push	{r4, lr}
 800d28a:	4c05      	ldr	r4, [pc, #20]	@ (800d2a0 <rcutils_get_default_allocator+0x18>)
 800d28c:	4686      	mov	lr, r0
 800d28e:	4684      	mov	ip, r0
 800d290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d292:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	f8cc 3000 	str.w	r3, [ip]
 800d29c:	4670      	mov	r0, lr
 800d29e:	bd10      	pop	{r4, pc}
 800d2a0:	20000188 	.word	0x20000188

0800d2a4 <rcutils_set_default_allocator>:
 800d2a4:	b1a8      	cbz	r0, 800d2d2 <rcutils_set_default_allocator+0x2e>
 800d2a6:	6802      	ldr	r2, [r0, #0]
 800d2a8:	b1a2      	cbz	r2, 800d2d4 <rcutils_set_default_allocator+0x30>
 800d2aa:	6841      	ldr	r1, [r0, #4]
 800d2ac:	b1a1      	cbz	r1, 800d2d8 <rcutils_set_default_allocator+0x34>
 800d2ae:	b410      	push	{r4}
 800d2b0:	68c4      	ldr	r4, [r0, #12]
 800d2b2:	b164      	cbz	r4, 800d2ce <rcutils_set_default_allocator+0x2a>
 800d2b4:	6880      	ldr	r0, [r0, #8]
 800d2b6:	b138      	cbz	r0, 800d2c8 <rcutils_set_default_allocator+0x24>
 800d2b8:	4b08      	ldr	r3, [pc, #32]	@ (800d2dc <rcutils_set_default_allocator+0x38>)
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d2c2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d2c6:	2001      	movs	r0, #1
 800d2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	e7fa      	b.n	800d2c8 <rcutils_set_default_allocator+0x24>
 800d2d2:	4770      	bx	lr
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	4770      	bx	lr
 800d2d8:	4608      	mov	r0, r1
 800d2da:	4770      	bx	lr
 800d2dc:	20000188 	.word	0x20000188

0800d2e0 <rcutils_allocator_is_valid>:
 800d2e0:	b158      	cbz	r0, 800d2fa <rcutils_allocator_is_valid+0x1a>
 800d2e2:	6803      	ldr	r3, [r0, #0]
 800d2e4:	b143      	cbz	r3, 800d2f8 <rcutils_allocator_is_valid+0x18>
 800d2e6:	6843      	ldr	r3, [r0, #4]
 800d2e8:	b133      	cbz	r3, 800d2f8 <rcutils_allocator_is_valid+0x18>
 800d2ea:	68c3      	ldr	r3, [r0, #12]
 800d2ec:	b123      	cbz	r3, 800d2f8 <rcutils_allocator_is_valid+0x18>
 800d2ee:	6880      	ldr	r0, [r0, #8]
 800d2f0:	3800      	subs	r0, #0
 800d2f2:	bf18      	it	ne
 800d2f4:	2001      	movne	r0, #1
 800d2f6:	4770      	bx	lr
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	4770      	bx	lr

0800d2fc <rcutils_get_error_string>:
 800d2fc:	4b06      	ldr	r3, [pc, #24]	@ (800d318 <rcutils_get_error_string+0x1c>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	b13b      	cbz	r3, 800d312 <rcutils_get_error_string+0x16>
 800d302:	4b06      	ldr	r3, [pc, #24]	@ (800d31c <rcutils_get_error_string+0x20>)
 800d304:	781a      	ldrb	r2, [r3, #0]
 800d306:	b90a      	cbnz	r2, 800d30c <rcutils_get_error_string+0x10>
 800d308:	2201      	movs	r2, #1
 800d30a:	701a      	strb	r2, [r3, #0]
 800d30c:	4b04      	ldr	r3, [pc, #16]	@ (800d320 <rcutils_get_error_string+0x24>)
 800d30e:	7818      	ldrb	r0, [r3, #0]
 800d310:	4770      	bx	lr
 800d312:	4b04      	ldr	r3, [pc, #16]	@ (800d324 <rcutils_get_error_string+0x28>)
 800d314:	7818      	ldrb	r0, [r3, #0]
 800d316:	4770      	bx	lr
 800d318:	20012c7c 	.word	0x20012c7c
 800d31c:	20012c81 	.word	0x20012c81
 800d320:	20012c80 	.word	0x20012c80
 800d324:	0801f314 	.word	0x0801f314

0800d328 <rcutils_reset_error>:
 800d328:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d348 <rcutils_reset_error+0x20>
 800d32c:	4a08      	ldr	r2, [pc, #32]	@ (800d350 <rcutils_reset_error+0x28>)
 800d32e:	4809      	ldr	r0, [pc, #36]	@ (800d354 <rcutils_reset_error+0x2c>)
 800d330:	4909      	ldr	r1, [pc, #36]	@ (800d358 <rcutils_reset_error+0x30>)
 800d332:	2300      	movs	r3, #0
 800d334:	8013      	strh	r3, [r2, #0]
 800d336:	ed82 7b02 	vstr	d7, [r2, #8]
 800d33a:	4a08      	ldr	r2, [pc, #32]	@ (800d35c <rcutils_reset_error+0x34>)
 800d33c:	7003      	strb	r3, [r0, #0]
 800d33e:	700b      	strb	r3, [r1, #0]
 800d340:	7013      	strb	r3, [r2, #0]
 800d342:	4770      	bx	lr
 800d344:	f3af 8000 	nop.w
	...
 800d350:	20012c88 	.word	0x20012c88
 800d354:	20012c81 	.word	0x20012c81
 800d358:	20012c80 	.word	0x20012c80
 800d35c:	20012c7c 	.word	0x20012c7c

0800d360 <rcutils_system_time_now>:
 800d360:	b318      	cbz	r0, 800d3aa <rcutils_system_time_now+0x4a>
 800d362:	b570      	push	{r4, r5, r6, lr}
 800d364:	b084      	sub	sp, #16
 800d366:	4604      	mov	r4, r0
 800d368:	4669      	mov	r1, sp
 800d36a:	2001      	movs	r0, #1
 800d36c:	f7f5 ffc4 	bl	80032f8 <clock_gettime>
 800d370:	2800      	cmp	r0, #0
 800d372:	db17      	blt.n	800d3a4 <rcutils_system_time_now+0x44>
 800d374:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d378:	2900      	cmp	r1, #0
 800d37a:	db13      	blt.n	800d3a4 <rcutils_system_time_now+0x44>
 800d37c:	9d02      	ldr	r5, [sp, #8]
 800d37e:	2d00      	cmp	r5, #0
 800d380:	db0d      	blt.n	800d39e <rcutils_system_time_now+0x3e>
 800d382:	4e0b      	ldr	r6, [pc, #44]	@ (800d3b0 <rcutils_system_time_now+0x50>)
 800d384:	fba3 3206 	umull	r3, r2, r3, r6
 800d388:	195b      	adds	r3, r3, r5
 800d38a:	fb06 2201 	mla	r2, r6, r1, r2
 800d38e:	f04f 0000 	mov.w	r0, #0
 800d392:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d396:	e9c4 3200 	strd	r3, r2, [r4]
 800d39a:	b004      	add	sp, #16
 800d39c:	bd70      	pop	{r4, r5, r6, pc}
 800d39e:	ea53 0201 	orrs.w	r2, r3, r1
 800d3a2:	d1ee      	bne.n	800d382 <rcutils_system_time_now+0x22>
 800d3a4:	2002      	movs	r0, #2
 800d3a6:	b004      	add	sp, #16
 800d3a8:	bd70      	pop	{r4, r5, r6, pc}
 800d3aa:	200b      	movs	r0, #11
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	3b9aca00 	.word	0x3b9aca00

0800d3b4 <rcutils_steady_time_now>:
 800d3b4:	b318      	cbz	r0, 800d3fe <rcutils_steady_time_now+0x4a>
 800d3b6:	b570      	push	{r4, r5, r6, lr}
 800d3b8:	b084      	sub	sp, #16
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4669      	mov	r1, sp
 800d3be:	2000      	movs	r0, #0
 800d3c0:	f7f5 ff9a 	bl	80032f8 <clock_gettime>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	db17      	blt.n	800d3f8 <rcutils_steady_time_now+0x44>
 800d3c8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d3cc:	2900      	cmp	r1, #0
 800d3ce:	db13      	blt.n	800d3f8 <rcutils_steady_time_now+0x44>
 800d3d0:	9d02      	ldr	r5, [sp, #8]
 800d3d2:	2d00      	cmp	r5, #0
 800d3d4:	db0d      	blt.n	800d3f2 <rcutils_steady_time_now+0x3e>
 800d3d6:	4e0b      	ldr	r6, [pc, #44]	@ (800d404 <rcutils_steady_time_now+0x50>)
 800d3d8:	fba3 3206 	umull	r3, r2, r3, r6
 800d3dc:	195b      	adds	r3, r3, r5
 800d3de:	fb06 2201 	mla	r2, r6, r1, r2
 800d3e2:	f04f 0000 	mov.w	r0, #0
 800d3e6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d3ea:	e9c4 3200 	strd	r3, r2, [r4]
 800d3ee:	b004      	add	sp, #16
 800d3f0:	bd70      	pop	{r4, r5, r6, pc}
 800d3f2:	ea53 0201 	orrs.w	r2, r3, r1
 800d3f6:	d1ee      	bne.n	800d3d6 <rcutils_steady_time_now+0x22>
 800d3f8:	2002      	movs	r0, #2
 800d3fa:	b004      	add	sp, #16
 800d3fc:	bd70      	pop	{r4, r5, r6, pc}
 800d3fe:	200b      	movs	r0, #11
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	3b9aca00 	.word	0x3b9aca00

0800d408 <rmw_uros_set_custom_transport>:
 800d408:	b470      	push	{r4, r5, r6}
 800d40a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d40e:	b162      	cbz	r2, 800d42a <rmw_uros_set_custom_transport+0x22>
 800d410:	b15b      	cbz	r3, 800d42a <rmw_uros_set_custom_transport+0x22>
 800d412:	b155      	cbz	r5, 800d42a <rmw_uros_set_custom_transport+0x22>
 800d414:	b14e      	cbz	r6, 800d42a <rmw_uros_set_custom_transport+0x22>
 800d416:	4c06      	ldr	r4, [pc, #24]	@ (800d430 <rmw_uros_set_custom_transport+0x28>)
 800d418:	7020      	strb	r0, [r4, #0]
 800d41a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d41e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d422:	6166      	str	r6, [r4, #20]
 800d424:	2000      	movs	r0, #0
 800d426:	bc70      	pop	{r4, r5, r6}
 800d428:	4770      	bx	lr
 800d42a:	200b      	movs	r0, #11
 800d42c:	bc70      	pop	{r4, r5, r6}
 800d42e:	4770      	bx	lr
 800d430:	20012c98 	.word	0x20012c98

0800d434 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800d434:	4b04      	ldr	r3, [pc, #16]	@ (800d448 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	b10a      	cbz	r2, 800d43e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800d43a:	4803      	ldr	r0, [pc, #12]	@ (800d448 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800d43c:	4770      	bx	lr
 800d43e:	4a03      	ldr	r2, [pc, #12]	@ (800d44c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800d440:	4801      	ldr	r0, [pc, #4]	@ (800d448 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800d442:	6812      	ldr	r2, [r2, #0]
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	4770      	bx	lr
 800d448:	2000019c 	.word	0x2000019c
 800d44c:	200003ec 	.word	0x200003ec

0800d450 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800d450:	4a02      	ldr	r2, [pc, #8]	@ (800d45c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 800d452:	4b03      	ldr	r3, [pc, #12]	@ (800d460 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 800d454:	6812      	ldr	r2, [r2, #0]
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	200003ec 	.word	0x200003ec
 800d460:	2000019c 	.word	0x2000019c

0800d464 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d464:	4b04      	ldr	r3, [pc, #16]	@ (800d478 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	b10a      	cbz	r2, 800d46e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xa>
 800d46a:	4803      	ldr	r0, [pc, #12]	@ (800d478 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800d46c:	4770      	bx	lr
 800d46e:	4a03      	ldr	r2, [pc, #12]	@ (800d47c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x18>)
 800d470:	4801      	ldr	r0, [pc, #4]	@ (800d478 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800d472:	6812      	ldr	r2, [r2, #0]
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	4770      	bx	lr
 800d478:	200001bc 	.word	0x200001bc
 800d47c:	200003ec 	.word	0x200003ec

0800d480 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d480:	4a02      	ldr	r2, [pc, #8]	@ (800d48c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xc>)
 800d482:	4b03      	ldr	r3, [pc, #12]	@ (800d490 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x10>)
 800d484:	6812      	ldr	r2, [r2, #0]
 800d486:	601a      	str	r2, [r3, #0]
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	200003ec 	.word	0x200003ec
 800d490:	200001bc 	.word	0x200001bc

0800d494 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 800d494:	f007 b8b8 	b.w	8014608 <std_msgs__msg__Float32__init>

0800d498 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 800d498:	f007 b8ba 	b.w	8014610 <std_msgs__msg__Float32__fini>

0800d49c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800d49c:	4b04      	ldr	r3, [pc, #16]	@ (800d4b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	b10a      	cbz	r2, 800d4a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800d4a2:	4803      	ldr	r0, [pc, #12]	@ (800d4b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800d4a4:	4770      	bx	lr
 800d4a6:	4a03      	ldr	r2, [pc, #12]	@ (800d4b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800d4a8:	4801      	ldr	r0, [pc, #4]	@ (800d4b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800d4aa:	6812      	ldr	r2, [r2, #0]
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	4770      	bx	lr
 800d4b0:	200001dc 	.word	0x200001dc
 800d4b4:	200003f0 	.word	0x200003f0

0800d4b8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__size_function__Float32MultiArray__data>:
 800d4b8:	6840      	ldr	r0, [r0, #4]
 800d4ba:	4770      	bx	lr

0800d4bc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float32MultiArray__data>:
 800d4bc:	6800      	ldr	r0, [r0, #0]
 800d4be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d4c2:	4770      	bx	lr

0800d4c4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float32MultiArray__data>:
 800d4c4:	6803      	ldr	r3, [r0, #0]
 800d4c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	6013      	str	r3, [r2, #0]
 800d4ce:	4770      	bx	lr

0800d4d0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__assign_function__Float32MultiArray__data>:
 800d4d0:	6803      	ldr	r3, [r0, #0]
 800d4d2:	6812      	ldr	r2, [r2, #0]
 800d4d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	4770      	bx	lr

0800d4dc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_init_function>:
 800d4dc:	f007 b8f6 	b.w	80146cc <std_msgs__msg__Float32MultiArray__init>

0800d4e0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_fini_function>:
 800d4e0:	f007 b914 	b.w	801470c <std_msgs__msg__Float32MultiArray__fini>

0800d4e4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__resize_function__Float32MultiArray__data>:
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	f007 f81d 	bl	8014528 <rosidl_runtime_c__float__Sequence__fini>
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4f6:	f006 bffd 	b.w	80144f4 <rosidl_runtime_c__float__Sequence__init>
 800d4fa:	bf00      	nop

0800d4fc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_function__Float32MultiArray__data>:
 800d4fc:	6800      	ldr	r0, [r0, #0]
 800d4fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d502:	4770      	bx	lr

0800d504 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d504:	b508      	push	{r3, lr}
 800d506:	f000 f855 	bl	800d5b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d50a:	4b06      	ldr	r3, [pc, #24]	@ (800d524 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800d50c:	4906      	ldr	r1, [pc, #24]	@ (800d528 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x24>)
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	60c8      	str	r0, [r1, #12]
 800d512:	b10a      	cbz	r2, 800d518 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>
 800d514:	4803      	ldr	r0, [pc, #12]	@ (800d524 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800d516:	bd08      	pop	{r3, pc}
 800d518:	4a04      	ldr	r2, [pc, #16]	@ (800d52c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x28>)
 800d51a:	4802      	ldr	r0, [pc, #8]	@ (800d524 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800d51c:	6812      	ldr	r2, [r2, #0]
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	bd08      	pop	{r3, pc}
 800d522:	bf00      	nop
 800d524:	20000230 	.word	0x20000230
 800d528:	20000248 	.word	0x20000248
 800d52c:	200003f0 	.word	0x200003f0

0800d530 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800d530:	6840      	ldr	r0, [r0, #4]
 800d532:	4770      	bx	lr

0800d534 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800d534:	6800      	ldr	r0, [r0, #0]
 800d536:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d53a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d53e:	4770      	bx	lr

0800d540 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800d540:	6803      	ldr	r3, [r0, #0]
 800d542:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d546:	b500      	push	{lr}
 800d548:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800d54c:	4694      	mov	ip, r2
 800d54e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d552:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d556:	f8de 3000 	ldr.w	r3, [lr]
 800d55a:	f8cc 3000 	str.w	r3, [ip]
 800d55e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d562:	bf00      	nop

0800d564 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800d564:	6803      	ldr	r3, [r0, #0]
 800d566:	b500      	push	{lr}
 800d568:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d56c:	4696      	mov	lr, r2
 800d56e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800d572:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d576:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d57a:	f8de 3000 	ldr.w	r3, [lr]
 800d57e:	f8cc 3000 	str.w	r3, [ip]
 800d582:	f85d fb04 	ldr.w	pc, [sp], #4
 800d586:	bf00      	nop

0800d588 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800d588:	f007 b9c2 	b.w	8014910 <std_msgs__msg__MultiArrayLayout__init>

0800d58c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800d58c:	f007 b9d0 	b.w	8014930 <std_msgs__msg__MultiArrayLayout__fini>

0800d590 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4604      	mov	r4, r0
 800d594:	460d      	mov	r5, r1
 800d596:	f007 f94b 	bl	8014830 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800d59a:	4629      	mov	r1, r5
 800d59c:	4620      	mov	r0, r4
 800d59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5a2:	f007 b901 	b.w	80147a8 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800d5a6:	bf00      	nop

0800d5a8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800d5a8:	6800      	ldr	r0, [r0, #0]
 800d5aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d5ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d5b2:	4770      	bx	lr

0800d5b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800d5b4:	b508      	push	{r3, lr}
 800d5b6:	f007 f9c3 	bl	8014940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d5ba:	4b06      	ldr	r3, [pc, #24]	@ (800d5d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800d5bc:	4906      	ldr	r1, [pc, #24]	@ (800d5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	60c8      	str	r0, [r1, #12]
 800d5c2:	b10a      	cbz	r2, 800d5c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800d5c4:	4803      	ldr	r0, [pc, #12]	@ (800d5d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800d5c6:	bd08      	pop	{r3, pc}
 800d5c8:	4a04      	ldr	r2, [pc, #16]	@ (800d5dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800d5ca:	4802      	ldr	r0, [pc, #8]	@ (800d5d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800d5cc:	6812      	ldr	r2, [r2, #0]
 800d5ce:	601a      	str	r2, [r3, #0]
 800d5d0:	bd08      	pop	{r3, pc}
 800d5d2:	bf00      	nop
 800d5d4:	200002c0 	.word	0x200002c0
 800d5d8:	200002d8 	.word	0x200002d8
 800d5dc:	200003f0 	.word	0x200003f0

0800d5e0 <_Float32__max_serialized_size>:
 800d5e0:	b508      	push	{r3, lr}
 800d5e2:	2104      	movs	r1, #4
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	f001 fb7d 	bl	800ece4 <ucdr_alignment>
 800d5ea:	3004      	adds	r0, #4
 800d5ec:	bd08      	pop	{r3, pc}
 800d5ee:	bf00      	nop

0800d5f0 <_Float32__cdr_deserialize>:
 800d5f0:	b109      	cbz	r1, 800d5f6 <_Float32__cdr_deserialize+0x6>
 800d5f2:	f001 ba05 	b.w	800ea00 <ucdr_deserialize_float>
 800d5f6:	4608      	mov	r0, r1
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop

0800d5fc <get_serialized_size_std_msgs__msg__Float32>:
 800d5fc:	b508      	push	{r3, lr}
 800d5fe:	b120      	cbz	r0, 800d60a <get_serialized_size_std_msgs__msg__Float32+0xe>
 800d600:	4608      	mov	r0, r1
 800d602:	2104      	movs	r1, #4
 800d604:	f001 fb6e 	bl	800ece4 <ucdr_alignment>
 800d608:	3004      	adds	r0, #4
 800d60a:	bd08      	pop	{r3, pc}

0800d60c <_Float32__cdr_serialize>:
 800d60c:	b120      	cbz	r0, 800d618 <_Float32__cdr_serialize+0xc>
 800d60e:	ed90 0a00 	vldr	s0, [r0]
 800d612:	4608      	mov	r0, r1
 800d614:	f001 b8c8 	b.w	800e7a8 <ucdr_serialize_float>
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop

0800d61c <_Float32__get_serialized_size>:
 800d61c:	b130      	cbz	r0, 800d62c <_Float32__get_serialized_size+0x10>
 800d61e:	b508      	push	{r3, lr}
 800d620:	2104      	movs	r1, #4
 800d622:	2000      	movs	r0, #0
 800d624:	f001 fb5e 	bl	800ece4 <ucdr_alignment>
 800d628:	3004      	adds	r0, #4
 800d62a:	bd08      	pop	{r3, pc}
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop

0800d630 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800d630:	4800      	ldr	r0, [pc, #0]	@ (800d634 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 800d632:	4770      	bx	lr
 800d634:	20000350 	.word	0x20000350

0800d638 <_Float32MultiArray__max_serialized_size>:
 800d638:	b500      	push	{lr}
 800d63a:	b083      	sub	sp, #12
 800d63c:	2301      	movs	r3, #1
 800d63e:	2100      	movs	r1, #0
 800d640:	f10d 0007 	add.w	r0, sp, #7
 800d644:	f88d 3007 	strb.w	r3, [sp, #7]
 800d648:	f000 f91c 	bl	800d884 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d64c:	b003      	add	sp, #12
 800d64e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d652:	bf00      	nop

0800d654 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 800d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d656:	4604      	mov	r4, r0
 800d658:	b160      	cbz	r0, 800d674 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>
 800d65a:	460d      	mov	r5, r1
 800d65c:	f000 f8e4 	bl	800d828 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d660:	182e      	adds	r6, r5, r0
 800d662:	2104      	movs	r1, #4
 800d664:	4630      	mov	r0, r6
 800d666:	6967      	ldr	r7, [r4, #20]
 800d668:	f001 fb3c 	bl	800ece4 <ucdr_alignment>
 800d66c:	1d04      	adds	r4, r0, #4
 800d66e:	4434      	add	r4, r6
 800d670:	b90f      	cbnz	r7, 800d676 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x22>
 800d672:	1b60      	subs	r0, r4, r5
 800d674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d676:	4620      	mov	r0, r4
 800d678:	2104      	movs	r1, #4
 800d67a:	f001 fb33 	bl	800ece4 <ucdr_alignment>
 800d67e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d682:	4404      	add	r4, r0
 800d684:	1b60      	subs	r0, r4, r5
 800d686:	e7f5      	b.n	800d674 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>

0800d688 <_Float32MultiArray__cdr_deserialize>:
 800d688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d68a:	460c      	mov	r4, r1
 800d68c:	b083      	sub	sp, #12
 800d68e:	b1d1      	cbz	r1, 800d6c6 <_Float32MultiArray__cdr_deserialize+0x3e>
 800d690:	4606      	mov	r6, r0
 800d692:	f000 f901 	bl	800d898 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d696:	6843      	ldr	r3, [r0, #4]
 800d698:	4621      	mov	r1, r4
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	4630      	mov	r0, r6
 800d69e:	4798      	blx	r3
 800d6a0:	69a7      	ldr	r7, [r4, #24]
 800d6a2:	6921      	ldr	r1, [r4, #16]
 800d6a4:	ab01      	add	r3, sp, #4
 800d6a6:	463a      	mov	r2, r7
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f001 fbf5 	bl	800ee98 <ucdr_deserialize_sequence_float>
 800d6ae:	9b01      	ldr	r3, [sp, #4]
 800d6b0:	4605      	mov	r5, r0
 800d6b2:	b920      	cbnz	r0, 800d6be <_Float32MultiArray__cdr_deserialize+0x36>
 800d6b4:	429f      	cmp	r7, r3
 800d6b6:	d30a      	bcc.n	800d6ce <_Float32MultiArray__cdr_deserialize+0x46>
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	b003      	add	sp, #12
 800d6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6be:	4628      	mov	r0, r5
 800d6c0:	6163      	str	r3, [r4, #20]
 800d6c2:	b003      	add	sp, #12
 800d6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6c6:	460d      	mov	r5, r1
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	b003      	add	sp, #12
 800d6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	75b0      	strb	r0, [r6, #22]
 800d6d2:	7573      	strb	r3, [r6, #21]
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	6160      	str	r0, [r4, #20]
 800d6d8:	4630      	mov	r0, r6
 800d6da:	f001 fb19 	bl	800ed10 <ucdr_align_to>
 800d6de:	9901      	ldr	r1, [sp, #4]
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	0089      	lsls	r1, r1, #2
 800d6e4:	f001 fb4a 	bl	800ed7c <ucdr_advance_buffer>
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	b003      	add	sp, #12
 800d6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ee:	bf00      	nop

0800d6f0 <_Float32MultiArray__cdr_serialize>:
 800d6f0:	b180      	cbz	r0, 800d714 <_Float32MultiArray__cdr_serialize+0x24>
 800d6f2:	b538      	push	{r3, r4, r5, lr}
 800d6f4:	460d      	mov	r5, r1
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	f000 f8ce 	bl	800d898 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d6fc:	6843      	ldr	r3, [r0, #4]
 800d6fe:	4629      	mov	r1, r5
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	4620      	mov	r0, r4
 800d704:	4798      	blx	r3
 800d706:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d70a:	4628      	mov	r0, r5
 800d70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d710:	f001 bbb0 	b.w	800ee74 <ucdr_serialize_sequence_float>
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop

0800d718 <_Float32MultiArray__get_serialized_size>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4604      	mov	r4, r0
 800d71c:	b150      	cbz	r0, 800d734 <_Float32MultiArray__get_serialized_size+0x1c>
 800d71e:	2100      	movs	r1, #0
 800d720:	f000 f882 	bl	800d828 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d724:	2104      	movs	r1, #4
 800d726:	6965      	ldr	r5, [r4, #20]
 800d728:	4604      	mov	r4, r0
 800d72a:	f001 fadb 	bl	800ece4 <ucdr_alignment>
 800d72e:	4404      	add	r4, r0
 800d730:	3404      	adds	r4, #4
 800d732:	b90d      	cbnz	r5, 800d738 <_Float32MultiArray__get_serialized_size+0x20>
 800d734:	4620      	mov	r0, r4
 800d736:	bd38      	pop	{r3, r4, r5, pc}
 800d738:	2104      	movs	r1, #4
 800d73a:	4620      	mov	r0, r4
 800d73c:	f001 fad2 	bl	800ece4 <ucdr_alignment>
 800d740:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d744:	4404      	add	r4, r0
 800d746:	4620      	mov	r0, r4
 800d748:	bd38      	pop	{r3, r4, r5, pc}
 800d74a:	bf00      	nop

0800d74c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d74c:	4800      	ldr	r0, [pc, #0]	@ (800d750 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 800d74e:	4770      	bx	lr
 800d750:	20000384 	.word	0x20000384

0800d754 <_MultiArrayLayout__max_serialized_size>:
 800d754:	b508      	push	{r3, lr}
 800d756:	2104      	movs	r1, #4
 800d758:	2000      	movs	r0, #0
 800d75a:	f001 fac3 	bl	800ece4 <ucdr_alignment>
 800d75e:	3004      	adds	r0, #4
 800d760:	bd08      	pop	{r3, pc}
 800d762:	bf00      	nop

0800d764 <_MultiArrayLayout__cdr_deserialize>:
 800d764:	b351      	cbz	r1, 800d7bc <_MultiArrayLayout__cdr_deserialize+0x58>
 800d766:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d768:	460e      	mov	r6, r1
 800d76a:	b083      	sub	sp, #12
 800d76c:	a901      	add	r1, sp, #4
 800d76e:	4607      	mov	r7, r0
 800d770:	f000 fc0a 	bl	800df88 <ucdr_deserialize_uint32_t>
 800d774:	9b01      	ldr	r3, [sp, #4]
 800d776:	68b2      	ldr	r2, [r6, #8]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d31c      	bcc.n	800d7b6 <_MultiArrayLayout__cdr_deserialize+0x52>
 800d77c:	6073      	str	r3, [r6, #4]
 800d77e:	b193      	cbz	r3, 800d7a6 <_MultiArrayLayout__cdr_deserialize+0x42>
 800d780:	2400      	movs	r4, #0
 800d782:	4625      	mov	r5, r4
 800d784:	e005      	b.n	800d792 <_MultiArrayLayout__cdr_deserialize+0x2e>
 800d786:	9b01      	ldr	r3, [sp, #4]
 800d788:	3501      	adds	r5, #1
 800d78a:	42ab      	cmp	r3, r5
 800d78c:	f104 0414 	add.w	r4, r4, #20
 800d790:	d909      	bls.n	800d7a6 <_MultiArrayLayout__cdr_deserialize+0x42>
 800d792:	f007 f973 	bl	8014a7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d796:	6831      	ldr	r1, [r6, #0]
 800d798:	6843      	ldr	r3, [r0, #4]
 800d79a:	4421      	add	r1, r4
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	4638      	mov	r0, r7
 800d7a0:	4798      	blx	r3
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d1ef      	bne.n	800d786 <_MultiArrayLayout__cdr_deserialize+0x22>
 800d7a6:	f106 010c 	add.w	r1, r6, #12
 800d7aa:	4638      	mov	r0, r7
 800d7ac:	b003      	add	sp, #12
 800d7ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d7b2:	f000 bbe9 	b.w	800df88 <ucdr_deserialize_uint32_t>
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	b003      	add	sp, #12
 800d7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7bc:	2000      	movs	r0, #0
 800d7be:	4770      	bx	lr

0800d7c0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800d7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c4:	4689      	mov	r9, r1
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	2104      	movs	r1, #4
 800d7ca:	4648      	mov	r0, r9
 800d7cc:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800d7d0:	f001 fa88 	bl	800ece4 <ucdr_alignment>
 800d7d4:	f109 0304 	add.w	r3, r9, #4
 800d7d8:	18c6      	adds	r6, r0, r3
 800d7da:	f1b8 0f00 	cmp.w	r8, #0
 800d7de:	d019      	beq.n	800d814 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x54>
 800d7e0:	2500      	movs	r5, #0
 800d7e2:	f007 f94b 	bl	8014a7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	6843      	ldr	r3, [r0, #4]
 800d7ea:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d7f6:	4798      	blx	r3
 800d7f8:	2804      	cmp	r0, #4
 800d7fa:	4601      	mov	r1, r0
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	bf28      	it	cs
 800d800:	2104      	movcs	r1, #4
 800d802:	4630      	mov	r0, r6
 800d804:	f001 fa6e 	bl	800ece4 <ucdr_alignment>
 800d808:	3501      	adds	r5, #1
 800d80a:	4434      	add	r4, r6
 800d80c:	45a8      	cmp	r8, r5
 800d80e:	eb00 0604 	add.w	r6, r0, r4
 800d812:	d1e6      	bne.n	800d7e2 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800d814:	2104      	movs	r1, #4
 800d816:	4630      	mov	r0, r6
 800d818:	f001 fa64 	bl	800ece4 <ucdr_alignment>
 800d81c:	f1c9 0904 	rsb	r9, r9, #4
 800d820:	44b1      	add	r9, r6
 800d822:	4448      	add	r0, r9
 800d824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d828 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800d828:	b108      	cbz	r0, 800d82e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800d82a:	f7ff bfc9 	b.w	800d7c0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800d82e:	4770      	bx	lr

0800d830 <_MultiArrayLayout__get_serialized_size>:
 800d830:	b110      	cbz	r0, 800d838 <_MultiArrayLayout__get_serialized_size+0x8>
 800d832:	2100      	movs	r1, #0
 800d834:	f7ff bfc4 	b.w	800d7c0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop

0800d83c <_MultiArrayLayout__cdr_serialize>:
 800d83c:	b308      	cbz	r0, 800d882 <_MultiArrayLayout__cdr_serialize+0x46>
 800d83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d840:	6847      	ldr	r7, [r0, #4]
 800d842:	460e      	mov	r6, r1
 800d844:	4605      	mov	r5, r0
 800d846:	4608      	mov	r0, r1
 800d848:	4639      	mov	r1, r7
 800d84a:	f000 fa73 	bl	800dd34 <ucdr_serialize_uint32_t>
 800d84e:	b190      	cbz	r0, 800d876 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d850:	b18f      	cbz	r7, 800d876 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d852:	2400      	movs	r4, #0
 800d854:	e002      	b.n	800d85c <_MultiArrayLayout__cdr_serialize+0x20>
 800d856:	3401      	adds	r4, #1
 800d858:	42a7      	cmp	r7, r4
 800d85a:	d00c      	beq.n	800d876 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d85c:	f007 f90e 	bl	8014a7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d860:	6841      	ldr	r1, [r0, #4]
 800d862:	6828      	ldr	r0, [r5, #0]
 800d864:	688a      	ldr	r2, [r1, #8]
 800d866:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800d86a:	4631      	mov	r1, r6
 800d86c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d870:	4790      	blx	r2
 800d872:	2800      	cmp	r0, #0
 800d874:	d1ef      	bne.n	800d856 <_MultiArrayLayout__cdr_serialize+0x1a>
 800d876:	68e9      	ldr	r1, [r5, #12]
 800d878:	4630      	mov	r0, r6
 800d87a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d87e:	f000 ba59 	b.w	800dd34 <ucdr_serialize_uint32_t>
 800d882:	4770      	bx	lr

0800d884 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800d884:	b508      	push	{r3, lr}
 800d886:	4603      	mov	r3, r0
 800d888:	2200      	movs	r2, #0
 800d88a:	4608      	mov	r0, r1
 800d88c:	701a      	strb	r2, [r3, #0]
 800d88e:	2104      	movs	r1, #4
 800d890:	f001 fa28 	bl	800ece4 <ucdr_alignment>
 800d894:	3004      	adds	r0, #4
 800d896:	bd08      	pop	{r3, pc}

0800d898 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800d898:	4800      	ldr	r0, [pc, #0]	@ (800d89c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800d89a:	4770      	bx	lr
 800d89c:	200003b8 	.word	0x200003b8

0800d8a0 <ucdr_serialize_bool>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	460d      	mov	r5, r1
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	f001 f9d0 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800d8ac:	b148      	cbz	r0, 800d8c2 <ucdr_serialize_bool+0x22>
 800d8ae:	68a3      	ldr	r3, [r4, #8]
 800d8b0:	701d      	strb	r5, [r3, #0]
 800d8b2:	68a2      	ldr	r2, [r4, #8]
 800d8b4:	6923      	ldr	r3, [r4, #16]
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	440a      	add	r2, r1
 800d8ba:	440b      	add	r3, r1
 800d8bc:	60a2      	str	r2, [r4, #8]
 800d8be:	6123      	str	r3, [r4, #16]
 800d8c0:	7561      	strb	r1, [r4, #21]
 800d8c2:	7da0      	ldrb	r0, [r4, #22]
 800d8c4:	f080 0001 	eor.w	r0, r0, #1
 800d8c8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ca:	bf00      	nop

0800d8cc <ucdr_deserialize_bool>:
 800d8cc:	b538      	push	{r3, r4, r5, lr}
 800d8ce:	460d      	mov	r5, r1
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	f001 f9ba 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800d8d8:	b160      	cbz	r0, 800d8f4 <ucdr_deserialize_bool+0x28>
 800d8da:	68a2      	ldr	r2, [r4, #8]
 800d8dc:	6923      	ldr	r3, [r4, #16]
 800d8de:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d8e2:	3900      	subs	r1, #0
 800d8e4:	bf18      	it	ne
 800d8e6:	2101      	movne	r1, #1
 800d8e8:	7029      	strb	r1, [r5, #0]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	60a2      	str	r2, [r4, #8]
 800d8f0:	6123      	str	r3, [r4, #16]
 800d8f2:	7561      	strb	r1, [r4, #21]
 800d8f4:	7da0      	ldrb	r0, [r4, #22]
 800d8f6:	f080 0001 	eor.w	r0, r0, #1
 800d8fa:	bd38      	pop	{r3, r4, r5, pc}

0800d8fc <ucdr_serialize_uint8_t>:
 800d8fc:	b538      	push	{r3, r4, r5, lr}
 800d8fe:	460d      	mov	r5, r1
 800d900:	2101      	movs	r1, #1
 800d902:	4604      	mov	r4, r0
 800d904:	f001 f9a2 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800d908:	b148      	cbz	r0, 800d91e <ucdr_serialize_uint8_t+0x22>
 800d90a:	68a3      	ldr	r3, [r4, #8]
 800d90c:	701d      	strb	r5, [r3, #0]
 800d90e:	68a2      	ldr	r2, [r4, #8]
 800d910:	6923      	ldr	r3, [r4, #16]
 800d912:	2101      	movs	r1, #1
 800d914:	440a      	add	r2, r1
 800d916:	440b      	add	r3, r1
 800d918:	60a2      	str	r2, [r4, #8]
 800d91a:	6123      	str	r3, [r4, #16]
 800d91c:	7561      	strb	r1, [r4, #21]
 800d91e:	7da0      	ldrb	r0, [r4, #22]
 800d920:	f080 0001 	eor.w	r0, r0, #1
 800d924:	bd38      	pop	{r3, r4, r5, pc}
 800d926:	bf00      	nop

0800d928 <ucdr_deserialize_uint8_t>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	460d      	mov	r5, r1
 800d92c:	2101      	movs	r1, #1
 800d92e:	4604      	mov	r4, r0
 800d930:	f001 f98c 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800d934:	b150      	cbz	r0, 800d94c <ucdr_deserialize_uint8_t+0x24>
 800d936:	68a3      	ldr	r3, [r4, #8]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	702b      	strb	r3, [r5, #0]
 800d93c:	68a2      	ldr	r2, [r4, #8]
 800d93e:	6923      	ldr	r3, [r4, #16]
 800d940:	2101      	movs	r1, #1
 800d942:	440a      	add	r2, r1
 800d944:	440b      	add	r3, r1
 800d946:	60a2      	str	r2, [r4, #8]
 800d948:	6123      	str	r3, [r4, #16]
 800d94a:	7561      	strb	r1, [r4, #21]
 800d94c:	7da0      	ldrb	r0, [r4, #22]
 800d94e:	f080 0001 	eor.w	r0, r0, #1
 800d952:	bd38      	pop	{r3, r4, r5, pc}

0800d954 <ucdr_serialize_uint16_t>:
 800d954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d958:	b082      	sub	sp, #8
 800d95a:	460b      	mov	r3, r1
 800d95c:	2102      	movs	r1, #2
 800d95e:	4604      	mov	r4, r0
 800d960:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d964:	f001 f9c6 	bl	800ecf4 <ucdr_buffer_alignment>
 800d968:	4601      	mov	r1, r0
 800d96a:	4620      	mov	r0, r4
 800d96c:	7d67      	ldrb	r7, [r4, #21]
 800d96e:	f001 fa05 	bl	800ed7c <ucdr_advance_buffer>
 800d972:	2102      	movs	r1, #2
 800d974:	4620      	mov	r0, r4
 800d976:	f001 f95d 	bl	800ec34 <ucdr_check_buffer_available_for>
 800d97a:	b1c0      	cbz	r0, 800d9ae <ucdr_serialize_uint16_t+0x5a>
 800d97c:	7d22      	ldrb	r2, [r4, #20]
 800d97e:	68a3      	ldr	r3, [r4, #8]
 800d980:	2a01      	cmp	r2, #1
 800d982:	d04e      	beq.n	800da22 <ucdr_serialize_uint16_t+0xce>
 800d984:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d990:	705a      	strb	r2, [r3, #1]
 800d992:	68a2      	ldr	r2, [r4, #8]
 800d994:	6923      	ldr	r3, [r4, #16]
 800d996:	3202      	adds	r2, #2
 800d998:	3302      	adds	r3, #2
 800d99a:	2102      	movs	r1, #2
 800d99c:	60a2      	str	r2, [r4, #8]
 800d99e:	6123      	str	r3, [r4, #16]
 800d9a0:	7561      	strb	r1, [r4, #21]
 800d9a2:	7da0      	ldrb	r0, [r4, #22]
 800d9a4:	f080 0001 	eor.w	r0, r0, #1
 800d9a8:	b002      	add	sp, #8
 800d9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ae:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d9b2:	42ab      	cmp	r3, r5
 800d9b4:	d923      	bls.n	800d9fe <ucdr_serialize_uint16_t+0xaa>
 800d9b6:	1b5e      	subs	r6, r3, r5
 800d9b8:	60a3      	str	r3, [r4, #8]
 800d9ba:	6923      	ldr	r3, [r4, #16]
 800d9bc:	f1c6 0802 	rsb	r8, r6, #2
 800d9c0:	4433      	add	r3, r6
 800d9c2:	6123      	str	r3, [r4, #16]
 800d9c4:	4641      	mov	r1, r8
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f001 f940 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800d9cc:	b368      	cbz	r0, 800da2a <ucdr_serialize_uint16_t+0xd6>
 800d9ce:	7d23      	ldrb	r3, [r4, #20]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d03b      	beq.n	800da4c <ucdr_serialize_uint16_t+0xf8>
 800d9d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9d8:	702b      	strb	r3, [r5, #0]
 800d9da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9de:	706b      	strb	r3, [r5, #1]
 800d9e0:	6923      	ldr	r3, [r4, #16]
 800d9e2:	68a2      	ldr	r2, [r4, #8]
 800d9e4:	7da0      	ldrb	r0, [r4, #22]
 800d9e6:	3302      	adds	r3, #2
 800d9e8:	4442      	add	r2, r8
 800d9ea:	1b9b      	subs	r3, r3, r6
 800d9ec:	2102      	movs	r1, #2
 800d9ee:	f080 0001 	eor.w	r0, r0, #1
 800d9f2:	60a2      	str	r2, [r4, #8]
 800d9f4:	6123      	str	r3, [r4, #16]
 800d9f6:	7561      	strb	r1, [r4, #21]
 800d9f8:	b002      	add	sp, #8
 800d9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9fe:	2102      	movs	r1, #2
 800da00:	4620      	mov	r0, r4
 800da02:	f001 f923 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800da06:	2800      	cmp	r0, #0
 800da08:	d0cb      	beq.n	800d9a2 <ucdr_serialize_uint16_t+0x4e>
 800da0a:	7d23      	ldrb	r3, [r4, #20]
 800da0c:	68a2      	ldr	r2, [r4, #8]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d018      	beq.n	800da44 <ucdr_serialize_uint16_t+0xf0>
 800da12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da16:	7013      	strb	r3, [r2, #0]
 800da18:	68a3      	ldr	r3, [r4, #8]
 800da1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da1e:	705a      	strb	r2, [r3, #1]
 800da20:	e7b7      	b.n	800d992 <ucdr_serialize_uint16_t+0x3e>
 800da22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800da26:	801a      	strh	r2, [r3, #0]
 800da28:	e7b3      	b.n	800d992 <ucdr_serialize_uint16_t+0x3e>
 800da2a:	68a2      	ldr	r2, [r4, #8]
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	7da0      	ldrb	r0, [r4, #22]
 800da30:	7567      	strb	r7, [r4, #21]
 800da32:	1b92      	subs	r2, r2, r6
 800da34:	1b9b      	subs	r3, r3, r6
 800da36:	f080 0001 	eor.w	r0, r0, #1
 800da3a:	60a2      	str	r2, [r4, #8]
 800da3c:	6123      	str	r3, [r4, #16]
 800da3e:	b002      	add	sp, #8
 800da40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800da48:	8013      	strh	r3, [r2, #0]
 800da4a:	e7a2      	b.n	800d992 <ucdr_serialize_uint16_t+0x3e>
 800da4c:	4628      	mov	r0, r5
 800da4e:	f10d 0506 	add.w	r5, sp, #6
 800da52:	4632      	mov	r2, r6
 800da54:	4629      	mov	r1, r5
 800da56:	f00e f866 	bl	801bb26 <memcpy>
 800da5a:	68a0      	ldr	r0, [r4, #8]
 800da5c:	4642      	mov	r2, r8
 800da5e:	19a9      	adds	r1, r5, r6
 800da60:	f00e f861 	bl	801bb26 <memcpy>
 800da64:	e7bc      	b.n	800d9e0 <ucdr_serialize_uint16_t+0x8c>
 800da66:	bf00      	nop

0800da68 <ucdr_serialize_endian_uint16_t>:
 800da68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da6c:	b083      	sub	sp, #12
 800da6e:	460d      	mov	r5, r1
 800da70:	2102      	movs	r1, #2
 800da72:	4604      	mov	r4, r0
 800da74:	f8ad 2006 	strh.w	r2, [sp, #6]
 800da78:	f001 f93c 	bl	800ecf4 <ucdr_buffer_alignment>
 800da7c:	4601      	mov	r1, r0
 800da7e:	4620      	mov	r0, r4
 800da80:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da84:	f001 f97a 	bl	800ed7c <ucdr_advance_buffer>
 800da88:	2102      	movs	r1, #2
 800da8a:	4620      	mov	r0, r4
 800da8c:	f001 f8d2 	bl	800ec34 <ucdr_check_buffer_available_for>
 800da90:	bb60      	cbnz	r0, 800daec <ucdr_serialize_endian_uint16_t+0x84>
 800da92:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800da96:	42be      	cmp	r6, r7
 800da98:	d923      	bls.n	800dae2 <ucdr_serialize_endian_uint16_t+0x7a>
 800da9a:	6923      	ldr	r3, [r4, #16]
 800da9c:	60a6      	str	r6, [r4, #8]
 800da9e:	1bf6      	subs	r6, r6, r7
 800daa0:	4433      	add	r3, r6
 800daa2:	f1c6 0902 	rsb	r9, r6, #2
 800daa6:	6123      	str	r3, [r4, #16]
 800daa8:	4649      	mov	r1, r9
 800daaa:	4620      	mov	r0, r4
 800daac:	f001 f8ce 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d037      	beq.n	800db24 <ucdr_serialize_endian_uint16_t+0xbc>
 800dab4:	2d01      	cmp	r5, #1
 800dab6:	d043      	beq.n	800db40 <ucdr_serialize_endian_uint16_t+0xd8>
 800dab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dabc:	703b      	strb	r3, [r7, #0]
 800dabe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dac2:	707b      	strb	r3, [r7, #1]
 800dac4:	6923      	ldr	r3, [r4, #16]
 800dac6:	68a2      	ldr	r2, [r4, #8]
 800dac8:	7da0      	ldrb	r0, [r4, #22]
 800daca:	3302      	adds	r3, #2
 800dacc:	444a      	add	r2, r9
 800dace:	1b9b      	subs	r3, r3, r6
 800dad0:	2102      	movs	r1, #2
 800dad2:	f080 0001 	eor.w	r0, r0, #1
 800dad6:	60a2      	str	r2, [r4, #8]
 800dad8:	6123      	str	r3, [r4, #16]
 800dada:	7561      	strb	r1, [r4, #21]
 800dadc:	b003      	add	sp, #12
 800dade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dae2:	2102      	movs	r1, #2
 800dae4:	4620      	mov	r0, r4
 800dae6:	f001 f8b1 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800daea:	b188      	cbz	r0, 800db10 <ucdr_serialize_endian_uint16_t+0xa8>
 800daec:	2d01      	cmp	r5, #1
 800daee:	68a3      	ldr	r3, [r4, #8]
 800daf0:	d014      	beq.n	800db1c <ucdr_serialize_endian_uint16_t+0xb4>
 800daf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800daf6:	701a      	strb	r2, [r3, #0]
 800daf8:	68a3      	ldr	r3, [r4, #8]
 800dafa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dafe:	705a      	strb	r2, [r3, #1]
 800db00:	68a2      	ldr	r2, [r4, #8]
 800db02:	6923      	ldr	r3, [r4, #16]
 800db04:	3202      	adds	r2, #2
 800db06:	3302      	adds	r3, #2
 800db08:	2102      	movs	r1, #2
 800db0a:	60a2      	str	r2, [r4, #8]
 800db0c:	6123      	str	r3, [r4, #16]
 800db0e:	7561      	strb	r1, [r4, #21]
 800db10:	7da0      	ldrb	r0, [r4, #22]
 800db12:	f080 0001 	eor.w	r0, r0, #1
 800db16:	b003      	add	sp, #12
 800db18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db1c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800db20:	801a      	strh	r2, [r3, #0]
 800db22:	e7ed      	b.n	800db00 <ucdr_serialize_endian_uint16_t+0x98>
 800db24:	68a2      	ldr	r2, [r4, #8]
 800db26:	6923      	ldr	r3, [r4, #16]
 800db28:	7da0      	ldrb	r0, [r4, #22]
 800db2a:	f884 8015 	strb.w	r8, [r4, #21]
 800db2e:	1b92      	subs	r2, r2, r6
 800db30:	1b9b      	subs	r3, r3, r6
 800db32:	f080 0001 	eor.w	r0, r0, #1
 800db36:	60a2      	str	r2, [r4, #8]
 800db38:	6123      	str	r3, [r4, #16]
 800db3a:	b003      	add	sp, #12
 800db3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db40:	f10d 0506 	add.w	r5, sp, #6
 800db44:	4632      	mov	r2, r6
 800db46:	4629      	mov	r1, r5
 800db48:	4638      	mov	r0, r7
 800db4a:	f00d ffec 	bl	801bb26 <memcpy>
 800db4e:	68a0      	ldr	r0, [r4, #8]
 800db50:	464a      	mov	r2, r9
 800db52:	19a9      	adds	r1, r5, r6
 800db54:	f00d ffe7 	bl	801bb26 <memcpy>
 800db58:	e7b4      	b.n	800dac4 <ucdr_serialize_endian_uint16_t+0x5c>
 800db5a:	bf00      	nop

0800db5c <ucdr_deserialize_uint16_t>:
 800db5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db60:	460d      	mov	r5, r1
 800db62:	2102      	movs	r1, #2
 800db64:	4604      	mov	r4, r0
 800db66:	f001 f8c5 	bl	800ecf4 <ucdr_buffer_alignment>
 800db6a:	4601      	mov	r1, r0
 800db6c:	4620      	mov	r0, r4
 800db6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800db72:	f001 f903 	bl	800ed7c <ucdr_advance_buffer>
 800db76:	2102      	movs	r1, #2
 800db78:	4620      	mov	r0, r4
 800db7a:	f001 f85b 	bl	800ec34 <ucdr_check_buffer_available_for>
 800db7e:	b1a8      	cbz	r0, 800dbac <ucdr_deserialize_uint16_t+0x50>
 800db80:	7d22      	ldrb	r2, [r4, #20]
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	2a01      	cmp	r2, #1
 800db86:	d046      	beq.n	800dc16 <ucdr_deserialize_uint16_t+0xba>
 800db88:	785b      	ldrb	r3, [r3, #1]
 800db8a:	702b      	strb	r3, [r5, #0]
 800db8c:	68a3      	ldr	r3, [r4, #8]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	706b      	strb	r3, [r5, #1]
 800db92:	68a2      	ldr	r2, [r4, #8]
 800db94:	6923      	ldr	r3, [r4, #16]
 800db96:	3202      	adds	r2, #2
 800db98:	3302      	adds	r3, #2
 800db9a:	2102      	movs	r1, #2
 800db9c:	60a2      	str	r2, [r4, #8]
 800db9e:	6123      	str	r3, [r4, #16]
 800dba0:	7561      	strb	r1, [r4, #21]
 800dba2:	7da0      	ldrb	r0, [r4, #22]
 800dba4:	f080 0001 	eor.w	r0, r0, #1
 800dba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dbb0:	42be      	cmp	r6, r7
 800dbb2:	d920      	bls.n	800dbf6 <ucdr_deserialize_uint16_t+0x9a>
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	60a6      	str	r6, [r4, #8]
 800dbb8:	1bf6      	subs	r6, r6, r7
 800dbba:	4433      	add	r3, r6
 800dbbc:	f1c6 0902 	rsb	r9, r6, #2
 800dbc0:	6123      	str	r3, [r4, #16]
 800dbc2:	4649      	mov	r1, r9
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f001 f841 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800dbca:	b338      	cbz	r0, 800dc1c <ucdr_deserialize_uint16_t+0xc0>
 800dbcc:	7d23      	ldrb	r3, [r4, #20]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d034      	beq.n	800dc3c <ucdr_deserialize_uint16_t+0xe0>
 800dbd2:	787b      	ldrb	r3, [r7, #1]
 800dbd4:	702b      	strb	r3, [r5, #0]
 800dbd6:	783b      	ldrb	r3, [r7, #0]
 800dbd8:	706b      	strb	r3, [r5, #1]
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	68a2      	ldr	r2, [r4, #8]
 800dbde:	7da0      	ldrb	r0, [r4, #22]
 800dbe0:	2102      	movs	r1, #2
 800dbe2:	3302      	adds	r3, #2
 800dbe4:	444a      	add	r2, r9
 800dbe6:	1b9b      	subs	r3, r3, r6
 800dbe8:	7561      	strb	r1, [r4, #21]
 800dbea:	60a2      	str	r2, [r4, #8]
 800dbec:	6123      	str	r3, [r4, #16]
 800dbee:	f080 0001 	eor.w	r0, r0, #1
 800dbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbf6:	2102      	movs	r1, #2
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f001 f827 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d0cf      	beq.n	800dba2 <ucdr_deserialize_uint16_t+0x46>
 800dc02:	7d23      	ldrb	r3, [r4, #20]
 800dc04:	68a2      	ldr	r2, [r4, #8]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d015      	beq.n	800dc36 <ucdr_deserialize_uint16_t+0xda>
 800dc0a:	7853      	ldrb	r3, [r2, #1]
 800dc0c:	702b      	strb	r3, [r5, #0]
 800dc0e:	68a3      	ldr	r3, [r4, #8]
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	706b      	strb	r3, [r5, #1]
 800dc14:	e7bd      	b.n	800db92 <ucdr_deserialize_uint16_t+0x36>
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	802b      	strh	r3, [r5, #0]
 800dc1a:	e7ba      	b.n	800db92 <ucdr_deserialize_uint16_t+0x36>
 800dc1c:	68a2      	ldr	r2, [r4, #8]
 800dc1e:	6923      	ldr	r3, [r4, #16]
 800dc20:	7da0      	ldrb	r0, [r4, #22]
 800dc22:	f884 8015 	strb.w	r8, [r4, #21]
 800dc26:	1b92      	subs	r2, r2, r6
 800dc28:	1b9b      	subs	r3, r3, r6
 800dc2a:	60a2      	str	r2, [r4, #8]
 800dc2c:	6123      	str	r3, [r4, #16]
 800dc2e:	f080 0001 	eor.w	r0, r0, #1
 800dc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc36:	8813      	ldrh	r3, [r2, #0]
 800dc38:	802b      	strh	r3, [r5, #0]
 800dc3a:	e7aa      	b.n	800db92 <ucdr_deserialize_uint16_t+0x36>
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	4632      	mov	r2, r6
 800dc40:	4628      	mov	r0, r5
 800dc42:	f00d ff70 	bl	801bb26 <memcpy>
 800dc46:	68a1      	ldr	r1, [r4, #8]
 800dc48:	464a      	mov	r2, r9
 800dc4a:	19a8      	adds	r0, r5, r6
 800dc4c:	f00d ff6b 	bl	801bb26 <memcpy>
 800dc50:	e7c3      	b.n	800dbda <ucdr_deserialize_uint16_t+0x7e>
 800dc52:	bf00      	nop

0800dc54 <ucdr_deserialize_endian_uint16_t>:
 800dc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc58:	460e      	mov	r6, r1
 800dc5a:	2102      	movs	r1, #2
 800dc5c:	4604      	mov	r4, r0
 800dc5e:	4615      	mov	r5, r2
 800dc60:	f001 f848 	bl	800ecf4 <ucdr_buffer_alignment>
 800dc64:	4601      	mov	r1, r0
 800dc66:	4620      	mov	r0, r4
 800dc68:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dc6c:	f001 f886 	bl	800ed7c <ucdr_advance_buffer>
 800dc70:	2102      	movs	r1, #2
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 ffde 	bl	800ec34 <ucdr_check_buffer_available_for>
 800dc78:	bb60      	cbnz	r0, 800dcd4 <ucdr_deserialize_endian_uint16_t+0x80>
 800dc7a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800dc7e:	4547      	cmp	r7, r8
 800dc80:	d923      	bls.n	800dcca <ucdr_deserialize_endian_uint16_t+0x76>
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	60a7      	str	r7, [r4, #8]
 800dc86:	eba7 0708 	sub.w	r7, r7, r8
 800dc8a:	443b      	add	r3, r7
 800dc8c:	f1c7 0a02 	rsb	sl, r7, #2
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	4651      	mov	r1, sl
 800dc94:	4620      	mov	r0, r4
 800dc96:	f000 ffd9 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d032      	beq.n	800dd04 <ucdr_deserialize_endian_uint16_t+0xb0>
 800dc9e:	2e01      	cmp	r6, #1
 800dca0:	d03d      	beq.n	800dd1e <ucdr_deserialize_endian_uint16_t+0xca>
 800dca2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dca6:	702b      	strb	r3, [r5, #0]
 800dca8:	f898 3000 	ldrb.w	r3, [r8]
 800dcac:	706b      	strb	r3, [r5, #1]
 800dcae:	6923      	ldr	r3, [r4, #16]
 800dcb0:	68a2      	ldr	r2, [r4, #8]
 800dcb2:	7da0      	ldrb	r0, [r4, #22]
 800dcb4:	2102      	movs	r1, #2
 800dcb6:	3302      	adds	r3, #2
 800dcb8:	4452      	add	r2, sl
 800dcba:	1bdb      	subs	r3, r3, r7
 800dcbc:	7561      	strb	r1, [r4, #21]
 800dcbe:	60a2      	str	r2, [r4, #8]
 800dcc0:	6123      	str	r3, [r4, #16]
 800dcc2:	f080 0001 	eor.w	r0, r0, #1
 800dcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcca:	2102      	movs	r1, #2
 800dccc:	4620      	mov	r0, r4
 800dcce:	f000 ffbd 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800dcd2:	b178      	cbz	r0, 800dcf4 <ucdr_deserialize_endian_uint16_t+0xa0>
 800dcd4:	2e01      	cmp	r6, #1
 800dcd6:	68a3      	ldr	r3, [r4, #8]
 800dcd8:	d011      	beq.n	800dcfe <ucdr_deserialize_endian_uint16_t+0xaa>
 800dcda:	785b      	ldrb	r3, [r3, #1]
 800dcdc:	702b      	strb	r3, [r5, #0]
 800dcde:	68a3      	ldr	r3, [r4, #8]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	706b      	strb	r3, [r5, #1]
 800dce4:	68a2      	ldr	r2, [r4, #8]
 800dce6:	6923      	ldr	r3, [r4, #16]
 800dce8:	3202      	adds	r2, #2
 800dcea:	3302      	adds	r3, #2
 800dcec:	2102      	movs	r1, #2
 800dcee:	60a2      	str	r2, [r4, #8]
 800dcf0:	6123      	str	r3, [r4, #16]
 800dcf2:	7561      	strb	r1, [r4, #21]
 800dcf4:	7da0      	ldrb	r0, [r4, #22]
 800dcf6:	f080 0001 	eor.w	r0, r0, #1
 800dcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcfe:	881b      	ldrh	r3, [r3, #0]
 800dd00:	802b      	strh	r3, [r5, #0]
 800dd02:	e7ef      	b.n	800dce4 <ucdr_deserialize_endian_uint16_t+0x90>
 800dd04:	68a2      	ldr	r2, [r4, #8]
 800dd06:	6923      	ldr	r3, [r4, #16]
 800dd08:	7da0      	ldrb	r0, [r4, #22]
 800dd0a:	f884 9015 	strb.w	r9, [r4, #21]
 800dd0e:	1bd2      	subs	r2, r2, r7
 800dd10:	1bdb      	subs	r3, r3, r7
 800dd12:	60a2      	str	r2, [r4, #8]
 800dd14:	6123      	str	r3, [r4, #16]
 800dd16:	f080 0001 	eor.w	r0, r0, #1
 800dd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd1e:	4641      	mov	r1, r8
 800dd20:	463a      	mov	r2, r7
 800dd22:	4628      	mov	r0, r5
 800dd24:	f00d feff 	bl	801bb26 <memcpy>
 800dd28:	68a1      	ldr	r1, [r4, #8]
 800dd2a:	4652      	mov	r2, sl
 800dd2c:	19e8      	adds	r0, r5, r7
 800dd2e:	f00d fefa 	bl	801bb26 <memcpy>
 800dd32:	e7bc      	b.n	800dcae <ucdr_deserialize_endian_uint16_t+0x5a>

0800dd34 <ucdr_serialize_uint32_t>:
 800dd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	9101      	str	r1, [sp, #4]
 800dd3e:	2104      	movs	r1, #4
 800dd40:	f000 ffd8 	bl	800ecf4 <ucdr_buffer_alignment>
 800dd44:	4601      	mov	r1, r0
 800dd46:	4620      	mov	r0, r4
 800dd48:	7d67      	ldrb	r7, [r4, #21]
 800dd4a:	f001 f817 	bl	800ed7c <ucdr_advance_buffer>
 800dd4e:	2104      	movs	r1, #4
 800dd50:	4620      	mov	r0, r4
 800dd52:	f000 ff6f 	bl	800ec34 <ucdr_check_buffer_available_for>
 800dd56:	b300      	cbz	r0, 800dd9a <ucdr_serialize_uint32_t+0x66>
 800dd58:	7d22      	ldrb	r2, [r4, #20]
 800dd5a:	68a3      	ldr	r3, [r4, #8]
 800dd5c:	2a01      	cmp	r2, #1
 800dd5e:	d05d      	beq.n	800de1c <ucdr_serialize_uint32_t+0xe8>
 800dd60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd64:	701a      	strb	r2, [r3, #0]
 800dd66:	68a3      	ldr	r3, [r4, #8]
 800dd68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd6c:	705a      	strb	r2, [r3, #1]
 800dd6e:	68a3      	ldr	r3, [r4, #8]
 800dd70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd74:	709a      	strb	r2, [r3, #2]
 800dd76:	68a3      	ldr	r3, [r4, #8]
 800dd78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd7c:	70da      	strb	r2, [r3, #3]
 800dd7e:	68a2      	ldr	r2, [r4, #8]
 800dd80:	6923      	ldr	r3, [r4, #16]
 800dd82:	3204      	adds	r2, #4
 800dd84:	3304      	adds	r3, #4
 800dd86:	2104      	movs	r1, #4
 800dd88:	60a2      	str	r2, [r4, #8]
 800dd8a:	6123      	str	r3, [r4, #16]
 800dd8c:	7561      	strb	r1, [r4, #21]
 800dd8e:	7da0      	ldrb	r0, [r4, #22]
 800dd90:	f080 0001 	eor.w	r0, r0, #1
 800dd94:	b002      	add	sp, #8
 800dd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd9a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dd9e:	42ab      	cmp	r3, r5
 800dda0:	d92e      	bls.n	800de00 <ucdr_serialize_uint32_t+0xcc>
 800dda2:	1b5e      	subs	r6, r3, r5
 800dda4:	60a3      	str	r3, [r4, #8]
 800dda6:	6923      	ldr	r3, [r4, #16]
 800dda8:	f1c6 0804 	rsb	r8, r6, #4
 800ddac:	4433      	add	r3, r6
 800ddae:	6123      	str	r3, [r4, #16]
 800ddb0:	4641      	mov	r1, r8
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f000 ff4a 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800ddb8:	b398      	cbz	r0, 800de22 <ucdr_serialize_uint32_t+0xee>
 800ddba:	7d23      	ldrb	r3, [r4, #20]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d046      	beq.n	800de4e <ucdr_serialize_uint32_t+0x11a>
 800ddc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ddc4:	702b      	strb	r3, [r5, #0]
 800ddc6:	2e01      	cmp	r6, #1
 800ddc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ddcc:	706b      	strb	r3, [r5, #1]
 800ddce:	d035      	beq.n	800de3c <ucdr_serialize_uint32_t+0x108>
 800ddd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ddd4:	70ab      	strb	r3, [r5, #2]
 800ddd6:	2e02      	cmp	r6, #2
 800ddd8:	d034      	beq.n	800de44 <ucdr_serialize_uint32_t+0x110>
 800ddda:	3503      	adds	r5, #3
 800dddc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dde0:	702b      	strb	r3, [r5, #0]
 800dde2:	6923      	ldr	r3, [r4, #16]
 800dde4:	68a2      	ldr	r2, [r4, #8]
 800dde6:	7da0      	ldrb	r0, [r4, #22]
 800dde8:	3304      	adds	r3, #4
 800ddea:	4442      	add	r2, r8
 800ddec:	1b9b      	subs	r3, r3, r6
 800ddee:	2104      	movs	r1, #4
 800ddf0:	f080 0001 	eor.w	r0, r0, #1
 800ddf4:	60a2      	str	r2, [r4, #8]
 800ddf6:	6123      	str	r3, [r4, #16]
 800ddf8:	7561      	strb	r1, [r4, #21]
 800ddfa:	b002      	add	sp, #8
 800ddfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de00:	2104      	movs	r1, #4
 800de02:	4620      	mov	r0, r4
 800de04:	f000 ff22 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d0c0      	beq.n	800dd8e <ucdr_serialize_uint32_t+0x5a>
 800de0c:	7d23      	ldrb	r3, [r4, #20]
 800de0e:	68a2      	ldr	r2, [r4, #8]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d019      	beq.n	800de48 <ucdr_serialize_uint32_t+0x114>
 800de14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de18:	7013      	strb	r3, [r2, #0]
 800de1a:	e7a4      	b.n	800dd66 <ucdr_serialize_uint32_t+0x32>
 800de1c:	9a01      	ldr	r2, [sp, #4]
 800de1e:	601a      	str	r2, [r3, #0]
 800de20:	e7ad      	b.n	800dd7e <ucdr_serialize_uint32_t+0x4a>
 800de22:	68a2      	ldr	r2, [r4, #8]
 800de24:	6923      	ldr	r3, [r4, #16]
 800de26:	7da0      	ldrb	r0, [r4, #22]
 800de28:	7567      	strb	r7, [r4, #21]
 800de2a:	1b92      	subs	r2, r2, r6
 800de2c:	1b9b      	subs	r3, r3, r6
 800de2e:	f080 0001 	eor.w	r0, r0, #1
 800de32:	60a2      	str	r2, [r4, #8]
 800de34:	6123      	str	r3, [r4, #16]
 800de36:	b002      	add	sp, #8
 800de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de3c:	68a3      	ldr	r3, [r4, #8]
 800de3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800de42:	701a      	strb	r2, [r3, #0]
 800de44:	68a5      	ldr	r5, [r4, #8]
 800de46:	e7c9      	b.n	800dddc <ucdr_serialize_uint32_t+0xa8>
 800de48:	9b01      	ldr	r3, [sp, #4]
 800de4a:	6013      	str	r3, [r2, #0]
 800de4c:	e797      	b.n	800dd7e <ucdr_serialize_uint32_t+0x4a>
 800de4e:	4628      	mov	r0, r5
 800de50:	ad01      	add	r5, sp, #4
 800de52:	4632      	mov	r2, r6
 800de54:	4629      	mov	r1, r5
 800de56:	f00d fe66 	bl	801bb26 <memcpy>
 800de5a:	68a0      	ldr	r0, [r4, #8]
 800de5c:	4642      	mov	r2, r8
 800de5e:	19a9      	adds	r1, r5, r6
 800de60:	f00d fe61 	bl	801bb26 <memcpy>
 800de64:	e7bd      	b.n	800dde2 <ucdr_serialize_uint32_t+0xae>
 800de66:	bf00      	nop

0800de68 <ucdr_serialize_endian_uint32_t>:
 800de68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de6c:	b083      	sub	sp, #12
 800de6e:	460d      	mov	r5, r1
 800de70:	2104      	movs	r1, #4
 800de72:	4604      	mov	r4, r0
 800de74:	9201      	str	r2, [sp, #4]
 800de76:	f000 ff3d 	bl	800ecf4 <ucdr_buffer_alignment>
 800de7a:	4601      	mov	r1, r0
 800de7c:	4620      	mov	r0, r4
 800de7e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800de82:	f000 ff7b 	bl	800ed7c <ucdr_advance_buffer>
 800de86:	2104      	movs	r1, #4
 800de88:	4620      	mov	r0, r4
 800de8a:	f000 fed3 	bl	800ec34 <ucdr_check_buffer_available_for>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d137      	bne.n	800df02 <ucdr_serialize_endian_uint32_t+0x9a>
 800de92:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800de96:	42b7      	cmp	r7, r6
 800de98:	d92e      	bls.n	800def8 <ucdr_serialize_endian_uint32_t+0x90>
 800de9a:	6923      	ldr	r3, [r4, #16]
 800de9c:	60a7      	str	r7, [r4, #8]
 800de9e:	1bbf      	subs	r7, r7, r6
 800dea0:	443b      	add	r3, r7
 800dea2:	f1c7 0904 	rsb	r9, r7, #4
 800dea6:	6123      	str	r3, [r4, #16]
 800dea8:	4649      	mov	r1, r9
 800deaa:	4620      	mov	r0, r4
 800deac:	f000 fece 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	d049      	beq.n	800df48 <ucdr_serialize_endian_uint32_t+0xe0>
 800deb4:	2d01      	cmp	r5, #1
 800deb6:	d05b      	beq.n	800df70 <ucdr_serialize_endian_uint32_t+0x108>
 800deb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800debc:	7033      	strb	r3, [r6, #0]
 800debe:	2f01      	cmp	r7, #1
 800dec0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dec4:	7073      	strb	r3, [r6, #1]
 800dec6:	d04d      	beq.n	800df64 <ucdr_serialize_endian_uint32_t+0xfc>
 800dec8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800decc:	70b3      	strb	r3, [r6, #2]
 800dece:	2f02      	cmp	r7, #2
 800ded0:	d04c      	beq.n	800df6c <ucdr_serialize_endian_uint32_t+0x104>
 800ded2:	3603      	adds	r6, #3
 800ded4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ded8:	7033      	strb	r3, [r6, #0]
 800deda:	6923      	ldr	r3, [r4, #16]
 800dedc:	68a2      	ldr	r2, [r4, #8]
 800dede:	7da0      	ldrb	r0, [r4, #22]
 800dee0:	3304      	adds	r3, #4
 800dee2:	444a      	add	r2, r9
 800dee4:	1bdb      	subs	r3, r3, r7
 800dee6:	2104      	movs	r1, #4
 800dee8:	f080 0001 	eor.w	r0, r0, #1
 800deec:	60a2      	str	r2, [r4, #8]
 800deee:	6123      	str	r3, [r4, #16]
 800def0:	7561      	strb	r1, [r4, #21]
 800def2:	b003      	add	sp, #12
 800def4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800def8:	2104      	movs	r1, #4
 800defa:	4620      	mov	r0, r4
 800defc:	f000 fea6 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800df00:	b1c8      	cbz	r0, 800df36 <ucdr_serialize_endian_uint32_t+0xce>
 800df02:	2d01      	cmp	r5, #1
 800df04:	68a3      	ldr	r3, [r4, #8]
 800df06:	d01c      	beq.n	800df42 <ucdr_serialize_endian_uint32_t+0xda>
 800df08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800df0c:	701a      	strb	r2, [r3, #0]
 800df0e:	68a3      	ldr	r3, [r4, #8]
 800df10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df14:	705a      	strb	r2, [r3, #1]
 800df16:	68a3      	ldr	r3, [r4, #8]
 800df18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df1c:	709a      	strb	r2, [r3, #2]
 800df1e:	68a3      	ldr	r3, [r4, #8]
 800df20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df24:	70da      	strb	r2, [r3, #3]
 800df26:	68a2      	ldr	r2, [r4, #8]
 800df28:	6923      	ldr	r3, [r4, #16]
 800df2a:	3204      	adds	r2, #4
 800df2c:	3304      	adds	r3, #4
 800df2e:	2104      	movs	r1, #4
 800df30:	60a2      	str	r2, [r4, #8]
 800df32:	6123      	str	r3, [r4, #16]
 800df34:	7561      	strb	r1, [r4, #21]
 800df36:	7da0      	ldrb	r0, [r4, #22]
 800df38:	f080 0001 	eor.w	r0, r0, #1
 800df3c:	b003      	add	sp, #12
 800df3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df42:	9a01      	ldr	r2, [sp, #4]
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	e7ee      	b.n	800df26 <ucdr_serialize_endian_uint32_t+0xbe>
 800df48:	68a2      	ldr	r2, [r4, #8]
 800df4a:	6923      	ldr	r3, [r4, #16]
 800df4c:	7da0      	ldrb	r0, [r4, #22]
 800df4e:	f884 8015 	strb.w	r8, [r4, #21]
 800df52:	1bd2      	subs	r2, r2, r7
 800df54:	1bdb      	subs	r3, r3, r7
 800df56:	f080 0001 	eor.w	r0, r0, #1
 800df5a:	60a2      	str	r2, [r4, #8]
 800df5c:	6123      	str	r3, [r4, #16]
 800df5e:	b003      	add	sp, #12
 800df60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df64:	68a3      	ldr	r3, [r4, #8]
 800df66:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df6a:	701a      	strb	r2, [r3, #0]
 800df6c:	68a6      	ldr	r6, [r4, #8]
 800df6e:	e7b1      	b.n	800ded4 <ucdr_serialize_endian_uint32_t+0x6c>
 800df70:	ad01      	add	r5, sp, #4
 800df72:	463a      	mov	r2, r7
 800df74:	4629      	mov	r1, r5
 800df76:	4630      	mov	r0, r6
 800df78:	f00d fdd5 	bl	801bb26 <memcpy>
 800df7c:	68a0      	ldr	r0, [r4, #8]
 800df7e:	464a      	mov	r2, r9
 800df80:	19e9      	adds	r1, r5, r7
 800df82:	f00d fdd0 	bl	801bb26 <memcpy>
 800df86:	e7a8      	b.n	800deda <ucdr_serialize_endian_uint32_t+0x72>

0800df88 <ucdr_deserialize_uint32_t>:
 800df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df8c:	460d      	mov	r5, r1
 800df8e:	2104      	movs	r1, #4
 800df90:	4604      	mov	r4, r0
 800df92:	f000 feaf 	bl	800ecf4 <ucdr_buffer_alignment>
 800df96:	4601      	mov	r1, r0
 800df98:	4620      	mov	r0, r4
 800df9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df9e:	f000 feed 	bl	800ed7c <ucdr_advance_buffer>
 800dfa2:	2104      	movs	r1, #4
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f000 fe45 	bl	800ec34 <ucdr_check_buffer_available_for>
 800dfaa:	b1d8      	cbz	r0, 800dfe4 <ucdr_deserialize_uint32_t+0x5c>
 800dfac:	7d22      	ldrb	r2, [r4, #20]
 800dfae:	68a3      	ldr	r3, [r4, #8]
 800dfb0:	2a01      	cmp	r2, #1
 800dfb2:	d052      	beq.n	800e05a <ucdr_deserialize_uint32_t+0xd2>
 800dfb4:	78db      	ldrb	r3, [r3, #3]
 800dfb6:	702b      	strb	r3, [r5, #0]
 800dfb8:	68a3      	ldr	r3, [r4, #8]
 800dfba:	789b      	ldrb	r3, [r3, #2]
 800dfbc:	706b      	strb	r3, [r5, #1]
 800dfbe:	68a3      	ldr	r3, [r4, #8]
 800dfc0:	785b      	ldrb	r3, [r3, #1]
 800dfc2:	70ab      	strb	r3, [r5, #2]
 800dfc4:	68a3      	ldr	r3, [r4, #8]
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	70eb      	strb	r3, [r5, #3]
 800dfca:	68a2      	ldr	r2, [r4, #8]
 800dfcc:	6923      	ldr	r3, [r4, #16]
 800dfce:	3204      	adds	r2, #4
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	2104      	movs	r1, #4
 800dfd4:	60a2      	str	r2, [r4, #8]
 800dfd6:	6123      	str	r3, [r4, #16]
 800dfd8:	7561      	strb	r1, [r4, #21]
 800dfda:	7da0      	ldrb	r0, [r4, #22]
 800dfdc:	f080 0001 	eor.w	r0, r0, #1
 800dfe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfe4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dfe8:	42b7      	cmp	r7, r6
 800dfea:	d92a      	bls.n	800e042 <ucdr_deserialize_uint32_t+0xba>
 800dfec:	6923      	ldr	r3, [r4, #16]
 800dfee:	60a7      	str	r7, [r4, #8]
 800dff0:	1bbf      	subs	r7, r7, r6
 800dff2:	443b      	add	r3, r7
 800dff4:	f1c7 0904 	rsb	r9, r7, #4
 800dff8:	6123      	str	r3, [r4, #16]
 800dffa:	4649      	mov	r1, r9
 800dffc:	4620      	mov	r0, r4
 800dffe:	f000 fe25 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e002:	b368      	cbz	r0, 800e060 <ucdr_deserialize_uint32_t+0xd8>
 800e004:	7d23      	ldrb	r3, [r4, #20]
 800e006:	2b01      	cmp	r3, #1
 800e008:	d040      	beq.n	800e08c <ucdr_deserialize_uint32_t+0x104>
 800e00a:	78f3      	ldrb	r3, [r6, #3]
 800e00c:	702b      	strb	r3, [r5, #0]
 800e00e:	78b3      	ldrb	r3, [r6, #2]
 800e010:	706b      	strb	r3, [r5, #1]
 800e012:	2f01      	cmp	r7, #1
 800e014:	d031      	beq.n	800e07a <ucdr_deserialize_uint32_t+0xf2>
 800e016:	7873      	ldrb	r3, [r6, #1]
 800e018:	70ab      	strb	r3, [r5, #2]
 800e01a:	2f02      	cmp	r7, #2
 800e01c:	f105 0503 	add.w	r5, r5, #3
 800e020:	d02f      	beq.n	800e082 <ucdr_deserialize_uint32_t+0xfa>
 800e022:	7833      	ldrb	r3, [r6, #0]
 800e024:	702b      	strb	r3, [r5, #0]
 800e026:	6923      	ldr	r3, [r4, #16]
 800e028:	68a2      	ldr	r2, [r4, #8]
 800e02a:	7da0      	ldrb	r0, [r4, #22]
 800e02c:	2104      	movs	r1, #4
 800e02e:	3304      	adds	r3, #4
 800e030:	444a      	add	r2, r9
 800e032:	1bdb      	subs	r3, r3, r7
 800e034:	7561      	strb	r1, [r4, #21]
 800e036:	60a2      	str	r2, [r4, #8]
 800e038:	6123      	str	r3, [r4, #16]
 800e03a:	f080 0001 	eor.w	r0, r0, #1
 800e03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e042:	2104      	movs	r1, #4
 800e044:	4620      	mov	r0, r4
 800e046:	f000 fe01 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d0c5      	beq.n	800dfda <ucdr_deserialize_uint32_t+0x52>
 800e04e:	7d23      	ldrb	r3, [r4, #20]
 800e050:	68a2      	ldr	r2, [r4, #8]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d017      	beq.n	800e086 <ucdr_deserialize_uint32_t+0xfe>
 800e056:	78d3      	ldrb	r3, [r2, #3]
 800e058:	e7ad      	b.n	800dfb6 <ucdr_deserialize_uint32_t+0x2e>
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	602b      	str	r3, [r5, #0]
 800e05e:	e7b4      	b.n	800dfca <ucdr_deserialize_uint32_t+0x42>
 800e060:	68a2      	ldr	r2, [r4, #8]
 800e062:	6923      	ldr	r3, [r4, #16]
 800e064:	7da0      	ldrb	r0, [r4, #22]
 800e066:	f884 8015 	strb.w	r8, [r4, #21]
 800e06a:	1bd2      	subs	r2, r2, r7
 800e06c:	1bdb      	subs	r3, r3, r7
 800e06e:	60a2      	str	r2, [r4, #8]
 800e070:	6123      	str	r3, [r4, #16]
 800e072:	f080 0001 	eor.w	r0, r0, #1
 800e076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07a:	68a3      	ldr	r3, [r4, #8]
 800e07c:	785b      	ldrb	r3, [r3, #1]
 800e07e:	70ab      	strb	r3, [r5, #2]
 800e080:	3503      	adds	r5, #3
 800e082:	68a6      	ldr	r6, [r4, #8]
 800e084:	e7cd      	b.n	800e022 <ucdr_deserialize_uint32_t+0x9a>
 800e086:	6813      	ldr	r3, [r2, #0]
 800e088:	602b      	str	r3, [r5, #0]
 800e08a:	e79e      	b.n	800dfca <ucdr_deserialize_uint32_t+0x42>
 800e08c:	4631      	mov	r1, r6
 800e08e:	463a      	mov	r2, r7
 800e090:	4628      	mov	r0, r5
 800e092:	f00d fd48 	bl	801bb26 <memcpy>
 800e096:	68a1      	ldr	r1, [r4, #8]
 800e098:	464a      	mov	r2, r9
 800e09a:	19e8      	adds	r0, r5, r7
 800e09c:	f00d fd43 	bl	801bb26 <memcpy>
 800e0a0:	e7c1      	b.n	800e026 <ucdr_deserialize_uint32_t+0x9e>
 800e0a2:	bf00      	nop

0800e0a4 <ucdr_deserialize_endian_uint32_t>:
 800e0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a8:	460e      	mov	r6, r1
 800e0aa:	2104      	movs	r1, #4
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	4615      	mov	r5, r2
 800e0b0:	f000 fe20 	bl	800ecf4 <ucdr_buffer_alignment>
 800e0b4:	4601      	mov	r1, r0
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e0bc:	f000 fe5e 	bl	800ed7c <ucdr_advance_buffer>
 800e0c0:	2104      	movs	r1, #4
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f000 fdb6 	bl	800ec34 <ucdr_check_buffer_available_for>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d137      	bne.n	800e13c <ucdr_deserialize_endian_uint32_t+0x98>
 800e0cc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e0d0:	42bb      	cmp	r3, r7
 800e0d2:	d92e      	bls.n	800e132 <ucdr_deserialize_endian_uint32_t+0x8e>
 800e0d4:	eba3 0807 	sub.w	r8, r3, r7
 800e0d8:	60a3      	str	r3, [r4, #8]
 800e0da:	6923      	ldr	r3, [r4, #16]
 800e0dc:	f1c8 0a04 	rsb	sl, r8, #4
 800e0e0:	4443      	add	r3, r8
 800e0e2:	6123      	str	r3, [r4, #16]
 800e0e4:	4651      	mov	r1, sl
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 fdb0 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d043      	beq.n	800e178 <ucdr_deserialize_endian_uint32_t+0xd4>
 800e0f0:	2e01      	cmp	r6, #1
 800e0f2:	d056      	beq.n	800e1a2 <ucdr_deserialize_endian_uint32_t+0xfe>
 800e0f4:	78fb      	ldrb	r3, [r7, #3]
 800e0f6:	702b      	strb	r3, [r5, #0]
 800e0f8:	78bb      	ldrb	r3, [r7, #2]
 800e0fa:	706b      	strb	r3, [r5, #1]
 800e0fc:	f1b8 0f01 	cmp.w	r8, #1
 800e100:	d049      	beq.n	800e196 <ucdr_deserialize_endian_uint32_t+0xf2>
 800e102:	787b      	ldrb	r3, [r7, #1]
 800e104:	70ab      	strb	r3, [r5, #2]
 800e106:	f1b8 0f02 	cmp.w	r8, #2
 800e10a:	f105 0503 	add.w	r5, r5, #3
 800e10e:	d046      	beq.n	800e19e <ucdr_deserialize_endian_uint32_t+0xfa>
 800e110:	783b      	ldrb	r3, [r7, #0]
 800e112:	702b      	strb	r3, [r5, #0]
 800e114:	6923      	ldr	r3, [r4, #16]
 800e116:	68a2      	ldr	r2, [r4, #8]
 800e118:	7da0      	ldrb	r0, [r4, #22]
 800e11a:	2104      	movs	r1, #4
 800e11c:	3304      	adds	r3, #4
 800e11e:	4452      	add	r2, sl
 800e120:	eba3 0308 	sub.w	r3, r3, r8
 800e124:	7561      	strb	r1, [r4, #21]
 800e126:	60a2      	str	r2, [r4, #8]
 800e128:	6123      	str	r3, [r4, #16]
 800e12a:	f080 0001 	eor.w	r0, r0, #1
 800e12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e132:	2104      	movs	r1, #4
 800e134:	4620      	mov	r0, r4
 800e136:	f000 fd89 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e13a:	b1a8      	cbz	r0, 800e168 <ucdr_deserialize_endian_uint32_t+0xc4>
 800e13c:	2e01      	cmp	r6, #1
 800e13e:	68a3      	ldr	r3, [r4, #8]
 800e140:	d017      	beq.n	800e172 <ucdr_deserialize_endian_uint32_t+0xce>
 800e142:	78db      	ldrb	r3, [r3, #3]
 800e144:	702b      	strb	r3, [r5, #0]
 800e146:	68a3      	ldr	r3, [r4, #8]
 800e148:	789b      	ldrb	r3, [r3, #2]
 800e14a:	706b      	strb	r3, [r5, #1]
 800e14c:	68a3      	ldr	r3, [r4, #8]
 800e14e:	785b      	ldrb	r3, [r3, #1]
 800e150:	70ab      	strb	r3, [r5, #2]
 800e152:	68a3      	ldr	r3, [r4, #8]
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	70eb      	strb	r3, [r5, #3]
 800e158:	68a2      	ldr	r2, [r4, #8]
 800e15a:	6923      	ldr	r3, [r4, #16]
 800e15c:	3204      	adds	r2, #4
 800e15e:	3304      	adds	r3, #4
 800e160:	2104      	movs	r1, #4
 800e162:	60a2      	str	r2, [r4, #8]
 800e164:	6123      	str	r3, [r4, #16]
 800e166:	7561      	strb	r1, [r4, #21]
 800e168:	7da0      	ldrb	r0, [r4, #22]
 800e16a:	f080 0001 	eor.w	r0, r0, #1
 800e16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	602b      	str	r3, [r5, #0]
 800e176:	e7ef      	b.n	800e158 <ucdr_deserialize_endian_uint32_t+0xb4>
 800e178:	68a2      	ldr	r2, [r4, #8]
 800e17a:	6923      	ldr	r3, [r4, #16]
 800e17c:	7da0      	ldrb	r0, [r4, #22]
 800e17e:	f884 9015 	strb.w	r9, [r4, #21]
 800e182:	eba2 0208 	sub.w	r2, r2, r8
 800e186:	eba3 0308 	sub.w	r3, r3, r8
 800e18a:	60a2      	str	r2, [r4, #8]
 800e18c:	6123      	str	r3, [r4, #16]
 800e18e:	f080 0001 	eor.w	r0, r0, #1
 800e192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e196:	68a3      	ldr	r3, [r4, #8]
 800e198:	785b      	ldrb	r3, [r3, #1]
 800e19a:	70ab      	strb	r3, [r5, #2]
 800e19c:	3503      	adds	r5, #3
 800e19e:	68a7      	ldr	r7, [r4, #8]
 800e1a0:	e7b6      	b.n	800e110 <ucdr_deserialize_endian_uint32_t+0x6c>
 800e1a2:	4639      	mov	r1, r7
 800e1a4:	4642      	mov	r2, r8
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f00d fcbd 	bl	801bb26 <memcpy>
 800e1ac:	68a1      	ldr	r1, [r4, #8]
 800e1ae:	4652      	mov	r2, sl
 800e1b0:	eb05 0008 	add.w	r0, r5, r8
 800e1b4:	f00d fcb7 	bl	801bb26 <memcpy>
 800e1b8:	e7ac      	b.n	800e114 <ucdr_deserialize_endian_uint32_t+0x70>
 800e1ba:	bf00      	nop

0800e1bc <ucdr_serialize_uint64_t>:
 800e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c0:	2108      	movs	r1, #8
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	e9cd 2300 	strd	r2, r3, [sp]
 800e1ca:	f000 fd93 	bl	800ecf4 <ucdr_buffer_alignment>
 800e1ce:	4601      	mov	r1, r0
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	7d67      	ldrb	r7, [r4, #21]
 800e1d4:	f000 fdd2 	bl	800ed7c <ucdr_advance_buffer>
 800e1d8:	2108      	movs	r1, #8
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f000 fd2a 	bl	800ec34 <ucdr_check_buffer_available_for>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d14d      	bne.n	800e280 <ucdr_serialize_uint64_t+0xc4>
 800e1e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e1e8:	42ab      	cmp	r3, r5
 800e1ea:	d944      	bls.n	800e276 <ucdr_serialize_uint64_t+0xba>
 800e1ec:	1b5e      	subs	r6, r3, r5
 800e1ee:	60a3      	str	r3, [r4, #8]
 800e1f0:	6923      	ldr	r3, [r4, #16]
 800e1f2:	f1c6 0808 	rsb	r8, r6, #8
 800e1f6:	4433      	add	r3, r6
 800e1f8:	6123      	str	r3, [r4, #16]
 800e1fa:	4641      	mov	r1, r8
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f000 fd25 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e202:	2800      	cmp	r0, #0
 800e204:	d072      	beq.n	800e2ec <ucdr_serialize_uint64_t+0x130>
 800e206:	7d23      	ldrb	r3, [r4, #20]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	f000 8092 	beq.w	800e332 <ucdr_serialize_uint64_t+0x176>
 800e20e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e212:	702b      	strb	r3, [r5, #0]
 800e214:	2e01      	cmp	r6, #1
 800e216:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e21a:	706b      	strb	r3, [r5, #1]
 800e21c:	d073      	beq.n	800e306 <ucdr_serialize_uint64_t+0x14a>
 800e21e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e222:	70ab      	strb	r3, [r5, #2]
 800e224:	2e02      	cmp	r6, #2
 800e226:	d072      	beq.n	800e30e <ucdr_serialize_uint64_t+0x152>
 800e228:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e22c:	70eb      	strb	r3, [r5, #3]
 800e22e:	2e03      	cmp	r6, #3
 800e230:	d071      	beq.n	800e316 <ucdr_serialize_uint64_t+0x15a>
 800e232:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e236:	712b      	strb	r3, [r5, #4]
 800e238:	2e04      	cmp	r6, #4
 800e23a:	d070      	beq.n	800e31e <ucdr_serialize_uint64_t+0x162>
 800e23c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e240:	716b      	strb	r3, [r5, #5]
 800e242:	2e05      	cmp	r6, #5
 800e244:	d06f      	beq.n	800e326 <ucdr_serialize_uint64_t+0x16a>
 800e246:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e24a:	71ab      	strb	r3, [r5, #6]
 800e24c:	2e06      	cmp	r6, #6
 800e24e:	d06e      	beq.n	800e32e <ucdr_serialize_uint64_t+0x172>
 800e250:	3507      	adds	r5, #7
 800e252:	f89d 3000 	ldrb.w	r3, [sp]
 800e256:	702b      	strb	r3, [r5, #0]
 800e258:	6923      	ldr	r3, [r4, #16]
 800e25a:	68a2      	ldr	r2, [r4, #8]
 800e25c:	7da0      	ldrb	r0, [r4, #22]
 800e25e:	3308      	adds	r3, #8
 800e260:	4442      	add	r2, r8
 800e262:	1b9b      	subs	r3, r3, r6
 800e264:	2108      	movs	r1, #8
 800e266:	f080 0001 	eor.w	r0, r0, #1
 800e26a:	60a2      	str	r2, [r4, #8]
 800e26c:	6123      	str	r3, [r4, #16]
 800e26e:	7561      	strb	r1, [r4, #21]
 800e270:	b002      	add	sp, #8
 800e272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e276:	2108      	movs	r1, #8
 800e278:	4620      	mov	r0, r4
 800e27a:	f000 fce7 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e27e:	b350      	cbz	r0, 800e2d6 <ucdr_serialize_uint64_t+0x11a>
 800e280:	7d22      	ldrb	r2, [r4, #20]
 800e282:	68a3      	ldr	r3, [r4, #8]
 800e284:	2a01      	cmp	r2, #1
 800e286:	d02c      	beq.n	800e2e2 <ucdr_serialize_uint64_t+0x126>
 800e288:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e28c:	701a      	strb	r2, [r3, #0]
 800e28e:	68a3      	ldr	r3, [r4, #8]
 800e290:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e294:	705a      	strb	r2, [r3, #1]
 800e296:	68a3      	ldr	r3, [r4, #8]
 800e298:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e29c:	709a      	strb	r2, [r3, #2]
 800e29e:	68a3      	ldr	r3, [r4, #8]
 800e2a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e2a4:	70da      	strb	r2, [r3, #3]
 800e2a6:	68a3      	ldr	r3, [r4, #8]
 800e2a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e2ac:	711a      	strb	r2, [r3, #4]
 800e2ae:	68a3      	ldr	r3, [r4, #8]
 800e2b0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e2b4:	715a      	strb	r2, [r3, #5]
 800e2b6:	68a3      	ldr	r3, [r4, #8]
 800e2b8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e2bc:	719a      	strb	r2, [r3, #6]
 800e2be:	68a3      	ldr	r3, [r4, #8]
 800e2c0:	f89d 2000 	ldrb.w	r2, [sp]
 800e2c4:	71da      	strb	r2, [r3, #7]
 800e2c6:	68a2      	ldr	r2, [r4, #8]
 800e2c8:	6923      	ldr	r3, [r4, #16]
 800e2ca:	3208      	adds	r2, #8
 800e2cc:	3308      	adds	r3, #8
 800e2ce:	2108      	movs	r1, #8
 800e2d0:	60a2      	str	r2, [r4, #8]
 800e2d2:	6123      	str	r3, [r4, #16]
 800e2d4:	7561      	strb	r1, [r4, #21]
 800e2d6:	7da0      	ldrb	r0, [r4, #22]
 800e2d8:	f080 0001 	eor.w	r0, r0, #1
 800e2dc:	b002      	add	sp, #8
 800e2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e2e6:	6019      	str	r1, [r3, #0]
 800e2e8:	605a      	str	r2, [r3, #4]
 800e2ea:	e7ec      	b.n	800e2c6 <ucdr_serialize_uint64_t+0x10a>
 800e2ec:	68a2      	ldr	r2, [r4, #8]
 800e2ee:	6923      	ldr	r3, [r4, #16]
 800e2f0:	7da0      	ldrb	r0, [r4, #22]
 800e2f2:	7567      	strb	r7, [r4, #21]
 800e2f4:	1b92      	subs	r2, r2, r6
 800e2f6:	1b9b      	subs	r3, r3, r6
 800e2f8:	f080 0001 	eor.w	r0, r0, #1
 800e2fc:	60a2      	str	r2, [r4, #8]
 800e2fe:	6123      	str	r3, [r4, #16]
 800e300:	b002      	add	sp, #8
 800e302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e306:	68a3      	ldr	r3, [r4, #8]
 800e308:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e30c:	701a      	strb	r2, [r3, #0]
 800e30e:	68a3      	ldr	r3, [r4, #8]
 800e310:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e314:	701a      	strb	r2, [r3, #0]
 800e316:	68a3      	ldr	r3, [r4, #8]
 800e318:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e31c:	701a      	strb	r2, [r3, #0]
 800e31e:	68a3      	ldr	r3, [r4, #8]
 800e320:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e324:	701a      	strb	r2, [r3, #0]
 800e326:	68a3      	ldr	r3, [r4, #8]
 800e328:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e32c:	701a      	strb	r2, [r3, #0]
 800e32e:	68a5      	ldr	r5, [r4, #8]
 800e330:	e78f      	b.n	800e252 <ucdr_serialize_uint64_t+0x96>
 800e332:	4628      	mov	r0, r5
 800e334:	466d      	mov	r5, sp
 800e336:	4632      	mov	r2, r6
 800e338:	4629      	mov	r1, r5
 800e33a:	f00d fbf4 	bl	801bb26 <memcpy>
 800e33e:	68a0      	ldr	r0, [r4, #8]
 800e340:	4642      	mov	r2, r8
 800e342:	19a9      	adds	r1, r5, r6
 800e344:	f00d fbef 	bl	801bb26 <memcpy>
 800e348:	e786      	b.n	800e258 <ucdr_serialize_uint64_t+0x9c>
 800e34a:	bf00      	nop

0800e34c <ucdr_serialize_int16_t>:
 800e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	b082      	sub	sp, #8
 800e352:	460b      	mov	r3, r1
 800e354:	2102      	movs	r1, #2
 800e356:	4604      	mov	r4, r0
 800e358:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e35c:	f000 fcca 	bl	800ecf4 <ucdr_buffer_alignment>
 800e360:	4601      	mov	r1, r0
 800e362:	4620      	mov	r0, r4
 800e364:	7d67      	ldrb	r7, [r4, #21]
 800e366:	f000 fd09 	bl	800ed7c <ucdr_advance_buffer>
 800e36a:	2102      	movs	r1, #2
 800e36c:	4620      	mov	r0, r4
 800e36e:	f000 fc61 	bl	800ec34 <ucdr_check_buffer_available_for>
 800e372:	b1c0      	cbz	r0, 800e3a6 <ucdr_serialize_int16_t+0x5a>
 800e374:	7d22      	ldrb	r2, [r4, #20]
 800e376:	68a3      	ldr	r3, [r4, #8]
 800e378:	2a01      	cmp	r2, #1
 800e37a:	d04e      	beq.n	800e41a <ucdr_serialize_int16_t+0xce>
 800e37c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e380:	701a      	strb	r2, [r3, #0]
 800e382:	68a3      	ldr	r3, [r4, #8]
 800e384:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e388:	705a      	strb	r2, [r3, #1]
 800e38a:	68a2      	ldr	r2, [r4, #8]
 800e38c:	6923      	ldr	r3, [r4, #16]
 800e38e:	3202      	adds	r2, #2
 800e390:	3302      	adds	r3, #2
 800e392:	2102      	movs	r1, #2
 800e394:	60a2      	str	r2, [r4, #8]
 800e396:	6123      	str	r3, [r4, #16]
 800e398:	7561      	strb	r1, [r4, #21]
 800e39a:	7da0      	ldrb	r0, [r4, #22]
 800e39c:	f080 0001 	eor.w	r0, r0, #1
 800e3a0:	b002      	add	sp, #8
 800e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e3aa:	42ab      	cmp	r3, r5
 800e3ac:	d923      	bls.n	800e3f6 <ucdr_serialize_int16_t+0xaa>
 800e3ae:	1b5e      	subs	r6, r3, r5
 800e3b0:	60a3      	str	r3, [r4, #8]
 800e3b2:	6923      	ldr	r3, [r4, #16]
 800e3b4:	f1c6 0802 	rsb	r8, r6, #2
 800e3b8:	4433      	add	r3, r6
 800e3ba:	6123      	str	r3, [r4, #16]
 800e3bc:	4641      	mov	r1, r8
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f000 fc44 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e3c4:	b368      	cbz	r0, 800e422 <ucdr_serialize_int16_t+0xd6>
 800e3c6:	7d23      	ldrb	r3, [r4, #20]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d03b      	beq.n	800e444 <ucdr_serialize_int16_t+0xf8>
 800e3cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e3d0:	702b      	strb	r3, [r5, #0]
 800e3d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e3d6:	706b      	strb	r3, [r5, #1]
 800e3d8:	6923      	ldr	r3, [r4, #16]
 800e3da:	68a2      	ldr	r2, [r4, #8]
 800e3dc:	7da0      	ldrb	r0, [r4, #22]
 800e3de:	3302      	adds	r3, #2
 800e3e0:	4442      	add	r2, r8
 800e3e2:	1b9b      	subs	r3, r3, r6
 800e3e4:	2102      	movs	r1, #2
 800e3e6:	f080 0001 	eor.w	r0, r0, #1
 800e3ea:	60a2      	str	r2, [r4, #8]
 800e3ec:	6123      	str	r3, [r4, #16]
 800e3ee:	7561      	strb	r1, [r4, #21]
 800e3f0:	b002      	add	sp, #8
 800e3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f6:	2102      	movs	r1, #2
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f000 fc27 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d0cb      	beq.n	800e39a <ucdr_serialize_int16_t+0x4e>
 800e402:	7d23      	ldrb	r3, [r4, #20]
 800e404:	68a2      	ldr	r2, [r4, #8]
 800e406:	2b01      	cmp	r3, #1
 800e408:	d018      	beq.n	800e43c <ucdr_serialize_int16_t+0xf0>
 800e40a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e40e:	7013      	strb	r3, [r2, #0]
 800e410:	68a3      	ldr	r3, [r4, #8]
 800e412:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e416:	705a      	strb	r2, [r3, #1]
 800e418:	e7b7      	b.n	800e38a <ucdr_serialize_int16_t+0x3e>
 800e41a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e41e:	801a      	strh	r2, [r3, #0]
 800e420:	e7b3      	b.n	800e38a <ucdr_serialize_int16_t+0x3e>
 800e422:	68a2      	ldr	r2, [r4, #8]
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	7da0      	ldrb	r0, [r4, #22]
 800e428:	7567      	strb	r7, [r4, #21]
 800e42a:	1b92      	subs	r2, r2, r6
 800e42c:	1b9b      	subs	r3, r3, r6
 800e42e:	f080 0001 	eor.w	r0, r0, #1
 800e432:	60a2      	str	r2, [r4, #8]
 800e434:	6123      	str	r3, [r4, #16]
 800e436:	b002      	add	sp, #8
 800e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e43c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e440:	8013      	strh	r3, [r2, #0]
 800e442:	e7a2      	b.n	800e38a <ucdr_serialize_int16_t+0x3e>
 800e444:	4628      	mov	r0, r5
 800e446:	f10d 0506 	add.w	r5, sp, #6
 800e44a:	4632      	mov	r2, r6
 800e44c:	4629      	mov	r1, r5
 800e44e:	f00d fb6a 	bl	801bb26 <memcpy>
 800e452:	68a0      	ldr	r0, [r4, #8]
 800e454:	4642      	mov	r2, r8
 800e456:	19a9      	adds	r1, r5, r6
 800e458:	f00d fb65 	bl	801bb26 <memcpy>
 800e45c:	e7bc      	b.n	800e3d8 <ucdr_serialize_int16_t+0x8c>
 800e45e:	bf00      	nop

0800e460 <ucdr_deserialize_int16_t>:
 800e460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e464:	460d      	mov	r5, r1
 800e466:	2102      	movs	r1, #2
 800e468:	4604      	mov	r4, r0
 800e46a:	f000 fc43 	bl	800ecf4 <ucdr_buffer_alignment>
 800e46e:	4601      	mov	r1, r0
 800e470:	4620      	mov	r0, r4
 800e472:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e476:	f000 fc81 	bl	800ed7c <ucdr_advance_buffer>
 800e47a:	2102      	movs	r1, #2
 800e47c:	4620      	mov	r0, r4
 800e47e:	f000 fbd9 	bl	800ec34 <ucdr_check_buffer_available_for>
 800e482:	b1a8      	cbz	r0, 800e4b0 <ucdr_deserialize_int16_t+0x50>
 800e484:	7d22      	ldrb	r2, [r4, #20]
 800e486:	68a3      	ldr	r3, [r4, #8]
 800e488:	2a01      	cmp	r2, #1
 800e48a:	d046      	beq.n	800e51a <ucdr_deserialize_int16_t+0xba>
 800e48c:	785b      	ldrb	r3, [r3, #1]
 800e48e:	702b      	strb	r3, [r5, #0]
 800e490:	68a3      	ldr	r3, [r4, #8]
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	706b      	strb	r3, [r5, #1]
 800e496:	68a2      	ldr	r2, [r4, #8]
 800e498:	6923      	ldr	r3, [r4, #16]
 800e49a:	3202      	adds	r2, #2
 800e49c:	3302      	adds	r3, #2
 800e49e:	2102      	movs	r1, #2
 800e4a0:	60a2      	str	r2, [r4, #8]
 800e4a2:	6123      	str	r3, [r4, #16]
 800e4a4:	7561      	strb	r1, [r4, #21]
 800e4a6:	7da0      	ldrb	r0, [r4, #22]
 800e4a8:	f080 0001 	eor.w	r0, r0, #1
 800e4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4b0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e4b4:	42be      	cmp	r6, r7
 800e4b6:	d920      	bls.n	800e4fa <ucdr_deserialize_int16_t+0x9a>
 800e4b8:	6923      	ldr	r3, [r4, #16]
 800e4ba:	60a6      	str	r6, [r4, #8]
 800e4bc:	1bf6      	subs	r6, r6, r7
 800e4be:	4433      	add	r3, r6
 800e4c0:	f1c6 0902 	rsb	r9, r6, #2
 800e4c4:	6123      	str	r3, [r4, #16]
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f000 fbbf 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e4ce:	b338      	cbz	r0, 800e520 <ucdr_deserialize_int16_t+0xc0>
 800e4d0:	7d23      	ldrb	r3, [r4, #20]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d034      	beq.n	800e540 <ucdr_deserialize_int16_t+0xe0>
 800e4d6:	787b      	ldrb	r3, [r7, #1]
 800e4d8:	702b      	strb	r3, [r5, #0]
 800e4da:	783b      	ldrb	r3, [r7, #0]
 800e4dc:	706b      	strb	r3, [r5, #1]
 800e4de:	6923      	ldr	r3, [r4, #16]
 800e4e0:	68a2      	ldr	r2, [r4, #8]
 800e4e2:	7da0      	ldrb	r0, [r4, #22]
 800e4e4:	2102      	movs	r1, #2
 800e4e6:	3302      	adds	r3, #2
 800e4e8:	444a      	add	r2, r9
 800e4ea:	1b9b      	subs	r3, r3, r6
 800e4ec:	7561      	strb	r1, [r4, #21]
 800e4ee:	60a2      	str	r2, [r4, #8]
 800e4f0:	6123      	str	r3, [r4, #16]
 800e4f2:	f080 0001 	eor.w	r0, r0, #1
 800e4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4fa:	2102      	movs	r1, #2
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f000 fba5 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e502:	2800      	cmp	r0, #0
 800e504:	d0cf      	beq.n	800e4a6 <ucdr_deserialize_int16_t+0x46>
 800e506:	7d23      	ldrb	r3, [r4, #20]
 800e508:	68a2      	ldr	r2, [r4, #8]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d015      	beq.n	800e53a <ucdr_deserialize_int16_t+0xda>
 800e50e:	7853      	ldrb	r3, [r2, #1]
 800e510:	702b      	strb	r3, [r5, #0]
 800e512:	68a3      	ldr	r3, [r4, #8]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	706b      	strb	r3, [r5, #1]
 800e518:	e7bd      	b.n	800e496 <ucdr_deserialize_int16_t+0x36>
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	802b      	strh	r3, [r5, #0]
 800e51e:	e7ba      	b.n	800e496 <ucdr_deserialize_int16_t+0x36>
 800e520:	68a2      	ldr	r2, [r4, #8]
 800e522:	6923      	ldr	r3, [r4, #16]
 800e524:	7da0      	ldrb	r0, [r4, #22]
 800e526:	f884 8015 	strb.w	r8, [r4, #21]
 800e52a:	1b92      	subs	r2, r2, r6
 800e52c:	1b9b      	subs	r3, r3, r6
 800e52e:	60a2      	str	r2, [r4, #8]
 800e530:	6123      	str	r3, [r4, #16]
 800e532:	f080 0001 	eor.w	r0, r0, #1
 800e536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e53a:	8813      	ldrh	r3, [r2, #0]
 800e53c:	802b      	strh	r3, [r5, #0]
 800e53e:	e7aa      	b.n	800e496 <ucdr_deserialize_int16_t+0x36>
 800e540:	4639      	mov	r1, r7
 800e542:	4632      	mov	r2, r6
 800e544:	4628      	mov	r0, r5
 800e546:	f00d faee 	bl	801bb26 <memcpy>
 800e54a:	68a1      	ldr	r1, [r4, #8]
 800e54c:	464a      	mov	r2, r9
 800e54e:	19a8      	adds	r0, r5, r6
 800e550:	f00d fae9 	bl	801bb26 <memcpy>
 800e554:	e7c3      	b.n	800e4de <ucdr_deserialize_int16_t+0x7e>
 800e556:	bf00      	nop

0800e558 <ucdr_serialize_int32_t>:
 800e558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	4604      	mov	r4, r0
 800e560:	9101      	str	r1, [sp, #4]
 800e562:	2104      	movs	r1, #4
 800e564:	f000 fbc6 	bl	800ecf4 <ucdr_buffer_alignment>
 800e568:	4601      	mov	r1, r0
 800e56a:	4620      	mov	r0, r4
 800e56c:	7d67      	ldrb	r7, [r4, #21]
 800e56e:	f000 fc05 	bl	800ed7c <ucdr_advance_buffer>
 800e572:	2104      	movs	r1, #4
 800e574:	4620      	mov	r0, r4
 800e576:	f000 fb5d 	bl	800ec34 <ucdr_check_buffer_available_for>
 800e57a:	b300      	cbz	r0, 800e5be <ucdr_serialize_int32_t+0x66>
 800e57c:	7d22      	ldrb	r2, [r4, #20]
 800e57e:	68a3      	ldr	r3, [r4, #8]
 800e580:	2a01      	cmp	r2, #1
 800e582:	d05d      	beq.n	800e640 <ucdr_serialize_int32_t+0xe8>
 800e584:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e588:	701a      	strb	r2, [r3, #0]
 800e58a:	68a3      	ldr	r3, [r4, #8]
 800e58c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e590:	705a      	strb	r2, [r3, #1]
 800e592:	68a3      	ldr	r3, [r4, #8]
 800e594:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e598:	709a      	strb	r2, [r3, #2]
 800e59a:	68a3      	ldr	r3, [r4, #8]
 800e59c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5a0:	70da      	strb	r2, [r3, #3]
 800e5a2:	68a2      	ldr	r2, [r4, #8]
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	3204      	adds	r2, #4
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	2104      	movs	r1, #4
 800e5ac:	60a2      	str	r2, [r4, #8]
 800e5ae:	6123      	str	r3, [r4, #16]
 800e5b0:	7561      	strb	r1, [r4, #21]
 800e5b2:	7da0      	ldrb	r0, [r4, #22]
 800e5b4:	f080 0001 	eor.w	r0, r0, #1
 800e5b8:	b002      	add	sp, #8
 800e5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5be:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e5c2:	42ab      	cmp	r3, r5
 800e5c4:	d92e      	bls.n	800e624 <ucdr_serialize_int32_t+0xcc>
 800e5c6:	1b5e      	subs	r6, r3, r5
 800e5c8:	60a3      	str	r3, [r4, #8]
 800e5ca:	6923      	ldr	r3, [r4, #16]
 800e5cc:	f1c6 0804 	rsb	r8, r6, #4
 800e5d0:	4433      	add	r3, r6
 800e5d2:	6123      	str	r3, [r4, #16]
 800e5d4:	4641      	mov	r1, r8
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f000 fb38 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e5dc:	b398      	cbz	r0, 800e646 <ucdr_serialize_int32_t+0xee>
 800e5de:	7d23      	ldrb	r3, [r4, #20]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d046      	beq.n	800e672 <ucdr_serialize_int32_t+0x11a>
 800e5e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e5e8:	702b      	strb	r3, [r5, #0]
 800e5ea:	2e01      	cmp	r6, #1
 800e5ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e5f0:	706b      	strb	r3, [r5, #1]
 800e5f2:	d035      	beq.n	800e660 <ucdr_serialize_int32_t+0x108>
 800e5f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e5f8:	70ab      	strb	r3, [r5, #2]
 800e5fa:	2e02      	cmp	r6, #2
 800e5fc:	d034      	beq.n	800e668 <ucdr_serialize_int32_t+0x110>
 800e5fe:	3503      	adds	r5, #3
 800e600:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e604:	702b      	strb	r3, [r5, #0]
 800e606:	6923      	ldr	r3, [r4, #16]
 800e608:	68a2      	ldr	r2, [r4, #8]
 800e60a:	7da0      	ldrb	r0, [r4, #22]
 800e60c:	3304      	adds	r3, #4
 800e60e:	4442      	add	r2, r8
 800e610:	1b9b      	subs	r3, r3, r6
 800e612:	2104      	movs	r1, #4
 800e614:	f080 0001 	eor.w	r0, r0, #1
 800e618:	60a2      	str	r2, [r4, #8]
 800e61a:	6123      	str	r3, [r4, #16]
 800e61c:	7561      	strb	r1, [r4, #21]
 800e61e:	b002      	add	sp, #8
 800e620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e624:	2104      	movs	r1, #4
 800e626:	4620      	mov	r0, r4
 800e628:	f000 fb10 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d0c0      	beq.n	800e5b2 <ucdr_serialize_int32_t+0x5a>
 800e630:	7d23      	ldrb	r3, [r4, #20]
 800e632:	68a2      	ldr	r2, [r4, #8]
 800e634:	2b01      	cmp	r3, #1
 800e636:	d019      	beq.n	800e66c <ucdr_serialize_int32_t+0x114>
 800e638:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e63c:	7013      	strb	r3, [r2, #0]
 800e63e:	e7a4      	b.n	800e58a <ucdr_serialize_int32_t+0x32>
 800e640:	9a01      	ldr	r2, [sp, #4]
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	e7ad      	b.n	800e5a2 <ucdr_serialize_int32_t+0x4a>
 800e646:	68a2      	ldr	r2, [r4, #8]
 800e648:	6923      	ldr	r3, [r4, #16]
 800e64a:	7da0      	ldrb	r0, [r4, #22]
 800e64c:	7567      	strb	r7, [r4, #21]
 800e64e:	1b92      	subs	r2, r2, r6
 800e650:	1b9b      	subs	r3, r3, r6
 800e652:	f080 0001 	eor.w	r0, r0, #1
 800e656:	60a2      	str	r2, [r4, #8]
 800e658:	6123      	str	r3, [r4, #16]
 800e65a:	b002      	add	sp, #8
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e660:	68a3      	ldr	r3, [r4, #8]
 800e662:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e666:	701a      	strb	r2, [r3, #0]
 800e668:	68a5      	ldr	r5, [r4, #8]
 800e66a:	e7c9      	b.n	800e600 <ucdr_serialize_int32_t+0xa8>
 800e66c:	9b01      	ldr	r3, [sp, #4]
 800e66e:	6013      	str	r3, [r2, #0]
 800e670:	e797      	b.n	800e5a2 <ucdr_serialize_int32_t+0x4a>
 800e672:	4628      	mov	r0, r5
 800e674:	ad01      	add	r5, sp, #4
 800e676:	4632      	mov	r2, r6
 800e678:	4629      	mov	r1, r5
 800e67a:	f00d fa54 	bl	801bb26 <memcpy>
 800e67e:	68a0      	ldr	r0, [r4, #8]
 800e680:	4642      	mov	r2, r8
 800e682:	19a9      	adds	r1, r5, r6
 800e684:	f00d fa4f 	bl	801bb26 <memcpy>
 800e688:	e7bd      	b.n	800e606 <ucdr_serialize_int32_t+0xae>
 800e68a:	bf00      	nop

0800e68c <ucdr_deserialize_int32_t>:
 800e68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e690:	460d      	mov	r5, r1
 800e692:	2104      	movs	r1, #4
 800e694:	4604      	mov	r4, r0
 800e696:	f000 fb2d 	bl	800ecf4 <ucdr_buffer_alignment>
 800e69a:	4601      	mov	r1, r0
 800e69c:	4620      	mov	r0, r4
 800e69e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e6a2:	f000 fb6b 	bl	800ed7c <ucdr_advance_buffer>
 800e6a6:	2104      	movs	r1, #4
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f000 fac3 	bl	800ec34 <ucdr_check_buffer_available_for>
 800e6ae:	b1d8      	cbz	r0, 800e6e8 <ucdr_deserialize_int32_t+0x5c>
 800e6b0:	7d22      	ldrb	r2, [r4, #20]
 800e6b2:	68a3      	ldr	r3, [r4, #8]
 800e6b4:	2a01      	cmp	r2, #1
 800e6b6:	d052      	beq.n	800e75e <ucdr_deserialize_int32_t+0xd2>
 800e6b8:	78db      	ldrb	r3, [r3, #3]
 800e6ba:	702b      	strb	r3, [r5, #0]
 800e6bc:	68a3      	ldr	r3, [r4, #8]
 800e6be:	789b      	ldrb	r3, [r3, #2]
 800e6c0:	706b      	strb	r3, [r5, #1]
 800e6c2:	68a3      	ldr	r3, [r4, #8]
 800e6c4:	785b      	ldrb	r3, [r3, #1]
 800e6c6:	70ab      	strb	r3, [r5, #2]
 800e6c8:	68a3      	ldr	r3, [r4, #8]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	70eb      	strb	r3, [r5, #3]
 800e6ce:	68a2      	ldr	r2, [r4, #8]
 800e6d0:	6923      	ldr	r3, [r4, #16]
 800e6d2:	3204      	adds	r2, #4
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	2104      	movs	r1, #4
 800e6d8:	60a2      	str	r2, [r4, #8]
 800e6da:	6123      	str	r3, [r4, #16]
 800e6dc:	7561      	strb	r1, [r4, #21]
 800e6de:	7da0      	ldrb	r0, [r4, #22]
 800e6e0:	f080 0001 	eor.w	r0, r0, #1
 800e6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6e8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e6ec:	42b7      	cmp	r7, r6
 800e6ee:	d92a      	bls.n	800e746 <ucdr_deserialize_int32_t+0xba>
 800e6f0:	6923      	ldr	r3, [r4, #16]
 800e6f2:	60a7      	str	r7, [r4, #8]
 800e6f4:	1bbf      	subs	r7, r7, r6
 800e6f6:	443b      	add	r3, r7
 800e6f8:	f1c7 0904 	rsb	r9, r7, #4
 800e6fc:	6123      	str	r3, [r4, #16]
 800e6fe:	4649      	mov	r1, r9
 800e700:	4620      	mov	r0, r4
 800e702:	f000 faa3 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e706:	b368      	cbz	r0, 800e764 <ucdr_deserialize_int32_t+0xd8>
 800e708:	7d23      	ldrb	r3, [r4, #20]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d040      	beq.n	800e790 <ucdr_deserialize_int32_t+0x104>
 800e70e:	78f3      	ldrb	r3, [r6, #3]
 800e710:	702b      	strb	r3, [r5, #0]
 800e712:	78b3      	ldrb	r3, [r6, #2]
 800e714:	706b      	strb	r3, [r5, #1]
 800e716:	2f01      	cmp	r7, #1
 800e718:	d031      	beq.n	800e77e <ucdr_deserialize_int32_t+0xf2>
 800e71a:	7873      	ldrb	r3, [r6, #1]
 800e71c:	70ab      	strb	r3, [r5, #2]
 800e71e:	2f02      	cmp	r7, #2
 800e720:	f105 0503 	add.w	r5, r5, #3
 800e724:	d02f      	beq.n	800e786 <ucdr_deserialize_int32_t+0xfa>
 800e726:	7833      	ldrb	r3, [r6, #0]
 800e728:	702b      	strb	r3, [r5, #0]
 800e72a:	6923      	ldr	r3, [r4, #16]
 800e72c:	68a2      	ldr	r2, [r4, #8]
 800e72e:	7da0      	ldrb	r0, [r4, #22]
 800e730:	2104      	movs	r1, #4
 800e732:	3304      	adds	r3, #4
 800e734:	444a      	add	r2, r9
 800e736:	1bdb      	subs	r3, r3, r7
 800e738:	7561      	strb	r1, [r4, #21]
 800e73a:	60a2      	str	r2, [r4, #8]
 800e73c:	6123      	str	r3, [r4, #16]
 800e73e:	f080 0001 	eor.w	r0, r0, #1
 800e742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e746:	2104      	movs	r1, #4
 800e748:	4620      	mov	r0, r4
 800e74a:	f000 fa7f 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d0c5      	beq.n	800e6de <ucdr_deserialize_int32_t+0x52>
 800e752:	7d23      	ldrb	r3, [r4, #20]
 800e754:	68a2      	ldr	r2, [r4, #8]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d017      	beq.n	800e78a <ucdr_deserialize_int32_t+0xfe>
 800e75a:	78d3      	ldrb	r3, [r2, #3]
 800e75c:	e7ad      	b.n	800e6ba <ucdr_deserialize_int32_t+0x2e>
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	602b      	str	r3, [r5, #0]
 800e762:	e7b4      	b.n	800e6ce <ucdr_deserialize_int32_t+0x42>
 800e764:	68a2      	ldr	r2, [r4, #8]
 800e766:	6923      	ldr	r3, [r4, #16]
 800e768:	7da0      	ldrb	r0, [r4, #22]
 800e76a:	f884 8015 	strb.w	r8, [r4, #21]
 800e76e:	1bd2      	subs	r2, r2, r7
 800e770:	1bdb      	subs	r3, r3, r7
 800e772:	60a2      	str	r2, [r4, #8]
 800e774:	6123      	str	r3, [r4, #16]
 800e776:	f080 0001 	eor.w	r0, r0, #1
 800e77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e77e:	68a3      	ldr	r3, [r4, #8]
 800e780:	785b      	ldrb	r3, [r3, #1]
 800e782:	70ab      	strb	r3, [r5, #2]
 800e784:	3503      	adds	r5, #3
 800e786:	68a6      	ldr	r6, [r4, #8]
 800e788:	e7cd      	b.n	800e726 <ucdr_deserialize_int32_t+0x9a>
 800e78a:	6813      	ldr	r3, [r2, #0]
 800e78c:	602b      	str	r3, [r5, #0]
 800e78e:	e79e      	b.n	800e6ce <ucdr_deserialize_int32_t+0x42>
 800e790:	4631      	mov	r1, r6
 800e792:	463a      	mov	r2, r7
 800e794:	4628      	mov	r0, r5
 800e796:	f00d f9c6 	bl	801bb26 <memcpy>
 800e79a:	68a1      	ldr	r1, [r4, #8]
 800e79c:	464a      	mov	r2, r9
 800e79e:	19e8      	adds	r0, r5, r7
 800e7a0:	f00d f9c1 	bl	801bb26 <memcpy>
 800e7a4:	e7c1      	b.n	800e72a <ucdr_deserialize_int32_t+0x9e>
 800e7a6:	bf00      	nop

0800e7a8 <ucdr_serialize_float>:
 800e7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ac:	2104      	movs	r1, #4
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e7b6:	f000 fa9d 	bl	800ecf4 <ucdr_buffer_alignment>
 800e7ba:	4601      	mov	r1, r0
 800e7bc:	4620      	mov	r0, r4
 800e7be:	7d67      	ldrb	r7, [r4, #21]
 800e7c0:	f000 fadc 	bl	800ed7c <ucdr_advance_buffer>
 800e7c4:	2104      	movs	r1, #4
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	f000 fa34 	bl	800ec34 <ucdr_check_buffer_available_for>
 800e7cc:	b300      	cbz	r0, 800e810 <ucdr_serialize_float+0x68>
 800e7ce:	7d22      	ldrb	r2, [r4, #20]
 800e7d0:	68a3      	ldr	r3, [r4, #8]
 800e7d2:	2a01      	cmp	r2, #1
 800e7d4:	d05d      	beq.n	800e892 <ucdr_serialize_float+0xea>
 800e7d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e7da:	701a      	strb	r2, [r3, #0]
 800e7dc:	68a3      	ldr	r3, [r4, #8]
 800e7de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e7e2:	705a      	strb	r2, [r3, #1]
 800e7e4:	68a3      	ldr	r3, [r4, #8]
 800e7e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e7ea:	709a      	strb	r2, [r3, #2]
 800e7ec:	68a3      	ldr	r3, [r4, #8]
 800e7ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e7f2:	70da      	strb	r2, [r3, #3]
 800e7f4:	68a2      	ldr	r2, [r4, #8]
 800e7f6:	6923      	ldr	r3, [r4, #16]
 800e7f8:	3204      	adds	r2, #4
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	2104      	movs	r1, #4
 800e7fe:	60a2      	str	r2, [r4, #8]
 800e800:	6123      	str	r3, [r4, #16]
 800e802:	7561      	strb	r1, [r4, #21]
 800e804:	7da0      	ldrb	r0, [r4, #22]
 800e806:	f080 0001 	eor.w	r0, r0, #1
 800e80a:	b002      	add	sp, #8
 800e80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e810:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e814:	42ab      	cmp	r3, r5
 800e816:	d92e      	bls.n	800e876 <ucdr_serialize_float+0xce>
 800e818:	1b5e      	subs	r6, r3, r5
 800e81a:	60a3      	str	r3, [r4, #8]
 800e81c:	6923      	ldr	r3, [r4, #16]
 800e81e:	f1c6 0804 	rsb	r8, r6, #4
 800e822:	4433      	add	r3, r6
 800e824:	6123      	str	r3, [r4, #16]
 800e826:	4641      	mov	r1, r8
 800e828:	4620      	mov	r0, r4
 800e82a:	f000 fa0f 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e82e:	b398      	cbz	r0, 800e898 <ucdr_serialize_float+0xf0>
 800e830:	7d23      	ldrb	r3, [r4, #20]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d046      	beq.n	800e8c4 <ucdr_serialize_float+0x11c>
 800e836:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e83a:	702b      	strb	r3, [r5, #0]
 800e83c:	2e01      	cmp	r6, #1
 800e83e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e842:	706b      	strb	r3, [r5, #1]
 800e844:	d035      	beq.n	800e8b2 <ucdr_serialize_float+0x10a>
 800e846:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e84a:	70ab      	strb	r3, [r5, #2]
 800e84c:	2e02      	cmp	r6, #2
 800e84e:	d034      	beq.n	800e8ba <ucdr_serialize_float+0x112>
 800e850:	3503      	adds	r5, #3
 800e852:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e856:	702b      	strb	r3, [r5, #0]
 800e858:	6923      	ldr	r3, [r4, #16]
 800e85a:	68a2      	ldr	r2, [r4, #8]
 800e85c:	7da0      	ldrb	r0, [r4, #22]
 800e85e:	3304      	adds	r3, #4
 800e860:	4442      	add	r2, r8
 800e862:	1b9b      	subs	r3, r3, r6
 800e864:	2104      	movs	r1, #4
 800e866:	f080 0001 	eor.w	r0, r0, #1
 800e86a:	60a2      	str	r2, [r4, #8]
 800e86c:	6123      	str	r3, [r4, #16]
 800e86e:	7561      	strb	r1, [r4, #21]
 800e870:	b002      	add	sp, #8
 800e872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e876:	2104      	movs	r1, #4
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 f9e7 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d0c0      	beq.n	800e804 <ucdr_serialize_float+0x5c>
 800e882:	7d23      	ldrb	r3, [r4, #20]
 800e884:	68a2      	ldr	r2, [r4, #8]
 800e886:	2b01      	cmp	r3, #1
 800e888:	d019      	beq.n	800e8be <ucdr_serialize_float+0x116>
 800e88a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e88e:	7013      	strb	r3, [r2, #0]
 800e890:	e7a4      	b.n	800e7dc <ucdr_serialize_float+0x34>
 800e892:	9a01      	ldr	r2, [sp, #4]
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	e7ad      	b.n	800e7f4 <ucdr_serialize_float+0x4c>
 800e898:	68a2      	ldr	r2, [r4, #8]
 800e89a:	6923      	ldr	r3, [r4, #16]
 800e89c:	7da0      	ldrb	r0, [r4, #22]
 800e89e:	7567      	strb	r7, [r4, #21]
 800e8a0:	1b92      	subs	r2, r2, r6
 800e8a2:	1b9b      	subs	r3, r3, r6
 800e8a4:	f080 0001 	eor.w	r0, r0, #1
 800e8a8:	60a2      	str	r2, [r4, #8]
 800e8aa:	6123      	str	r3, [r4, #16]
 800e8ac:	b002      	add	sp, #8
 800e8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8b2:	68a3      	ldr	r3, [r4, #8]
 800e8b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e8b8:	701a      	strb	r2, [r3, #0]
 800e8ba:	68a5      	ldr	r5, [r4, #8]
 800e8bc:	e7c9      	b.n	800e852 <ucdr_serialize_float+0xaa>
 800e8be:	9b01      	ldr	r3, [sp, #4]
 800e8c0:	6013      	str	r3, [r2, #0]
 800e8c2:	e797      	b.n	800e7f4 <ucdr_serialize_float+0x4c>
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	ad01      	add	r5, sp, #4
 800e8c8:	4632      	mov	r2, r6
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	f00d f92b 	bl	801bb26 <memcpy>
 800e8d0:	68a0      	ldr	r0, [r4, #8]
 800e8d2:	4642      	mov	r2, r8
 800e8d4:	19a9      	adds	r1, r5, r6
 800e8d6:	f00d f926 	bl	801bb26 <memcpy>
 800e8da:	e7bd      	b.n	800e858 <ucdr_serialize_float+0xb0>

0800e8dc <ucdr_serialize_endian_float>:
 800e8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	2104      	movs	r1, #4
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e8ec:	f000 fa02 	bl	800ecf4 <ucdr_buffer_alignment>
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e8f8:	f000 fa40 	bl	800ed7c <ucdr_advance_buffer>
 800e8fc:	2104      	movs	r1, #4
 800e8fe:	4620      	mov	r0, r4
 800e900:	f000 f998 	bl	800ec34 <ucdr_check_buffer_available_for>
 800e904:	2800      	cmp	r0, #0
 800e906:	d137      	bne.n	800e978 <ucdr_serialize_endian_float+0x9c>
 800e908:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e90c:	42b7      	cmp	r7, r6
 800e90e:	d92e      	bls.n	800e96e <ucdr_serialize_endian_float+0x92>
 800e910:	6923      	ldr	r3, [r4, #16]
 800e912:	60a7      	str	r7, [r4, #8]
 800e914:	1bbf      	subs	r7, r7, r6
 800e916:	443b      	add	r3, r7
 800e918:	f1c7 0904 	rsb	r9, r7, #4
 800e91c:	6123      	str	r3, [r4, #16]
 800e91e:	4649      	mov	r1, r9
 800e920:	4620      	mov	r0, r4
 800e922:	f000 f993 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e926:	2800      	cmp	r0, #0
 800e928:	d049      	beq.n	800e9be <ucdr_serialize_endian_float+0xe2>
 800e92a:	2d01      	cmp	r5, #1
 800e92c:	d05b      	beq.n	800e9e6 <ucdr_serialize_endian_float+0x10a>
 800e92e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e932:	7033      	strb	r3, [r6, #0]
 800e934:	2f01      	cmp	r7, #1
 800e936:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e93a:	7073      	strb	r3, [r6, #1]
 800e93c:	d04d      	beq.n	800e9da <ucdr_serialize_endian_float+0xfe>
 800e93e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e942:	70b3      	strb	r3, [r6, #2]
 800e944:	2f02      	cmp	r7, #2
 800e946:	d04c      	beq.n	800e9e2 <ucdr_serialize_endian_float+0x106>
 800e948:	3603      	adds	r6, #3
 800e94a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e94e:	7033      	strb	r3, [r6, #0]
 800e950:	6923      	ldr	r3, [r4, #16]
 800e952:	68a2      	ldr	r2, [r4, #8]
 800e954:	7da0      	ldrb	r0, [r4, #22]
 800e956:	3304      	adds	r3, #4
 800e958:	444a      	add	r2, r9
 800e95a:	1bdb      	subs	r3, r3, r7
 800e95c:	2104      	movs	r1, #4
 800e95e:	f080 0001 	eor.w	r0, r0, #1
 800e962:	60a2      	str	r2, [r4, #8]
 800e964:	6123      	str	r3, [r4, #16]
 800e966:	7561      	strb	r1, [r4, #21]
 800e968:	b003      	add	sp, #12
 800e96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e96e:	2104      	movs	r1, #4
 800e970:	4620      	mov	r0, r4
 800e972:	f000 f96b 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800e976:	b1c8      	cbz	r0, 800e9ac <ucdr_serialize_endian_float+0xd0>
 800e978:	2d01      	cmp	r5, #1
 800e97a:	68a3      	ldr	r3, [r4, #8]
 800e97c:	d01c      	beq.n	800e9b8 <ucdr_serialize_endian_float+0xdc>
 800e97e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e982:	701a      	strb	r2, [r3, #0]
 800e984:	68a3      	ldr	r3, [r4, #8]
 800e986:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e98a:	705a      	strb	r2, [r3, #1]
 800e98c:	68a3      	ldr	r3, [r4, #8]
 800e98e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e992:	709a      	strb	r2, [r3, #2]
 800e994:	68a3      	ldr	r3, [r4, #8]
 800e996:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e99a:	70da      	strb	r2, [r3, #3]
 800e99c:	68a2      	ldr	r2, [r4, #8]
 800e99e:	6923      	ldr	r3, [r4, #16]
 800e9a0:	3204      	adds	r2, #4
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	2104      	movs	r1, #4
 800e9a6:	60a2      	str	r2, [r4, #8]
 800e9a8:	6123      	str	r3, [r4, #16]
 800e9aa:	7561      	strb	r1, [r4, #21]
 800e9ac:	7da0      	ldrb	r0, [r4, #22]
 800e9ae:	f080 0001 	eor.w	r0, r0, #1
 800e9b2:	b003      	add	sp, #12
 800e9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9b8:	9a01      	ldr	r2, [sp, #4]
 800e9ba:	601a      	str	r2, [r3, #0]
 800e9bc:	e7ee      	b.n	800e99c <ucdr_serialize_endian_float+0xc0>
 800e9be:	68a2      	ldr	r2, [r4, #8]
 800e9c0:	6923      	ldr	r3, [r4, #16]
 800e9c2:	7da0      	ldrb	r0, [r4, #22]
 800e9c4:	f884 8015 	strb.w	r8, [r4, #21]
 800e9c8:	1bd2      	subs	r2, r2, r7
 800e9ca:	1bdb      	subs	r3, r3, r7
 800e9cc:	f080 0001 	eor.w	r0, r0, #1
 800e9d0:	60a2      	str	r2, [r4, #8]
 800e9d2:	6123      	str	r3, [r4, #16]
 800e9d4:	b003      	add	sp, #12
 800e9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9da:	68a3      	ldr	r3, [r4, #8]
 800e9dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e9e0:	701a      	strb	r2, [r3, #0]
 800e9e2:	68a6      	ldr	r6, [r4, #8]
 800e9e4:	e7b1      	b.n	800e94a <ucdr_serialize_endian_float+0x6e>
 800e9e6:	ad01      	add	r5, sp, #4
 800e9e8:	463a      	mov	r2, r7
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f00d f89a 	bl	801bb26 <memcpy>
 800e9f2:	68a0      	ldr	r0, [r4, #8]
 800e9f4:	464a      	mov	r2, r9
 800e9f6:	19e9      	adds	r1, r5, r7
 800e9f8:	f00d f895 	bl	801bb26 <memcpy>
 800e9fc:	e7a8      	b.n	800e950 <ucdr_serialize_endian_float+0x74>
 800e9fe:	bf00      	nop

0800ea00 <ucdr_deserialize_float>:
 800ea00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea04:	460d      	mov	r5, r1
 800ea06:	2104      	movs	r1, #4
 800ea08:	4604      	mov	r4, r0
 800ea0a:	f000 f973 	bl	800ecf4 <ucdr_buffer_alignment>
 800ea0e:	4601      	mov	r1, r0
 800ea10:	4620      	mov	r0, r4
 800ea12:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ea16:	f000 f9b1 	bl	800ed7c <ucdr_advance_buffer>
 800ea1a:	2104      	movs	r1, #4
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f000 f909 	bl	800ec34 <ucdr_check_buffer_available_for>
 800ea22:	b1d8      	cbz	r0, 800ea5c <ucdr_deserialize_float+0x5c>
 800ea24:	7d22      	ldrb	r2, [r4, #20]
 800ea26:	68a3      	ldr	r3, [r4, #8]
 800ea28:	2a01      	cmp	r2, #1
 800ea2a:	d052      	beq.n	800ead2 <ucdr_deserialize_float+0xd2>
 800ea2c:	78db      	ldrb	r3, [r3, #3]
 800ea2e:	702b      	strb	r3, [r5, #0]
 800ea30:	68a3      	ldr	r3, [r4, #8]
 800ea32:	789b      	ldrb	r3, [r3, #2]
 800ea34:	706b      	strb	r3, [r5, #1]
 800ea36:	68a3      	ldr	r3, [r4, #8]
 800ea38:	785b      	ldrb	r3, [r3, #1]
 800ea3a:	70ab      	strb	r3, [r5, #2]
 800ea3c:	68a3      	ldr	r3, [r4, #8]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	70eb      	strb	r3, [r5, #3]
 800ea42:	68a2      	ldr	r2, [r4, #8]
 800ea44:	6923      	ldr	r3, [r4, #16]
 800ea46:	3204      	adds	r2, #4
 800ea48:	3304      	adds	r3, #4
 800ea4a:	2104      	movs	r1, #4
 800ea4c:	60a2      	str	r2, [r4, #8]
 800ea4e:	6123      	str	r3, [r4, #16]
 800ea50:	7561      	strb	r1, [r4, #21]
 800ea52:	7da0      	ldrb	r0, [r4, #22]
 800ea54:	f080 0001 	eor.w	r0, r0, #1
 800ea58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea5c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ea60:	42b7      	cmp	r7, r6
 800ea62:	d92a      	bls.n	800eaba <ucdr_deserialize_float+0xba>
 800ea64:	6923      	ldr	r3, [r4, #16]
 800ea66:	60a7      	str	r7, [r4, #8]
 800ea68:	1bbf      	subs	r7, r7, r6
 800ea6a:	443b      	add	r3, r7
 800ea6c:	f1c7 0904 	rsb	r9, r7, #4
 800ea70:	6123      	str	r3, [r4, #16]
 800ea72:	4649      	mov	r1, r9
 800ea74:	4620      	mov	r0, r4
 800ea76:	f000 f8e9 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800ea7a:	b368      	cbz	r0, 800ead8 <ucdr_deserialize_float+0xd8>
 800ea7c:	7d23      	ldrb	r3, [r4, #20]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d040      	beq.n	800eb04 <ucdr_deserialize_float+0x104>
 800ea82:	78f3      	ldrb	r3, [r6, #3]
 800ea84:	702b      	strb	r3, [r5, #0]
 800ea86:	78b3      	ldrb	r3, [r6, #2]
 800ea88:	706b      	strb	r3, [r5, #1]
 800ea8a:	2f01      	cmp	r7, #1
 800ea8c:	d031      	beq.n	800eaf2 <ucdr_deserialize_float+0xf2>
 800ea8e:	7873      	ldrb	r3, [r6, #1]
 800ea90:	70ab      	strb	r3, [r5, #2]
 800ea92:	2f02      	cmp	r7, #2
 800ea94:	f105 0503 	add.w	r5, r5, #3
 800ea98:	d02f      	beq.n	800eafa <ucdr_deserialize_float+0xfa>
 800ea9a:	7833      	ldrb	r3, [r6, #0]
 800ea9c:	702b      	strb	r3, [r5, #0]
 800ea9e:	6923      	ldr	r3, [r4, #16]
 800eaa0:	68a2      	ldr	r2, [r4, #8]
 800eaa2:	7da0      	ldrb	r0, [r4, #22]
 800eaa4:	2104      	movs	r1, #4
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	444a      	add	r2, r9
 800eaaa:	1bdb      	subs	r3, r3, r7
 800eaac:	7561      	strb	r1, [r4, #21]
 800eaae:	60a2      	str	r2, [r4, #8]
 800eab0:	6123      	str	r3, [r4, #16]
 800eab2:	f080 0001 	eor.w	r0, r0, #1
 800eab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaba:	2104      	movs	r1, #4
 800eabc:	4620      	mov	r0, r4
 800eabe:	f000 f8c5 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d0c5      	beq.n	800ea52 <ucdr_deserialize_float+0x52>
 800eac6:	7d23      	ldrb	r3, [r4, #20]
 800eac8:	68a2      	ldr	r2, [r4, #8]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d017      	beq.n	800eafe <ucdr_deserialize_float+0xfe>
 800eace:	78d3      	ldrb	r3, [r2, #3]
 800ead0:	e7ad      	b.n	800ea2e <ucdr_deserialize_float+0x2e>
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	602b      	str	r3, [r5, #0]
 800ead6:	e7b4      	b.n	800ea42 <ucdr_deserialize_float+0x42>
 800ead8:	68a2      	ldr	r2, [r4, #8]
 800eada:	6923      	ldr	r3, [r4, #16]
 800eadc:	7da0      	ldrb	r0, [r4, #22]
 800eade:	f884 8015 	strb.w	r8, [r4, #21]
 800eae2:	1bd2      	subs	r2, r2, r7
 800eae4:	1bdb      	subs	r3, r3, r7
 800eae6:	60a2      	str	r2, [r4, #8]
 800eae8:	6123      	str	r3, [r4, #16]
 800eaea:	f080 0001 	eor.w	r0, r0, #1
 800eaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaf2:	68a3      	ldr	r3, [r4, #8]
 800eaf4:	785b      	ldrb	r3, [r3, #1]
 800eaf6:	70ab      	strb	r3, [r5, #2]
 800eaf8:	3503      	adds	r5, #3
 800eafa:	68a6      	ldr	r6, [r4, #8]
 800eafc:	e7cd      	b.n	800ea9a <ucdr_deserialize_float+0x9a>
 800eafe:	6813      	ldr	r3, [r2, #0]
 800eb00:	602b      	str	r3, [r5, #0]
 800eb02:	e79e      	b.n	800ea42 <ucdr_deserialize_float+0x42>
 800eb04:	4631      	mov	r1, r6
 800eb06:	463a      	mov	r2, r7
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f00d f80c 	bl	801bb26 <memcpy>
 800eb0e:	68a1      	ldr	r1, [r4, #8]
 800eb10:	464a      	mov	r2, r9
 800eb12:	19e8      	adds	r0, r5, r7
 800eb14:	f00d f807 	bl	801bb26 <memcpy>
 800eb18:	e7c1      	b.n	800ea9e <ucdr_deserialize_float+0x9e>
 800eb1a:	bf00      	nop

0800eb1c <ucdr_deserialize_endian_float>:
 800eb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb20:	460e      	mov	r6, r1
 800eb22:	2104      	movs	r1, #4
 800eb24:	4604      	mov	r4, r0
 800eb26:	4615      	mov	r5, r2
 800eb28:	f000 f8e4 	bl	800ecf4 <ucdr_buffer_alignment>
 800eb2c:	4601      	mov	r1, r0
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f894 9015 	ldrb.w	r9, [r4, #21]
 800eb34:	f000 f922 	bl	800ed7c <ucdr_advance_buffer>
 800eb38:	2104      	movs	r1, #4
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f000 f87a 	bl	800ec34 <ucdr_check_buffer_available_for>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	d137      	bne.n	800ebb4 <ucdr_deserialize_endian_float+0x98>
 800eb44:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800eb48:	42bb      	cmp	r3, r7
 800eb4a:	d92e      	bls.n	800ebaa <ucdr_deserialize_endian_float+0x8e>
 800eb4c:	eba3 0807 	sub.w	r8, r3, r7
 800eb50:	60a3      	str	r3, [r4, #8]
 800eb52:	6923      	ldr	r3, [r4, #16]
 800eb54:	f1c8 0a04 	rsb	sl, r8, #4
 800eb58:	4443      	add	r3, r8
 800eb5a:	6123      	str	r3, [r4, #16]
 800eb5c:	4651      	mov	r1, sl
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f000 f874 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d043      	beq.n	800ebf0 <ucdr_deserialize_endian_float+0xd4>
 800eb68:	2e01      	cmp	r6, #1
 800eb6a:	d056      	beq.n	800ec1a <ucdr_deserialize_endian_float+0xfe>
 800eb6c:	78fb      	ldrb	r3, [r7, #3]
 800eb6e:	702b      	strb	r3, [r5, #0]
 800eb70:	78bb      	ldrb	r3, [r7, #2]
 800eb72:	706b      	strb	r3, [r5, #1]
 800eb74:	f1b8 0f01 	cmp.w	r8, #1
 800eb78:	d049      	beq.n	800ec0e <ucdr_deserialize_endian_float+0xf2>
 800eb7a:	787b      	ldrb	r3, [r7, #1]
 800eb7c:	70ab      	strb	r3, [r5, #2]
 800eb7e:	f1b8 0f02 	cmp.w	r8, #2
 800eb82:	f105 0503 	add.w	r5, r5, #3
 800eb86:	d046      	beq.n	800ec16 <ucdr_deserialize_endian_float+0xfa>
 800eb88:	783b      	ldrb	r3, [r7, #0]
 800eb8a:	702b      	strb	r3, [r5, #0]
 800eb8c:	6923      	ldr	r3, [r4, #16]
 800eb8e:	68a2      	ldr	r2, [r4, #8]
 800eb90:	7da0      	ldrb	r0, [r4, #22]
 800eb92:	2104      	movs	r1, #4
 800eb94:	3304      	adds	r3, #4
 800eb96:	4452      	add	r2, sl
 800eb98:	eba3 0308 	sub.w	r3, r3, r8
 800eb9c:	7561      	strb	r1, [r4, #21]
 800eb9e:	60a2      	str	r2, [r4, #8]
 800eba0:	6123      	str	r3, [r4, #16]
 800eba2:	f080 0001 	eor.w	r0, r0, #1
 800eba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebaa:	2104      	movs	r1, #4
 800ebac:	4620      	mov	r0, r4
 800ebae:	f000 f84d 	bl	800ec4c <ucdr_check_final_buffer_behavior>
 800ebb2:	b1a8      	cbz	r0, 800ebe0 <ucdr_deserialize_endian_float+0xc4>
 800ebb4:	2e01      	cmp	r6, #1
 800ebb6:	68a3      	ldr	r3, [r4, #8]
 800ebb8:	d017      	beq.n	800ebea <ucdr_deserialize_endian_float+0xce>
 800ebba:	78db      	ldrb	r3, [r3, #3]
 800ebbc:	702b      	strb	r3, [r5, #0]
 800ebbe:	68a3      	ldr	r3, [r4, #8]
 800ebc0:	789b      	ldrb	r3, [r3, #2]
 800ebc2:	706b      	strb	r3, [r5, #1]
 800ebc4:	68a3      	ldr	r3, [r4, #8]
 800ebc6:	785b      	ldrb	r3, [r3, #1]
 800ebc8:	70ab      	strb	r3, [r5, #2]
 800ebca:	68a3      	ldr	r3, [r4, #8]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	70eb      	strb	r3, [r5, #3]
 800ebd0:	68a2      	ldr	r2, [r4, #8]
 800ebd2:	6923      	ldr	r3, [r4, #16]
 800ebd4:	3204      	adds	r2, #4
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	2104      	movs	r1, #4
 800ebda:	60a2      	str	r2, [r4, #8]
 800ebdc:	6123      	str	r3, [r4, #16]
 800ebde:	7561      	strb	r1, [r4, #21]
 800ebe0:	7da0      	ldrb	r0, [r4, #22]
 800ebe2:	f080 0001 	eor.w	r0, r0, #1
 800ebe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	602b      	str	r3, [r5, #0]
 800ebee:	e7ef      	b.n	800ebd0 <ucdr_deserialize_endian_float+0xb4>
 800ebf0:	68a2      	ldr	r2, [r4, #8]
 800ebf2:	6923      	ldr	r3, [r4, #16]
 800ebf4:	7da0      	ldrb	r0, [r4, #22]
 800ebf6:	f884 9015 	strb.w	r9, [r4, #21]
 800ebfa:	eba2 0208 	sub.w	r2, r2, r8
 800ebfe:	eba3 0308 	sub.w	r3, r3, r8
 800ec02:	60a2      	str	r2, [r4, #8]
 800ec04:	6123      	str	r3, [r4, #16]
 800ec06:	f080 0001 	eor.w	r0, r0, #1
 800ec0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0e:	68a3      	ldr	r3, [r4, #8]
 800ec10:	785b      	ldrb	r3, [r3, #1]
 800ec12:	70ab      	strb	r3, [r5, #2]
 800ec14:	3503      	adds	r5, #3
 800ec16:	68a7      	ldr	r7, [r4, #8]
 800ec18:	e7b6      	b.n	800eb88 <ucdr_deserialize_endian_float+0x6c>
 800ec1a:	4639      	mov	r1, r7
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f00c ff81 	bl	801bb26 <memcpy>
 800ec24:	68a1      	ldr	r1, [r4, #8]
 800ec26:	4652      	mov	r2, sl
 800ec28:	eb05 0008 	add.w	r0, r5, r8
 800ec2c:	f00c ff7b 	bl	801bb26 <memcpy>
 800ec30:	e7ac      	b.n	800eb8c <ucdr_deserialize_endian_float+0x70>
 800ec32:	bf00      	nop

0800ec34 <ucdr_check_buffer_available_for>:
 800ec34:	7d83      	ldrb	r3, [r0, #22]
 800ec36:	b93b      	cbnz	r3, 800ec48 <ucdr_check_buffer_available_for+0x14>
 800ec38:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ec3c:	440b      	add	r3, r1
 800ec3e:	4298      	cmp	r0, r3
 800ec40:	bf34      	ite	cc
 800ec42:	2000      	movcc	r0, #0
 800ec44:	2001      	movcs	r0, #1
 800ec46:	4770      	bx	lr
 800ec48:	2000      	movs	r0, #0
 800ec4a:	4770      	bx	lr

0800ec4c <ucdr_check_final_buffer_behavior>:
 800ec4c:	7d83      	ldrb	r3, [r0, #22]
 800ec4e:	b943      	cbnz	r3, 800ec62 <ucdr_check_final_buffer_behavior+0x16>
 800ec50:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ec54:	4291      	cmp	r1, r2
 800ec56:	b510      	push	{r4, lr}
 800ec58:	4604      	mov	r4, r0
 800ec5a:	d205      	bcs.n	800ec68 <ucdr_check_final_buffer_behavior+0x1c>
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	4618      	mov	r0, r3
 800ec60:	bd10      	pop	{r4, pc}
 800ec62:	2300      	movs	r3, #0
 800ec64:	4618      	mov	r0, r3
 800ec66:	4770      	bx	lr
 800ec68:	6982      	ldr	r2, [r0, #24]
 800ec6a:	b13a      	cbz	r2, 800ec7c <ucdr_check_final_buffer_behavior+0x30>
 800ec6c:	69c1      	ldr	r1, [r0, #28]
 800ec6e:	4790      	blx	r2
 800ec70:	f080 0301 	eor.w	r3, r0, #1
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	75a0      	strb	r0, [r4, #22]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	bd10      	pop	{r4, pc}
 800ec7c:	2001      	movs	r0, #1
 800ec7e:	75a0      	strb	r0, [r4, #22]
 800ec80:	e7fa      	b.n	800ec78 <ucdr_check_final_buffer_behavior+0x2c>
 800ec82:	bf00      	nop

0800ec84 <ucdr_set_on_full_buffer_callback>:
 800ec84:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop

0800ec8c <ucdr_init_buffer_origin_offset_endian>:
 800ec8c:	b410      	push	{r4}
 800ec8e:	9c01      	ldr	r4, [sp, #4]
 800ec90:	6001      	str	r1, [r0, #0]
 800ec92:	440a      	add	r2, r1
 800ec94:	6042      	str	r2, [r0, #4]
 800ec96:	190a      	adds	r2, r1, r4
 800ec98:	441c      	add	r4, r3
 800ec9a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ec9e:	6082      	str	r2, [r0, #8]
 800eca0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eca4:	7503      	strb	r3, [r0, #20]
 800eca6:	2200      	movs	r2, #0
 800eca8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ecac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecb0:	7542      	strb	r2, [r0, #21]
 800ecb2:	7582      	strb	r2, [r0, #22]
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop

0800ecb8 <ucdr_init_buffer_origin_offset>:
 800ecb8:	b510      	push	{r4, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	9c04      	ldr	r4, [sp, #16]
 800ecbe:	9400      	str	r4, [sp, #0]
 800ecc0:	2401      	movs	r4, #1
 800ecc2:	9401      	str	r4, [sp, #4]
 800ecc4:	f7ff ffe2 	bl	800ec8c <ucdr_init_buffer_origin_offset_endian>
 800ecc8:	b002      	add	sp, #8
 800ecca:	bd10      	pop	{r4, pc}

0800eccc <ucdr_init_buffer_origin>:
 800eccc:	b510      	push	{r4, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	2400      	movs	r4, #0
 800ecd2:	9400      	str	r4, [sp, #0]
 800ecd4:	f7ff fff0 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 800ecd8:	b002      	add	sp, #8
 800ecda:	bd10      	pop	{r4, pc}

0800ecdc <ucdr_init_buffer>:
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f7ff bff5 	b.w	800eccc <ucdr_init_buffer_origin>
 800ece2:	bf00      	nop

0800ece4 <ucdr_alignment>:
 800ece4:	fbb0 f3f1 	udiv	r3, r0, r1
 800ece8:	fb03 0011 	mls	r0, r3, r1, r0
 800ecec:	1a08      	subs	r0, r1, r0
 800ecee:	3901      	subs	r1, #1
 800ecf0:	4008      	ands	r0, r1
 800ecf2:	4770      	bx	lr

0800ecf4 <ucdr_buffer_alignment>:
 800ecf4:	7d43      	ldrb	r3, [r0, #21]
 800ecf6:	428b      	cmp	r3, r1
 800ecf8:	d208      	bcs.n	800ed0c <ucdr_buffer_alignment+0x18>
 800ecfa:	6900      	ldr	r0, [r0, #16]
 800ecfc:	fbb0 f3f1 	udiv	r3, r0, r1
 800ed00:	fb01 0013 	mls	r0, r1, r3, r0
 800ed04:	1a08      	subs	r0, r1, r0
 800ed06:	3901      	subs	r1, #1
 800ed08:	4008      	ands	r0, r1
 800ed0a:	4770      	bx	lr
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	4770      	bx	lr

0800ed10 <ucdr_align_to>:
 800ed10:	b538      	push	{r3, r4, r5, lr}
 800ed12:	4604      	mov	r4, r0
 800ed14:	460d      	mov	r5, r1
 800ed16:	f7ff ffed 	bl	800ecf4 <ucdr_buffer_alignment>
 800ed1a:	68a3      	ldr	r3, [r4, #8]
 800ed1c:	6861      	ldr	r1, [r4, #4]
 800ed1e:	6922      	ldr	r2, [r4, #16]
 800ed20:	7565      	strb	r5, [r4, #21]
 800ed22:	4403      	add	r3, r0
 800ed24:	428b      	cmp	r3, r1
 800ed26:	bf28      	it	cs
 800ed28:	460b      	movcs	r3, r1
 800ed2a:	4402      	add	r2, r0
 800ed2c:	60a3      	str	r3, [r4, #8]
 800ed2e:	6122      	str	r2, [r4, #16]
 800ed30:	bd38      	pop	{r3, r4, r5, pc}
 800ed32:	bf00      	nop

0800ed34 <ucdr_buffer_length>:
 800ed34:	6882      	ldr	r2, [r0, #8]
 800ed36:	6800      	ldr	r0, [r0, #0]
 800ed38:	1a10      	subs	r0, r2, r0
 800ed3a:	4770      	bx	lr

0800ed3c <ucdr_buffer_remaining>:
 800ed3c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ed40:	1a10      	subs	r0, r2, r0
 800ed42:	4770      	bx	lr

0800ed44 <ucdr_check_final_buffer_behavior_array>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	7d83      	ldrb	r3, [r0, #22]
 800ed48:	b963      	cbnz	r3, 800ed64 <ucdr_check_final_buffer_behavior_array+0x20>
 800ed4a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	4604      	mov	r4, r0
 800ed52:	460d      	mov	r5, r1
 800ed54:	d308      	bcc.n	800ed68 <ucdr_check_final_buffer_behavior_array+0x24>
 800ed56:	b139      	cbz	r1, 800ed68 <ucdr_check_final_buffer_behavior_array+0x24>
 800ed58:	6983      	ldr	r3, [r0, #24]
 800ed5a:	b163      	cbz	r3, 800ed76 <ucdr_check_final_buffer_behavior_array+0x32>
 800ed5c:	69c1      	ldr	r1, [r0, #28]
 800ed5e:	4798      	blx	r3
 800ed60:	75a0      	strb	r0, [r4, #22]
 800ed62:	b108      	cbz	r0, 800ed68 <ucdr_check_final_buffer_behavior_array+0x24>
 800ed64:	2000      	movs	r0, #0
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f7ff ffe7 	bl	800ed3c <ucdr_buffer_remaining>
 800ed6e:	42a8      	cmp	r0, r5
 800ed70:	bf28      	it	cs
 800ed72:	4628      	movcs	r0, r5
 800ed74:	bd38      	pop	{r3, r4, r5, pc}
 800ed76:	2301      	movs	r3, #1
 800ed78:	7583      	strb	r3, [r0, #22]
 800ed7a:	e7f3      	b.n	800ed64 <ucdr_check_final_buffer_behavior_array+0x20>

0800ed7c <ucdr_advance_buffer>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	4604      	mov	r4, r0
 800ed80:	460d      	mov	r5, r1
 800ed82:	f7ff ff57 	bl	800ec34 <ucdr_check_buffer_available_for>
 800ed86:	b178      	cbz	r0, 800eda8 <ucdr_advance_buffer+0x2c>
 800ed88:	6923      	ldr	r3, [r4, #16]
 800ed8a:	68a2      	ldr	r2, [r4, #8]
 800ed8c:	442b      	add	r3, r5
 800ed8e:	6123      	str	r3, [r4, #16]
 800ed90:	2301      	movs	r3, #1
 800ed92:	442a      	add	r2, r5
 800ed94:	7563      	strb	r3, [r4, #21]
 800ed96:	60a2      	str	r2, [r4, #8]
 800ed98:	bd38      	pop	{r3, r4, r5, pc}
 800ed9a:	68a2      	ldr	r2, [r4, #8]
 800ed9c:	6923      	ldr	r3, [r4, #16]
 800ed9e:	4402      	add	r2, r0
 800eda0:	4403      	add	r3, r0
 800eda2:	1a2d      	subs	r5, r5, r0
 800eda4:	60a2      	str	r2, [r4, #8]
 800eda6:	6123      	str	r3, [r4, #16]
 800eda8:	2201      	movs	r2, #1
 800edaa:	4629      	mov	r1, r5
 800edac:	4620      	mov	r0, r4
 800edae:	f7ff ffc9 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d1f1      	bne.n	800ed9a <ucdr_advance_buffer+0x1e>
 800edb6:	2301      	movs	r3, #1
 800edb8:	7563      	strb	r3, [r4, #21]
 800edba:	bd38      	pop	{r3, r4, r5, pc}

0800edbc <ucdr_serialize_sequence_char>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	460e      	mov	r6, r1
 800edc0:	4615      	mov	r5, r2
 800edc2:	7d01      	ldrb	r1, [r0, #20]
 800edc4:	4604      	mov	r4, r0
 800edc6:	f7ff f84f 	bl	800de68 <ucdr_serialize_endian_uint32_t>
 800edca:	b90d      	cbnz	r5, 800edd0 <ucdr_serialize_sequence_char+0x14>
 800edcc:	2001      	movs	r0, #1
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	7d21      	ldrb	r1, [r4, #20]
 800edd2:	462b      	mov	r3, r5
 800edd4:	4632      	mov	r2, r6
 800edd6:	4620      	mov	r0, r4
 800edd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eddc:	f005 be52 	b.w	8014a84 <ucdr_serialize_endian_array_char>

0800ede0 <ucdr_deserialize_sequence_char>:
 800ede0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede4:	461d      	mov	r5, r3
 800ede6:	4616      	mov	r6, r2
 800ede8:	460f      	mov	r7, r1
 800edea:	461a      	mov	r2, r3
 800edec:	7d01      	ldrb	r1, [r0, #20]
 800edee:	4604      	mov	r4, r0
 800edf0:	f7ff f958 	bl	800e0a4 <ucdr_deserialize_endian_uint32_t>
 800edf4:	682b      	ldr	r3, [r5, #0]
 800edf6:	429e      	cmp	r6, r3
 800edf8:	d208      	bcs.n	800ee0c <ucdr_deserialize_sequence_char+0x2c>
 800edfa:	2201      	movs	r2, #1
 800edfc:	75a2      	strb	r2, [r4, #22]
 800edfe:	7d21      	ldrb	r1, [r4, #20]
 800ee00:	463a      	mov	r2, r7
 800ee02:	4620      	mov	r0, r4
 800ee04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee08:	f005 be6e 	b.w	8014ae8 <ucdr_deserialize_endian_array_char>
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1f6      	bne.n	800edfe <ucdr_deserialize_sequence_char+0x1e>
 800ee10:	2001      	movs	r0, #1
 800ee12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee16:	bf00      	nop

0800ee18 <ucdr_serialize_sequence_uint8_t>:
 800ee18:	b570      	push	{r4, r5, r6, lr}
 800ee1a:	460e      	mov	r6, r1
 800ee1c:	4615      	mov	r5, r2
 800ee1e:	7d01      	ldrb	r1, [r0, #20]
 800ee20:	4604      	mov	r4, r0
 800ee22:	f7ff f821 	bl	800de68 <ucdr_serialize_endian_uint32_t>
 800ee26:	b90d      	cbnz	r5, 800ee2c <ucdr_serialize_sequence_uint8_t+0x14>
 800ee28:	2001      	movs	r0, #1
 800ee2a:	bd70      	pop	{r4, r5, r6, pc}
 800ee2c:	7d21      	ldrb	r1, [r4, #20]
 800ee2e:	462b      	mov	r3, r5
 800ee30:	4632      	mov	r2, r6
 800ee32:	4620      	mov	r0, r4
 800ee34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee38:	f005 beba 	b.w	8014bb0 <ucdr_serialize_endian_array_uint8_t>

0800ee3c <ucdr_deserialize_sequence_uint8_t>:
 800ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee40:	461d      	mov	r5, r3
 800ee42:	4616      	mov	r6, r2
 800ee44:	460f      	mov	r7, r1
 800ee46:	461a      	mov	r2, r3
 800ee48:	7d01      	ldrb	r1, [r0, #20]
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	f7ff f92a 	bl	800e0a4 <ucdr_deserialize_endian_uint32_t>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	429e      	cmp	r6, r3
 800ee54:	d208      	bcs.n	800ee68 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800ee56:	2201      	movs	r2, #1
 800ee58:	75a2      	strb	r2, [r4, #22]
 800ee5a:	7d21      	ldrb	r1, [r4, #20]
 800ee5c:	463a      	mov	r2, r7
 800ee5e:	4620      	mov	r0, r4
 800ee60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee64:	f005 bf08 	b.w	8014c78 <ucdr_deserialize_endian_array_uint8_t>
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1f6      	bne.n	800ee5a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee72:	bf00      	nop

0800ee74 <ucdr_serialize_sequence_float>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	460e      	mov	r6, r1
 800ee78:	4615      	mov	r5, r2
 800ee7a:	7d01      	ldrb	r1, [r0, #20]
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	f7fe fff3 	bl	800de68 <ucdr_serialize_endian_uint32_t>
 800ee82:	b90d      	cbnz	r5, 800ee88 <ucdr_serialize_sequence_float+0x14>
 800ee84:	2001      	movs	r0, #1
 800ee86:	bd70      	pop	{r4, r5, r6, pc}
 800ee88:	7d21      	ldrb	r1, [r4, #20]
 800ee8a:	462b      	mov	r3, r5
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	4620      	mov	r0, r4
 800ee90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee94:	f005 bf22 	b.w	8014cdc <ucdr_serialize_endian_array_float>

0800ee98 <ucdr_deserialize_sequence_float>:
 800ee98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9c:	461d      	mov	r5, r3
 800ee9e:	4616      	mov	r6, r2
 800eea0:	460f      	mov	r7, r1
 800eea2:	461a      	mov	r2, r3
 800eea4:	7d01      	ldrb	r1, [r0, #20]
 800eea6:	4604      	mov	r4, r0
 800eea8:	f7ff f8fc 	bl	800e0a4 <ucdr_deserialize_endian_uint32_t>
 800eeac:	682b      	ldr	r3, [r5, #0]
 800eeae:	429e      	cmp	r6, r3
 800eeb0:	d208      	bcs.n	800eec4 <ucdr_deserialize_sequence_float+0x2c>
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	75a2      	strb	r2, [r4, #22]
 800eeb6:	7d21      	ldrb	r1, [r4, #20]
 800eeb8:	463a      	mov	r2, r7
 800eeba:	4620      	mov	r0, r4
 800eebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eec0:	f005 bf60 	b.w	8014d84 <ucdr_deserialize_endian_array_float>
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d1f6      	bne.n	800eeb6 <ucdr_deserialize_sequence_float+0x1e>
 800eec8:	2001      	movs	r0, #1
 800eeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eece:	bf00      	nop

0800eed0 <rcl_client_get_rmw_handle>:
 800eed0:	b118      	cbz	r0, 800eeda <rcl_client_get_rmw_handle+0xa>
 800eed2:	6800      	ldr	r0, [r0, #0]
 800eed4:	b108      	cbz	r0, 800eeda <rcl_client_get_rmw_handle+0xa>
 800eed6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800eeda:	4770      	bx	lr

0800eedc <rcl_send_request>:
 800eedc:	2800      	cmp	r0, #0
 800eede:	d048      	beq.n	800ef72 <rcl_send_request+0x96>
 800eee0:	b570      	push	{r4, r5, r6, lr}
 800eee2:	4604      	mov	r4, r0
 800eee4:	6800      	ldr	r0, [r0, #0]
 800eee6:	b08a      	sub	sp, #40	@ 0x28
 800eee8:	b1c0      	cbz	r0, 800ef1c <rcl_send_request+0x40>
 800eeea:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800eeee:	b1ab      	cbz	r3, 800ef1c <rcl_send_request+0x40>
 800eef0:	460e      	mov	r6, r1
 800eef2:	b1b9      	cbz	r1, 800ef24 <rcl_send_request+0x48>
 800eef4:	4615      	mov	r5, r2
 800eef6:	b1aa      	cbz	r2, 800ef24 <rcl_send_request+0x48>
 800eef8:	2105      	movs	r1, #5
 800eefa:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800eefe:	f003 f83b 	bl	8011f78 <__atomic_load_8>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	e9c5 0100 	strd	r0, r1, [r5]
 800ef08:	462a      	mov	r2, r5
 800ef0a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ef0e:	4631      	mov	r1, r6
 800ef10:	f004 fa8c 	bl	801342c <rmw_send_request>
 800ef14:	b148      	cbz	r0, 800ef2a <rcl_send_request+0x4e>
 800ef16:	2001      	movs	r0, #1
 800ef18:	b00a      	add	sp, #40	@ 0x28
 800ef1a:	bd70      	pop	{r4, r5, r6, pc}
 800ef1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ef20:	b00a      	add	sp, #40	@ 0x28
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	200b      	movs	r0, #11
 800ef26:	b00a      	add	sp, #40	@ 0x28
 800ef28:	bd70      	pop	{r4, r5, r6, pc}
 800ef2a:	6820      	ldr	r0, [r4, #0]
 800ef2c:	2305      	movs	r3, #5
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef34:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800ef38:	f003 f88a 	bl	8012050 <__atomic_exchange_8>
 800ef3c:	6823      	ldr	r3, [r4, #0]
 800ef3e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800ef42:	b1a2      	cbz	r2, 800ef6e <rcl_send_request+0x92>
 800ef44:	a905      	add	r1, sp, #20
 800ef46:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ef4a:	f003 fd5f 	bl	8012a0c <rmw_get_gid_for_client>
 800ef4e:	4601      	mov	r1, r0
 800ef50:	b990      	cbnz	r0, 800ef78 <rcl_send_request+0x9c>
 800ef52:	6822      	ldr	r2, [r4, #0]
 800ef54:	ab06      	add	r3, sp, #24
 800ef56:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 800ef5a:	9302      	str	r3, [sp, #8]
 800ef5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef60:	4632      	mov	r2, r6
 800ef62:	e9cd 4500 	strd	r4, r5, [sp]
 800ef66:	f001 f87b 	bl	8010060 <rcl_send_service_event_message>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d1d4      	bne.n	800ef18 <rcl_send_request+0x3c>
 800ef6e:	2000      	movs	r0, #0
 800ef70:	e7d2      	b.n	800ef18 <rcl_send_request+0x3c>
 800ef72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ef76:	4770      	bx	lr
 800ef78:	f000 f878 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 800ef7c:	e7cc      	b.n	800ef18 <rcl_send_request+0x3c>
 800ef7e:	bf00      	nop

0800ef80 <rcl_take_response>:
 800ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef82:	468e      	mov	lr, r1
 800ef84:	460c      	mov	r4, r1
 800ef86:	4617      	mov	r7, r2
 800ef88:	4605      	mov	r5, r0
 800ef8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef8e:	b095      	sub	sp, #84	@ 0x54
 800ef90:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800ef94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef98:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ef9c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800efa0:	2d00      	cmp	r5, #0
 800efa2:	d044      	beq.n	800f02e <rcl_take_response+0xae>
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d041      	beq.n	800f02e <rcl_take_response+0xae>
 800efaa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800efae:	2800      	cmp	r0, #0
 800efb0:	d03d      	beq.n	800f02e <rcl_take_response+0xae>
 800efb2:	2f00      	cmp	r7, #0
 800efb4:	d03e      	beq.n	800f034 <rcl_take_response+0xb4>
 800efb6:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 800f050 <rcl_take_response+0xd0>
 800efba:	2300      	movs	r3, #0
 800efbc:	f88d 3013 	strb.w	r3, [sp, #19]
 800efc0:	463a      	mov	r2, r7
 800efc2:	f10d 0313 	add.w	r3, sp, #19
 800efc6:	a90a      	add	r1, sp, #40	@ 0x28
 800efc8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800efcc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800efd0:	f004 fb2c 	bl	801362c <rmw_take_response>
 800efd4:	4606      	mov	r6, r0
 800efd6:	bb78      	cbnz	r0, 800f038 <rcl_take_response+0xb8>
 800efd8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800efdc:	b373      	cbz	r3, 800f03c <rcl_take_response+0xbc>
 800efde:	682b      	ldr	r3, [r5, #0]
 800efe0:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800efe4:	b1aa      	cbz	r2, 800f012 <rcl_take_response+0x92>
 800efe6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800efea:	a905      	add	r1, sp, #20
 800efec:	f003 fd0e 	bl	8012a0c <rmw_get_gid_for_client>
 800eff0:	bb38      	cbnz	r0, 800f042 <rcl_take_response+0xc2>
 800eff2:	682b      	ldr	r3, [r5, #0]
 800eff4:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 800eff8:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 800effc:	ab06      	add	r3, sp, #24
 800effe:	ed8d 7b00 	vstr	d7, [sp]
 800f002:	463a      	mov	r2, r7
 800f004:	9302      	str	r3, [sp, #8]
 800f006:	2103      	movs	r1, #3
 800f008:	f001 f82a 	bl	8010060 <rcl_send_service_event_message>
 800f00c:	2800      	cmp	r0, #0
 800f00e:	bf18      	it	ne
 800f010:	4606      	movne	r6, r0
 800f012:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 800f016:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f01a:	46a4      	mov	ip, r4
 800f01c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f020:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f024:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f028:	4630      	mov	r0, r6
 800f02a:	b015      	add	sp, #84	@ 0x54
 800f02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f02e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f032:	e7ee      	b.n	800f012 <rcl_take_response+0x92>
 800f034:	260b      	movs	r6, #11
 800f036:	e7ec      	b.n	800f012 <rcl_take_response+0x92>
 800f038:	2601      	movs	r6, #1
 800f03a:	e7ea      	b.n	800f012 <rcl_take_response+0x92>
 800f03c:	f240 16f5 	movw	r6, #501	@ 0x1f5
 800f040:	e7e7      	b.n	800f012 <rcl_take_response+0x92>
 800f042:	f000 f813 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 800f046:	4606      	mov	r6, r0
 800f048:	e7e3      	b.n	800f012 <rcl_take_response+0x92>
 800f04a:	bf00      	nop
 800f04c:	f3af 8000 	nop.w
	...

0800f058 <rcl_client_is_valid>:
 800f058:	b130      	cbz	r0, 800f068 <rcl_client_is_valid+0x10>
 800f05a:	6800      	ldr	r0, [r0, #0]
 800f05c:	b120      	cbz	r0, 800f068 <rcl_client_is_valid+0x10>
 800f05e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f062:	3800      	subs	r0, #0
 800f064:	bf18      	it	ne
 800f066:	2001      	movne	r0, #1
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop

0800f06c <rcl_convert_rmw_ret_to_rcl_ret>:
 800f06c:	280b      	cmp	r0, #11
 800f06e:	dc0d      	bgt.n	800f08c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f070:	2800      	cmp	r0, #0
 800f072:	db09      	blt.n	800f088 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f074:	280b      	cmp	r0, #11
 800f076:	d807      	bhi.n	800f088 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f078:	e8df f000 	tbb	[pc, r0]
 800f07c:	07060607 	.word	0x07060607
 800f080:	06060606 	.word	0x06060606
 800f084:	07070606 	.word	0x07070606
 800f088:	2001      	movs	r0, #1
 800f08a:	4770      	bx	lr
 800f08c:	28cb      	cmp	r0, #203	@ 0xcb
 800f08e:	bf14      	ite	ne
 800f090:	2001      	movne	r0, #1
 800f092:	20cb      	moveq	r0, #203	@ 0xcb
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop

0800f098 <rcl_get_zero_initialized_context>:
 800f098:	4a03      	ldr	r2, [pc, #12]	@ (800f0a8 <rcl_get_zero_initialized_context+0x10>)
 800f09a:	4603      	mov	r3, r0
 800f09c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0a0:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	4770      	bx	lr
 800f0a8:	0801f5f0 	.word	0x0801f5f0

0800f0ac <rcl_context_is_valid>:
 800f0ac:	b118      	cbz	r0, 800f0b6 <rcl_context_is_valid+0xa>
 800f0ae:	6840      	ldr	r0, [r0, #4]
 800f0b0:	3800      	subs	r0, #0
 800f0b2:	bf18      	it	ne
 800f0b4:	2001      	movne	r0, #1
 800f0b6:	4770      	bx	lr

0800f0b8 <__cleanup_context>:
 800f0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0bc:	4606      	mov	r6, r0
 800f0be:	6800      	ldr	r0, [r0, #0]
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	6073      	str	r3, [r6, #4]
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d042      	beq.n	800f14e <__cleanup_context+0x96>
 800f0c8:	6943      	ldr	r3, [r0, #20]
 800f0ca:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f0ce:	6907      	ldr	r7, [r0, #16]
 800f0d0:	b39b      	cbz	r3, 800f13a <__cleanup_context+0x82>
 800f0d2:	3014      	adds	r0, #20
 800f0d4:	f000 f9e8 	bl	800f4a8 <rcl_init_options_fini>
 800f0d8:	4680      	mov	r8, r0
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	d144      	bne.n	800f168 <__cleanup_context+0xb0>
 800f0de:	6830      	ldr	r0, [r6, #0]
 800f0e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f0e2:	b123      	cbz	r3, 800f0ee <__cleanup_context+0x36>
 800f0e4:	3028      	adds	r0, #40	@ 0x28
 800f0e6:	f003 febb 	bl	8012e60 <rmw_context_fini>
 800f0ea:	bbb8      	cbnz	r0, 800f15c <__cleanup_context+0xa4>
 800f0ec:	6830      	ldr	r0, [r6, #0]
 800f0ee:	6a03      	ldr	r3, [r0, #32]
 800f0f0:	b1db      	cbz	r3, 800f12a <__cleanup_context+0x72>
 800f0f2:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f0f6:	2a01      	cmp	r2, #1
 800f0f8:	f17c 0100 	sbcs.w	r1, ip, #0
 800f0fc:	db11      	blt.n	800f122 <__cleanup_context+0x6a>
 800f0fe:	2400      	movs	r4, #0
 800f100:	4625      	mov	r5, r4
 800f102:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f106:	4639      	mov	r1, r7
 800f108:	b1c8      	cbz	r0, 800f13e <__cleanup_context+0x86>
 800f10a:	47c8      	blx	r9
 800f10c:	6833      	ldr	r3, [r6, #0]
 800f10e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f112:	3401      	adds	r4, #1
 800f114:	f145 0500 	adc.w	r5, r5, #0
 800f118:	4294      	cmp	r4, r2
 800f11a:	eb75 010c 	sbcs.w	r1, r5, ip
 800f11e:	6a1b      	ldr	r3, [r3, #32]
 800f120:	dbef      	blt.n	800f102 <__cleanup_context+0x4a>
 800f122:	4618      	mov	r0, r3
 800f124:	4639      	mov	r1, r7
 800f126:	47c8      	blx	r9
 800f128:	6830      	ldr	r0, [r6, #0]
 800f12a:	4639      	mov	r1, r7
 800f12c:	47c8      	blx	r9
 800f12e:	2300      	movs	r3, #0
 800f130:	e9c6 3300 	strd	r3, r3, [r6]
 800f134:	4640      	mov	r0, r8
 800f136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f13a:	4698      	mov	r8, r3
 800f13c:	e7d0      	b.n	800f0e0 <__cleanup_context+0x28>
 800f13e:	3401      	adds	r4, #1
 800f140:	f145 0500 	adc.w	r5, r5, #0
 800f144:	4294      	cmp	r4, r2
 800f146:	eb75 010c 	sbcs.w	r1, r5, ip
 800f14a:	dbda      	blt.n	800f102 <__cleanup_context+0x4a>
 800f14c:	e7e9      	b.n	800f122 <__cleanup_context+0x6a>
 800f14e:	4680      	mov	r8, r0
 800f150:	2300      	movs	r3, #0
 800f152:	e9c6 3300 	strd	r3, r3, [r6]
 800f156:	4640      	mov	r0, r8
 800f158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f15c:	f1b8 0f00 	cmp.w	r8, #0
 800f160:	d005      	beq.n	800f16e <__cleanup_context+0xb6>
 800f162:	f7fe f8e1 	bl	800d328 <rcutils_reset_error>
 800f166:	e7c1      	b.n	800f0ec <__cleanup_context+0x34>
 800f168:	f7fe f8de 	bl	800d328 <rcutils_reset_error>
 800f16c:	e7b7      	b.n	800f0de <__cleanup_context+0x26>
 800f16e:	f7ff ff7d 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 800f172:	4680      	mov	r8, r0
 800f174:	e7f5      	b.n	800f162 <__cleanup_context+0xaa>
 800f176:	bf00      	nop

0800f178 <rcl_init>:
 800f178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17c:	1e04      	subs	r4, r0, #0
 800f17e:	b0a7      	sub	sp, #156	@ 0x9c
 800f180:	460d      	mov	r5, r1
 800f182:	4617      	mov	r7, r2
 800f184:	461e      	mov	r6, r3
 800f186:	dd13      	ble.n	800f1b0 <rcl_init+0x38>
 800f188:	b161      	cbz	r1, 800f1a4 <rcl_init+0x2c>
 800f18a:	f1a1 0e04 	sub.w	lr, r1, #4
 800f18e:	f04f 0c00 	mov.w	ip, #0
 800f192:	e001      	b.n	800f198 <rcl_init+0x20>
 800f194:	4564      	cmp	r4, ip
 800f196:	d00d      	beq.n	800f1b4 <rcl_init+0x3c>
 800f198:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 800f19c:	f10c 0c01 	add.w	ip, ip, #1
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	d1f7      	bne.n	800f194 <rcl_init+0x1c>
 800f1a4:	f04f 080b 	mov.w	r8, #11
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	b027      	add	sp, #156	@ 0x9c
 800f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b0:	2900      	cmp	r1, #0
 800f1b2:	d1f7      	bne.n	800f1a4 <rcl_init+0x2c>
 800f1b4:	2f00      	cmp	r7, #0
 800f1b6:	d0f5      	beq.n	800f1a4 <rcl_init+0x2c>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d0f2      	beq.n	800f1a4 <rcl_init+0x2c>
 800f1be:	469c      	mov	ip, r3
 800f1c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1c4:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 800f1c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f1cc:	f8dc 3000 	ldr.w	r3, [ip]
 800f1d0:	f8ce 3000 	str.w	r3, [lr]
 800f1d4:	a821      	add	r0, sp, #132	@ 0x84
 800f1d6:	f7fe f883 	bl	800d2e0 <rcutils_allocator_is_valid>
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	d0e2      	beq.n	800f1a4 <rcl_init+0x2c>
 800f1de:	2e00      	cmp	r6, #0
 800f1e0:	d0e0      	beq.n	800f1a4 <rcl_init+0x2c>
 800f1e2:	6833      	ldr	r3, [r6, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d176      	bne.n	800f2d6 <rcl_init+0x15e>
 800f1e8:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800f1ec:	2198      	movs	r1, #152	@ 0x98
 800f1ee:	2001      	movs	r0, #1
 800f1f0:	4798      	blx	r3
 800f1f2:	4680      	mov	r8, r0
 800f1f4:	6030      	str	r0, [r6, #0]
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	f000 80cc 	beq.w	800f394 <rcl_init+0x21c>
 800f1fc:	a802      	add	r0, sp, #8
 800f1fe:	f003 fa23 	bl	8012648 <rmw_get_zero_initialized_context>
 800f202:	a902      	add	r1, sp, #8
 800f204:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 800f208:	2270      	movs	r2, #112	@ 0x70
 800f20a:	f00c fc8c 	bl	801bb26 <memcpy>
 800f20e:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 800f212:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f216:	f8d6 8000 	ldr.w	r8, [r6]
 800f21a:	46c4      	mov	ip, r8
 800f21c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f220:	f8de 3000 	ldr.w	r3, [lr]
 800f224:	f8cc 3000 	str.w	r3, [ip]
 800f228:	f108 0114 	add.w	r1, r8, #20
 800f22c:	4638      	mov	r0, r7
 800f22e:	f000 f965 	bl	800f4fc <rcl_init_options_copy>
 800f232:	4680      	mov	r8, r0
 800f234:	2800      	cmp	r0, #0
 800f236:	d147      	bne.n	800f2c8 <rcl_init+0x150>
 800f238:	f8d6 9000 	ldr.w	r9, [r6]
 800f23c:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800f240:	f8c9 0020 	str.w	r0, [r9, #32]
 800f244:	f8c9 4018 	str.w	r4, [r9, #24]
 800f248:	f8c9 a01c 	str.w	sl, [r9, #28]
 800f24c:	2c00      	cmp	r4, #0
 800f24e:	d04a      	beq.n	800f2e6 <rcl_init+0x16e>
 800f250:	2d00      	cmp	r5, #0
 800f252:	d048      	beq.n	800f2e6 <rcl_init+0x16e>
 800f254:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800f258:	2104      	movs	r1, #4
 800f25a:	4620      	mov	r0, r4
 800f25c:	4798      	blx	r3
 800f25e:	f8c9 0020 	str.w	r0, [r9, #32]
 800f262:	f8d6 9000 	ldr.w	r9, [r6]
 800f266:	f8d9 b020 	ldr.w	fp, [r9, #32]
 800f26a:	f1bb 0f00 	cmp.w	fp, #0
 800f26e:	d029      	beq.n	800f2c4 <rcl_init+0x14c>
 800f270:	2c01      	cmp	r4, #1
 800f272:	f17a 0300 	sbcs.w	r3, sl, #0
 800f276:	db36      	blt.n	800f2e6 <rcl_init+0x16e>
 800f278:	f04f 0800 	mov.w	r8, #0
 800f27c:	3d04      	subs	r5, #4
 800f27e:	46c1      	mov	r9, r8
 800f280:	e00d      	b.n	800f29e <rcl_init+0x126>
 800f282:	6829      	ldr	r1, [r5, #0]
 800f284:	f00c fc4f 	bl	801bb26 <memcpy>
 800f288:	f118 0801 	adds.w	r8, r8, #1
 800f28c:	f149 0900 	adc.w	r9, r9, #0
 800f290:	45ca      	cmp	sl, r9
 800f292:	bf08      	it	eq
 800f294:	4544      	cmpeq	r4, r8
 800f296:	d024      	beq.n	800f2e2 <rcl_init+0x16a>
 800f298:	6833      	ldr	r3, [r6, #0]
 800f29a:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800f29e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f2a2:	f7f1 f815 	bl	80002d0 <strlen>
 800f2a6:	1c42      	adds	r2, r0, #1
 800f2a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f2aa:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800f2ac:	9201      	str	r2, [sp, #4]
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	4798      	blx	r3
 800f2b2:	6833      	ldr	r3, [r6, #0]
 800f2b4:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 800f2b8:	6a1b      	ldr	r3, [r3, #32]
 800f2ba:	9a01      	ldr	r2, [sp, #4]
 800f2bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d1de      	bne.n	800f282 <rcl_init+0x10a>
 800f2c4:	f04f 080a 	mov.w	r8, #10
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f7ff fef5 	bl	800f0b8 <__cleanup_context>
 800f2ce:	4640      	mov	r0, r8
 800f2d0:	b027      	add	sp, #156	@ 0x9c
 800f2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d6:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800f2da:	4640      	mov	r0, r8
 800f2dc:	b027      	add	sp, #156	@ 0x9c
 800f2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2e2:	f8d6 9000 	ldr.w	r9, [r6]
 800f2e6:	4a40      	ldr	r2, [pc, #256]	@ (800f3e8 <rcl_init+0x270>)
 800f2e8:	6813      	ldr	r3, [r2, #0]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	d04d      	beq.n	800f38a <rcl_init+0x212>
 800f2ee:	461d      	mov	r5, r3
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800f2f8:	6073      	str	r3, [r6, #4]
 800f2fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f2fc:	6011      	str	r1, [r2, #0]
 800f2fe:	3301      	adds	r3, #1
 800f300:	e9c4 5006 	strd	r5, r0, [r4, #24]
 800f304:	d05e      	beq.n	800f3c4 <rcl_init+0x24c>
 800f306:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d045      	beq.n	800f39a <rcl_init+0x222>
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	2b01      	cmp	r3, #1
 800f312:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800f316:	d04c      	beq.n	800f3b2 <rcl_init+0x23a>
 800f318:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 800f31c:	2a00      	cmp	r2, #0
 800f31e:	d05c      	beq.n	800f3da <rcl_init+0x262>
 800f320:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f322:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800f326:	b953      	cbnz	r3, 800f33e <rcl_init+0x1c6>
 800f328:	2801      	cmp	r0, #1
 800f32a:	d008      	beq.n	800f33e <rcl_init+0x1c6>
 800f32c:	a921      	add	r1, sp, #132	@ 0x84
 800f32e:	4628      	mov	r0, r5
 800f330:	f009 fa06 	bl	8018740 <rcl_get_discovery_static_peers>
 800f334:	4680      	mov	r8, r0
 800f336:	2800      	cmp	r0, #0
 800f338:	d1c6      	bne.n	800f2c8 <rcl_init+0x150>
 800f33a:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800f33e:	f009 f9f5 	bl	801872c <rcl_automatic_discovery_range_to_string>
 800f342:	6833      	ldr	r3, [r6, #0]
 800f344:	695b      	ldr	r3, [r3, #20]
 800f346:	aa20      	add	r2, sp, #128	@ 0x80
 800f348:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f34a:	a91f      	add	r1, sp, #124	@ 0x7c
 800f34c:	f001 fa4c 	bl	80107e8 <rcl_validate_enclave_name>
 800f350:	4680      	mov	r8, r0
 800f352:	2800      	cmp	r0, #0
 800f354:	d1b8      	bne.n	800f2c8 <rcl_init+0x150>
 800f356:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f358:	bb8b      	cbnz	r3, 800f3be <rcl_init+0x246>
 800f35a:	6831      	ldr	r1, [r6, #0]
 800f35c:	694b      	ldr	r3, [r1, #20]
 800f35e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f360:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f364:	f000 fda8 	bl	800feb8 <rcl_get_security_options_from_environment>
 800f368:	4680      	mov	r8, r0
 800f36a:	2800      	cmp	r0, #0
 800f36c:	d1ac      	bne.n	800f2c8 <rcl_init+0x150>
 800f36e:	6831      	ldr	r1, [r6, #0]
 800f370:	6948      	ldr	r0, [r1, #20]
 800f372:	3128      	adds	r1, #40	@ 0x28
 800f374:	3018      	adds	r0, #24
 800f376:	f003 fc3f 	bl	8012bf8 <rmw_init>
 800f37a:	4680      	mov	r8, r0
 800f37c:	2800      	cmp	r0, #0
 800f37e:	f43f af13 	beq.w	800f1a8 <rcl_init+0x30>
 800f382:	f7ff fe73 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 800f386:	4680      	mov	r8, r0
 800f388:	e79e      	b.n	800f2c8 <rcl_init+0x150>
 800f38a:	2101      	movs	r1, #1
 800f38c:	4618      	mov	r0, r3
 800f38e:	460d      	mov	r5, r1
 800f390:	460b      	mov	r3, r1
 800f392:	e7af      	b.n	800f2f4 <rcl_init+0x17c>
 800f394:	f04f 080a 	mov.w	r8, #10
 800f398:	e706      	b.n	800f1a8 <rcl_init+0x30>
 800f39a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800f39e:	f000 f909 	bl	800f5b4 <rcl_get_localhost_only>
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d18f      	bne.n	800f2c8 <rcl_init+0x150>
 800f3a8:	6832      	ldr	r2, [r6, #0]
 800f3aa:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f3ae:	6954      	ldr	r4, [r2, #20]
 800f3b0:	e7ad      	b.n	800f30e <rcl_init+0x196>
 800f3b2:	2002      	movs	r0, #2
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 800f3ba:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f3bc:	e7bf      	b.n	800f33e <rcl_init+0x1c6>
 800f3be:	f04f 0801 	mov.w	r8, #1
 800f3c2:	e781      	b.n	800f2c8 <rcl_init+0x150>
 800f3c4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f3c8:	f009 fa24 	bl	8018814 <rcl_get_default_domain_id>
 800f3cc:	4680      	mov	r8, r0
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	f47f af7a 	bne.w	800f2c8 <rcl_init+0x150>
 800f3d4:	6833      	ldr	r3, [r6, #0]
 800f3d6:	695c      	ldr	r4, [r3, #20]
 800f3d8:	e795      	b.n	800f306 <rcl_init+0x18e>
 800f3da:	4628      	mov	r0, r5
 800f3dc:	f009 f964 	bl	80186a8 <rcl_get_automatic_discovery_range>
 800f3e0:	4680      	mov	r8, r0
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d09c      	beq.n	800f320 <rcl_init+0x1a8>
 800f3e6:	e76f      	b.n	800f2c8 <rcl_init+0x150>
 800f3e8:	20012cb4 	.word	0x20012cb4

0800f3ec <rcl_get_zero_initialized_init_options>:
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	4770      	bx	lr

0800f3f0 <rcl_init_options_init>:
 800f3f0:	b084      	sub	sp, #16
 800f3f2:	b570      	push	{r4, r5, r6, lr}
 800f3f4:	b09e      	sub	sp, #120	@ 0x78
 800f3f6:	ad23      	add	r5, sp, #140	@ 0x8c
 800f3f8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d046      	beq.n	800f48e <rcl_init_options_init+0x9e>
 800f400:	6803      	ldr	r3, [r0, #0]
 800f402:	4604      	mov	r4, r0
 800f404:	b133      	cbz	r3, 800f414 <rcl_init_options_init+0x24>
 800f406:	2564      	movs	r5, #100	@ 0x64
 800f408:	4628      	mov	r0, r5
 800f40a:	b01e      	add	sp, #120	@ 0x78
 800f40c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f410:	b004      	add	sp, #16
 800f412:	4770      	bx	lr
 800f414:	4628      	mov	r0, r5
 800f416:	f7fd ff63 	bl	800d2e0 <rcutils_allocator_is_valid>
 800f41a:	2800      	cmp	r0, #0
 800f41c:	d037      	beq.n	800f48e <rcl_init_options_init+0x9e>
 800f41e:	46ae      	mov	lr, r5
 800f420:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f424:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800f428:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f42c:	f8de 3000 	ldr.w	r3, [lr]
 800f430:	f8cc 3000 	str.w	r3, [ip]
 800f434:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800f436:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f438:	2070      	movs	r0, #112	@ 0x70
 800f43a:	4798      	blx	r3
 800f43c:	4606      	mov	r6, r0
 800f43e:	6020      	str	r0, [r4, #0]
 800f440:	b338      	cbz	r0, 800f492 <rcl_init_options_init+0xa2>
 800f442:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800f446:	4686      	mov	lr, r0
 800f448:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f44c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f450:	f8dc 3000 	ldr.w	r3, [ip]
 800f454:	f8ce 3000 	str.w	r3, [lr]
 800f458:	a802      	add	r0, sp, #8
 800f45a:	f003 f90d 	bl	8012678 <rmw_get_zero_initialized_init_options>
 800f45e:	2258      	movs	r2, #88	@ 0x58
 800f460:	a902      	add	r1, sp, #8
 800f462:	f106 0018 	add.w	r0, r6, #24
 800f466:	f00c fb5e 	bl	801bb26 <memcpy>
 800f46a:	ab26      	add	r3, sp, #152	@ 0x98
 800f46c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f470:	6826      	ldr	r6, [r4, #0]
 800f472:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f476:	f106 0018 	add.w	r0, r6, #24
 800f47a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800f47e:	f003 fae9 	bl	8012a54 <rmw_init_options_init>
 800f482:	4605      	mov	r5, r0
 800f484:	b938      	cbnz	r0, 800f496 <rcl_init_options_init+0xa6>
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800f48c:	e7bc      	b.n	800f408 <rcl_init_options_init+0x18>
 800f48e:	250b      	movs	r5, #11
 800f490:	e7ba      	b.n	800f408 <rcl_init_options_init+0x18>
 800f492:	250a      	movs	r5, #10
 800f494:	e7b8      	b.n	800f408 <rcl_init_options_init+0x18>
 800f496:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f498:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800f49a:	6820      	ldr	r0, [r4, #0]
 800f49c:	4798      	blx	r3
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f7ff fde4 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	e7af      	b.n	800f408 <rcl_init_options_init+0x18>

0800f4a8 <rcl_init_options_fini>:
 800f4a8:	b530      	push	{r4, r5, lr}
 800f4aa:	b087      	sub	sp, #28
 800f4ac:	b1f0      	cbz	r0, 800f4ec <rcl_init_options_fini+0x44>
 800f4ae:	6803      	ldr	r3, [r0, #0]
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	b1db      	cbz	r3, 800f4ec <rcl_init_options_fini+0x44>
 800f4b4:	469c      	mov	ip, r3
 800f4b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f4ba:	f10d 0e04 	add.w	lr, sp, #4
 800f4be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4c2:	f8dc 3000 	ldr.w	r3, [ip]
 800f4c6:	f8ce 3000 	str.w	r3, [lr]
 800f4ca:	a801      	add	r0, sp, #4
 800f4cc:	f7fd ff08 	bl	800d2e0 <rcutils_allocator_is_valid>
 800f4d0:	b160      	cbz	r0, 800f4ec <rcl_init_options_fini+0x44>
 800f4d2:	6820      	ldr	r0, [r4, #0]
 800f4d4:	3018      	adds	r0, #24
 800f4d6:	f003 fb59 	bl	8012b8c <rmw_init_options_fini>
 800f4da:	4605      	mov	r5, r0
 800f4dc:	b950      	cbnz	r0, 800f4f4 <rcl_init_options_fini+0x4c>
 800f4de:	6820      	ldr	r0, [r4, #0]
 800f4e0:	9b02      	ldr	r3, [sp, #8]
 800f4e2:	9905      	ldr	r1, [sp, #20]
 800f4e4:	4798      	blx	r3
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	b007      	add	sp, #28
 800f4ea:	bd30      	pop	{r4, r5, pc}
 800f4ec:	250b      	movs	r5, #11
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	b007      	add	sp, #28
 800f4f2:	bd30      	pop	{r4, r5, pc}
 800f4f4:	f7ff fdba 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 800f4f8:	4605      	mov	r5, r0
 800f4fa:	e7f8      	b.n	800f4ee <rcl_init_options_fini+0x46>

0800f4fc <rcl_init_options_copy>:
 800f4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4fe:	b09d      	sub	sp, #116	@ 0x74
 800f500:	2800      	cmp	r0, #0
 800f502:	d04a      	beq.n	800f59a <rcl_init_options_copy+0x9e>
 800f504:	4604      	mov	r4, r0
 800f506:	6800      	ldr	r0, [r0, #0]
 800f508:	2800      	cmp	r0, #0
 800f50a:	d046      	beq.n	800f59a <rcl_init_options_copy+0x9e>
 800f50c:	460d      	mov	r5, r1
 800f50e:	f7fd fee7 	bl	800d2e0 <rcutils_allocator_is_valid>
 800f512:	2800      	cmp	r0, #0
 800f514:	d041      	beq.n	800f59a <rcl_init_options_copy+0x9e>
 800f516:	2d00      	cmp	r5, #0
 800f518:	d03f      	beq.n	800f59a <rcl_init_options_copy+0x9e>
 800f51a:	682b      	ldr	r3, [r5, #0]
 800f51c:	b11b      	cbz	r3, 800f526 <rcl_init_options_copy+0x2a>
 800f51e:	2464      	movs	r4, #100	@ 0x64
 800f520:	4620      	mov	r0, r4
 800f522:	b01d      	add	sp, #116	@ 0x74
 800f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f526:	6826      	ldr	r6, [r4, #0]
 800f528:	46b6      	mov	lr, r6
 800f52a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f52e:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800f532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f536:	f8de 3000 	ldr.w	r3, [lr]
 800f53a:	6837      	ldr	r7, [r6, #0]
 800f53c:	f8cc 3000 	str.w	r3, [ip]
 800f540:	4619      	mov	r1, r3
 800f542:	2070      	movs	r0, #112	@ 0x70
 800f544:	47b8      	blx	r7
 800f546:	4606      	mov	r6, r0
 800f548:	6028      	str	r0, [r5, #0]
 800f54a:	b350      	cbz	r0, 800f5a2 <rcl_init_options_copy+0xa6>
 800f54c:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800f550:	4686      	mov	lr, r0
 800f552:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f556:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f55a:	f8dc 3000 	ldr.w	r3, [ip]
 800f55e:	f8ce 3000 	str.w	r3, [lr]
 800f562:	4668      	mov	r0, sp
 800f564:	f003 f888 	bl	8012678 <rmw_get_zero_initialized_init_options>
 800f568:	2258      	movs	r2, #88	@ 0x58
 800f56a:	4669      	mov	r1, sp
 800f56c:	f106 0018 	add.w	r0, r6, #24
 800f570:	f00c fad9 	bl	801bb26 <memcpy>
 800f574:	6820      	ldr	r0, [r4, #0]
 800f576:	6829      	ldr	r1, [r5, #0]
 800f578:	3018      	adds	r0, #24
 800f57a:	3118      	adds	r1, #24
 800f57c:	f003 fad2 	bl	8012b24 <rmw_init_options_copy>
 800f580:	4604      	mov	r4, r0
 800f582:	2800      	cmp	r0, #0
 800f584:	d0cc      	beq.n	800f520 <rcl_init_options_copy+0x24>
 800f586:	f7fd feb9 	bl	800d2fc <rcutils_get_error_string>
 800f58a:	f7fd fecd 	bl	800d328 <rcutils_reset_error>
 800f58e:	4628      	mov	r0, r5
 800f590:	f7ff ff8a 	bl	800f4a8 <rcl_init_options_fini>
 800f594:	b138      	cbz	r0, 800f5a6 <rcl_init_options_copy+0xaa>
 800f596:	4604      	mov	r4, r0
 800f598:	e7c2      	b.n	800f520 <rcl_init_options_copy+0x24>
 800f59a:	240b      	movs	r4, #11
 800f59c:	4620      	mov	r0, r4
 800f59e:	b01d      	add	sp, #116	@ 0x74
 800f5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5a2:	240a      	movs	r4, #10
 800f5a4:	e7bc      	b.n	800f520 <rcl_init_options_copy+0x24>
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	b01d      	add	sp, #116	@ 0x74
 800f5aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f5ae:	f7ff bd5d 	b.w	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 800f5b2:	bf00      	nop

0800f5b4 <rcl_get_localhost_only>:
 800f5b4:	b510      	push	{r4, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	9301      	str	r3, [sp, #4]
 800f5bc:	b1b8      	cbz	r0, 800f5ee <rcl_get_localhost_only+0x3a>
 800f5be:	4604      	mov	r4, r0
 800f5c0:	a901      	add	r1, sp, #4
 800f5c2:	480c      	ldr	r0, [pc, #48]	@ (800f5f4 <rcl_get_localhost_only+0x40>)
 800f5c4:	f002 fd7e 	bl	80120c4 <rcutils_get_env>
 800f5c8:	b110      	cbz	r0, 800f5d0 <rcl_get_localhost_only+0x1c>
 800f5ca:	2001      	movs	r0, #1
 800f5cc:	b002      	add	sp, #8
 800f5ce:	bd10      	pop	{r4, pc}
 800f5d0:	9b01      	ldr	r3, [sp, #4]
 800f5d2:	b10b      	cbz	r3, 800f5d8 <rcl_get_localhost_only+0x24>
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	b923      	cbnz	r3, 800f5e2 <rcl_get_localhost_only+0x2e>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	7023      	strb	r3, [r4, #0]
 800f5dc:	2000      	movs	r0, #0
 800f5de:	b002      	add	sp, #8
 800f5e0:	bd10      	pop	{r4, pc}
 800f5e2:	2b31      	cmp	r3, #49	@ 0x31
 800f5e4:	bf14      	ite	ne
 800f5e6:	2302      	movne	r3, #2
 800f5e8:	2301      	moveq	r3, #1
 800f5ea:	7023      	strb	r3, [r4, #0]
 800f5ec:	e7f6      	b.n	800f5dc <rcl_get_localhost_only+0x28>
 800f5ee:	200b      	movs	r0, #11
 800f5f0:	b002      	add	sp, #8
 800f5f2:	bd10      	pop	{r4, pc}
 800f5f4:	0801f5f8 	.word	0x0801f5f8

0800f5f8 <rcl_get_zero_initialized_node>:
 800f5f8:	4a03      	ldr	r2, [pc, #12]	@ (800f608 <rcl_get_zero_initialized_node+0x10>)
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f600:	e883 0003 	stmia.w	r3, {r0, r1}
 800f604:	4618      	mov	r0, r3
 800f606:	4770      	bx	lr
 800f608:	0801f644 	.word	0x0801f644

0800f60c <rcl_node_init>:
 800f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f610:	b0ab      	sub	sp, #172	@ 0xac
 800f612:	4604      	mov	r4, r0
 800f614:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800f616:	a825      	add	r0, sp, #148	@ 0x94
 800f618:	4689      	mov	r9, r1
 800f61a:	4690      	mov	r8, r2
 800f61c:	461f      	mov	r7, r3
 800f61e:	f009 fb17 	bl	8018c50 <rcl_guard_condition_get_default_options>
 800f622:	2d00      	cmp	r5, #0
 800f624:	f000 80d8 	beq.w	800f7d8 <rcl_node_init+0x1cc>
 800f628:	4628      	mov	r0, r5
 800f62a:	f7fd fe59 	bl	800d2e0 <rcutils_allocator_is_valid>
 800f62e:	2800      	cmp	r0, #0
 800f630:	f000 80d2 	beq.w	800f7d8 <rcl_node_init+0x1cc>
 800f634:	f1b9 0f00 	cmp.w	r9, #0
 800f638:	f000 80ce 	beq.w	800f7d8 <rcl_node_init+0x1cc>
 800f63c:	f1b8 0f00 	cmp.w	r8, #0
 800f640:	f000 80ca 	beq.w	800f7d8 <rcl_node_init+0x1cc>
 800f644:	2c00      	cmp	r4, #0
 800f646:	f000 80c7 	beq.w	800f7d8 <rcl_node_init+0x1cc>
 800f64a:	6866      	ldr	r6, [r4, #4]
 800f64c:	2e00      	cmp	r6, #0
 800f64e:	f040 80ca 	bne.w	800f7e6 <rcl_node_init+0x1da>
 800f652:	2f00      	cmp	r7, #0
 800f654:	f000 80c0 	beq.w	800f7d8 <rcl_node_init+0x1cc>
 800f658:	4638      	mov	r0, r7
 800f65a:	f7ff fd27 	bl	800f0ac <rcl_context_is_valid>
 800f65e:	2800      	cmp	r0, #0
 800f660:	f000 80bf 	beq.w	800f7e2 <rcl_node_init+0x1d6>
 800f664:	4632      	mov	r2, r6
 800f666:	a924      	add	r1, sp, #144	@ 0x90
 800f668:	4648      	mov	r0, r9
 800f66a:	9624      	str	r6, [sp, #144]	@ 0x90
 800f66c:	f003 f932 	bl	80128d4 <rmw_validate_node_name>
 800f670:	4606      	mov	r6, r0
 800f672:	2800      	cmp	r0, #0
 800f674:	f040 80b1 	bne.w	800f7da <rcl_node_init+0x1ce>
 800f678:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f67a:	2800      	cmp	r0, #0
 800f67c:	f040 8104 	bne.w	800f888 <rcl_node_init+0x27c>
 800f680:	f898 3000 	ldrb.w	r3, [r8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	f000 80f0 	beq.w	800f86a <rcl_node_init+0x25e>
 800f68a:	2b2f      	cmp	r3, #47	@ 0x2f
 800f68c:	f000 80b0 	beq.w	800f7f0 <rcl_node_init+0x1e4>
 800f690:	4b85      	ldr	r3, [pc, #532]	@ (800f8a8 <rcl_node_init+0x29c>)
 800f692:	f8cd 800c 	str.w	r8, [sp, #12]
 800f696:	9302      	str	r3, [sp, #8]
 800f698:	692b      	ldr	r3, [r5, #16]
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f6a0:	9301      	str	r3, [sp, #4]
 800f6a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f6a6:	f002 fd35 	bl	8012114 <rcutils_format_string_limit>
 800f6aa:	4680      	mov	r8, r0
 800f6ac:	f1b8 0f00 	cmp.w	r8, #0
 800f6b0:	f000 80e8 	beq.w	800f884 <rcl_node_init+0x278>
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	a924      	add	r1, sp, #144	@ 0x90
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	9224      	str	r2, [sp, #144]	@ 0x90
 800f6bc:	f003 f8ec 	bl	8012898 <rmw_validate_namespace>
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	f040 80a4 	bne.w	800f810 <rcl_node_init+0x204>
 800f6c8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	f040 809d 	bne.w	800f80a <rcl_node_init+0x1fe>
 800f6d0:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800f6d4:	2178      	movs	r1, #120	@ 0x78
 800f6d6:	2001      	movs	r0, #1
 800f6d8:	4798      	blx	r3
 800f6da:	4606      	mov	r6, r0
 800f6dc:	6060      	str	r0, [r4, #4]
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	f000 80d6 	beq.w	800f890 <rcl_node_init+0x284>
 800f6e4:	a80a      	add	r0, sp, #40	@ 0x28
 800f6e6:	f000 f92f 	bl	800f948 <rcl_node_get_default_options>
 800f6ea:	a90a      	add	r1, sp, #40	@ 0x28
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	2268      	movs	r2, #104	@ 0x68
 800f6f0:	f00c fa19 	bl	801bb26 <memcpy>
 800f6f4:	6861      	ldr	r1, [r4, #4]
 800f6f6:	6027      	str	r7, [r4, #0]
 800f6f8:	4628      	mov	r0, r5
 800f6fa:	f000 f933 	bl	800f964 <rcl_node_options_copy>
 800f6fe:	4606      	mov	r6, r0
 800f700:	2800      	cmp	r0, #0
 800f702:	f040 8085 	bne.w	800f810 <rcl_node_init+0x204>
 800f706:	4640      	mov	r0, r8
 800f708:	f7f0 fde2 	bl	80002d0 <strlen>
 800f70c:	eb08 0300 	add.w	r3, r8, r0
 800f710:	6866      	ldr	r6, [r4, #4]
 800f712:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f716:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800f71a:	2b2f      	cmp	r3, #47	@ 0x2f
 800f71c:	bf0c      	ite	eq
 800f71e:	4b63      	ldreq	r3, [pc, #396]	@ (800f8ac <rcl_node_init+0x2a0>)
 800f720:	4b63      	ldrne	r3, [pc, #396]	@ (800f8b0 <rcl_node_init+0x2a4>)
 800f722:	9302      	str	r3, [sp, #8]
 800f724:	692b      	ldr	r3, [r5, #16]
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f72c:	9301      	str	r3, [sp, #4]
 800f72e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f732:	f002 fcef 	bl	8012114 <rcutils_format_string_limit>
 800f736:	6863      	ldr	r3, [r4, #4]
 800f738:	6770      	str	r0, [r6, #116]	@ 0x74
 800f73a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800f73c:	2a00      	cmp	r2, #0
 800f73e:	f000 80a9 	beq.w	800f894 <rcl_node_init+0x288>
 800f742:	6822      	ldr	r2, [r4, #0]
 800f744:	9307      	str	r3, [sp, #28]
 800f746:	6810      	ldr	r0, [r2, #0]
 800f748:	4649      	mov	r1, r9
 800f74a:	3028      	adds	r0, #40	@ 0x28
 800f74c:	4642      	mov	r2, r8
 800f74e:	f003 fc35 	bl	8012fbc <rmw_create_node>
 800f752:	9b07      	ldr	r3, [sp, #28]
 800f754:	6698      	str	r0, [r3, #104]	@ 0x68
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800f75a:	2800      	cmp	r0, #0
 800f75c:	f000 809d 	beq.w	800f89a <rcl_node_init+0x28e>
 800f760:	f003 fcbe 	bl	80130e0 <rmw_node_get_graph_guard_condition>
 800f764:	4681      	mov	r9, r0
 800f766:	2800      	cmp	r0, #0
 800f768:	f000 809c 	beq.w	800f8a4 <rcl_node_init+0x298>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	6929      	ldr	r1, [r5, #16]
 800f770:	6866      	ldr	r6, [r4, #4]
 800f772:	2008      	movs	r0, #8
 800f774:	4798      	blx	r3
 800f776:	6863      	ldr	r3, [r4, #4]
 800f778:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800f77a:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800f77e:	f1ba 0f00 	cmp.w	sl, #0
 800f782:	f000 808d 	beq.w	800f8a0 <rcl_node_init+0x294>
 800f786:	f10d 0b20 	add.w	fp, sp, #32
 800f78a:	4658      	mov	r0, fp
 800f78c:	f009 f9d4 	bl	8018b38 <rcl_get_zero_initialized_guard_condition>
 800f790:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800f794:	6863      	ldr	r3, [r4, #4]
 800f796:	46ac      	mov	ip, r5
 800f798:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800f79c:	e88a 0003 	stmia.w	sl, {r0, r1}
 800f7a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f7a4:	ae25      	add	r6, sp, #148	@ 0x94
 800f7a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f7a8:	f8dc 3000 	ldr.w	r3, [ip]
 800f7ac:	6033      	str	r3, [r6, #0]
 800f7ae:	ab2a      	add	r3, sp, #168	@ 0xa8
 800f7b0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f7b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f7b8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800f7ba:	463a      	mov	r2, r7
 800f7bc:	4649      	mov	r1, r9
 800f7be:	4670      	mov	r0, lr
 800f7c0:	f009 f9c4 	bl	8018b4c <rcl_guard_condition_init_from_rmw>
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	bb18      	cbnz	r0, 800f810 <rcl_node_init+0x204>
 800f7c8:	686b      	ldr	r3, [r5, #4]
 800f7ca:	6929      	ldr	r1, [r5, #16]
 800f7cc:	4798      	blx	r3
 800f7ce:	686b      	ldr	r3, [r5, #4]
 800f7d0:	6929      	ldr	r1, [r5, #16]
 800f7d2:	4640      	mov	r0, r8
 800f7d4:	4798      	blx	r3
 800f7d6:	e000      	b.n	800f7da <rcl_node_init+0x1ce>
 800f7d8:	260b      	movs	r6, #11
 800f7da:	4630      	mov	r0, r6
 800f7dc:	b02b      	add	sp, #172	@ 0xac
 800f7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e2:	2665      	movs	r6, #101	@ 0x65
 800f7e4:	e7f9      	b.n	800f7da <rcl_node_init+0x1ce>
 800f7e6:	2664      	movs	r6, #100	@ 0x64
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	b02b      	add	sp, #172	@ 0xac
 800f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f0:	f105 030c 	add.w	r3, r5, #12
 800f7f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f7f8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f7fc:	4640      	mov	r0, r8
 800f7fe:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800f802:	f002 fda5 	bl	8012350 <rcutils_strdup>
 800f806:	4680      	mov	r8, r0
 800f808:	e750      	b.n	800f6ac <rcl_node_init+0xa0>
 800f80a:	f003 f857 	bl	80128bc <rmw_namespace_validation_result_string>
 800f80e:	26ca      	movs	r6, #202	@ 0xca
 800f810:	6863      	ldr	r3, [r4, #4]
 800f812:	b1f3      	cbz	r3, 800f852 <rcl_node_init+0x246>
 800f814:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f816:	b138      	cbz	r0, 800f828 <rcl_node_init+0x21c>
 800f818:	f009 f9f8 	bl	8018c0c <rcl_guard_condition_fini>
 800f81c:	6863      	ldr	r3, [r4, #4]
 800f81e:	6929      	ldr	r1, [r5, #16]
 800f820:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f822:	686b      	ldr	r3, [r5, #4]
 800f824:	4798      	blx	r3
 800f826:	6863      	ldr	r3, [r4, #4]
 800f828:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800f82a:	b110      	cbz	r0, 800f832 <rcl_node_init+0x226>
 800f82c:	f003 fbdc 	bl	8012fe8 <rmw_destroy_node>
 800f830:	6863      	ldr	r3, [r4, #4]
 800f832:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800f834:	6929      	ldr	r1, [r5, #16]
 800f836:	686b      	ldr	r3, [r5, #4]
 800f838:	4798      	blx	r3
 800f83a:	6863      	ldr	r3, [r4, #4]
 800f83c:	6929      	ldr	r1, [r5, #16]
 800f83e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f840:	686b      	ldr	r3, [r5, #4]
 800f842:	4798      	blx	r3
 800f844:	6860      	ldr	r0, [r4, #4]
 800f846:	f000 f8ab 	bl	800f9a0 <rcl_node_options_fini>
 800f84a:	686b      	ldr	r3, [r5, #4]
 800f84c:	6929      	ldr	r1, [r5, #16]
 800f84e:	6860      	ldr	r0, [r4, #4]
 800f850:	4798      	blx	r3
 800f852:	686b      	ldr	r3, [r5, #4]
 800f854:	6929      	ldr	r1, [r5, #16]
 800f856:	2000      	movs	r0, #0
 800f858:	4798      	blx	r3
 800f85a:	686b      	ldr	r3, [r5, #4]
 800f85c:	6929      	ldr	r1, [r5, #16]
 800f85e:	4640      	mov	r0, r8
 800f860:	4798      	blx	r3
 800f862:	2300      	movs	r3, #0
 800f864:	e9c4 3300 	strd	r3, r3, [r4]
 800f868:	e7b7      	b.n	800f7da <rcl_node_init+0x1ce>
 800f86a:	f105 030c 	add.w	r3, r5, #12
 800f86e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f872:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f876:	480f      	ldr	r0, [pc, #60]	@ (800f8b4 <rcl_node_init+0x2a8>)
 800f878:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800f87c:	f002 fd68 	bl	8012350 <rcutils_strdup>
 800f880:	4680      	mov	r8, r0
 800f882:	e713      	b.n	800f6ac <rcl_node_init+0xa0>
 800f884:	260a      	movs	r6, #10
 800f886:	e7a8      	b.n	800f7da <rcl_node_init+0x1ce>
 800f888:	f003 f870 	bl	801296c <rmw_node_name_validation_result_string>
 800f88c:	26c9      	movs	r6, #201	@ 0xc9
 800f88e:	e7a4      	b.n	800f7da <rcl_node_init+0x1ce>
 800f890:	260a      	movs	r6, #10
 800f892:	e7de      	b.n	800f852 <rcl_node_init+0x246>
 800f894:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f896:	260a      	movs	r6, #10
 800f898:	e7bd      	b.n	800f816 <rcl_node_init+0x20a>
 800f89a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f89c:	2601      	movs	r6, #1
 800f89e:	e7ba      	b.n	800f816 <rcl_node_init+0x20a>
 800f8a0:	260a      	movs	r6, #10
 800f8a2:	e7c1      	b.n	800f828 <rcl_node_init+0x21c>
 800f8a4:	2601      	movs	r6, #1
 800f8a6:	e7b3      	b.n	800f810 <rcl_node_init+0x204>
 800f8a8:	0801f614 	.word	0x0801f614
 800f8ac:	0801f618 	.word	0x0801f618
 800f8b0:	0801f620 	.word	0x0801f620
 800f8b4:	0801f610 	.word	0x0801f610

0800f8b8 <rcl_node_is_valid>:
 800f8b8:	b130      	cbz	r0, 800f8c8 <rcl_node_is_valid+0x10>
 800f8ba:	6843      	ldr	r3, [r0, #4]
 800f8bc:	b123      	cbz	r3, 800f8c8 <rcl_node_is_valid+0x10>
 800f8be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f8c0:	b113      	cbz	r3, 800f8c8 <rcl_node_is_valid+0x10>
 800f8c2:	6800      	ldr	r0, [r0, #0]
 800f8c4:	f7ff bbf2 	b.w	800f0ac <rcl_context_is_valid>
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	4770      	bx	lr

0800f8cc <rcl_node_get_name>:
 800f8cc:	b120      	cbz	r0, 800f8d8 <rcl_node_get_name+0xc>
 800f8ce:	6840      	ldr	r0, [r0, #4]
 800f8d0:	b110      	cbz	r0, 800f8d8 <rcl_node_get_name+0xc>
 800f8d2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f8d4:	b100      	cbz	r0, 800f8d8 <rcl_node_get_name+0xc>
 800f8d6:	6880      	ldr	r0, [r0, #8]
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop

0800f8dc <rcl_node_get_namespace>:
 800f8dc:	b120      	cbz	r0, 800f8e8 <rcl_node_get_namespace+0xc>
 800f8de:	6840      	ldr	r0, [r0, #4]
 800f8e0:	b110      	cbz	r0, 800f8e8 <rcl_node_get_namespace+0xc>
 800f8e2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f8e4:	b100      	cbz	r0, 800f8e8 <rcl_node_get_namespace+0xc>
 800f8e6:	68c0      	ldr	r0, [r0, #12]
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop

0800f8ec <rcl_node_get_options>:
 800f8ec:	b128      	cbz	r0, 800f8fa <rcl_node_get_options+0xe>
 800f8ee:	6840      	ldr	r0, [r0, #4]
 800f8f0:	b118      	cbz	r0, 800f8fa <rcl_node_get_options+0xe>
 800f8f2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	bf08      	it	eq
 800f8f8:	2000      	moveq	r0, #0
 800f8fa:	4770      	bx	lr

0800f8fc <rcl_node_get_rmw_handle>:
 800f8fc:	b110      	cbz	r0, 800f904 <rcl_node_get_rmw_handle+0x8>
 800f8fe:	6840      	ldr	r0, [r0, #4]
 800f900:	b100      	cbz	r0, 800f904 <rcl_node_get_rmw_handle+0x8>
 800f902:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop

0800f908 <rcl_get_disable_loaned_message>:
 800f908:	b510      	push	{r4, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	2300      	movs	r3, #0
 800f90e:	9301      	str	r3, [sp, #4]
 800f910:	b1a0      	cbz	r0, 800f93c <rcl_get_disable_loaned_message+0x34>
 800f912:	4604      	mov	r4, r0
 800f914:	a901      	add	r1, sp, #4
 800f916:	480b      	ldr	r0, [pc, #44]	@ (800f944 <rcl_get_disable_loaned_message+0x3c>)
 800f918:	f002 fbd4 	bl	80120c4 <rcutils_get_env>
 800f91c:	b110      	cbz	r0, 800f924 <rcl_get_disable_loaned_message+0x1c>
 800f91e:	2001      	movs	r0, #1
 800f920:	b002      	add	sp, #8
 800f922:	bd10      	pop	{r4, pc}
 800f924:	9a01      	ldr	r2, [sp, #4]
 800f926:	7813      	ldrb	r3, [r2, #0]
 800f928:	3b31      	subs	r3, #49	@ 0x31
 800f92a:	bf08      	it	eq
 800f92c:	7853      	ldrbeq	r3, [r2, #1]
 800f92e:	fab3 f383 	clz	r3, r3
 800f932:	095b      	lsrs	r3, r3, #5
 800f934:	2000      	movs	r0, #0
 800f936:	7023      	strb	r3, [r4, #0]
 800f938:	b002      	add	sp, #8
 800f93a:	bd10      	pop	{r4, pc}
 800f93c:	200b      	movs	r0, #11
 800f93e:	b002      	add	sp, #8
 800f940:	bd10      	pop	{r4, pc}
 800f942:	bf00      	nop
 800f944:	0801f628 	.word	0x0801f628

0800f948 <rcl_node_get_default_options>:
 800f948:	b510      	push	{r4, lr}
 800f94a:	2253      	movs	r2, #83	@ 0x53
 800f94c:	4604      	mov	r4, r0
 800f94e:	2100      	movs	r1, #0
 800f950:	3015      	adds	r0, #21
 800f952:	f00b ffb3 	bl	801b8bc <memset>
 800f956:	4620      	mov	r0, r4
 800f958:	f7fd fc96 	bl	800d288 <rcutils_get_default_allocator>
 800f95c:	2301      	movs	r3, #1
 800f95e:	7523      	strb	r3, [r4, #20]
 800f960:	4620      	mov	r0, r4
 800f962:	bd10      	pop	{r4, pc}

0800f964 <rcl_node_options_copy>:
 800f964:	b1d0      	cbz	r0, 800f99c <rcl_node_options_copy+0x38>
 800f966:	b570      	push	{r4, r5, r6, lr}
 800f968:	460c      	mov	r4, r1
 800f96a:	b1a9      	cbz	r1, 800f998 <rcl_node_options_copy+0x34>
 800f96c:	4288      	cmp	r0, r1
 800f96e:	4684      	mov	ip, r0
 800f970:	d012      	beq.n	800f998 <rcl_node_options_copy+0x34>
 800f972:	4605      	mov	r5, r0
 800f974:	8a86      	ldrh	r6, [r0, #20]
 800f976:	468e      	mov	lr, r1
 800f978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f97a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	f8ce 3000 	str.w	r3, [lr]
 800f984:	f10c 0118 	add.w	r1, ip, #24
 800f988:	2250      	movs	r2, #80	@ 0x50
 800f98a:	82a6      	strh	r6, [r4, #20]
 800f98c:	f104 0018 	add.w	r0, r4, #24
 800f990:	f00c f8c9 	bl	801bb26 <memcpy>
 800f994:	2000      	movs	r0, #0
 800f996:	bd70      	pop	{r4, r5, r6, pc}
 800f998:	200b      	movs	r0, #11
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	200b      	movs	r0, #11
 800f99e:	4770      	bx	lr

0800f9a0 <rcl_node_options_fini>:
 800f9a0:	b1c0      	cbz	r0, 800f9d4 <rcl_node_options_fini+0x34>
 800f9a2:	b500      	push	{lr}
 800f9a4:	4684      	mov	ip, r0
 800f9a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f9aa:	b087      	sub	sp, #28
 800f9ac:	f10d 0e04 	add.w	lr, sp, #4
 800f9b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f9b4:	f8dc 3000 	ldr.w	r3, [ip]
 800f9b8:	f8ce 3000 	str.w	r3, [lr]
 800f9bc:	a801      	add	r0, sp, #4
 800f9be:	f7fd fc8f 	bl	800d2e0 <rcutils_allocator_is_valid>
 800f9c2:	b118      	cbz	r0, 800f9cc <rcl_node_options_fini+0x2c>
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	b007      	add	sp, #28
 800f9c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9cc:	200b      	movs	r0, #11
 800f9ce:	b007      	add	sp, #28
 800f9d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9d4:	200b      	movs	r0, #11
 800f9d6:	4770      	bx	lr

0800f9d8 <rcl_node_resolve_name>:
 800f9d8:	b082      	sub	sp, #8
 800f9da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9de:	b091      	sub	sp, #68	@ 0x44
 800f9e0:	ac1a      	add	r4, sp, #104	@ 0x68
 800f9e2:	e884 000c 	stmia.w	r4, {r2, r3}
 800f9e6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	d03a      	beq.n	800fa64 <rcl_node_resolve_name+0x8c>
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	f7ff ff7b 	bl	800f8ec <rcl_node_get_options>
 800f9f6:	b370      	cbz	r0, 800fa56 <rcl_node_resolve_name+0x7e>
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f7ff ff67 	bl	800f8cc <rcl_node_get_name>
 800f9fe:	4681      	mov	r9, r0
 800fa00:	4628      	mov	r0, r5
 800fa02:	f7ff ff6b 	bl	800f8dc <rcl_node_get_namespace>
 800fa06:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800fa0a:	4607      	mov	r7, r0
 800fa0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa10:	ad0b      	add	r5, sp, #44	@ 0x2c
 800fa12:	46ac      	mov	ip, r5
 800fa14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa18:	f8de 3000 	ldr.w	r3, [lr]
 800fa1c:	f8cc 3000 	str.w	r3, [ip]
 800fa20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa22:	b1fb      	cbz	r3, 800fa64 <rcl_node_resolve_name+0x8c>
 800fa24:	468a      	mov	sl, r1
 800fa26:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800fa2a:	f002 fcf1 	bl	8012410 <rcutils_get_zero_initialized_string_map>
 800fa2e:	ab10      	add	r3, sp, #64	@ 0x40
 800fa30:	9008      	str	r0, [sp, #32]
 800fa32:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fa36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fa40:	a808      	add	r0, sp, #32
 800fa42:	f002 fd3f 	bl	80124c4 <rcutils_string_map_init>
 800fa46:	4606      	mov	r6, r0
 800fa48:	b170      	cbz	r0, 800fa68 <rcl_node_resolve_name+0x90>
 800fa4a:	f7fd fc57 	bl	800d2fc <rcutils_get_error_string>
 800fa4e:	f7fd fc6b 	bl	800d328 <rcutils_reset_error>
 800fa52:	2e0a      	cmp	r6, #10
 800fa54:	d000      	beq.n	800fa58 <rcl_node_resolve_name+0x80>
 800fa56:	2601      	movs	r6, #1
 800fa58:	4630      	mov	r0, r6
 800fa5a:	b011      	add	sp, #68	@ 0x44
 800fa5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa60:	b002      	add	sp, #8
 800fa62:	4770      	bx	lr
 800fa64:	260b      	movs	r6, #11
 800fa66:	e7f7      	b.n	800fa58 <rcl_node_resolve_name+0x80>
 800fa68:	9009      	str	r0, [sp, #36]	@ 0x24
 800fa6a:	9007      	str	r0, [sp, #28]
 800fa6c:	a808      	add	r0, sp, #32
 800fa6e:	f009 f85d 	bl	8018b2c <rcl_get_default_topic_name_substitutions>
 800fa72:	4606      	mov	r6, r0
 800fa74:	b1b0      	cbz	r0, 800faa4 <rcl_node_resolve_name+0xcc>
 800fa76:	280a      	cmp	r0, #10
 800fa78:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800fa7c:	d000      	beq.n	800fa80 <rcl_node_resolve_name+0xa8>
 800fa7e:	2601      	movs	r6, #1
 800fa80:	a808      	add	r0, sp, #32
 800fa82:	f002 fd5d 	bl	8012540 <rcutils_string_map_fini>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d132      	bne.n	800faf0 <rcl_node_resolve_name+0x118>
 800fa8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa8c:	4659      	mov	r1, fp
 800fa8e:	47d0      	blx	sl
 800fa90:	4659      	mov	r1, fp
 800fa92:	4648      	mov	r0, r9
 800fa94:	47d0      	blx	sl
 800fa96:	f1b8 0f00 	cmp.w	r8, #0
 800fa9a:	d0dd      	beq.n	800fa58 <rcl_node_resolve_name+0x80>
 800fa9c:	2e67      	cmp	r6, #103	@ 0x67
 800fa9e:	bf08      	it	eq
 800faa0:	2668      	moveq	r6, #104	@ 0x68
 800faa2:	e7d9      	b.n	800fa58 <rcl_node_resolve_name+0x80>
 800faa4:	ab09      	add	r3, sp, #36	@ 0x24
 800faa6:	9305      	str	r3, [sp, #20]
 800faa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faaa:	46ec      	mov	ip, sp
 800faac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fab0:	682b      	ldr	r3, [r5, #0]
 800fab2:	f8cc 3000 	str.w	r3, [ip]
 800fab6:	463a      	mov	r2, r7
 800fab8:	4649      	mov	r1, r9
 800faba:	4620      	mov	r0, r4
 800fabc:	ab08      	add	r3, sp, #32
 800fabe:	f008 fed7 	bl	8018870 <rcl_expand_topic_name>
 800fac2:	4606      	mov	r6, r0
 800fac4:	b9c8      	cbnz	r0, 800fafa <rcl_node_resolve_name+0x122>
 800fac6:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800faca:	9009      	str	r0, [sp, #36]	@ 0x24
 800facc:	4602      	mov	r2, r0
 800face:	a90a      	add	r1, sp, #40	@ 0x28
 800fad0:	4648      	mov	r0, r9
 800fad2:	f002 fe29 	bl	8012728 <rmw_validate_full_topic_name>
 800fad6:	b998      	cbnz	r0, 800fb00 <rcl_node_resolve_name+0x128>
 800fad8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fada:	bb14      	cbnz	r4, 800fb22 <rcl_node_resolve_name+0x14a>
 800fadc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fade:	a808      	add	r0, sp, #32
 800fae0:	f8c3 9000 	str.w	r9, [r3]
 800fae4:	f002 fd2c 	bl	8012540 <rcutils_string_map_fini>
 800fae8:	4606      	mov	r6, r0
 800faea:	b978      	cbnz	r0, 800fb0c <rcl_node_resolve_name+0x134>
 800faec:	4681      	mov	r9, r0
 800faee:	e7cc      	b.n	800fa8a <rcl_node_resolve_name+0xb2>
 800faf0:	f7fd fc04 	bl	800d2fc <rcutils_get_error_string>
 800faf4:	f7fd fc18 	bl	800d328 <rcutils_reset_error>
 800faf8:	e7c7      	b.n	800fa8a <rcl_node_resolve_name+0xb2>
 800fafa:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800fafe:	e7bf      	b.n	800fa80 <rcl_node_resolve_name+0xa8>
 800fb00:	f7fd fbfc 	bl	800d2fc <rcutils_get_error_string>
 800fb04:	2601      	movs	r6, #1
 800fb06:	f7fd fc0f 	bl	800d328 <rcutils_reset_error>
 800fb0a:	e7b9      	b.n	800fa80 <rcl_node_resolve_name+0xa8>
 800fb0c:	f7fd fbf6 	bl	800d2fc <rcutils_get_error_string>
 800fb10:	f7fd fc0a 	bl	800d328 <rcutils_reset_error>
 800fb14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb16:	4659      	mov	r1, fp
 800fb18:	47d0      	blx	sl
 800fb1a:	4659      	mov	r1, fp
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	47d0      	blx	sl
 800fb20:	e799      	b.n	800fa56 <rcl_node_resolve_name+0x7e>
 800fb22:	2667      	movs	r6, #103	@ 0x67
 800fb24:	e7ac      	b.n	800fa80 <rcl_node_resolve_name+0xa8>
 800fb26:	bf00      	nop

0800fb28 <rcl_get_zero_initialized_publisher>:
 800fb28:	4b01      	ldr	r3, [pc, #4]	@ (800fb30 <rcl_get_zero_initialized_publisher+0x8>)
 800fb2a:	6818      	ldr	r0, [r3, #0]
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	0801f64c 	.word	0x0801f64c

0800fb34 <rcl_publisher_init>:
 800fb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb38:	b088      	sub	sp, #32
 800fb3a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800fb3c:	2d00      	cmp	r5, #0
 800fb3e:	d06a      	beq.n	800fc16 <rcl_publisher_init+0xe2>
 800fb40:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800fb44:	4604      	mov	r4, r0
 800fb46:	4648      	mov	r0, r9
 800fb48:	460e      	mov	r6, r1
 800fb4a:	4690      	mov	r8, r2
 800fb4c:	461f      	mov	r7, r3
 800fb4e:	f7fd fbc7 	bl	800d2e0 <rcutils_allocator_is_valid>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d05f      	beq.n	800fc16 <rcl_publisher_init+0xe2>
 800fb56:	2c00      	cmp	r4, #0
 800fb58:	d05d      	beq.n	800fc16 <rcl_publisher_init+0xe2>
 800fb5a:	f8d4 a000 	ldr.w	sl, [r4]
 800fb5e:	f1ba 0f00 	cmp.w	sl, #0
 800fb62:	d004      	beq.n	800fb6e <rcl_publisher_init+0x3a>
 800fb64:	2764      	movs	r7, #100	@ 0x64
 800fb66:	4638      	mov	r0, r7
 800fb68:	b008      	add	sp, #32
 800fb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f7ff fea2 	bl	800f8b8 <rcl_node_is_valid>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d053      	beq.n	800fc20 <rcl_publisher_init+0xec>
 800fb78:	f1b8 0f00 	cmp.w	r8, #0
 800fb7c:	d04b      	beq.n	800fc16 <rcl_publisher_init+0xe2>
 800fb7e:	2f00      	cmp	r7, #0
 800fb80:	d049      	beq.n	800fc16 <rcl_publisher_init+0xe2>
 800fb82:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800fb86:	aa07      	add	r2, sp, #28
 800fb88:	9205      	str	r2, [sp, #20]
 800fb8a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800fb8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fb96:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fba0:	4630      	mov	r0, r6
 800fba2:	f7ff ff19 	bl	800f9d8 <rcl_node_resolve_name>
 800fba6:	4607      	mov	r7, r0
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	d150      	bne.n	800fc4e <rcl_publisher_init+0x11a>
 800fbac:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800fbb0:	21c8      	movs	r1, #200	@ 0xc8
 800fbb2:	2001      	movs	r0, #1
 800fbb4:	4798      	blx	r3
 800fbb6:	6020      	str	r0, [r4, #0]
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d04e      	beq.n	800fc5a <rcl_publisher_init+0x126>
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	f7ff fe9d 	bl	800f8fc <rcl_node_get_rmw_handle>
 800fbc2:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	9a07      	ldr	r2, [sp, #28]
 800fbca:	6827      	ldr	r7, [r4, #0]
 800fbcc:	462b      	mov	r3, r5
 800fbce:	4641      	mov	r1, r8
 800fbd0:	f003 faf0 	bl	80131b4 <rmw_create_publisher>
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800fbda:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800fbde:	b370      	cbz	r0, 800fc3e <rcl_publisher_init+0x10a>
 800fbe0:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800fbe4:	f003 fbc2 	bl	801336c <rmw_publisher_get_actual_qos>
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	4607      	mov	r7, r0
 800fbec:	b9d0      	cbnz	r0, 800fc24 <rcl_publisher_init+0xf0>
 800fbee:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800fbf2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fbf6:	4629      	mov	r1, r5
 800fbf8:	2270      	movs	r2, #112	@ 0x70
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f00b ff93 	bl	801bb26 <memcpy>
 800fc00:	6832      	ldr	r2, [r6, #0]
 800fc02:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800fc06:	9807      	ldr	r0, [sp, #28]
 800fc08:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800fc0a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800fc0c:	4798      	blx	r3
 800fc0e:	4638      	mov	r0, r7
 800fc10:	b008      	add	sp, #32
 800fc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc16:	270b      	movs	r7, #11
 800fc18:	4638      	mov	r0, r7
 800fc1a:	b008      	add	sp, #32
 800fc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc20:	27c8      	movs	r7, #200	@ 0xc8
 800fc22:	e7a0      	b.n	800fb66 <rcl_publisher_init+0x32>
 800fc24:	b18b      	cbz	r3, 800fc4a <rcl_publisher_init+0x116>
 800fc26:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800fc2a:	b142      	cbz	r2, 800fc3e <rcl_publisher_init+0x10a>
 800fc2c:	4630      	mov	r0, r6
 800fc2e:	f7ff fe65 	bl	800f8fc <rcl_node_get_rmw_handle>
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800fc38:	f003 fba6 	bl	8013388 <rmw_destroy_publisher>
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800fc40:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800fc42:	4618      	mov	r0, r3
 800fc44:	4790      	blx	r2
 800fc46:	2300      	movs	r3, #0
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	2701      	movs	r7, #1
 800fc4c:	e7db      	b.n	800fc06 <rcl_publisher_init+0xd2>
 800fc4e:	2867      	cmp	r0, #103	@ 0x67
 800fc50:	d0d9      	beq.n	800fc06 <rcl_publisher_init+0xd2>
 800fc52:	2869      	cmp	r0, #105	@ 0x69
 800fc54:	d003      	beq.n	800fc5e <rcl_publisher_init+0x12a>
 800fc56:	280a      	cmp	r0, #10
 800fc58:	d1f7      	bne.n	800fc4a <rcl_publisher_init+0x116>
 800fc5a:	270a      	movs	r7, #10
 800fc5c:	e7d3      	b.n	800fc06 <rcl_publisher_init+0xd2>
 800fc5e:	2767      	movs	r7, #103	@ 0x67
 800fc60:	e7d1      	b.n	800fc06 <rcl_publisher_init+0xd2>
 800fc62:	bf00      	nop

0800fc64 <rcl_publisher_get_default_options>:
 800fc64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc66:	4919      	ldr	r1, [pc, #100]	@ (800fccc <rcl_publisher_get_default_options+0x68>)
 800fc68:	4c19      	ldr	r4, [pc, #100]	@ (800fcd0 <rcl_publisher_get_default_options+0x6c>)
 800fc6a:	b08b      	sub	sp, #44	@ 0x2c
 800fc6c:	2250      	movs	r2, #80	@ 0x50
 800fc6e:	4605      	mov	r5, r0
 800fc70:	4818      	ldr	r0, [pc, #96]	@ (800fcd4 <rcl_publisher_get_default_options+0x70>)
 800fc72:	f00b ff58 	bl	801bb26 <memcpy>
 800fc76:	a802      	add	r0, sp, #8
 800fc78:	f7fd fb06 	bl	800d288 <rcutils_get_default_allocator>
 800fc7c:	f10d 0c08 	add.w	ip, sp, #8
 800fc80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc86:	466f      	mov	r7, sp
 800fc88:	f8dc 3000 	ldr.w	r3, [ip]
 800fc8c:	f844 3b04 	str.w	r3, [r4], #4
 800fc90:	4638      	mov	r0, r7
 800fc92:	f002 fd19 	bl	80126c8 <rmw_get_default_publisher_options>
 800fc96:	e897 0003 	ldmia.w	r7, {r0, r1}
 800fc9a:	2600      	movs	r6, #0
 800fc9c:	e884 0003 	stmia.w	r4, {r0, r1}
 800fca0:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800fca4:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800fca8:	f7ff fe2e 	bl	800f908 <rcl_get_disable_loaned_message>
 800fcac:	b958      	cbnz	r0, 800fcc6 <rcl_publisher_get_default_options+0x62>
 800fcae:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800fcb2:	4908      	ldr	r1, [pc, #32]	@ (800fcd4 <rcl_publisher_get_default_options+0x70>)
 800fcb4:	2270      	movs	r2, #112	@ 0x70
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800fcbc:	f00b ff33 	bl	801bb26 <memcpy>
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	b00b      	add	sp, #44	@ 0x2c
 800fcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcc6:	f7fd fb2f 	bl	800d328 <rcutils_reset_error>
 800fcca:	e7f2      	b.n	800fcb2 <rcl_publisher_get_default_options+0x4e>
 800fccc:	0801f650 	.word	0x0801f650
 800fcd0:	20012d08 	.word	0x20012d08
 800fcd4:	20012cb8 	.word	0x20012cb8

0800fcd8 <rcl_publish>:
 800fcd8:	b1f8      	cbz	r0, 800fd1a <rcl_publish+0x42>
 800fcda:	6803      	ldr	r3, [r0, #0]
 800fcdc:	b570      	push	{r4, r5, r6, lr}
 800fcde:	4604      	mov	r4, r0
 800fce0:	b1b3      	cbz	r3, 800fd10 <rcl_publish+0x38>
 800fce2:	4616      	mov	r6, r2
 800fce4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800fce8:	b192      	cbz	r2, 800fd10 <rcl_publish+0x38>
 800fcea:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800fcee:	460d      	mov	r5, r1
 800fcf0:	f7ff f9dc 	bl	800f0ac <rcl_context_is_valid>
 800fcf4:	b160      	cbz	r0, 800fd10 <rcl_publish+0x38>
 800fcf6:	6823      	ldr	r3, [r4, #0]
 800fcf8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800fcfc:	b140      	cbz	r0, 800fd10 <rcl_publish+0x38>
 800fcfe:	b155      	cbz	r5, 800fd16 <rcl_publish+0x3e>
 800fd00:	4632      	mov	r2, r6
 800fd02:	4629      	mov	r1, r5
 800fd04:	f003 f9f6 	bl	80130f4 <rmw_publish>
 800fd08:	3800      	subs	r0, #0
 800fd0a:	bf18      	it	ne
 800fd0c:	2001      	movne	r0, #1
 800fd0e:	bd70      	pop	{r4, r5, r6, pc}
 800fd10:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800fd14:	bd70      	pop	{r4, r5, r6, pc}
 800fd16:	200b      	movs	r0, #11
 800fd18:	bd70      	pop	{r4, r5, r6, pc}
 800fd1a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800fd1e:	4770      	bx	lr

0800fd20 <rcl_publisher_is_valid>:
 800fd20:	b1a0      	cbz	r0, 800fd4c <rcl_publisher_is_valid+0x2c>
 800fd22:	6803      	ldr	r3, [r0, #0]
 800fd24:	b510      	push	{r4, lr}
 800fd26:	4604      	mov	r4, r0
 800fd28:	b173      	cbz	r3, 800fd48 <rcl_publisher_is_valid+0x28>
 800fd2a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800fd2e:	b15a      	cbz	r2, 800fd48 <rcl_publisher_is_valid+0x28>
 800fd30:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800fd34:	f7ff f9ba 	bl	800f0ac <rcl_context_is_valid>
 800fd38:	b130      	cbz	r0, 800fd48 <rcl_publisher_is_valid+0x28>
 800fd3a:	6823      	ldr	r3, [r4, #0]
 800fd3c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800fd40:	3800      	subs	r0, #0
 800fd42:	bf18      	it	ne
 800fd44:	2001      	movne	r0, #1
 800fd46:	bd10      	pop	{r4, pc}
 800fd48:	2000      	movs	r0, #0
 800fd4a:	bd10      	pop	{r4, pc}
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	4770      	bx	lr

0800fd50 <rcl_publisher_is_valid_except_context>:
 800fd50:	b130      	cbz	r0, 800fd60 <rcl_publisher_is_valid_except_context+0x10>
 800fd52:	6800      	ldr	r0, [r0, #0]
 800fd54:	b120      	cbz	r0, 800fd60 <rcl_publisher_is_valid_except_context+0x10>
 800fd56:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800fd5a:	3800      	subs	r0, #0
 800fd5c:	bf18      	it	ne
 800fd5e:	2001      	movne	r0, #1
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop

0800fd64 <exact_match_lookup>:
 800fd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd66:	f102 0708 	add.w	r7, r2, #8
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	4614      	mov	r4, r2
 800fd6e:	4606      	mov	r6, r0
 800fd70:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fd74:	b085      	sub	sp, #20
 800fd76:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	4918      	ldr	r1, [pc, #96]	@ (800fde0 <exact_match_lookup+0x7c>)
 800fd7e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fd82:	f002 f9b9 	bl	80120f8 <rcutils_join_path>
 800fd86:	7833      	ldrb	r3, [r6, #0]
 800fd88:	2b2f      	cmp	r3, #47	@ 0x2f
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	d022      	beq.n	800fdd4 <exact_match_lookup+0x70>
 800fd8e:	f104 030c 	add.w	r3, r4, #12
 800fd92:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fd96:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fd9a:	1c70      	adds	r0, r6, #1
 800fd9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fda0:	f002 f9b0 	bl	8012104 <rcutils_to_native_path>
 800fda4:	4606      	mov	r6, r0
 800fda6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fdaa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fdae:	4631      	mov	r1, r6
 800fdb0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	f002 f99f 	bl	80120f8 <rcutils_join_path>
 800fdba:	6863      	ldr	r3, [r4, #4]
 800fdbc:	6921      	ldr	r1, [r4, #16]
 800fdbe:	4607      	mov	r7, r0
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	4798      	blx	r3
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	6863      	ldr	r3, [r4, #4]
 800fdc8:	6921      	ldr	r1, [r4, #16]
 800fdca:	4798      	blx	r3
 800fdcc:	463d      	mov	r5, r7
 800fdce:	4628      	mov	r0, r5
 800fdd0:	b005      	add	sp, #20
 800fdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdd4:	7873      	ldrb	r3, [r6, #1]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1d9      	bne.n	800fd8e <exact_match_lookup+0x2a>
 800fdda:	4628      	mov	r0, r5
 800fddc:	b005      	add	sp, #20
 800fdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fde0:	0801f6dc 	.word	0x0801f6dc

0800fde4 <rcl_get_secure_root>:
 800fde4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fde8:	b085      	sub	sp, #20
 800fdea:	b168      	cbz	r0, 800fe08 <rcl_get_secure_root+0x24>
 800fdec:	4607      	mov	r7, r0
 800fdee:	4608      	mov	r0, r1
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	f7fd fa75 	bl	800d2e0 <rcutils_allocator_is_valid>
 800fdf6:	b138      	cbz	r0, 800fe08 <rcl_get_secure_root+0x24>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	482d      	ldr	r0, [pc, #180]	@ (800feb0 <rcl_get_secure_root+0xcc>)
 800fdfc:	9303      	str	r3, [sp, #12]
 800fdfe:	a903      	add	r1, sp, #12
 800fe00:	f002 f960 	bl	80120c4 <rcutils_get_env>
 800fe04:	4605      	mov	r5, r0
 800fe06:	b120      	cbz	r0, 800fe12 <rcl_get_secure_root+0x2e>
 800fe08:	2500      	movs	r5, #0
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	b005      	add	sp, #20
 800fe0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe12:	9b03      	ldr	r3, [sp, #12]
 800fe14:	781a      	ldrb	r2, [r3, #0]
 800fe16:	2a00      	cmp	r2, #0
 800fe18:	d0f6      	beq.n	800fe08 <rcl_get_secure_root+0x24>
 800fe1a:	f104 090c 	add.w	r9, r4, #12
 800fe1e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fe22:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fe26:	4618      	mov	r0, r3
 800fe28:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fe2c:	f002 fa90 	bl	8012350 <rcutils_strdup>
 800fe30:	4680      	mov	r8, r0
 800fe32:	2800      	cmp	r0, #0
 800fe34:	d0e8      	beq.n	800fe08 <rcl_get_secure_root+0x24>
 800fe36:	481f      	ldr	r0, [pc, #124]	@ (800feb4 <rcl_get_secure_root+0xd0>)
 800fe38:	9503      	str	r5, [sp, #12]
 800fe3a:	a903      	add	r1, sp, #12
 800fe3c:	f002 f942 	bl	80120c4 <rcutils_get_env>
 800fe40:	b160      	cbz	r0, 800fe5c <rcl_get_secure_root+0x78>
 800fe42:	2600      	movs	r6, #0
 800fe44:	6863      	ldr	r3, [r4, #4]
 800fe46:	6921      	ldr	r1, [r4, #16]
 800fe48:	4630      	mov	r0, r6
 800fe4a:	4798      	blx	r3
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	6863      	ldr	r3, [r4, #4]
 800fe50:	6921      	ldr	r1, [r4, #16]
 800fe52:	4798      	blx	r3
 800fe54:	4628      	mov	r0, r5
 800fe56:	b005      	add	sp, #20
 800fe58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe5c:	9b03      	ldr	r3, [sp, #12]
 800fe5e:	781e      	ldrb	r6, [r3, #0]
 800fe60:	b1f6      	cbz	r6, 800fea0 <rcl_get_secure_root+0xbc>
 800fe62:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fe66:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fe70:	f002 fa6e 	bl	8012350 <rcutils_strdup>
 800fe74:	4606      	mov	r6, r0
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d0e3      	beq.n	800fe42 <rcl_get_secure_root+0x5e>
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	4641      	mov	r1, r8
 800fe7e:	f7ff ff71 	bl	800fd64 <exact_match_lookup>
 800fe82:	4605      	mov	r5, r0
 800fe84:	2d00      	cmp	r5, #0
 800fe86:	d0dd      	beq.n	800fe44 <rcl_get_secure_root+0x60>
 800fe88:	4628      	mov	r0, r5
 800fe8a:	f002 f933 	bl	80120f4 <rcutils_is_directory>
 800fe8e:	4607      	mov	r7, r0
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d1d7      	bne.n	800fe44 <rcl_get_secure_root+0x60>
 800fe94:	4628      	mov	r0, r5
 800fe96:	6863      	ldr	r3, [r4, #4]
 800fe98:	6921      	ldr	r1, [r4, #16]
 800fe9a:	4798      	blx	r3
 800fe9c:	463d      	mov	r5, r7
 800fe9e:	e7d1      	b.n	800fe44 <rcl_get_secure_root+0x60>
 800fea0:	4622      	mov	r2, r4
 800fea2:	4638      	mov	r0, r7
 800fea4:	4641      	mov	r1, r8
 800fea6:	f7ff ff5d 	bl	800fd64 <exact_match_lookup>
 800feaa:	4605      	mov	r5, r0
 800feac:	e7ea      	b.n	800fe84 <rcl_get_secure_root+0xa0>
 800feae:	bf00      	nop
 800feb0:	0801f6e8 	.word	0x0801f6e8
 800feb4:	0801f700 	.word	0x0801f700

0800feb8 <rcl_get_security_options_from_environment>:
 800feb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feba:	b083      	sub	sp, #12
 800febc:	2300      	movs	r3, #0
 800febe:	4605      	mov	r5, r0
 800fec0:	460e      	mov	r6, r1
 800fec2:	481a      	ldr	r0, [pc, #104]	@ (800ff2c <rcl_get_security_options_from_environment+0x74>)
 800fec4:	9301      	str	r3, [sp, #4]
 800fec6:	a901      	add	r1, sp, #4
 800fec8:	4617      	mov	r7, r2
 800feca:	f002 f8fb 	bl	80120c4 <rcutils_get_env>
 800fece:	b110      	cbz	r0, 800fed6 <rcl_get_security_options_from_environment+0x1e>
 800fed0:	2001      	movs	r0, #1
 800fed2:	b003      	add	sp, #12
 800fed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed6:	4604      	mov	r4, r0
 800fed8:	4915      	ldr	r1, [pc, #84]	@ (800ff30 <rcl_get_security_options_from_environment+0x78>)
 800feda:	9801      	ldr	r0, [sp, #4]
 800fedc:	f7f0 f998 	bl	8000210 <strcmp>
 800fee0:	b9b0      	cbnz	r0, 800ff10 <rcl_get_security_options_from_environment+0x58>
 800fee2:	9001      	str	r0, [sp, #4]
 800fee4:	b1c7      	cbz	r7, 800ff18 <rcl_get_security_options_from_environment+0x60>
 800fee6:	4813      	ldr	r0, [pc, #76]	@ (800ff34 <rcl_get_security_options_from_environment+0x7c>)
 800fee8:	a901      	add	r1, sp, #4
 800feea:	f002 f8eb 	bl	80120c4 <rcutils_get_env>
 800feee:	2800      	cmp	r0, #0
 800fef0:	d1ee      	bne.n	800fed0 <rcl_get_security_options_from_environment+0x18>
 800fef2:	4911      	ldr	r1, [pc, #68]	@ (800ff38 <rcl_get_security_options_from_environment+0x80>)
 800fef4:	9801      	ldr	r0, [sp, #4]
 800fef6:	f7f0 f98b 	bl	8000210 <strcmp>
 800fefa:	fab0 f080 	clz	r0, r0
 800fefe:	0940      	lsrs	r0, r0, #5
 800ff00:	7038      	strb	r0, [r7, #0]
 800ff02:	4631      	mov	r1, r6
 800ff04:	4628      	mov	r0, r5
 800ff06:	f7ff ff6d 	bl	800fde4 <rcl_get_secure_root>
 800ff0a:	b138      	cbz	r0, 800ff1c <rcl_get_security_options_from_environment+0x64>
 800ff0c:	6078      	str	r0, [r7, #4]
 800ff0e:	e000      	b.n	800ff12 <rcl_get_security_options_from_environment+0x5a>
 800ff10:	703c      	strb	r4, [r7, #0]
 800ff12:	2000      	movs	r0, #0
 800ff14:	b003      	add	sp, #12
 800ff16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff18:	200b      	movs	r0, #11
 800ff1a:	e7da      	b.n	800fed2 <rcl_get_security_options_from_environment+0x1a>
 800ff1c:	7838      	ldrb	r0, [r7, #0]
 800ff1e:	f1a0 0001 	sub.w	r0, r0, #1
 800ff22:	fab0 f080 	clz	r0, r0
 800ff26:	0940      	lsrs	r0, r0, #5
 800ff28:	e7d3      	b.n	800fed2 <rcl_get_security_options_from_environment+0x1a>
 800ff2a:	bf00      	nop
 800ff2c:	0801f6a0 	.word	0x0801f6a0
 800ff30:	0801f6b4 	.word	0x0801f6b4
 800ff34:	0801f6bc 	.word	0x0801f6bc
 800ff38:	0801f6d4 	.word	0x0801f6d4

0800ff3c <rcl_service_get_rmw_handle>:
 800ff3c:	b118      	cbz	r0, 800ff46 <rcl_service_get_rmw_handle+0xa>
 800ff3e:	6800      	ldr	r0, [r0, #0]
 800ff40:	b108      	cbz	r0, 800ff46 <rcl_service_get_rmw_handle+0xa>
 800ff42:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ff46:	4770      	bx	lr

0800ff48 <rcl_take_request>:
 800ff48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff4a:	468e      	mov	lr, r1
 800ff4c:	460c      	mov	r4, r1
 800ff4e:	4617      	mov	r7, r2
 800ff50:	4605      	mov	r5, r0
 800ff52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff56:	b091      	sub	sp, #68	@ 0x44
 800ff58:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 800ff5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff60:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ff64:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ff68:	b30d      	cbz	r5, 800ffae <rcl_take_request+0x66>
 800ff6a:	682b      	ldr	r3, [r5, #0]
 800ff6c:	b1fb      	cbz	r3, 800ffae <rcl_take_request+0x66>
 800ff6e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ff72:	b1e0      	cbz	r0, 800ffae <rcl_take_request+0x66>
 800ff74:	b397      	cbz	r7, 800ffdc <rcl_take_request+0x94>
 800ff76:	2300      	movs	r3, #0
 800ff78:	f88d 3017 	strb.w	r3, [sp, #23]
 800ff7c:	463a      	mov	r2, r7
 800ff7e:	f10d 0317 	add.w	r3, sp, #23
 800ff82:	a906      	add	r1, sp, #24
 800ff84:	f003 fa9a 	bl	80134bc <rmw_take_request>
 800ff88:	4606      	mov	r6, r0
 800ff8a:	b198      	cbz	r0, 800ffb4 <rcl_take_request+0x6c>
 800ff8c:	280a      	cmp	r0, #10
 800ff8e:	bf18      	it	ne
 800ff90:	2601      	movne	r6, #1
 800ff92:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 800ff96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff9a:	46a6      	mov	lr, r4
 800ff9c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ffa0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ffa4:	e88e 0003 	stmia.w	lr, {r0, r1}
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	b011      	add	sp, #68	@ 0x44
 800ffac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffae:	f44f 7616 	mov.w	r6, #600	@ 0x258
 800ffb2:	e7ee      	b.n	800ff92 <rcl_take_request+0x4a>
 800ffb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800ffb8:	b193      	cbz	r3, 800ffe0 <rcl_take_request+0x98>
 800ffba:	682b      	ldr	r3, [r5, #0]
 800ffbc:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	d0e6      	beq.n	800ff92 <rcl_take_request+0x4a>
 800ffc4:	463a      	mov	r2, r7
 800ffc6:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 800ffca:	ab0a      	add	r3, sp, #40	@ 0x28
 800ffcc:	e9cd 6700 	strd	r6, r7, [sp]
 800ffd0:	9302      	str	r3, [sp, #8]
 800ffd2:	2101      	movs	r1, #1
 800ffd4:	f000 f844 	bl	8010060 <rcl_send_service_event_message>
 800ffd8:	4606      	mov	r6, r0
 800ffda:	e7da      	b.n	800ff92 <rcl_take_request+0x4a>
 800ffdc:	260b      	movs	r6, #11
 800ffde:	e7d8      	b.n	800ff92 <rcl_take_request+0x4a>
 800ffe0:	f240 2659 	movw	r6, #601	@ 0x259
 800ffe4:	e7d5      	b.n	800ff92 <rcl_take_request+0x4a>
 800ffe6:	bf00      	nop

0800ffe8 <rcl_send_response>:
 800ffe8:	b350      	cbz	r0, 8010040 <rcl_send_response+0x58>
 800ffea:	b570      	push	{r4, r5, r6, lr}
 800ffec:	6803      	ldr	r3, [r0, #0]
 800ffee:	b084      	sub	sp, #16
 800fff0:	4604      	mov	r4, r0
 800fff2:	b1cb      	cbz	r3, 8010028 <rcl_send_response+0x40>
 800fff4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fff8:	b1b0      	cbz	r0, 8010028 <rcl_send_response+0x40>
 800fffa:	460e      	mov	r6, r1
 800fffc:	b1e9      	cbz	r1, 801003a <rcl_send_response+0x52>
 800fffe:	4615      	mov	r5, r2
 8010000:	b1da      	cbz	r2, 801003a <rcl_send_response+0x52>
 8010002:	f003 fab9 	bl	8013578 <rmw_send_response>
 8010006:	b998      	cbnz	r0, 8010030 <rcl_send_response+0x48>
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801000e:	b16b      	cbz	r3, 801002c <rcl_send_response+0x44>
 8010010:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8010014:	462a      	mov	r2, r5
 8010016:	e9cd 0100 	strd	r0, r1, [sp]
 801001a:	9602      	str	r6, [sp, #8]
 801001c:	2102      	movs	r1, #2
 801001e:	4618      	mov	r0, r3
 8010020:	f000 f81e 	bl	8010060 <rcl_send_service_event_message>
 8010024:	b004      	add	sp, #16
 8010026:	bd70      	pop	{r4, r5, r6, pc}
 8010028:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801002c:	b004      	add	sp, #16
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	2802      	cmp	r0, #2
 8010032:	bf18      	it	ne
 8010034:	2001      	movne	r0, #1
 8010036:	b004      	add	sp, #16
 8010038:	bd70      	pop	{r4, r5, r6, pc}
 801003a:	200b      	movs	r0, #11
 801003c:	b004      	add	sp, #16
 801003e:	bd70      	pop	{r4, r5, r6, pc}
 8010040:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop

08010048 <rcl_service_is_valid>:
 8010048:	b130      	cbz	r0, 8010058 <rcl_service_is_valid+0x10>
 801004a:	6800      	ldr	r0, [r0, #0]
 801004c:	b120      	cbz	r0, 8010058 <rcl_service_is_valid+0x10>
 801004e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010052:	3800      	subs	r0, #0
 8010054:	bf18      	it	ne
 8010056:	2001      	movne	r0, #1
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop
 801005c:	0000      	movs	r0, r0
	...

08010060 <rcl_send_service_event_message>:
 8010060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010062:	b093      	sub	sp, #76	@ 0x4c
 8010064:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010066:	b17a      	cbz	r2, 8010088 <rcl_send_service_event_message+0x28>
 8010068:	b176      	cbz	r6, 8010088 <rcl_send_service_event_message+0x28>
 801006a:	4604      	mov	r4, r0
 801006c:	b150      	cbz	r0, 8010084 <rcl_send_service_event_message+0x24>
 801006e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8010072:	b13b      	cbz	r3, 8010084 <rcl_send_service_event_message+0x24>
 8010074:	68c0      	ldr	r0, [r0, #12]
 8010076:	460f      	mov	r7, r1
 8010078:	4615      	mov	r5, r2
 801007a:	f000 f9d7 	bl	801042c <rcl_clock_valid>
 801007e:	b108      	cbz	r0, 8010084 <rcl_send_service_event_message+0x24>
 8010080:	7a23      	ldrb	r3, [r4, #8]
 8010082:	b92b      	cbnz	r3, 8010090 <rcl_send_service_event_message+0x30>
 8010084:	2501      	movs	r5, #1
 8010086:	e000      	b.n	801008a <rcl_send_service_event_message+0x2a>
 8010088:	250b      	movs	r5, #11
 801008a:	4628      	mov	r0, r5
 801008c:	b013      	add	sp, #76	@ 0x4c
 801008e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010090:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8010094:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010098:	f10d 0c0c 	add.w	ip, sp, #12
 801009c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100a0:	f8de 3000 	ldr.w	r3, [lr]
 80100a4:	f8cc 3000 	str.w	r3, [ip]
 80100a8:	a803      	add	r0, sp, #12
 80100aa:	f7fd f919 	bl	800d2e0 <rcutils_allocator_is_valid>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d0ea      	beq.n	8010088 <rcl_send_service_event_message+0x28>
 80100b2:	6820      	ldr	r0, [r4, #0]
 80100b4:	f7ff fe34 	bl	800fd20 <rcl_publisher_is_valid>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	d045      	beq.n	8010148 <rcl_send_service_event_message+0xe8>
 80100bc:	4669      	mov	r1, sp
 80100be:	68e0      	ldr	r0, [r4, #12]
 80100c0:	f000 fa2c 	bl	801051c <rcl_clock_get_now>
 80100c4:	4601      	mov	r1, r0
 80100c6:	2800      	cmp	r0, #0
 80100c8:	d13b      	bne.n	8010142 <rcl_send_service_event_message+0xe2>
 80100ca:	2220      	movs	r2, #32
 80100cc:	eb0d 0002 	add.w	r0, sp, r2
 80100d0:	f00b fbf4 	bl	801b8bc <memset>
 80100d4:	a324      	add	r3, pc, #144	@ (adr r3, 8010168 <rcl_send_service_event_message+0x108>)
 80100d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100de:	f88d 7020 	strb.w	r7, [sp, #32]
 80100e2:	f7f0 ff0f 	bl	8000f04 <__aeabi_ldivmod>
 80100e6:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 80100ea:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80100ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80100f2:	7a23      	ldrb	r3, [r4, #8]
 80100f4:	6830      	ldr	r0, [r6, #0]
 80100f6:	6871      	ldr	r1, [r6, #4]
 80100f8:	68b2      	ldr	r2, [r6, #8]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	68f3      	ldr	r3, [r6, #12]
 80100fe:	bf08      	it	eq
 8010100:	2500      	moveq	r5, #0
 8010102:	ae0b      	add	r6, sp, #44	@ 0x2c
 8010104:	2f01      	cmp	r7, #1
 8010106:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010108:	d821      	bhi.n	801014e <rcl_send_service_event_message+0xee>
 801010a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801010e:	462a      	mov	r2, r5
 8010110:	a808      	add	r0, sp, #32
 8010112:	699d      	ldr	r5, [r3, #24]
 8010114:	a903      	add	r1, sp, #12
 8010116:	2300      	movs	r3, #0
 8010118:	47a8      	blx	r5
 801011a:	4606      	mov	r6, r0
 801011c:	2e00      	cmp	r6, #0
 801011e:	d0b1      	beq.n	8010084 <rcl_send_service_event_message+0x24>
 8010120:	4631      	mov	r1, r6
 8010122:	6820      	ldr	r0, [r4, #0]
 8010124:	2200      	movs	r2, #0
 8010126:	f7ff fdd7 	bl	800fcd8 <rcl_publish>
 801012a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801012e:	4605      	mov	r5, r0
 8010130:	69db      	ldr	r3, [r3, #28]
 8010132:	a903      	add	r1, sp, #12
 8010134:	4630      	mov	r0, r6
 8010136:	4798      	blx	r3
 8010138:	2d00      	cmp	r5, #0
 801013a:	d0a6      	beq.n	801008a <rcl_send_service_event_message+0x2a>
 801013c:	f7fd f8f4 	bl	800d328 <rcutils_reset_error>
 8010140:	e7a3      	b.n	801008a <rcl_send_service_event_message+0x2a>
 8010142:	f7fd f8f1 	bl	800d328 <rcutils_reset_error>
 8010146:	e79d      	b.n	8010084 <rcl_send_service_event_message+0x24>
 8010148:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 801014c:	e79d      	b.n	801008a <rcl_send_service_event_message+0x2a>
 801014e:	1eb9      	subs	r1, r7, #2
 8010150:	2901      	cmp	r1, #1
 8010152:	d8f6      	bhi.n	8010142 <rcl_send_service_event_message+0xe2>
 8010154:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8010158:	462b      	mov	r3, r5
 801015a:	a808      	add	r0, sp, #32
 801015c:	6995      	ldr	r5, [r2, #24]
 801015e:	a903      	add	r1, sp, #12
 8010160:	2200      	movs	r2, #0
 8010162:	47a8      	blx	r5
 8010164:	4606      	mov	r6, r0
 8010166:	e7d9      	b.n	801011c <rcl_send_service_event_message+0xbc>
 8010168:	3b9aca00 	.word	0x3b9aca00
 801016c:	00000000 	.word	0x00000000

08010170 <rcl_get_zero_initialized_subscription>:
 8010170:	4b01      	ldr	r3, [pc, #4]	@ (8010178 <rcl_get_zero_initialized_subscription+0x8>)
 8010172:	6818      	ldr	r0, [r3, #0]
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop
 8010178:	0801f720 	.word	0x0801f720

0801017c <rcl_subscription_init>:
 801017c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010180:	b089      	sub	sp, #36	@ 0x24
 8010182:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010184:	b1d6      	cbz	r6, 80101bc <rcl_subscription_init+0x40>
 8010186:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801018a:	4604      	mov	r4, r0
 801018c:	4648      	mov	r0, r9
 801018e:	460d      	mov	r5, r1
 8010190:	4690      	mov	r8, r2
 8010192:	461f      	mov	r7, r3
 8010194:	f7fd f8a4 	bl	800d2e0 <rcutils_allocator_is_valid>
 8010198:	b180      	cbz	r0, 80101bc <rcl_subscription_init+0x40>
 801019a:	b17c      	cbz	r4, 80101bc <rcl_subscription_init+0x40>
 801019c:	4628      	mov	r0, r5
 801019e:	f7ff fb8b 	bl	800f8b8 <rcl_node_is_valid>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d054      	beq.n	8010250 <rcl_subscription_init+0xd4>
 80101a6:	f1b8 0f00 	cmp.w	r8, #0
 80101aa:	d007      	beq.n	80101bc <rcl_subscription_init+0x40>
 80101ac:	b137      	cbz	r7, 80101bc <rcl_subscription_init+0x40>
 80101ae:	6823      	ldr	r3, [r4, #0]
 80101b0:	b14b      	cbz	r3, 80101c6 <rcl_subscription_init+0x4a>
 80101b2:	2764      	movs	r7, #100	@ 0x64
 80101b4:	4638      	mov	r0, r7
 80101b6:	b009      	add	sp, #36	@ 0x24
 80101b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101bc:	270b      	movs	r7, #11
 80101be:	4638      	mov	r0, r7
 80101c0:	b009      	add	sp, #36	@ 0x24
 80101c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101c6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80101ca:	aa07      	add	r2, sp, #28
 80101cc:	9205      	str	r2, [sp, #20]
 80101ce:	9307      	str	r3, [sp, #28]
 80101d0:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80101d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80101d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80101dc:	4639      	mov	r1, r7
 80101de:	e899 000c 	ldmia.w	r9, {r2, r3}
 80101e2:	4628      	mov	r0, r5
 80101e4:	f7ff fbf8 	bl	800f9d8 <rcl_node_resolve_name>
 80101e8:	4607      	mov	r7, r0
 80101ea:	2800      	cmp	r0, #0
 80101ec:	d15f      	bne.n	80102ae <rcl_subscription_init+0x132>
 80101ee:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80101f2:	21d0      	movs	r1, #208	@ 0xd0
 80101f4:	2001      	movs	r0, #1
 80101f6:	4798      	blx	r3
 80101f8:	6020      	str	r0, [r4, #0]
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d05d      	beq.n	80102ba <rcl_subscription_init+0x13e>
 80101fe:	4628      	mov	r0, r5
 8010200:	f7ff fb7c 	bl	800f8fc <rcl_node_get_rmw_handle>
 8010204:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	9a07      	ldr	r2, [sp, #28]
 801020c:	6827      	ldr	r7, [r4, #0]
 801020e:	4641      	mov	r1, r8
 8010210:	4633      	mov	r3, r6
 8010212:	f003 fa99 	bl	8013748 <rmw_create_subscription>
 8010216:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 801021a:	6827      	ldr	r7, [r4, #0]
 801021c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010220:	b358      	cbz	r0, 801027a <rcl_subscription_init+0xfe>
 8010222:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8010226:	f003 fb6f 	bl	8013908 <rmw_subscription_get_actual_qos>
 801022a:	4607      	mov	r7, r0
 801022c:	b9a8      	cbnz	r0, 801025a <rcl_subscription_init+0xde>
 801022e:	6820      	ldr	r0, [r4, #0]
 8010230:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010234:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 8010238:	2278      	movs	r2, #120	@ 0x78
 801023a:	4631      	mov	r1, r6
 801023c:	f00b fc73 	bl	801bb26 <memcpy>
 8010240:	9807      	ldr	r0, [sp, #28]
 8010242:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010244:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010246:	4798      	blx	r3
 8010248:	4638      	mov	r0, r7
 801024a:	b009      	add	sp, #36	@ 0x24
 801024c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010250:	27c8      	movs	r7, #200	@ 0xc8
 8010252:	4638      	mov	r0, r7
 8010254:	b009      	add	sp, #36	@ 0x24
 8010256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801025a:	6827      	ldr	r7, [r4, #0]
 801025c:	b32f      	cbz	r7, 80102aa <rcl_subscription_init+0x12e>
 801025e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010262:	b153      	cbz	r3, 801027a <rcl_subscription_init+0xfe>
 8010264:	4628      	mov	r0, r5
 8010266:	f7ff fb49 	bl	800f8fc <rcl_node_get_rmw_handle>
 801026a:	6823      	ldr	r3, [r4, #0]
 801026c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8010270:	f003 fb58 	bl	8013924 <rmw_destroy_subscription>
 8010274:	6827      	ldr	r7, [r4, #0]
 8010276:	4638      	mov	r0, r7
 8010278:	b197      	cbz	r7, 80102a0 <rcl_subscription_init+0x124>
 801027a:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 801027e:	4628      	mov	r0, r5
 8010280:	f7fd f82e 	bl	800d2e0 <rcutils_allocator_is_valid>
 8010284:	b1e8      	cbz	r0, 80102c2 <rcl_subscription_init+0x146>
 8010286:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010288:	b1d8      	cbz	r0, 80102c2 <rcl_subscription_init+0x146>
 801028a:	4629      	mov	r1, r5
 801028c:	f002 fa24 	bl	80126d8 <rmw_subscription_content_filter_options_fini>
 8010290:	4605      	mov	r5, r0
 8010292:	b9a0      	cbnz	r0, 80102be <rcl_subscription_init+0x142>
 8010294:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010298:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801029a:	4798      	blx	r3
 801029c:	6820      	ldr	r0, [r4, #0]
 801029e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80102a0:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80102a2:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80102a4:	4798      	blx	r3
 80102a6:	2300      	movs	r3, #0
 80102a8:	6023      	str	r3, [r4, #0]
 80102aa:	2701      	movs	r7, #1
 80102ac:	e7c8      	b.n	8010240 <rcl_subscription_init+0xc4>
 80102ae:	2867      	cmp	r0, #103	@ 0x67
 80102b0:	d0c6      	beq.n	8010240 <rcl_subscription_init+0xc4>
 80102b2:	2869      	cmp	r0, #105	@ 0x69
 80102b4:	d007      	beq.n	80102c6 <rcl_subscription_init+0x14a>
 80102b6:	280a      	cmp	r0, #10
 80102b8:	d1f7      	bne.n	80102aa <rcl_subscription_init+0x12e>
 80102ba:	270a      	movs	r7, #10
 80102bc:	e7c0      	b.n	8010240 <rcl_subscription_init+0xc4>
 80102be:	f7fe fed5 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 80102c2:	6820      	ldr	r0, [r4, #0]
 80102c4:	e7ec      	b.n	80102a0 <rcl_subscription_init+0x124>
 80102c6:	2767      	movs	r7, #103	@ 0x67
 80102c8:	e7ba      	b.n	8010240 <rcl_subscription_init+0xc4>
 80102ca:	bf00      	nop

080102cc <rcl_subscription_get_default_options>:
 80102cc:	b570      	push	{r4, r5, r6, lr}
 80102ce:	4d14      	ldr	r5, [pc, #80]	@ (8010320 <rcl_subscription_get_default_options+0x54>)
 80102d0:	4914      	ldr	r1, [pc, #80]	@ (8010324 <rcl_subscription_get_default_options+0x58>)
 80102d2:	b08a      	sub	sp, #40	@ 0x28
 80102d4:	4604      	mov	r4, r0
 80102d6:	2250      	movs	r2, #80	@ 0x50
 80102d8:	4628      	mov	r0, r5
 80102da:	f00b fc24 	bl	801bb26 <memcpy>
 80102de:	a804      	add	r0, sp, #16
 80102e0:	f7fc ffd2 	bl	800d288 <rcutils_get_default_allocator>
 80102e4:	f10d 0c10 	add.w	ip, sp, #16
 80102e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102ec:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80102f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80102f4:	466e      	mov	r6, sp
 80102f6:	f8dc 3000 	ldr.w	r3, [ip]
 80102fa:	f8ce 3000 	str.w	r3, [lr]
 80102fe:	4630      	mov	r0, r6
 8010300:	f002 fa04 	bl	801270c <rmw_get_default_subscription_options>
 8010304:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010308:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801030c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010310:	2278      	movs	r2, #120	@ 0x78
 8010312:	4629      	mov	r1, r5
 8010314:	4620      	mov	r0, r4
 8010316:	f00b fc06 	bl	801bb26 <memcpy>
 801031a:	4620      	mov	r0, r4
 801031c:	b00a      	add	sp, #40	@ 0x28
 801031e:	bd70      	pop	{r4, r5, r6, pc}
 8010320:	20012d28 	.word	0x20012d28
 8010324:	0801f728 	.word	0x0801f728

08010328 <rcl_take>:
 8010328:	2800      	cmp	r0, #0
 801032a:	d04b      	beq.n	80103c4 <rcl_take+0x9c>
 801032c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010330:	4615      	mov	r5, r2
 8010332:	6802      	ldr	r2, [r0, #0]
 8010334:	b0a0      	sub	sp, #128	@ 0x80
 8010336:	4604      	mov	r4, r0
 8010338:	2a00      	cmp	r2, #0
 801033a:	d03b      	beq.n	80103b4 <rcl_take+0x8c>
 801033c:	461f      	mov	r7, r3
 801033e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8010342:	2b00      	cmp	r3, #0
 8010344:	d036      	beq.n	80103b4 <rcl_take+0x8c>
 8010346:	460e      	mov	r6, r1
 8010348:	2900      	cmp	r1, #0
 801034a:	d039      	beq.n	80103c0 <rcl_take+0x98>
 801034c:	2d00      	cmp	r5, #0
 801034e:	d03d      	beq.n	80103cc <rcl_take+0xa4>
 8010350:	a802      	add	r0, sp, #8
 8010352:	f002 f9e1 	bl	8012718 <rmw_get_zero_initialized_message_info>
 8010356:	6823      	ldr	r3, [r4, #0]
 8010358:	f10d 0c08 	add.w	ip, sp, #8
 801035c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8010360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010364:	46ae      	mov	lr, r5
 8010366:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801036a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801036e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010372:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010376:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801037a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801037e:	462b      	mov	r3, r5
 8010380:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010384:	f04f 0800 	mov.w	r8, #0
 8010388:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 801038c:	4631      	mov	r1, r6
 801038e:	4620      	mov	r0, r4
 8010390:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8010394:	9700      	str	r7, [sp, #0]
 8010396:	f003 fb25 	bl	80139e4 <rmw_take_with_info>
 801039a:	4603      	mov	r3, r0
 801039c:	b9c0      	cbnz	r0, 80103d0 <rcl_take+0xa8>
 801039e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 80103a2:	f240 1291 	movw	r2, #401	@ 0x191
 80103a6:	2900      	cmp	r1, #0
 80103a8:	bf08      	it	eq
 80103aa:	4613      	moveq	r3, r2
 80103ac:	4618      	mov	r0, r3
 80103ae:	b020      	add	sp, #128	@ 0x80
 80103b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80103b8:	4618      	mov	r0, r3
 80103ba:	b020      	add	sp, #128	@ 0x80
 80103bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c0:	230b      	movs	r3, #11
 80103c2:	e7f3      	b.n	80103ac <rcl_take+0x84>
 80103c4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80103c8:	4618      	mov	r0, r3
 80103ca:	4770      	bx	lr
 80103cc:	ad12      	add	r5, sp, #72	@ 0x48
 80103ce:	e7bf      	b.n	8010350 <rcl_take+0x28>
 80103d0:	f7fe fe4c 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 80103d4:	4603      	mov	r3, r0
 80103d6:	e7e9      	b.n	80103ac <rcl_take+0x84>

080103d8 <rcl_subscription_get_rmw_handle>:
 80103d8:	b118      	cbz	r0, 80103e2 <rcl_subscription_get_rmw_handle+0xa>
 80103da:	6800      	ldr	r0, [r0, #0]
 80103dc:	b108      	cbz	r0, 80103e2 <rcl_subscription_get_rmw_handle+0xa>
 80103de:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80103e2:	4770      	bx	lr

080103e4 <rcl_subscription_is_valid>:
 80103e4:	b130      	cbz	r0, 80103f4 <rcl_subscription_is_valid+0x10>
 80103e6:	6800      	ldr	r0, [r0, #0]
 80103e8:	b120      	cbz	r0, 80103f4 <rcl_subscription_is_valid+0x10>
 80103ea:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80103ee:	3800      	subs	r0, #0
 80103f0:	bf18      	it	ne
 80103f2:	2001      	movne	r0, #1
 80103f4:	4770      	bx	lr
 80103f6:	bf00      	nop

080103f8 <rcl_get_system_time>:
 80103f8:	4608      	mov	r0, r1
 80103fa:	f7fc bfb1 	b.w	800d360 <rcutils_system_time_now>
 80103fe:	bf00      	nop

08010400 <rcl_get_steady_time>:
 8010400:	4608      	mov	r0, r1
 8010402:	f7fc bfd7 	b.w	800d3b4 <rcutils_steady_time_now>
 8010406:	bf00      	nop

08010408 <rcl_get_ros_time>:
 8010408:	7a03      	ldrb	r3, [r0, #8]
 801040a:	b510      	push	{r4, lr}
 801040c:	460c      	mov	r4, r1
 801040e:	b143      	cbz	r3, 8010422 <rcl_get_ros_time+0x1a>
 8010410:	2105      	movs	r1, #5
 8010412:	f001 fdb1 	bl	8011f78 <__atomic_load_8>
 8010416:	4602      	mov	r2, r0
 8010418:	460b      	mov	r3, r1
 801041a:	e9c4 2300 	strd	r2, r3, [r4]
 801041e:	2000      	movs	r0, #0
 8010420:	bd10      	pop	{r4, pc}
 8010422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010426:	4608      	mov	r0, r1
 8010428:	f7fc bf9a 	b.w	800d360 <rcutils_system_time_now>

0801042c <rcl_clock_valid>:
 801042c:	b138      	cbz	r0, 801043e <rcl_clock_valid+0x12>
 801042e:	7803      	ldrb	r3, [r0, #0]
 8010430:	b123      	cbz	r3, 801043c <rcl_clock_valid+0x10>
 8010432:	68c0      	ldr	r0, [r0, #12]
 8010434:	3800      	subs	r0, #0
 8010436:	bf18      	it	ne
 8010438:	2001      	movne	r0, #1
 801043a:	4770      	bx	lr
 801043c:	4618      	mov	r0, r3
 801043e:	4770      	bx	lr

08010440 <rcl_clock_init>:
 8010440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010442:	4605      	mov	r5, r0
 8010444:	4610      	mov	r0, r2
 8010446:	4614      	mov	r4, r2
 8010448:	460e      	mov	r6, r1
 801044a:	f7fc ff49 	bl	800d2e0 <rcutils_allocator_is_valid>
 801044e:	b128      	cbz	r0, 801045c <rcl_clock_init+0x1c>
 8010450:	2d03      	cmp	r5, #3
 8010452:	d803      	bhi.n	801045c <rcl_clock_init+0x1c>
 8010454:	e8df f005 	tbb	[pc, r5]
 8010458:	044c291a 	.word	0x044c291a
 801045c:	200b      	movs	r0, #11
 801045e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010460:	2e00      	cmp	r6, #0
 8010462:	d0fb      	beq.n	801045c <rcl_clock_init+0x1c>
 8010464:	2c00      	cmp	r4, #0
 8010466:	d0f9      	beq.n	801045c <rcl_clock_init+0x1c>
 8010468:	2300      	movs	r3, #0
 801046a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801046e:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8010514 <rcl_clock_init+0xd4>
 8010472:	6133      	str	r3, [r6, #16]
 8010474:	f106 0514 	add.w	r5, r6, #20
 8010478:	2703      	movs	r7, #3
 801047a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801047c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801047e:	6823      	ldr	r3, [r4, #0]
 8010480:	602b      	str	r3, [r5, #0]
 8010482:	f8c6 c00c 	str.w	ip, [r6, #12]
 8010486:	7037      	strb	r7, [r6, #0]
 8010488:	2000      	movs	r0, #0
 801048a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801048c:	2e00      	cmp	r6, #0
 801048e:	d0e5      	beq.n	801045c <rcl_clock_init+0x1c>
 8010490:	2300      	movs	r3, #0
 8010492:	7033      	strb	r3, [r6, #0]
 8010494:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010498:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801049c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801049e:	f106 0514 	add.w	r5, r6, #20
 80104a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	602b      	str	r3, [r5, #0]
 80104a8:	e7ee      	b.n	8010488 <rcl_clock_init+0x48>
 80104aa:	2e00      	cmp	r6, #0
 80104ac:	d0d6      	beq.n	801045c <rcl_clock_init+0x1c>
 80104ae:	2c00      	cmp	r4, #0
 80104b0:	d0d4      	beq.n	801045c <rcl_clock_init+0x1c>
 80104b2:	2700      	movs	r7, #0
 80104b4:	7037      	strb	r7, [r6, #0]
 80104b6:	46a4      	mov	ip, r4
 80104b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80104bc:	f106 0514 	add.w	r5, r6, #20
 80104c0:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80104c4:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80104c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80104ca:	f8dc 3000 	ldr.w	r3, [ip]
 80104ce:	602b      	str	r3, [r5, #0]
 80104d0:	6921      	ldr	r1, [r4, #16]
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	2010      	movs	r0, #16
 80104d6:	4798      	blx	r3
 80104d8:	6130      	str	r0, [r6, #16]
 80104da:	b1b8      	cbz	r0, 801050c <rcl_clock_init+0xcc>
 80104dc:	2200      	movs	r2, #0
 80104de:	2300      	movs	r3, #0
 80104e0:	e9c0 2300 	strd	r2, r3, [r0]
 80104e4:	4a0a      	ldr	r2, [pc, #40]	@ (8010510 <rcl_clock_init+0xd0>)
 80104e6:	7207      	strb	r7, [r0, #8]
 80104e8:	2301      	movs	r3, #1
 80104ea:	60f2      	str	r2, [r6, #12]
 80104ec:	7033      	strb	r3, [r6, #0]
 80104ee:	e7cb      	b.n	8010488 <rcl_clock_init+0x48>
 80104f0:	2e00      	cmp	r6, #0
 80104f2:	d0b3      	beq.n	801045c <rcl_clock_init+0x1c>
 80104f4:	2c00      	cmp	r4, #0
 80104f6:	d0b1      	beq.n	801045c <rcl_clock_init+0x1c>
 80104f8:	2300      	movs	r3, #0
 80104fa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80104fe:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8010518 <rcl_clock_init+0xd8>
 8010502:	6133      	str	r3, [r6, #16]
 8010504:	f106 0514 	add.w	r5, r6, #20
 8010508:	2702      	movs	r7, #2
 801050a:	e7b6      	b.n	801047a <rcl_clock_init+0x3a>
 801050c:	200a      	movs	r0, #10
 801050e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010510:	08010409 	.word	0x08010409
 8010514:	08010401 	.word	0x08010401
 8010518:	080103f9 	.word	0x080103f9

0801051c <rcl_clock_get_now>:
 801051c:	b140      	cbz	r0, 8010530 <rcl_clock_get_now+0x14>
 801051e:	b139      	cbz	r1, 8010530 <rcl_clock_get_now+0x14>
 8010520:	7803      	ldrb	r3, [r0, #0]
 8010522:	b11b      	cbz	r3, 801052c <rcl_clock_get_now+0x10>
 8010524:	68c3      	ldr	r3, [r0, #12]
 8010526:	b10b      	cbz	r3, 801052c <rcl_clock_get_now+0x10>
 8010528:	6900      	ldr	r0, [r0, #16]
 801052a:	4718      	bx	r3
 801052c:	2001      	movs	r0, #1
 801052e:	4770      	bx	lr
 8010530:	200b      	movs	r0, #11
 8010532:	4770      	bx	lr

08010534 <rcl_is_enabled_ros_time_override>:
 8010534:	b158      	cbz	r0, 801054e <rcl_is_enabled_ros_time_override+0x1a>
 8010536:	b151      	cbz	r1, 801054e <rcl_is_enabled_ros_time_override+0x1a>
 8010538:	7803      	ldrb	r3, [r0, #0]
 801053a:	2b01      	cmp	r3, #1
 801053c:	d105      	bne.n	801054a <rcl_is_enabled_ros_time_override+0x16>
 801053e:	6902      	ldr	r2, [r0, #16]
 8010540:	b11a      	cbz	r2, 801054a <rcl_is_enabled_ros_time_override+0x16>
 8010542:	7a13      	ldrb	r3, [r2, #8]
 8010544:	700b      	strb	r3, [r1, #0]
 8010546:	2000      	movs	r0, #0
 8010548:	4770      	bx	lr
 801054a:	2001      	movs	r0, #1
 801054c:	4770      	bx	lr
 801054e:	200b      	movs	r0, #11
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop

08010554 <rcl_timer_clock>:
 8010554:	b130      	cbz	r0, 8010564 <rcl_timer_clock+0x10>
 8010556:	b129      	cbz	r1, 8010564 <rcl_timer_clock+0x10>
 8010558:	6803      	ldr	r3, [r0, #0]
 801055a:	b12b      	cbz	r3, 8010568 <rcl_timer_clock+0x14>
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	600b      	str	r3, [r1, #0]
 8010560:	2000      	movs	r0, #0
 8010562:	4770      	bx	lr
 8010564:	200b      	movs	r0, #11
 8010566:	4770      	bx	lr
 8010568:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop

08010570 <rcl_timer_call>:
 8010570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010574:	b087      	sub	sp, #28
 8010576:	2800      	cmp	r0, #0
 8010578:	d067      	beq.n	801064a <rcl_timer_call+0xda>
 801057a:	6803      	ldr	r3, [r0, #0]
 801057c:	4604      	mov	r4, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d068      	beq.n	8010654 <rcl_timer_call+0xe4>
 8010582:	f3bf 8f5b 	dmb	ish
 8010586:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801058a:	f3bf 8f5b 	dmb	ish
 801058e:	2b00      	cmp	r3, #0
 8010590:	d150      	bne.n	8010634 <rcl_timer_call+0xc4>
 8010592:	6803      	ldr	r3, [r0, #0]
 8010594:	a904      	add	r1, sp, #16
 8010596:	6818      	ldr	r0, [r3, #0]
 8010598:	f7ff ffc0 	bl	801051c <rcl_clock_get_now>
 801059c:	4605      	mov	r5, r0
 801059e:	2800      	cmp	r0, #0
 80105a0:	d144      	bne.n	801062c <rcl_timer_call+0xbc>
 80105a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	db4a      	blt.n	8010640 <rcl_timer_call+0xd0>
 80105aa:	6820      	ldr	r0, [r4, #0]
 80105ac:	f04f 0a05 	mov.w	sl, #5
 80105b0:	f8cd a000 	str.w	sl, [sp]
 80105b4:	3020      	adds	r0, #32
 80105b6:	f001 fd4b 	bl	8012050 <__atomic_exchange_8>
 80105ba:	6823      	ldr	r3, [r4, #0]
 80105bc:	f3bf 8f5b 	dmb	ish
 80105c0:	4680      	mov	r8, r0
 80105c2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80105c6:	f3bf 8f5b 	dmb	ish
 80105ca:	6820      	ldr	r0, [r4, #0]
 80105cc:	4689      	mov	r9, r1
 80105ce:	3028      	adds	r0, #40	@ 0x28
 80105d0:	4651      	mov	r1, sl
 80105d2:	f001 fcd1 	bl	8011f78 <__atomic_load_8>
 80105d6:	4606      	mov	r6, r0
 80105d8:	6820      	ldr	r0, [r4, #0]
 80105da:	460f      	mov	r7, r1
 80105dc:	3018      	adds	r0, #24
 80105de:	4651      	mov	r1, sl
 80105e0:	f001 fcca 	bl	8011f78 <__atomic_load_8>
 80105e4:	1836      	adds	r6, r6, r0
 80105e6:	eb41 0707 	adc.w	r7, r1, r7
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	4682      	mov	sl, r0
 80105f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105f4:	42b0      	cmp	r0, r6
 80105f6:	eb71 0c07 	sbcs.w	ip, r1, r7
 80105fa:	db04      	blt.n	8010606 <rcl_timer_call+0x96>
 80105fc:	ea53 0c02 	orrs.w	ip, r3, r2
 8010600:	d12b      	bne.n	801065a <rcl_timer_call+0xea>
 8010602:	4606      	mov	r6, r0
 8010604:	460f      	mov	r7, r1
 8010606:	6820      	ldr	r0, [r4, #0]
 8010608:	2105      	movs	r1, #5
 801060a:	4632      	mov	r2, r6
 801060c:	463b      	mov	r3, r7
 801060e:	3028      	adds	r0, #40	@ 0x28
 8010610:	9100      	str	r1, [sp, #0]
 8010612:	f001 fce7 	bl	8011fe4 <__atomic_store_8>
 8010616:	f1bb 0f00 	cmp.w	fp, #0
 801061a:	d007      	beq.n	801062c <rcl_timer_call+0xbc>
 801061c:	9a04      	ldr	r2, [sp, #16]
 801061e:	9b05      	ldr	r3, [sp, #20]
 8010620:	ebb2 0208 	subs.w	r2, r2, r8
 8010624:	4620      	mov	r0, r4
 8010626:	eb63 0309 	sbc.w	r3, r3, r9
 801062a:	47d8      	blx	fp
 801062c:	4628      	mov	r0, r5
 801062e:	b007      	add	sp, #28
 8010630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010634:	f240 3521 	movw	r5, #801	@ 0x321
 8010638:	4628      	mov	r0, r5
 801063a:	b007      	add	sp, #28
 801063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010640:	2501      	movs	r5, #1
 8010642:	4628      	mov	r0, r5
 8010644:	b007      	add	sp, #28
 8010646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064a:	250b      	movs	r5, #11
 801064c:	4628      	mov	r0, r5
 801064e:	b007      	add	sp, #28
 8010650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010654:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010658:	e7e8      	b.n	801062c <rcl_timer_call+0xbc>
 801065a:	1b80      	subs	r0, r0, r6
 801065c:	eb61 0107 	sbc.w	r1, r1, r7
 8010660:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010664:	f7f0 fc4e 	bl	8000f04 <__aeabi_ldivmod>
 8010668:	9b02      	ldr	r3, [sp, #8]
 801066a:	3001      	adds	r0, #1
 801066c:	f141 0100 	adc.w	r1, r1, #0
 8010670:	fb00 f303 	mul.w	r3, r0, r3
 8010674:	fb01 330a 	mla	r3, r1, sl, r3
 8010678:	fba0 0a0a 	umull	r0, sl, r0, sl
 801067c:	1830      	adds	r0, r6, r0
 801067e:	4453      	add	r3, sl
 8010680:	eb43 0707 	adc.w	r7, r3, r7
 8010684:	4606      	mov	r6, r0
 8010686:	e7be      	b.n	8010606 <rcl_timer_call+0x96>

08010688 <rcl_timer_is_ready>:
 8010688:	b398      	cbz	r0, 80106f2 <rcl_timer_is_ready+0x6a>
 801068a:	b530      	push	{r4, r5, lr}
 801068c:	6803      	ldr	r3, [r0, #0]
 801068e:	b083      	sub	sp, #12
 8010690:	4604      	mov	r4, r0
 8010692:	b383      	cbz	r3, 80106f6 <rcl_timer_is_ready+0x6e>
 8010694:	460d      	mov	r5, r1
 8010696:	b349      	cbz	r1, 80106ec <rcl_timer_is_ready+0x64>
 8010698:	f3bf 8f5b 	dmb	ish
 801069c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80106a0:	f3bf 8f5b 	dmb	ish
 80106a4:	b9fb      	cbnz	r3, 80106e6 <rcl_timer_is_ready+0x5e>
 80106a6:	6803      	ldr	r3, [r0, #0]
 80106a8:	4669      	mov	r1, sp
 80106aa:	6818      	ldr	r0, [r3, #0]
 80106ac:	f7ff ff36 	bl	801051c <rcl_clock_get_now>
 80106b0:	b128      	cbz	r0, 80106be <rcl_timer_is_ready+0x36>
 80106b2:	f240 3321 	movw	r3, #801	@ 0x321
 80106b6:	4298      	cmp	r0, r3
 80106b8:	d015      	beq.n	80106e6 <rcl_timer_is_ready+0x5e>
 80106ba:	b003      	add	sp, #12
 80106bc:	bd30      	pop	{r4, r5, pc}
 80106be:	6820      	ldr	r0, [r4, #0]
 80106c0:	2105      	movs	r1, #5
 80106c2:	3028      	adds	r0, #40	@ 0x28
 80106c4:	f001 fc58 	bl	8011f78 <__atomic_load_8>
 80106c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80106cc:	1ac0      	subs	r0, r0, r3
 80106ce:	eb61 0102 	sbc.w	r1, r1, r2
 80106d2:	2801      	cmp	r0, #1
 80106d4:	f171 0100 	sbcs.w	r1, r1, #0
 80106d8:	bfb4      	ite	lt
 80106da:	2301      	movlt	r3, #1
 80106dc:	2300      	movge	r3, #0
 80106de:	702b      	strb	r3, [r5, #0]
 80106e0:	2000      	movs	r0, #0
 80106e2:	b003      	add	sp, #12
 80106e4:	bd30      	pop	{r4, r5, pc}
 80106e6:	2300      	movs	r3, #0
 80106e8:	702b      	strb	r3, [r5, #0]
 80106ea:	e7f9      	b.n	80106e0 <rcl_timer_is_ready+0x58>
 80106ec:	200b      	movs	r0, #11
 80106ee:	b003      	add	sp, #12
 80106f0:	bd30      	pop	{r4, r5, pc}
 80106f2:	200b      	movs	r0, #11
 80106f4:	4770      	bx	lr
 80106f6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80106fa:	e7de      	b.n	80106ba <rcl_timer_is_ready+0x32>

080106fc <rcl_timer_get_next_call_time>:
 80106fc:	b1d8      	cbz	r0, 8010736 <rcl_timer_get_next_call_time+0x3a>
 80106fe:	b538      	push	{r3, r4, r5, lr}
 8010700:	6803      	ldr	r3, [r0, #0]
 8010702:	b1d3      	cbz	r3, 801073a <rcl_timer_get_next_call_time+0x3e>
 8010704:	460c      	mov	r4, r1
 8010706:	b1a1      	cbz	r1, 8010732 <rcl_timer_get_next_call_time+0x36>
 8010708:	f3bf 8f5b 	dmb	ish
 801070c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010710:	f3bf 8f5b 	dmb	ish
 8010714:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8010718:	b943      	cbnz	r3, 801072c <rcl_timer_get_next_call_time+0x30>
 801071a:	6800      	ldr	r0, [r0, #0]
 801071c:	2105      	movs	r1, #5
 801071e:	3028      	adds	r0, #40	@ 0x28
 8010720:	f001 fc2a 	bl	8011f78 <__atomic_load_8>
 8010724:	e9c4 0100 	strd	r0, r1, [r4]
 8010728:	4628      	mov	r0, r5
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	f240 3021 	movw	r0, #801	@ 0x321
 8010730:	bd38      	pop	{r3, r4, r5, pc}
 8010732:	200b      	movs	r0, #11
 8010734:	bd38      	pop	{r3, r4, r5, pc}
 8010736:	200b      	movs	r0, #11
 8010738:	4770      	bx	lr
 801073a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801073e:	bd38      	pop	{r3, r4, r5, pc}

08010740 <rcl_timer_get_guard_condition>:
 8010740:	b130      	cbz	r0, 8010750 <rcl_timer_get_guard_condition+0x10>
 8010742:	6800      	ldr	r0, [r0, #0]
 8010744:	b120      	cbz	r0, 8010750 <rcl_timer_get_guard_condition+0x10>
 8010746:	68c3      	ldr	r3, [r0, #12]
 8010748:	b10b      	cbz	r3, 801074e <rcl_timer_get_guard_condition+0xe>
 801074a:	3008      	adds	r0, #8
 801074c:	4770      	bx	lr
 801074e:	4618      	mov	r0, r3
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop

08010754 <rcl_validate_enclave_name_with_size>:
 8010754:	2800      	cmp	r0, #0
 8010756:	d037      	beq.n	80107c8 <rcl_validate_enclave_name_with_size+0x74>
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	4614      	mov	r4, r2
 801075c:	b0c2      	sub	sp, #264	@ 0x108
 801075e:	b342      	cbz	r2, 80107b2 <rcl_validate_enclave_name_with_size+0x5e>
 8010760:	461e      	mov	r6, r3
 8010762:	466a      	mov	r2, sp
 8010764:	ab01      	add	r3, sp, #4
 8010766:	460d      	mov	r5, r1
 8010768:	f002 f856 	bl	8012818 <rmw_validate_namespace_with_size>
 801076c:	4684      	mov	ip, r0
 801076e:	bb28      	cbnz	r0, 80107bc <rcl_validate_enclave_name_with_size+0x68>
 8010770:	9b00      	ldr	r3, [sp, #0]
 8010772:	b923      	cbnz	r3, 801077e <rcl_validate_enclave_name_with_size+0x2a>
 8010774:	2300      	movs	r3, #0
 8010776:	6023      	str	r3, [r4, #0]
 8010778:	4660      	mov	r0, ip
 801077a:	b042      	add	sp, #264	@ 0x108
 801077c:	bd70      	pop	{r4, r5, r6, pc}
 801077e:	2b07      	cmp	r3, #7
 8010780:	d00f      	beq.n	80107a2 <rcl_validate_enclave_name_with_size+0x4e>
 8010782:	1e5a      	subs	r2, r3, #1
 8010784:	2a05      	cmp	r2, #5
 8010786:	d823      	bhi.n	80107d0 <rcl_validate_enclave_name_with_size+0x7c>
 8010788:	e8df f002 	tbb	[pc, r2]
 801078c:	03030303 	.word	0x03030303
 8010790:	0303      	.short	0x0303
 8010792:	6023      	str	r3, [r4, #0]
 8010794:	2e00      	cmp	r6, #0
 8010796:	d0ef      	beq.n	8010778 <rcl_validate_enclave_name_with_size+0x24>
 8010798:	9b01      	ldr	r3, [sp, #4]
 801079a:	6033      	str	r3, [r6, #0]
 801079c:	4660      	mov	r0, ip
 801079e:	b042      	add	sp, #264	@ 0x108
 80107a0:	bd70      	pop	{r4, r5, r6, pc}
 80107a2:	2dff      	cmp	r5, #255	@ 0xff
 80107a4:	d9e6      	bls.n	8010774 <rcl_validate_enclave_name_with_size+0x20>
 80107a6:	6023      	str	r3, [r4, #0]
 80107a8:	2e00      	cmp	r6, #0
 80107aa:	d0e5      	beq.n	8010778 <rcl_validate_enclave_name_with_size+0x24>
 80107ac:	23fe      	movs	r3, #254	@ 0xfe
 80107ae:	6033      	str	r3, [r6, #0]
 80107b0:	e7e2      	b.n	8010778 <rcl_validate_enclave_name_with_size+0x24>
 80107b2:	f04f 0c0b 	mov.w	ip, #11
 80107b6:	4660      	mov	r0, ip
 80107b8:	b042      	add	sp, #264	@ 0x108
 80107ba:	bd70      	pop	{r4, r5, r6, pc}
 80107bc:	f7fe fc56 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 80107c0:	4684      	mov	ip, r0
 80107c2:	4660      	mov	r0, ip
 80107c4:	b042      	add	sp, #264	@ 0x108
 80107c6:	bd70      	pop	{r4, r5, r6, pc}
 80107c8:	f04f 0c0b 	mov.w	ip, #11
 80107cc:	4660      	mov	r0, ip
 80107ce:	4770      	bx	lr
 80107d0:	4a04      	ldr	r2, [pc, #16]	@ (80107e4 <rcl_validate_enclave_name_with_size+0x90>)
 80107d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80107d6:	a802      	add	r0, sp, #8
 80107d8:	f001 fd8e 	bl	80122f8 <rcutils_snprintf>
 80107dc:	f04f 0c01 	mov.w	ip, #1
 80107e0:	e7ca      	b.n	8010778 <rcl_validate_enclave_name_with_size+0x24>
 80107e2:	bf00      	nop
 80107e4:	0801f778 	.word	0x0801f778

080107e8 <rcl_validate_enclave_name>:
 80107e8:	b168      	cbz	r0, 8010806 <rcl_validate_enclave_name+0x1e>
 80107ea:	b570      	push	{r4, r5, r6, lr}
 80107ec:	460d      	mov	r5, r1
 80107ee:	4616      	mov	r6, r2
 80107f0:	4604      	mov	r4, r0
 80107f2:	f7ef fd6d 	bl	80002d0 <strlen>
 80107f6:	4633      	mov	r3, r6
 80107f8:	4601      	mov	r1, r0
 80107fa:	462a      	mov	r2, r5
 80107fc:	4620      	mov	r0, r4
 80107fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010802:	f7ff bfa7 	b.w	8010754 <rcl_validate_enclave_name_with_size>
 8010806:	200b      	movs	r0, #11
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop

0801080c <rcl_get_zero_initialized_wait_set>:
 801080c:	b510      	push	{r4, lr}
 801080e:	4c08      	ldr	r4, [pc, #32]	@ (8010830 <rcl_get_zero_initialized_wait_set+0x24>)
 8010810:	4686      	mov	lr, r0
 8010812:	4684      	mov	ip, r0
 8010814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010816:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801081a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801081c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010822:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	f8cc 3000 	str.w	r3, [ip]
 801082c:	4670      	mov	r0, lr
 801082e:	bd10      	pop	{r4, pc}
 8010830:	0801f7d8 	.word	0x0801f7d8

08010834 <rcl_wait_set_is_valid>:
 8010834:	b118      	cbz	r0, 801083e <rcl_wait_set_is_valid+0xa>
 8010836:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010838:	3800      	subs	r0, #0
 801083a:	bf18      	it	ne
 801083c:	2001      	movne	r0, #1
 801083e:	4770      	bx	lr

08010840 <rcl_wait_set_fini>:
 8010840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010844:	b083      	sub	sp, #12
 8010846:	2800      	cmp	r0, #0
 8010848:	f000 8098 	beq.w	801097c <rcl_wait_set_fini+0x13c>
 801084c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801084e:	4605      	mov	r5, r0
 8010850:	2e00      	cmp	r6, #0
 8010852:	f000 808f 	beq.w	8010974 <rcl_wait_set_fini+0x134>
 8010856:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8010858:	f003 faba 	bl	8013dd0 <rmw_destroy_wait_set>
 801085c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801085e:	1e06      	subs	r6, r0, #0
 8010860:	bf18      	it	ne
 8010862:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8010866:	2c00      	cmp	r4, #0
 8010868:	f000 8084 	beq.w	8010974 <rcl_wait_set_fini+0x134>
 801086c:	6828      	ldr	r0, [r5, #0]
 801086e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8010872:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010876:	2700      	movs	r7, #0
 8010878:	606f      	str	r7, [r5, #4]
 801087a:	6027      	str	r7, [r4, #0]
 801087c:	b118      	cbz	r0, 8010886 <rcl_wait_set_fini+0x46>
 801087e:	4649      	mov	r1, r9
 8010880:	47c0      	blx	r8
 8010882:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010884:	602f      	str	r7, [r5, #0]
 8010886:	68a0      	ldr	r0, [r4, #8]
 8010888:	b128      	cbz	r0, 8010896 <rcl_wait_set_fini+0x56>
 801088a:	4649      	mov	r1, r9
 801088c:	47c0      	blx	r8
 801088e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010890:	2300      	movs	r3, #0
 8010892:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010896:	68a8      	ldr	r0, [r5, #8]
 8010898:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801089a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801089c:	f04f 0800 	mov.w	r8, #0
 80108a0:	f8c5 800c 	str.w	r8, [r5, #12]
 80108a4:	f8c4 800c 	str.w	r8, [r4, #12]
 80108a8:	b128      	cbz	r0, 80108b6 <rcl_wait_set_fini+0x76>
 80108aa:	47b8      	blx	r7
 80108ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80108ae:	f8c5 8008 	str.w	r8, [r5, #8]
 80108b2:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80108b4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80108b6:	6960      	ldr	r0, [r4, #20]
 80108b8:	f04f 0800 	mov.w	r8, #0
 80108bc:	f8c4 8010 	str.w	r8, [r4, #16]
 80108c0:	b128      	cbz	r0, 80108ce <rcl_wait_set_fini+0x8e>
 80108c2:	47b8      	blx	r7
 80108c4:	f8c4 8014 	str.w	r8, [r4, #20]
 80108c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80108ca:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80108cc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80108ce:	6928      	ldr	r0, [r5, #16]
 80108d0:	f04f 0800 	mov.w	r8, #0
 80108d4:	f8c5 8014 	str.w	r8, [r5, #20]
 80108d8:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 80108dc:	b128      	cbz	r0, 80108ea <rcl_wait_set_fini+0xaa>
 80108de:	47b8      	blx	r7
 80108e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80108e2:	f8c5 8010 	str.w	r8, [r5, #16]
 80108e6:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80108e8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80108ea:	69a8      	ldr	r0, [r5, #24]
 80108ec:	f04f 0800 	mov.w	r8, #0
 80108f0:	f8c5 801c 	str.w	r8, [r5, #28]
 80108f4:	f8c4 8018 	str.w	r8, [r4, #24]
 80108f8:	b128      	cbz	r0, 8010906 <rcl_wait_set_fini+0xc6>
 80108fa:	9101      	str	r1, [sp, #4]
 80108fc:	47b8      	blx	r7
 80108fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010900:	9901      	ldr	r1, [sp, #4]
 8010902:	f8c5 8018 	str.w	r8, [r5, #24]
 8010906:	6a20      	ldr	r0, [r4, #32]
 8010908:	b120      	cbz	r0, 8010914 <rcl_wait_set_fini+0xd4>
 801090a:	47b8      	blx	r7
 801090c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801090e:	2300      	movs	r3, #0
 8010910:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010914:	6a28      	ldr	r0, [r5, #32]
 8010916:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 801091a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801091e:	2700      	movs	r7, #0
 8010920:	626f      	str	r7, [r5, #36]	@ 0x24
 8010922:	6267      	str	r7, [r4, #36]	@ 0x24
 8010924:	b118      	cbz	r0, 801092e <rcl_wait_set_fini+0xee>
 8010926:	4649      	mov	r1, r9
 8010928:	47c0      	blx	r8
 801092a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801092c:	622f      	str	r7, [r5, #32]
 801092e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010930:	b128      	cbz	r0, 801093e <rcl_wait_set_fini+0xfe>
 8010932:	4649      	mov	r1, r9
 8010934:	47c0      	blx	r8
 8010936:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010938:	2300      	movs	r3, #0
 801093a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801093e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010940:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8010944:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010948:	2700      	movs	r7, #0
 801094a:	62ef      	str	r7, [r5, #44]	@ 0x2c
 801094c:	6327      	str	r7, [r4, #48]	@ 0x30
 801094e:	b118      	cbz	r0, 8010958 <rcl_wait_set_fini+0x118>
 8010950:	4649      	mov	r1, r9
 8010952:	47c0      	blx	r8
 8010954:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010956:	62af      	str	r7, [r5, #40]	@ 0x28
 8010958:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801095a:	b128      	cbz	r0, 8010968 <rcl_wait_set_fini+0x128>
 801095c:	4649      	mov	r1, r9
 801095e:	47c0      	blx	r8
 8010960:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010962:	2300      	movs	r3, #0
 8010964:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8010968:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801096a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801096c:	4620      	mov	r0, r4
 801096e:	4798      	blx	r3
 8010970:	2300      	movs	r3, #0
 8010972:	632b      	str	r3, [r5, #48]	@ 0x30
 8010974:	4630      	mov	r0, r6
 8010976:	b003      	add	sp, #12
 8010978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801097c:	260b      	movs	r6, #11
 801097e:	4630      	mov	r0, r6
 8010980:	b003      	add	sp, #12
 8010982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010986:	bf00      	nop

08010988 <rcl_wait_set_add_subscription>:
 8010988:	b318      	cbz	r0, 80109d2 <rcl_wait_set_add_subscription+0x4a>
 801098a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801098c:	b570      	push	{r4, r5, r6, lr}
 801098e:	4604      	mov	r4, r0
 8010990:	b30b      	cbz	r3, 80109d6 <rcl_wait_set_add_subscription+0x4e>
 8010992:	b319      	cbz	r1, 80109dc <rcl_wait_set_add_subscription+0x54>
 8010994:	681d      	ldr	r5, [r3, #0]
 8010996:	6840      	ldr	r0, [r0, #4]
 8010998:	4285      	cmp	r5, r0
 801099a:	d217      	bcs.n	80109cc <rcl_wait_set_add_subscription+0x44>
 801099c:	6820      	ldr	r0, [r4, #0]
 801099e:	1c6e      	adds	r6, r5, #1
 80109a0:	601e      	str	r6, [r3, #0]
 80109a2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80109a6:	b102      	cbz	r2, 80109aa <rcl_wait_set_add_subscription+0x22>
 80109a8:	6015      	str	r5, [r2, #0]
 80109aa:	4608      	mov	r0, r1
 80109ac:	f7ff fd14 	bl	80103d8 <rcl_subscription_get_rmw_handle>
 80109b0:	b150      	cbz	r0, 80109c8 <rcl_wait_set_add_subscription+0x40>
 80109b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80109b4:	6842      	ldr	r2, [r0, #4]
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109bc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80109be:	6853      	ldr	r3, [r2, #4]
 80109c0:	3301      	adds	r3, #1
 80109c2:	2000      	movs	r0, #0
 80109c4:	6053      	str	r3, [r2, #4]
 80109c6:	bd70      	pop	{r4, r5, r6, pc}
 80109c8:	2001      	movs	r0, #1
 80109ca:	bd70      	pop	{r4, r5, r6, pc}
 80109cc:	f240 3086 	movw	r0, #902	@ 0x386
 80109d0:	bd70      	pop	{r4, r5, r6, pc}
 80109d2:	200b      	movs	r0, #11
 80109d4:	4770      	bx	lr
 80109d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80109da:	bd70      	pop	{r4, r5, r6, pc}
 80109dc:	200b      	movs	r0, #11
 80109de:	bd70      	pop	{r4, r5, r6, pc}

080109e0 <rcl_wait_set_clear>:
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d074      	beq.n	8010ace <rcl_wait_set_clear+0xee>
 80109e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80109e6:	b510      	push	{r4, lr}
 80109e8:	4604      	mov	r4, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d071      	beq.n	8010ad2 <rcl_wait_set_clear+0xf2>
 80109ee:	6800      	ldr	r0, [r0, #0]
 80109f0:	b138      	cbz	r0, 8010a02 <rcl_wait_set_clear+0x22>
 80109f2:	6862      	ldr	r2, [r4, #4]
 80109f4:	2100      	movs	r1, #0
 80109f6:	0092      	lsls	r2, r2, #2
 80109f8:	f00a ff60 	bl	801b8bc <memset>
 80109fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80109fe:	2200      	movs	r2, #0
 8010a00:	601a      	str	r2, [r3, #0]
 8010a02:	68a0      	ldr	r0, [r4, #8]
 8010a04:	b138      	cbz	r0, 8010a16 <rcl_wait_set_clear+0x36>
 8010a06:	68e2      	ldr	r2, [r4, #12]
 8010a08:	2100      	movs	r1, #0
 8010a0a:	0092      	lsls	r2, r2, #2
 8010a0c:	f00a ff56 	bl	801b8bc <memset>
 8010a10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a12:	2200      	movs	r2, #0
 8010a14:	60da      	str	r2, [r3, #12]
 8010a16:	69a0      	ldr	r0, [r4, #24]
 8010a18:	b138      	cbz	r0, 8010a2a <rcl_wait_set_clear+0x4a>
 8010a1a:	69e2      	ldr	r2, [r4, #28]
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	0092      	lsls	r2, r2, #2
 8010a20:	f00a ff4c 	bl	801b8bc <memset>
 8010a24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a26:	2200      	movs	r2, #0
 8010a28:	619a      	str	r2, [r3, #24]
 8010a2a:	6a20      	ldr	r0, [r4, #32]
 8010a2c:	b138      	cbz	r0, 8010a3e <rcl_wait_set_clear+0x5e>
 8010a2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010a30:	2100      	movs	r1, #0
 8010a32:	0092      	lsls	r2, r2, #2
 8010a34:	f00a ff42 	bl	801b8bc <memset>
 8010a38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8010a3e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010a40:	b138      	cbz	r0, 8010a52 <rcl_wait_set_clear+0x72>
 8010a42:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010a44:	2100      	movs	r1, #0
 8010a46:	0092      	lsls	r2, r2, #2
 8010a48:	f00a ff38 	bl	801b8bc <memset>
 8010a4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a4e:	2200      	movs	r2, #0
 8010a50:	631a      	str	r2, [r3, #48]	@ 0x30
 8010a52:	6920      	ldr	r0, [r4, #16]
 8010a54:	b138      	cbz	r0, 8010a66 <rcl_wait_set_clear+0x86>
 8010a56:	6962      	ldr	r2, [r4, #20]
 8010a58:	2100      	movs	r1, #0
 8010a5a:	0092      	lsls	r2, r2, #2
 8010a5c:	f00a ff2e 	bl	801b8bc <memset>
 8010a60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a62:	2200      	movs	r2, #0
 8010a64:	641a      	str	r2, [r3, #64]	@ 0x40
 8010a66:	6898      	ldr	r0, [r3, #8]
 8010a68:	b138      	cbz	r0, 8010a7a <rcl_wait_set_clear+0x9a>
 8010a6a:	685a      	ldr	r2, [r3, #4]
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	0092      	lsls	r2, r2, #2
 8010a70:	f00a ff24 	bl	801b8bc <memset>
 8010a74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a76:	2200      	movs	r2, #0
 8010a78:	605a      	str	r2, [r3, #4]
 8010a7a:	6958      	ldr	r0, [r3, #20]
 8010a7c:	b138      	cbz	r0, 8010a8e <rcl_wait_set_clear+0xae>
 8010a7e:	691a      	ldr	r2, [r3, #16]
 8010a80:	2100      	movs	r1, #0
 8010a82:	0092      	lsls	r2, r2, #2
 8010a84:	f00a ff1a 	bl	801b8bc <memset>
 8010a88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	611a      	str	r2, [r3, #16]
 8010a8e:	6a18      	ldr	r0, [r3, #32]
 8010a90:	b138      	cbz	r0, 8010aa2 <rcl_wait_set_clear+0xc2>
 8010a92:	69da      	ldr	r2, [r3, #28]
 8010a94:	2100      	movs	r1, #0
 8010a96:	0092      	lsls	r2, r2, #2
 8010a98:	f00a ff10 	bl	801b8bc <memset>
 8010a9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	61da      	str	r2, [r3, #28]
 8010aa2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010aa4:	b138      	cbz	r0, 8010ab6 <rcl_wait_set_clear+0xd6>
 8010aa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	0092      	lsls	r2, r2, #2
 8010aac:	f00a ff06 	bl	801b8bc <memset>
 8010ab0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	629a      	str	r2, [r3, #40]	@ 0x28
 8010ab6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010ab8:	b138      	cbz	r0, 8010aca <rcl_wait_set_clear+0xea>
 8010aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010abc:	2100      	movs	r1, #0
 8010abe:	0092      	lsls	r2, r2, #2
 8010ac0:	f00a fefc 	bl	801b8bc <memset>
 8010ac4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8010aca:	2000      	movs	r0, #0
 8010acc:	bd10      	pop	{r4, pc}
 8010ace:	200b      	movs	r0, #11
 8010ad0:	4770      	bx	lr
 8010ad2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010ad6:	bd10      	pop	{r4, pc}

08010ad8 <rcl_wait_set_resize>:
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	f000 81a1 	beq.w	8010e20 <rcl_wait_set_resize+0x348>
 8010ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae2:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	4604      	mov	r4, r0
 8010aea:	f1ba 0f00 	cmp.w	sl, #0
 8010aee:	f000 8199 	beq.w	8010e24 <rcl_wait_set_resize+0x34c>
 8010af2:	f04f 0800 	mov.w	r8, #0
 8010af6:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8010afa:	461e      	mov	r6, r3
 8010afc:	460f      	mov	r7, r1
 8010afe:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8010b02:	4615      	mov	r5, r2
 8010b04:	f8c0 8004 	str.w	r8, [r0, #4]
 8010b08:	6800      	ldr	r0, [r0, #0]
 8010b0a:	f8ca 8000 	str.w	r8, [sl]
 8010b0e:	2900      	cmp	r1, #0
 8010b10:	f000 80cf 	beq.w	8010cb2 <rcl_wait_set_resize+0x1da>
 8010b14:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8010b18:	464a      	mov	r2, r9
 8010b1a:	4651      	mov	r1, sl
 8010b1c:	9301      	str	r3, [sp, #4]
 8010b1e:	4798      	blx	r3
 8010b20:	9b01      	ldr	r3, [sp, #4]
 8010b22:	6020      	str	r0, [r4, #0]
 8010b24:	2800      	cmp	r0, #0
 8010b26:	f000 8109 	beq.w	8010d3c <rcl_wait_set_resize+0x264>
 8010b2a:	4652      	mov	r2, sl
 8010b2c:	4641      	mov	r1, r8
 8010b2e:	9301      	str	r3, [sp, #4]
 8010b30:	f00a fec4 	bl	801b8bc <memset>
 8010b34:	6067      	str	r7, [r4, #4]
 8010b36:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8010b38:	9b01      	ldr	r3, [sp, #4]
 8010b3a:	68b8      	ldr	r0, [r7, #8]
 8010b3c:	f8c7 8004 	str.w	r8, [r7, #4]
 8010b40:	464a      	mov	r2, r9
 8010b42:	4651      	mov	r1, sl
 8010b44:	4798      	blx	r3
 8010b46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010b48:	60b8      	str	r0, [r7, #8]
 8010b4a:	689f      	ldr	r7, [r3, #8]
 8010b4c:	2f00      	cmp	r7, #0
 8010b4e:	f000 80f0 	beq.w	8010d32 <rcl_wait_set_resize+0x25a>
 8010b52:	4652      	mov	r2, sl
 8010b54:	4641      	mov	r1, r8
 8010b56:	4638      	mov	r0, r7
 8010b58:	f00a feb0 	bl	801b8bc <memset>
 8010b5c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010b60:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010b64:	68a0      	ldr	r0, [r4, #8]
 8010b66:	2700      	movs	r7, #0
 8010b68:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8010b6c:	60e7      	str	r7, [r4, #12]
 8010b6e:	f8ca 700c 	str.w	r7, [sl, #12]
 8010b72:	2d00      	cmp	r5, #0
 8010b74:	f040 80b0 	bne.w	8010cd8 <rcl_wait_set_resize+0x200>
 8010b78:	b130      	cbz	r0, 8010b88 <rcl_wait_set_resize+0xb0>
 8010b7a:	4641      	mov	r1, r8
 8010b7c:	4790      	blx	r2
 8010b7e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010b82:	60a5      	str	r5, [r4, #8]
 8010b84:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010b88:	f8da 0014 	ldr.w	r0, [sl, #20]
 8010b8c:	2700      	movs	r7, #0
 8010b8e:	19ad      	adds	r5, r5, r6
 8010b90:	f8ca 7010 	str.w	r7, [sl, #16]
 8010b94:	f040 80b8 	bne.w	8010d08 <rcl_wait_set_resize+0x230>
 8010b98:	b148      	cbz	r0, 8010bae <rcl_wait_set_resize+0xd6>
 8010b9a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8010b9e:	4641      	mov	r1, r8
 8010ba0:	4798      	blx	r3
 8010ba2:	f8ca 5014 	str.w	r5, [sl, #20]
 8010ba6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010baa:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010bae:	6920      	ldr	r0, [r4, #16]
 8010bb0:	2500      	movs	r5, #0
 8010bb2:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8010bb6:	6165      	str	r5, [r4, #20]
 8010bb8:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8010bbc:	2e00      	cmp	r6, #0
 8010bbe:	f040 80c1 	bne.w	8010d44 <rcl_wait_set_resize+0x26c>
 8010bc2:	b140      	cbz	r0, 8010bd6 <rcl_wait_set_resize+0xfe>
 8010bc4:	4641      	mov	r1, r8
 8010bc6:	47c8      	blx	r9
 8010bc8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010bcc:	6126      	str	r6, [r4, #16]
 8010bce:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8010bd2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010bd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bd8:	69a0      	ldr	r0, [r4, #24]
 8010bda:	2500      	movs	r5, #0
 8010bdc:	61e5      	str	r5, [r4, #28]
 8010bde:	f8ca 5018 	str.w	r5, [sl, #24]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f040 80c2 	bne.w	8010d6c <rcl_wait_set_resize+0x294>
 8010be8:	b128      	cbz	r0, 8010bf6 <rcl_wait_set_resize+0x11e>
 8010bea:	4641      	mov	r1, r8
 8010bec:	47c8      	blx	r9
 8010bee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bf0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010bf4:	61a3      	str	r3, [r4, #24]
 8010bf6:	f8da 0020 	ldr.w	r0, [sl, #32]
 8010bfa:	b130      	cbz	r0, 8010c0a <rcl_wait_set_resize+0x132>
 8010bfc:	4641      	mov	r1, r8
 8010bfe:	47c8      	blx	r9
 8010c00:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010c04:	2300      	movs	r3, #0
 8010c06:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8010c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c0c:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8010c10:	6a20      	ldr	r0, [r4, #32]
 8010c12:	2500      	movs	r5, #0
 8010c14:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8010c18:	6265      	str	r5, [r4, #36]	@ 0x24
 8010c1a:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f000 80c8 	beq.w	8010db4 <rcl_wait_set_resize+0x2dc>
 8010c24:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8010c28:	4632      	mov	r2, r6
 8010c2a:	4649      	mov	r1, r9
 8010c2c:	47c0      	blx	r8
 8010c2e:	6220      	str	r0, [r4, #32]
 8010c30:	2800      	cmp	r0, #0
 8010c32:	f000 8083 	beq.w	8010d3c <rcl_wait_set_resize+0x264>
 8010c36:	464a      	mov	r2, r9
 8010c38:	4629      	mov	r1, r5
 8010c3a:	f00a fe3f 	bl	801b8bc <memset>
 8010c3e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c44:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c46:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8010c4a:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8010c4e:	4632      	mov	r2, r6
 8010c50:	4649      	mov	r1, r9
 8010c52:	47c0      	blx	r8
 8010c54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010c56:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8010c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f000 80fb 	beq.w	8010e58 <rcl_wait_set_resize+0x380>
 8010c62:	464a      	mov	r2, r9
 8010c64:	4629      	mov	r1, r5
 8010c66:	4618      	mov	r0, r3
 8010c68:	f00a fe28 	bl	801b8bc <memset>
 8010c6c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010c70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c72:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8010c76:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010c78:	2500      	movs	r5, #0
 8010c7a:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8010c7e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8010c80:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f040 80a9 	bne.w	8010ddc <rcl_wait_set_resize+0x304>
 8010c8a:	b128      	cbz	r0, 8010c98 <rcl_wait_set_resize+0x1c0>
 8010c8c:	4631      	mov	r1, r6
 8010c8e:	47b8      	blx	r7
 8010c90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c92:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010c96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c98:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8010c9c:	b128      	cbz	r0, 8010caa <rcl_wait_set_resize+0x1d2>
 8010c9e:	4631      	mov	r1, r6
 8010ca0:	47b8      	blx	r7
 8010ca2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8010caa:	2000      	movs	r0, #0
 8010cac:	b003      	add	sp, #12
 8010cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb2:	b120      	cbz	r0, 8010cbe <rcl_wait_set_resize+0x1e6>
 8010cb4:	4649      	mov	r1, r9
 8010cb6:	47d8      	blx	fp
 8010cb8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010cbc:	6027      	str	r7, [r4, #0]
 8010cbe:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	f43f af4c 	beq.w	8010b60 <rcl_wait_set_resize+0x88>
 8010cc8:	4649      	mov	r1, r9
 8010cca:	47d8      	blx	fp
 8010ccc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8010cd6:	e743      	b.n	8010b60 <rcl_wait_set_resize+0x88>
 8010cd8:	4642      	mov	r2, r8
 8010cda:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8010cde:	4641      	mov	r1, r8
 8010ce0:	4798      	blx	r3
 8010ce2:	60a0      	str	r0, [r4, #8]
 8010ce4:	b350      	cbz	r0, 8010d3c <rcl_wait_set_resize+0x264>
 8010ce6:	4642      	mov	r2, r8
 8010ce8:	4639      	mov	r1, r7
 8010cea:	f00a fde7 	bl	801b8bc <memset>
 8010cee:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010cf2:	60e5      	str	r5, [r4, #12]
 8010cf4:	2700      	movs	r7, #0
 8010cf6:	19ad      	adds	r5, r5, r6
 8010cf8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010cfc:	f8da 0014 	ldr.w	r0, [sl, #20]
 8010d00:	f8ca 7010 	str.w	r7, [sl, #16]
 8010d04:	f43f af48 	beq.w	8010b98 <rcl_wait_set_resize+0xc0>
 8010d08:	00ad      	lsls	r5, r5, #2
 8010d0a:	4642      	mov	r2, r8
 8010d0c:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8010d10:	4629      	mov	r1, r5
 8010d12:	4798      	blx	r3
 8010d14:	4680      	mov	r8, r0
 8010d16:	f8ca 0014 	str.w	r0, [sl, #20]
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	f000 8085 	beq.w	8010e2a <rcl_wait_set_resize+0x352>
 8010d20:	462a      	mov	r2, r5
 8010d22:	4639      	mov	r1, r7
 8010d24:	f00a fdca 	bl	801b8bc <memset>
 8010d28:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010d2c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010d30:	e73d      	b.n	8010bae <rcl_wait_set_resize+0xd6>
 8010d32:	6820      	ldr	r0, [r4, #0]
 8010d34:	4649      	mov	r1, r9
 8010d36:	47d8      	blx	fp
 8010d38:	e9c4 7700 	strd	r7, r7, [r4]
 8010d3c:	200a      	movs	r0, #10
 8010d3e:	b003      	add	sp, #12
 8010d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d44:	4642      	mov	r2, r8
 8010d46:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8010d4a:	4641      	mov	r1, r8
 8010d4c:	47b8      	blx	r7
 8010d4e:	6120      	str	r0, [r4, #16]
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d0f3      	beq.n	8010d3c <rcl_wait_set_resize+0x264>
 8010d54:	4642      	mov	r2, r8
 8010d56:	4629      	mov	r1, r5
 8010d58:	f00a fdb0 	bl	801b8bc <memset>
 8010d5c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010d60:	6166      	str	r6, [r4, #20]
 8010d62:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8010d66:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8010d6a:	e734      	b.n	8010bd6 <rcl_wait_set_resize+0xfe>
 8010d6c:	009e      	lsls	r6, r3, #2
 8010d6e:	4642      	mov	r2, r8
 8010d70:	4631      	mov	r1, r6
 8010d72:	47b8      	blx	r7
 8010d74:	61a0      	str	r0, [r4, #24]
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d0e0      	beq.n	8010d3c <rcl_wait_set_resize+0x264>
 8010d7a:	4632      	mov	r2, r6
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	f00a fd9d 	bl	801b8bc <memset>
 8010d82:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010d86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d88:	61e3      	str	r3, [r4, #28]
 8010d8a:	f8da 0020 	ldr.w	r0, [sl, #32]
 8010d8e:	f8ca 501c 	str.w	r5, [sl, #28]
 8010d92:	4642      	mov	r2, r8
 8010d94:	4631      	mov	r1, r6
 8010d96:	47b8      	blx	r7
 8010d98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d9a:	f8ca 0020 	str.w	r0, [sl, #32]
 8010d9e:	6a1f      	ldr	r7, [r3, #32]
 8010da0:	2f00      	cmp	r7, #0
 8010da2:	d053      	beq.n	8010e4c <rcl_wait_set_resize+0x374>
 8010da4:	4632      	mov	r2, r6
 8010da6:	4629      	mov	r1, r5
 8010da8:	4638      	mov	r0, r7
 8010daa:	f00a fd87 	bl	801b8bc <memset>
 8010dae:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010db2:	e72a      	b.n	8010c0a <rcl_wait_set_resize+0x132>
 8010db4:	b128      	cbz	r0, 8010dc2 <rcl_wait_set_resize+0x2ea>
 8010db6:	4631      	mov	r1, r6
 8010db8:	47b8      	blx	r7
 8010dba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010dbc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010dc0:	6223      	str	r3, [r4, #32]
 8010dc2:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	f43f af52 	beq.w	8010c70 <rcl_wait_set_resize+0x198>
 8010dcc:	4631      	mov	r1, r6
 8010dce:	47b8      	blx	r7
 8010dd0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8010dda:	e749      	b.n	8010c70 <rcl_wait_set_resize+0x198>
 8010ddc:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8010de0:	4632      	mov	r2, r6
 8010de2:	4649      	mov	r1, r9
 8010de4:	47c0      	blx	r8
 8010de6:	62a0      	str	r0, [r4, #40]	@ 0x28
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d0a7      	beq.n	8010d3c <rcl_wait_set_resize+0x264>
 8010dec:	464a      	mov	r2, r9
 8010dee:	4629      	mov	r1, r5
 8010df0:	f00a fd64 	bl	801b8bc <memset>
 8010df4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8010df8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dfa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010dfc:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8010e00:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8010e04:	4632      	mov	r2, r6
 8010e06:	4649      	mov	r1, r9
 8010e08:	47c0      	blx	r8
 8010e0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e0c:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8010e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e12:	b34b      	cbz	r3, 8010e68 <rcl_wait_set_resize+0x390>
 8010e14:	464a      	mov	r2, r9
 8010e16:	4629      	mov	r1, r5
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f00a fd4f 	bl	801b8bc <memset>
 8010e1e:	e744      	b.n	8010caa <rcl_wait_set_resize+0x1d2>
 8010e20:	200b      	movs	r0, #11
 8010e22:	4770      	bx	lr
 8010e24:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010e28:	e789      	b.n	8010d3e <rcl_wait_set_resize+0x266>
 8010e2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e2c:	68a0      	ldr	r0, [r4, #8]
 8010e2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010e30:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010e32:	4790      	blx	r2
 8010e34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e36:	6920      	ldr	r0, [r4, #16]
 8010e38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010e3a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010e3c:	f8c4 800c 	str.w	r8, [r4, #12]
 8010e40:	f8c4 8008 	str.w	r8, [r4, #8]
 8010e44:	4790      	blx	r2
 8010e46:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8010e4a:	e777      	b.n	8010d3c <rcl_wait_set_resize+0x264>
 8010e4c:	69a0      	ldr	r0, [r4, #24]
 8010e4e:	4641      	mov	r1, r8
 8010e50:	47c8      	blx	r9
 8010e52:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8010e56:	e771      	b.n	8010d3c <rcl_wait_set_resize+0x264>
 8010e58:	6a20      	ldr	r0, [r4, #32]
 8010e5a:	9301      	str	r3, [sp, #4]
 8010e5c:	4631      	mov	r1, r6
 8010e5e:	47b8      	blx	r7
 8010e60:	9b01      	ldr	r3, [sp, #4]
 8010e62:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8010e66:	e769      	b.n	8010d3c <rcl_wait_set_resize+0x264>
 8010e68:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010e6a:	9301      	str	r3, [sp, #4]
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	47b8      	blx	r7
 8010e70:	9b01      	ldr	r3, [sp, #4]
 8010e72:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8010e76:	e761      	b.n	8010d3c <rcl_wait_set_resize+0x264>

08010e78 <rcl_wait_set_init>:
 8010e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e7c:	b084      	sub	sp, #16
 8010e7e:	4604      	mov	r4, r0
 8010e80:	a810      	add	r0, sp, #64	@ 0x40
 8010e82:	460d      	mov	r5, r1
 8010e84:	4690      	mov	r8, r2
 8010e86:	461f      	mov	r7, r3
 8010e88:	f7fc fa2a 	bl	800d2e0 <rcutils_allocator_is_valid>
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d06c      	beq.n	8010f6a <rcl_wait_set_init+0xf2>
 8010e90:	2c00      	cmp	r4, #0
 8010e92:	d06a      	beq.n	8010f6a <rcl_wait_set_init+0xf2>
 8010e94:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8010e96:	b126      	cbz	r6, 8010ea2 <rcl_wait_set_init+0x2a>
 8010e98:	2564      	movs	r5, #100	@ 0x64
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	b004      	add	sp, #16
 8010e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ea2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d060      	beq.n	8010f6a <rcl_wait_set_init+0xf2>
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fe f8ff 	bl	800f0ac <rcl_context_is_valid>
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d060      	beq.n	8010f74 <rcl_wait_set_init+0xfc>
 8010eb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010eb4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010eb6:	205c      	movs	r0, #92	@ 0x5c
 8010eb8:	4798      	blx	r3
 8010eba:	6320      	str	r0, [r4, #48]	@ 0x30
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	d063      	beq.n	8010f88 <rcl_wait_set_init+0x110>
 8010ec0:	4631      	mov	r1, r6
 8010ec2:	225c      	movs	r2, #92	@ 0x5c
 8010ec4:	f00a fcfa 	bl	801b8bc <memset>
 8010ec8:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8010ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ece:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8010ed2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8010ed6:	eb03 0e02 	add.w	lr, r3, r2
 8010eda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010edc:	449e      	add	lr, r3
 8010ede:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ee0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010ee4:	f8d3 a000 	ldr.w	sl, [r3]
 8010ee8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010eec:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8010ef0:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8010ef4:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8010ef8:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8010efc:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8010f00:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 8010f04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f06:	44c6      	add	lr, r8
 8010f08:	f8dc 3000 	ldr.w	r3, [ip]
 8010f0c:	6033      	str	r3, [r6, #0]
 8010f0e:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8010f12:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8010f16:	f002 ff51 	bl	8013dbc <rmw_create_wait_set>
 8010f1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010f1c:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8010f20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010f22:	b348      	cbz	r0, 8010f78 <rcl_wait_set_init+0x100>
 8010f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f26:	9302      	str	r3, [sp, #8]
 8010f28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f2a:	9301      	str	r3, [sp, #4]
 8010f2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	4629      	mov	r1, r5
 8010f32:	463b      	mov	r3, r7
 8010f34:	4642      	mov	r2, r8
 8010f36:	4620      	mov	r0, r4
 8010f38:	f7ff fdce 	bl	8010ad8 <rcl_wait_set_resize>
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	d0ab      	beq.n	8010e9a <rcl_wait_set_init+0x22>
 8010f42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010f44:	bb13      	cbnz	r3, 8010f8c <rcl_wait_set_init+0x114>
 8010f46:	2600      	movs	r6, #0
 8010f48:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010f4c:	9600      	str	r6, [sp, #0]
 8010f4e:	4633      	mov	r3, r6
 8010f50:	4632      	mov	r2, r6
 8010f52:	4631      	mov	r1, r6
 8010f54:	4620      	mov	r0, r4
 8010f56:	f7ff fdbf 	bl	8010ad8 <rcl_wait_set_resize>
 8010f5a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	d09c      	beq.n	8010e9a <rcl_wait_set_init+0x22>
 8010f60:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010f62:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8010f64:	4798      	blx	r3
 8010f66:	6326      	str	r6, [r4, #48]	@ 0x30
 8010f68:	e797      	b.n	8010e9a <rcl_wait_set_init+0x22>
 8010f6a:	250b      	movs	r5, #11
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	b004      	add	sp, #16
 8010f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f74:	2565      	movs	r5, #101	@ 0x65
 8010f76:	e790      	b.n	8010e9a <rcl_wait_set_init+0x22>
 8010f78:	2501      	movs	r5, #1
 8010f7a:	f002 ff29 	bl	8013dd0 <rmw_destroy_wait_set>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	bf18      	it	ne
 8010f82:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8010f86:	e7de      	b.n	8010f46 <rcl_wait_set_init+0xce>
 8010f88:	250a      	movs	r5, #10
 8010f8a:	e786      	b.n	8010e9a <rcl_wait_set_init+0x22>
 8010f8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010f8e:	e7f4      	b.n	8010f7a <rcl_wait_set_init+0x102>

08010f90 <rcl_wait_set_add_guard_condition>:
 8010f90:	b318      	cbz	r0, 8010fda <rcl_wait_set_add_guard_condition+0x4a>
 8010f92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010f94:	b570      	push	{r4, r5, r6, lr}
 8010f96:	4604      	mov	r4, r0
 8010f98:	b30b      	cbz	r3, 8010fde <rcl_wait_set_add_guard_condition+0x4e>
 8010f9a:	b319      	cbz	r1, 8010fe4 <rcl_wait_set_add_guard_condition+0x54>
 8010f9c:	68dd      	ldr	r5, [r3, #12]
 8010f9e:	68c0      	ldr	r0, [r0, #12]
 8010fa0:	4285      	cmp	r5, r0
 8010fa2:	d217      	bcs.n	8010fd4 <rcl_wait_set_add_guard_condition+0x44>
 8010fa4:	68a0      	ldr	r0, [r4, #8]
 8010fa6:	1c6e      	adds	r6, r5, #1
 8010fa8:	60de      	str	r6, [r3, #12]
 8010faa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010fae:	b102      	cbz	r2, 8010fb2 <rcl_wait_set_add_guard_condition+0x22>
 8010fb0:	6015      	str	r5, [r2, #0]
 8010fb2:	4608      	mov	r0, r1
 8010fb4:	f007 fe68 	bl	8018c88 <rcl_guard_condition_get_rmw_handle>
 8010fb8:	b150      	cbz	r0, 8010fd0 <rcl_wait_set_add_guard_condition+0x40>
 8010fba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fbc:	6842      	ldr	r2, [r0, #4]
 8010fbe:	695b      	ldr	r3, [r3, #20]
 8010fc0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fc4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010fc6:	6913      	ldr	r3, [r2, #16]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	2000      	movs	r0, #0
 8010fcc:	6113      	str	r3, [r2, #16]
 8010fce:	bd70      	pop	{r4, r5, r6, pc}
 8010fd0:	2001      	movs	r0, #1
 8010fd2:	bd70      	pop	{r4, r5, r6, pc}
 8010fd4:	f240 3086 	movw	r0, #902	@ 0x386
 8010fd8:	bd70      	pop	{r4, r5, r6, pc}
 8010fda:	200b      	movs	r0, #11
 8010fdc:	4770      	bx	lr
 8010fde:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010fe2:	bd70      	pop	{r4, r5, r6, pc}
 8010fe4:	200b      	movs	r0, #11
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}

08010fe8 <rcl_wait_set_add_timer>:
 8010fe8:	b328      	cbz	r0, 8011036 <rcl_wait_set_add_timer+0x4e>
 8010fea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010fec:	b570      	push	{r4, r5, r6, lr}
 8010fee:	4604      	mov	r4, r0
 8010ff0:	b31b      	cbz	r3, 801103a <rcl_wait_set_add_timer+0x52>
 8010ff2:	b329      	cbz	r1, 8011040 <rcl_wait_set_add_timer+0x58>
 8010ff4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010ff6:	6965      	ldr	r5, [r4, #20]
 8010ff8:	42a8      	cmp	r0, r5
 8010ffa:	d219      	bcs.n	8011030 <rcl_wait_set_add_timer+0x48>
 8010ffc:	6925      	ldr	r5, [r4, #16]
 8010ffe:	1c46      	adds	r6, r0, #1
 8011000:	641e      	str	r6, [r3, #64]	@ 0x40
 8011002:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011006:	b102      	cbz	r2, 801100a <rcl_wait_set_add_timer+0x22>
 8011008:	6010      	str	r0, [r2, #0]
 801100a:	4608      	mov	r0, r1
 801100c:	f7ff fb98 	bl	8010740 <rcl_timer_get_guard_condition>
 8011010:	b160      	cbz	r0, 801102c <rcl_wait_set_add_timer+0x44>
 8011012:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011014:	68e3      	ldr	r3, [r4, #12]
 8011016:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011018:	3b01      	subs	r3, #1
 801101a:	441d      	add	r5, r3
 801101c:	f007 fe34 	bl	8018c88 <rcl_guard_condition_get_rmw_handle>
 8011020:	b180      	cbz	r0, 8011044 <rcl_wait_set_add_timer+0x5c>
 8011022:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011024:	6842      	ldr	r2, [r0, #4]
 8011026:	695b      	ldr	r3, [r3, #20]
 8011028:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801102c:	2000      	movs	r0, #0
 801102e:	bd70      	pop	{r4, r5, r6, pc}
 8011030:	f240 3086 	movw	r0, #902	@ 0x386
 8011034:	bd70      	pop	{r4, r5, r6, pc}
 8011036:	200b      	movs	r0, #11
 8011038:	4770      	bx	lr
 801103a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801103e:	bd70      	pop	{r4, r5, r6, pc}
 8011040:	200b      	movs	r0, #11
 8011042:	bd70      	pop	{r4, r5, r6, pc}
 8011044:	2001      	movs	r0, #1
 8011046:	bd70      	pop	{r4, r5, r6, pc}

08011048 <rcl_wait_set_add_client>:
 8011048:	b318      	cbz	r0, 8011092 <rcl_wait_set_add_client+0x4a>
 801104a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801104c:	b570      	push	{r4, r5, r6, lr}
 801104e:	4604      	mov	r4, r0
 8011050:	b30b      	cbz	r3, 8011096 <rcl_wait_set_add_client+0x4e>
 8011052:	b319      	cbz	r1, 801109c <rcl_wait_set_add_client+0x54>
 8011054:	699d      	ldr	r5, [r3, #24]
 8011056:	69c0      	ldr	r0, [r0, #28]
 8011058:	4285      	cmp	r5, r0
 801105a:	d217      	bcs.n	801108c <rcl_wait_set_add_client+0x44>
 801105c:	69a0      	ldr	r0, [r4, #24]
 801105e:	1c6e      	adds	r6, r5, #1
 8011060:	619e      	str	r6, [r3, #24]
 8011062:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011066:	b102      	cbz	r2, 801106a <rcl_wait_set_add_client+0x22>
 8011068:	6015      	str	r5, [r2, #0]
 801106a:	4608      	mov	r0, r1
 801106c:	f7fd ff30 	bl	800eed0 <rcl_client_get_rmw_handle>
 8011070:	b150      	cbz	r0, 8011088 <rcl_wait_set_add_client+0x40>
 8011072:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011074:	6842      	ldr	r2, [r0, #4]
 8011076:	6a1b      	ldr	r3, [r3, #32]
 8011078:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801107c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801107e:	69d3      	ldr	r3, [r2, #28]
 8011080:	3301      	adds	r3, #1
 8011082:	2000      	movs	r0, #0
 8011084:	61d3      	str	r3, [r2, #28]
 8011086:	bd70      	pop	{r4, r5, r6, pc}
 8011088:	2001      	movs	r0, #1
 801108a:	bd70      	pop	{r4, r5, r6, pc}
 801108c:	f240 3086 	movw	r0, #902	@ 0x386
 8011090:	bd70      	pop	{r4, r5, r6, pc}
 8011092:	200b      	movs	r0, #11
 8011094:	4770      	bx	lr
 8011096:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801109a:	bd70      	pop	{r4, r5, r6, pc}
 801109c:	200b      	movs	r0, #11
 801109e:	bd70      	pop	{r4, r5, r6, pc}

080110a0 <rcl_wait_set_add_service>:
 80110a0:	b318      	cbz	r0, 80110ea <rcl_wait_set_add_service+0x4a>
 80110a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80110a4:	b570      	push	{r4, r5, r6, lr}
 80110a6:	4604      	mov	r4, r0
 80110a8:	b30b      	cbz	r3, 80110ee <rcl_wait_set_add_service+0x4e>
 80110aa:	b319      	cbz	r1, 80110f4 <rcl_wait_set_add_service+0x54>
 80110ac:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80110ae:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80110b0:	4285      	cmp	r5, r0
 80110b2:	d217      	bcs.n	80110e4 <rcl_wait_set_add_service+0x44>
 80110b4:	6a20      	ldr	r0, [r4, #32]
 80110b6:	1c6e      	adds	r6, r5, #1
 80110b8:	625e      	str	r6, [r3, #36]	@ 0x24
 80110ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80110be:	b102      	cbz	r2, 80110c2 <rcl_wait_set_add_service+0x22>
 80110c0:	6015      	str	r5, [r2, #0]
 80110c2:	4608      	mov	r0, r1
 80110c4:	f7fe ff3a 	bl	800ff3c <rcl_service_get_rmw_handle>
 80110c8:	b150      	cbz	r0, 80110e0 <rcl_wait_set_add_service+0x40>
 80110ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80110cc:	6842      	ldr	r2, [r0, #4]
 80110ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80110d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80110d6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80110d8:	3301      	adds	r3, #1
 80110da:	2000      	movs	r0, #0
 80110dc:	6293      	str	r3, [r2, #40]	@ 0x28
 80110de:	bd70      	pop	{r4, r5, r6, pc}
 80110e0:	2001      	movs	r0, #1
 80110e2:	bd70      	pop	{r4, r5, r6, pc}
 80110e4:	f240 3086 	movw	r0, #902	@ 0x386
 80110e8:	bd70      	pop	{r4, r5, r6, pc}
 80110ea:	200b      	movs	r0, #11
 80110ec:	4770      	bx	lr
 80110ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	200b      	movs	r0, #11
 80110f6:	bd70      	pop	{r4, r5, r6, pc}

080110f8 <rcl_wait>:
 80110f8:	2800      	cmp	r0, #0
 80110fa:	f000 81d4 	beq.w	80114a6 <rcl_wait+0x3ae>
 80110fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011102:	ed2d 8b02 	vpush	{d8}
 8011106:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8011108:	b099      	sub	sp, #100	@ 0x64
 801110a:	4604      	mov	r4, r0
 801110c:	2d00      	cmp	r5, #0
 801110e:	f000 8178 	beq.w	8011402 <rcl_wait+0x30a>
 8011112:	461f      	mov	r7, r3
 8011114:	6843      	ldr	r3, [r0, #4]
 8011116:	4690      	mov	r8, r2
 8011118:	2b00      	cmp	r3, #0
 801111a:	f000 809b 	beq.w	8011254 <rcl_wait+0x15c>
 801111e:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8011120:	2e00      	cmp	r6, #0
 8011122:	f000 80b2 	beq.w	801128a <rcl_wait+0x192>
 8011126:	2100      	movs	r1, #0
 8011128:	468c      	mov	ip, r1
 801112a:	460a      	mov	r2, r1
 801112c:	46a6      	mov	lr, r4
 801112e:	f8de 3010 	ldr.w	r3, [lr, #16]
 8011132:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011136:	b173      	cbz	r3, 8011156 <rcl_wait+0x5e>
 8011138:	f8de 300c 	ldr.w	r3, [lr, #12]
 801113c:	6968      	ldr	r0, [r5, #20]
 801113e:	440b      	add	r3, r1
 8011140:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8011144:	b13c      	cbz	r4, 8011156 <rcl_wait+0x5e>
 8011146:	692b      	ldr	r3, [r5, #16]
 8011148:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 801114c:	3301      	adds	r3, #1
 801114e:	612b      	str	r3, [r5, #16]
 8011150:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8011154:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8011156:	3101      	adds	r1, #1
 8011158:	f14c 0c00 	adc.w	ip, ip, #0
 801115c:	42b1      	cmp	r1, r6
 801115e:	f17c 0300 	sbcs.w	r3, ip, #0
 8011162:	d3e4      	bcc.n	801112e <rcl_wait+0x36>
 8011164:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8011410 <rcl_wait+0x318>
 8011168:	ea58 0307 	orrs.w	r3, r8, r7
 801116c:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8011170:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8011174:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8011178:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 801117c:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8011180:	4674      	mov	r4, lr
 8011182:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8011186:	f000 8094 	beq.w	80112b2 <rcl_wait+0x1ba>
 801118a:	2e00      	cmp	r6, #0
 801118c:	f000 8145 	beq.w	801141a <rcl_wait+0x322>
 8011190:	2500      	movs	r5, #0
 8011192:	46bb      	mov	fp, r7
 8011194:	e02c      	b.n	80111f0 <rcl_wait+0xf8>
 8011196:	6923      	ldr	r3, [r4, #16]
 8011198:	f853 0009 	ldr.w	r0, [r3, r9]
 801119c:	a908      	add	r1, sp, #32
 801119e:	ed8d 8b08 	vstr	d8, [sp, #32]
 80111a2:	f7ff faab 	bl	80106fc <rcl_timer_get_next_call_time>
 80111a6:	f240 3321 	movw	r3, #801	@ 0x321
 80111aa:	4298      	cmp	r0, r3
 80111ac:	f000 80bb 	beq.w	8011326 <rcl_wait+0x22e>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d165      	bne.n	8011280 <rcl_wait+0x188>
 80111b4:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 80111b8:	7830      	ldrb	r0, [r6, #0]
 80111ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80111bc:	ab18      	add	r3, sp, #96	@ 0x60
 80111be:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80111c2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80111c6:	9205      	str	r2, [sp, #20]
 80111c8:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80111cc:	4297      	cmp	r7, r2
 80111ce:	9a05      	ldr	r2, [sp, #20]
 80111d0:	eb71 0202 	sbcs.w	r2, r1, r2
 80111d4:	da06      	bge.n	80111e4 <rcl_wait+0xec>
 80111d6:	e943 7108 	strd	r7, r1, [r3, #-32]
 80111da:	ab18      	add	r3, sp, #96	@ 0x60
 80111dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80111e0:	f840 6c30 	str.w	r6, [r0, #-48]
 80111e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80111e6:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80111e8:	3501      	adds	r5, #1
 80111ea:	42b5      	cmp	r5, r6
 80111ec:	f080 8114 	bcs.w	8011418 <rcl_wait+0x320>
 80111f0:	6923      	ldr	r3, [r4, #16]
 80111f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80111f6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80111fa:	2800      	cmp	r0, #0
 80111fc:	d0f4      	beq.n	80111e8 <rcl_wait+0xf0>
 80111fe:	a907      	add	r1, sp, #28
 8011200:	f7ff f9a8 	bl	8010554 <rcl_timer_clock>
 8011204:	4603      	mov	r3, r0
 8011206:	2800      	cmp	r0, #0
 8011208:	f040 8141 	bne.w	801148e <rcl_wait+0x396>
 801120c:	9807      	ldr	r0, [sp, #28]
 801120e:	7802      	ldrb	r2, [r0, #0]
 8011210:	2a01      	cmp	r2, #1
 8011212:	d1c0      	bne.n	8011196 <rcl_wait+0x9e>
 8011214:	f10d 011b 	add.w	r1, sp, #27
 8011218:	f88d 301b 	strb.w	r3, [sp, #27]
 801121c:	f7ff f98a 	bl	8010534 <rcl_is_enabled_ros_time_override>
 8011220:	4602      	mov	r2, r0
 8011222:	2800      	cmp	r0, #0
 8011224:	f040 8133 	bne.w	801148e <rcl_wait+0x396>
 8011228:	6923      	ldr	r3, [r4, #16]
 801122a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 801122e:	f853 0009 	ldr.w	r0, [r3, r9]
 8011232:	2900      	cmp	r1, #0
 8011234:	d0b0      	beq.n	8011198 <rcl_wait+0xa0>
 8011236:	ae08      	add	r6, sp, #32
 8011238:	4631      	mov	r1, r6
 801123a:	f88d 2020 	strb.w	r2, [sp, #32]
 801123e:	f7ff fa23 	bl	8010688 <rcl_timer_is_ready>
 8011242:	2800      	cmp	r0, #0
 8011244:	f040 8123 	bne.w	801148e <rcl_wait+0x396>
 8011248:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d0c9      	beq.n	80111e4 <rcl_wait+0xec>
 8011250:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011252:	e02f      	b.n	80112b4 <rcl_wait+0x1bc>
 8011254:	68c3      	ldr	r3, [r0, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	f47f af61 	bne.w	801111e <rcl_wait+0x26>
 801125c:	6943      	ldr	r3, [r0, #20]
 801125e:	2b00      	cmp	r3, #0
 8011260:	f47f af5d 	bne.w	801111e <rcl_wait+0x26>
 8011264:	69c3      	ldr	r3, [r0, #28]
 8011266:	2b00      	cmp	r3, #0
 8011268:	f47f af59 	bne.w	801111e <rcl_wait+0x26>
 801126c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801126e:	2b00      	cmp	r3, #0
 8011270:	f47f af55 	bne.w	801111e <rcl_wait+0x26>
 8011274:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011276:	2b00      	cmp	r3, #0
 8011278:	f47f af51 	bne.w	801111e <rcl_wait+0x26>
 801127c:	f240 3085 	movw	r0, #901	@ 0x385
 8011280:	b019      	add	sp, #100	@ 0x64
 8011282:	ecbd 8b02 	vpop	{d8}
 8011286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801128e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011292:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8011296:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 801129a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801129e:	ea58 0307 	orrs.w	r3, r8, r7
 80112a2:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 80112a6:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 80112aa:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 80112ae:	f040 80b4 	bne.w	801141a <rcl_wait+0x322>
 80112b2:	ae08      	add	r6, sp, #32
 80112b4:	2200      	movs	r2, #0
 80112b6:	2300      	movs	r3, #0
 80112b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80112bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80112c0:	9602      	str	r6, [sp, #8]
 80112c2:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80112c4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80112c8:	e9cd 3200 	strd	r3, r2, [sp]
 80112cc:	f105 0110 	add.w	r1, r5, #16
 80112d0:	f105 031c 	add.w	r3, r5, #28
 80112d4:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 80112d8:	1d28      	adds	r0, r5, #4
 80112da:	f002 fbed 	bl	8013ab8 <rmw_wait>
 80112de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80112e2:	4680      	mov	r8, r0
 80112e4:	b332      	cbz	r2, 8011334 <rcl_wait+0x23c>
 80112e6:	2500      	movs	r5, #0
 80112e8:	462f      	mov	r7, r5
 80112ea:	462e      	mov	r6, r5
 80112ec:	e007      	b.n	80112fe <rcl_wait+0x206>
 80112ee:	6922      	ldr	r2, [r4, #16]
 80112f0:	f842 3009 	str.w	r3, [r2, r9]
 80112f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80112f8:	3501      	adds	r5, #1
 80112fa:	4295      	cmp	r5, r2
 80112fc:	d21b      	bcs.n	8011336 <rcl_wait+0x23e>
 80112fe:	6920      	ldr	r0, [r4, #16]
 8011300:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8011304:	a907      	add	r1, sp, #28
 8011306:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801130a:	2800      	cmp	r0, #0
 801130c:	d0f4      	beq.n	80112f8 <rcl_wait+0x200>
 801130e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011312:	f7ff f9b9 	bl	8010688 <rcl_timer_is_ready>
 8011316:	2800      	cmp	r0, #0
 8011318:	d1b2      	bne.n	8011280 <rcl_wait+0x188>
 801131a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d0e5      	beq.n	80112ee <rcl_wait+0x1f6>
 8011322:	461f      	mov	r7, r3
 8011324:	e7e6      	b.n	80112f4 <rcl_wait+0x1fc>
 8011326:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011328:	6923      	ldr	r3, [r4, #16]
 801132a:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 801132c:	2200      	movs	r2, #0
 801132e:	f843 2009 	str.w	r2, [r3, r9]
 8011332:	e759      	b.n	80111e8 <rcl_wait+0xf0>
 8011334:	4617      	mov	r7, r2
 8011336:	f038 0002 	bics.w	r0, r8, #2
 801133a:	f040 80a8 	bne.w	801148e <rcl_wait+0x396>
 801133e:	6866      	ldr	r6, [r4, #4]
 8011340:	4602      	mov	r2, r0
 8011342:	b91e      	cbnz	r6, 801134c <rcl_wait+0x254>
 8011344:	e00d      	b.n	8011362 <rcl_wait+0x26a>
 8011346:	3201      	adds	r2, #1
 8011348:	4296      	cmp	r6, r2
 801134a:	d00a      	beq.n	8011362 <rcl_wait+0x26a>
 801134c:	6899      	ldr	r1, [r3, #8]
 801134e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011352:	2900      	cmp	r1, #0
 8011354:	d1f7      	bne.n	8011346 <rcl_wait+0x24e>
 8011356:	6825      	ldr	r5, [r4, #0]
 8011358:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801135c:	3201      	adds	r2, #1
 801135e:	4296      	cmp	r6, r2
 8011360:	d1f4      	bne.n	801134c <rcl_wait+0x254>
 8011362:	68e6      	ldr	r6, [r4, #12]
 8011364:	2200      	movs	r2, #0
 8011366:	b91e      	cbnz	r6, 8011370 <rcl_wait+0x278>
 8011368:	e00d      	b.n	8011386 <rcl_wait+0x28e>
 801136a:	3201      	adds	r2, #1
 801136c:	42b2      	cmp	r2, r6
 801136e:	d00a      	beq.n	8011386 <rcl_wait+0x28e>
 8011370:	6959      	ldr	r1, [r3, #20]
 8011372:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011376:	2900      	cmp	r1, #0
 8011378:	d1f7      	bne.n	801136a <rcl_wait+0x272>
 801137a:	68a5      	ldr	r5, [r4, #8]
 801137c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011380:	3201      	adds	r2, #1
 8011382:	42b2      	cmp	r2, r6
 8011384:	d1f4      	bne.n	8011370 <rcl_wait+0x278>
 8011386:	69e6      	ldr	r6, [r4, #28]
 8011388:	2200      	movs	r2, #0
 801138a:	b91e      	cbnz	r6, 8011394 <rcl_wait+0x29c>
 801138c:	e00d      	b.n	80113aa <rcl_wait+0x2b2>
 801138e:	3201      	adds	r2, #1
 8011390:	4296      	cmp	r6, r2
 8011392:	d00a      	beq.n	80113aa <rcl_wait+0x2b2>
 8011394:	6a19      	ldr	r1, [r3, #32]
 8011396:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801139a:	2900      	cmp	r1, #0
 801139c:	d1f7      	bne.n	801138e <rcl_wait+0x296>
 801139e:	69a5      	ldr	r5, [r4, #24]
 80113a0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80113a4:	3201      	adds	r2, #1
 80113a6:	4296      	cmp	r6, r2
 80113a8:	d1f4      	bne.n	8011394 <rcl_wait+0x29c>
 80113aa:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80113ac:	2200      	movs	r2, #0
 80113ae:	b91e      	cbnz	r6, 80113b8 <rcl_wait+0x2c0>
 80113b0:	e00d      	b.n	80113ce <rcl_wait+0x2d6>
 80113b2:	3201      	adds	r2, #1
 80113b4:	42b2      	cmp	r2, r6
 80113b6:	d00a      	beq.n	80113ce <rcl_wait+0x2d6>
 80113b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80113ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80113be:	2900      	cmp	r1, #0
 80113c0:	d1f7      	bne.n	80113b2 <rcl_wait+0x2ba>
 80113c2:	6a25      	ldr	r5, [r4, #32]
 80113c4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80113c8:	3201      	adds	r2, #1
 80113ca:	42b2      	cmp	r2, r6
 80113cc:	d1f4      	bne.n	80113b8 <rcl_wait+0x2c0>
 80113ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113d0:	2200      	movs	r2, #0
 80113d2:	b91e      	cbnz	r6, 80113dc <rcl_wait+0x2e4>
 80113d4:	e00d      	b.n	80113f2 <rcl_wait+0x2fa>
 80113d6:	3201      	adds	r2, #1
 80113d8:	42b2      	cmp	r2, r6
 80113da:	d00a      	beq.n	80113f2 <rcl_wait+0x2fa>
 80113dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80113de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80113e2:	2900      	cmp	r1, #0
 80113e4:	d1f7      	bne.n	80113d6 <rcl_wait+0x2de>
 80113e6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80113e8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80113ec:	3201      	adds	r2, #1
 80113ee:	42b2      	cmp	r2, r6
 80113f0:	d1f4      	bne.n	80113dc <rcl_wait+0x2e4>
 80113f2:	f1b8 0f02 	cmp.w	r8, #2
 80113f6:	f47f af43 	bne.w	8011280 <rcl_wait+0x188>
 80113fa:	f087 0701 	eor.w	r7, r7, #1
 80113fe:	0078      	lsls	r0, r7, #1
 8011400:	e73e      	b.n	8011280 <rcl_wait+0x188>
 8011402:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011406:	b019      	add	sp, #100	@ 0x64
 8011408:	ecbd 8b02 	vpop	{d8}
 801140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011410:	ffffffff 	.word	0xffffffff
 8011414:	7fffffff 	.word	0x7fffffff
 8011418:	465f      	mov	r7, fp
 801141a:	f1b8 0f01 	cmp.w	r8, #1
 801141e:	f177 0300 	sbcs.w	r3, r7, #0
 8011422:	db3a      	blt.n	801149a <rcl_wait+0x3a2>
 8011424:	2601      	movs	r6, #1
 8011426:	ad10      	add	r5, sp, #64	@ 0x40
 8011428:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 801142c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8011430:	a908      	add	r1, sp, #32
 8011432:	b1a0      	cbz	r0, 801145e <rcl_wait+0x366>
 8011434:	f7ff f872 	bl	801051c <rcl_clock_get_now>
 8011438:	2800      	cmp	r0, #0
 801143a:	f47f af21 	bne.w	8011280 <rcl_wait+0x188>
 801143e:	9a08      	ldr	r2, [sp, #32]
 8011440:	68ab      	ldr	r3, [r5, #8]
 8011442:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011444:	1a9b      	subs	r3, r3, r2
 8011446:	68ea      	ldr	r2, [r5, #12]
 8011448:	eb62 0201 	sbc.w	r2, r2, r1
 801144c:	4598      	cmp	r8, r3
 801144e:	eb77 0102 	sbcs.w	r1, r7, r2
 8011452:	bfba      	itte	lt
 8011454:	4643      	movlt	r3, r8
 8011456:	463a      	movlt	r2, r7
 8011458:	2601      	movge	r6, #1
 801145a:	4698      	mov	r8, r3
 801145c:	4617      	mov	r7, r2
 801145e:	3508      	adds	r5, #8
 8011460:	45a9      	cmp	r9, r5
 8011462:	d1e3      	bne.n	801142c <rcl_wait+0x334>
 8011464:	2f00      	cmp	r7, #0
 8011466:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011468:	bfab      	itete	ge
 801146a:	4640      	movge	r0, r8
 801146c:	2000      	movlt	r0, #0
 801146e:	4639      	movge	r1, r7
 8011470:	2100      	movlt	r1, #0
 8011472:	2e00      	cmp	r6, #0
 8011474:	f43f af24 	beq.w	80112c0 <rcl_wait+0x1c8>
 8011478:	a30d      	add	r3, pc, #52	@ (adr r3, 80114b0 <rcl_wait+0x3b8>)
 801147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147e:	f7ef fd41 	bl	8000f04 <__aeabi_ldivmod>
 8011482:	ae08      	add	r6, sp, #32
 8011484:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011488:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801148c:	e718      	b.n	80112c0 <rcl_wait+0x1c8>
 801148e:	2001      	movs	r0, #1
 8011490:	b019      	add	sp, #100	@ 0x64
 8011492:	ecbd 8b02 	vpop	{d8}
 8011496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149a:	2600      	movs	r6, #0
 801149c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80114a0:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80114a4:	e7bf      	b.n	8011426 <rcl_wait+0x32e>
 80114a6:	200b      	movs	r0, #11
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	f3af 8000 	nop.w
 80114b0:	3b9aca00 	.word	0x3b9aca00
 80114b4:	00000000 	.word	0x00000000

080114b8 <rcl_action_take_goal_response>:
 80114b8:	b3b0      	cbz	r0, 8011528 <rcl_action_take_goal_response+0x70>
 80114ba:	b570      	push	{r4, r5, r6, lr}
 80114bc:	4604      	mov	r4, r0
 80114be:	6800      	ldr	r0, [r0, #0]
 80114c0:	b368      	cbz	r0, 801151e <rcl_action_take_goal_response+0x66>
 80114c2:	460d      	mov	r5, r1
 80114c4:	4616      	mov	r6, r2
 80114c6:	f7fd fdc7 	bl	800f058 <rcl_client_is_valid>
 80114ca:	b330      	cbz	r0, 801151a <rcl_action_take_goal_response+0x62>
 80114cc:	6820      	ldr	r0, [r4, #0]
 80114ce:	3004      	adds	r0, #4
 80114d0:	f7fd fdc2 	bl	800f058 <rcl_client_is_valid>
 80114d4:	b308      	cbz	r0, 801151a <rcl_action_take_goal_response+0x62>
 80114d6:	6820      	ldr	r0, [r4, #0]
 80114d8:	3008      	adds	r0, #8
 80114da:	f7fd fdbd 	bl	800f058 <rcl_client_is_valid>
 80114de:	b1e0      	cbz	r0, 801151a <rcl_action_take_goal_response+0x62>
 80114e0:	6820      	ldr	r0, [r4, #0]
 80114e2:	300c      	adds	r0, #12
 80114e4:	f7fe ff7e 	bl	80103e4 <rcl_subscription_is_valid>
 80114e8:	b1b8      	cbz	r0, 801151a <rcl_action_take_goal_response+0x62>
 80114ea:	6820      	ldr	r0, [r4, #0]
 80114ec:	3010      	adds	r0, #16
 80114ee:	f7fe ff79 	bl	80103e4 <rcl_subscription_is_valid>
 80114f2:	b190      	cbz	r0, 801151a <rcl_action_take_goal_response+0x62>
 80114f4:	b1b5      	cbz	r5, 8011524 <rcl_action_take_goal_response+0x6c>
 80114f6:	b1ae      	cbz	r6, 8011524 <rcl_action_take_goal_response+0x6c>
 80114f8:	6820      	ldr	r0, [r4, #0]
 80114fa:	4632      	mov	r2, r6
 80114fc:	4629      	mov	r1, r5
 80114fe:	f7fd fd3f 	bl	800ef80 <rcl_take_response>
 8011502:	b148      	cbz	r0, 8011518 <rcl_action_take_goal_response+0x60>
 8011504:	280a      	cmp	r0, #10
 8011506:	d007      	beq.n	8011518 <rcl_action_take_goal_response+0x60>
 8011508:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801150c:	f640 0337 	movw	r3, #2103	@ 0x837
 8011510:	4290      	cmp	r0, r2
 8011512:	bf0c      	ite	eq
 8011514:	4618      	moveq	r0, r3
 8011516:	2001      	movne	r0, #1
 8011518:	bd70      	pop	{r4, r5, r6, pc}
 801151a:	f7fb ff05 	bl	800d328 <rcutils_reset_error>
 801151e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011522:	bd70      	pop	{r4, r5, r6, pc}
 8011524:	200b      	movs	r0, #11
 8011526:	bd70      	pop	{r4, r5, r6, pc}
 8011528:	f640 0036 	movw	r0, #2102	@ 0x836
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop

08011530 <rcl_action_send_result_request>:
 8011530:	b378      	cbz	r0, 8011592 <rcl_action_send_result_request+0x62>
 8011532:	b570      	push	{r4, r5, r6, lr}
 8011534:	4604      	mov	r4, r0
 8011536:	6800      	ldr	r0, [r0, #0]
 8011538:	b330      	cbz	r0, 8011588 <rcl_action_send_result_request+0x58>
 801153a:	460d      	mov	r5, r1
 801153c:	4616      	mov	r6, r2
 801153e:	f7fd fd8b 	bl	800f058 <rcl_client_is_valid>
 8011542:	b1f8      	cbz	r0, 8011584 <rcl_action_send_result_request+0x54>
 8011544:	6820      	ldr	r0, [r4, #0]
 8011546:	3004      	adds	r0, #4
 8011548:	f7fd fd86 	bl	800f058 <rcl_client_is_valid>
 801154c:	b1d0      	cbz	r0, 8011584 <rcl_action_send_result_request+0x54>
 801154e:	6820      	ldr	r0, [r4, #0]
 8011550:	3008      	adds	r0, #8
 8011552:	f7fd fd81 	bl	800f058 <rcl_client_is_valid>
 8011556:	b1a8      	cbz	r0, 8011584 <rcl_action_send_result_request+0x54>
 8011558:	6820      	ldr	r0, [r4, #0]
 801155a:	300c      	adds	r0, #12
 801155c:	f7fe ff42 	bl	80103e4 <rcl_subscription_is_valid>
 8011560:	b180      	cbz	r0, 8011584 <rcl_action_send_result_request+0x54>
 8011562:	6820      	ldr	r0, [r4, #0]
 8011564:	3010      	adds	r0, #16
 8011566:	f7fe ff3d 	bl	80103e4 <rcl_subscription_is_valid>
 801156a:	b158      	cbz	r0, 8011584 <rcl_action_send_result_request+0x54>
 801156c:	b17d      	cbz	r5, 801158e <rcl_action_send_result_request+0x5e>
 801156e:	b176      	cbz	r6, 801158e <rcl_action_send_result_request+0x5e>
 8011570:	6820      	ldr	r0, [r4, #0]
 8011572:	4632      	mov	r2, r6
 8011574:	4629      	mov	r1, r5
 8011576:	3008      	adds	r0, #8
 8011578:	f7fd fcb0 	bl	800eedc <rcl_send_request>
 801157c:	3800      	subs	r0, #0
 801157e:	bf18      	it	ne
 8011580:	2001      	movne	r0, #1
 8011582:	bd70      	pop	{r4, r5, r6, pc}
 8011584:	f7fb fed0 	bl	800d328 <rcutils_reset_error>
 8011588:	f640 0036 	movw	r0, #2102	@ 0x836
 801158c:	bd70      	pop	{r4, r5, r6, pc}
 801158e:	200b      	movs	r0, #11
 8011590:	bd70      	pop	{r4, r5, r6, pc}
 8011592:	f640 0036 	movw	r0, #2102	@ 0x836
 8011596:	4770      	bx	lr

08011598 <rcl_action_take_result_response>:
 8011598:	2800      	cmp	r0, #0
 801159a:	d037      	beq.n	801160c <rcl_action_take_result_response+0x74>
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	4604      	mov	r4, r0
 80115a0:	6800      	ldr	r0, [r0, #0]
 80115a2:	b370      	cbz	r0, 8011602 <rcl_action_take_result_response+0x6a>
 80115a4:	460d      	mov	r5, r1
 80115a6:	4616      	mov	r6, r2
 80115a8:	f7fd fd56 	bl	800f058 <rcl_client_is_valid>
 80115ac:	b338      	cbz	r0, 80115fe <rcl_action_take_result_response+0x66>
 80115ae:	6820      	ldr	r0, [r4, #0]
 80115b0:	3004      	adds	r0, #4
 80115b2:	f7fd fd51 	bl	800f058 <rcl_client_is_valid>
 80115b6:	b310      	cbz	r0, 80115fe <rcl_action_take_result_response+0x66>
 80115b8:	6820      	ldr	r0, [r4, #0]
 80115ba:	3008      	adds	r0, #8
 80115bc:	f7fd fd4c 	bl	800f058 <rcl_client_is_valid>
 80115c0:	b1e8      	cbz	r0, 80115fe <rcl_action_take_result_response+0x66>
 80115c2:	6820      	ldr	r0, [r4, #0]
 80115c4:	300c      	adds	r0, #12
 80115c6:	f7fe ff0d 	bl	80103e4 <rcl_subscription_is_valid>
 80115ca:	b1c0      	cbz	r0, 80115fe <rcl_action_take_result_response+0x66>
 80115cc:	6820      	ldr	r0, [r4, #0]
 80115ce:	3010      	adds	r0, #16
 80115d0:	f7fe ff08 	bl	80103e4 <rcl_subscription_is_valid>
 80115d4:	b198      	cbz	r0, 80115fe <rcl_action_take_result_response+0x66>
 80115d6:	b1bd      	cbz	r5, 8011608 <rcl_action_take_result_response+0x70>
 80115d8:	b1b6      	cbz	r6, 8011608 <rcl_action_take_result_response+0x70>
 80115da:	6820      	ldr	r0, [r4, #0]
 80115dc:	4632      	mov	r2, r6
 80115de:	4629      	mov	r1, r5
 80115e0:	3008      	adds	r0, #8
 80115e2:	f7fd fccd 	bl	800ef80 <rcl_take_response>
 80115e6:	b148      	cbz	r0, 80115fc <rcl_action_take_result_response+0x64>
 80115e8:	280a      	cmp	r0, #10
 80115ea:	d007      	beq.n	80115fc <rcl_action_take_result_response+0x64>
 80115ec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80115f0:	f640 0337 	movw	r3, #2103	@ 0x837
 80115f4:	4290      	cmp	r0, r2
 80115f6:	bf0c      	ite	eq
 80115f8:	4618      	moveq	r0, r3
 80115fa:	2001      	movne	r0, #1
 80115fc:	bd70      	pop	{r4, r5, r6, pc}
 80115fe:	f7fb fe93 	bl	800d328 <rcutils_reset_error>
 8011602:	f640 0036 	movw	r0, #2102	@ 0x836
 8011606:	bd70      	pop	{r4, r5, r6, pc}
 8011608:	200b      	movs	r0, #11
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	f640 0036 	movw	r0, #2102	@ 0x836
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop

08011614 <rcl_action_take_cancel_response>:
 8011614:	2800      	cmp	r0, #0
 8011616:	d037      	beq.n	8011688 <rcl_action_take_cancel_response+0x74>
 8011618:	b570      	push	{r4, r5, r6, lr}
 801161a:	4604      	mov	r4, r0
 801161c:	6800      	ldr	r0, [r0, #0]
 801161e:	b370      	cbz	r0, 801167e <rcl_action_take_cancel_response+0x6a>
 8011620:	460d      	mov	r5, r1
 8011622:	4616      	mov	r6, r2
 8011624:	f7fd fd18 	bl	800f058 <rcl_client_is_valid>
 8011628:	b338      	cbz	r0, 801167a <rcl_action_take_cancel_response+0x66>
 801162a:	6820      	ldr	r0, [r4, #0]
 801162c:	3004      	adds	r0, #4
 801162e:	f7fd fd13 	bl	800f058 <rcl_client_is_valid>
 8011632:	b310      	cbz	r0, 801167a <rcl_action_take_cancel_response+0x66>
 8011634:	6820      	ldr	r0, [r4, #0]
 8011636:	3008      	adds	r0, #8
 8011638:	f7fd fd0e 	bl	800f058 <rcl_client_is_valid>
 801163c:	b1e8      	cbz	r0, 801167a <rcl_action_take_cancel_response+0x66>
 801163e:	6820      	ldr	r0, [r4, #0]
 8011640:	300c      	adds	r0, #12
 8011642:	f7fe fecf 	bl	80103e4 <rcl_subscription_is_valid>
 8011646:	b1c0      	cbz	r0, 801167a <rcl_action_take_cancel_response+0x66>
 8011648:	6820      	ldr	r0, [r4, #0]
 801164a:	3010      	adds	r0, #16
 801164c:	f7fe feca 	bl	80103e4 <rcl_subscription_is_valid>
 8011650:	b198      	cbz	r0, 801167a <rcl_action_take_cancel_response+0x66>
 8011652:	b1bd      	cbz	r5, 8011684 <rcl_action_take_cancel_response+0x70>
 8011654:	b1b6      	cbz	r6, 8011684 <rcl_action_take_cancel_response+0x70>
 8011656:	6820      	ldr	r0, [r4, #0]
 8011658:	4632      	mov	r2, r6
 801165a:	4629      	mov	r1, r5
 801165c:	3004      	adds	r0, #4
 801165e:	f7fd fc8f 	bl	800ef80 <rcl_take_response>
 8011662:	b148      	cbz	r0, 8011678 <rcl_action_take_cancel_response+0x64>
 8011664:	280a      	cmp	r0, #10
 8011666:	d007      	beq.n	8011678 <rcl_action_take_cancel_response+0x64>
 8011668:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801166c:	f640 0337 	movw	r3, #2103	@ 0x837
 8011670:	4290      	cmp	r0, r2
 8011672:	bf0c      	ite	eq
 8011674:	4618      	moveq	r0, r3
 8011676:	2001      	movne	r0, #1
 8011678:	bd70      	pop	{r4, r5, r6, pc}
 801167a:	f7fb fe55 	bl	800d328 <rcutils_reset_error>
 801167e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	200b      	movs	r0, #11
 8011686:	bd70      	pop	{r4, r5, r6, pc}
 8011688:	f640 0036 	movw	r0, #2102	@ 0x836
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop

08011690 <rcl_action_take_feedback>:
 8011690:	2800      	cmp	r0, #0
 8011692:	d037      	beq.n	8011704 <rcl_action_take_feedback+0x74>
 8011694:	b530      	push	{r4, r5, lr}
 8011696:	4604      	mov	r4, r0
 8011698:	6800      	ldr	r0, [r0, #0]
 801169a:	b08f      	sub	sp, #60	@ 0x3c
 801169c:	b358      	cbz	r0, 80116f6 <rcl_action_take_feedback+0x66>
 801169e:	460d      	mov	r5, r1
 80116a0:	f7fd fcda 	bl	800f058 <rcl_client_is_valid>
 80116a4:	b328      	cbz	r0, 80116f2 <rcl_action_take_feedback+0x62>
 80116a6:	6820      	ldr	r0, [r4, #0]
 80116a8:	3004      	adds	r0, #4
 80116aa:	f7fd fcd5 	bl	800f058 <rcl_client_is_valid>
 80116ae:	b300      	cbz	r0, 80116f2 <rcl_action_take_feedback+0x62>
 80116b0:	6820      	ldr	r0, [r4, #0]
 80116b2:	3008      	adds	r0, #8
 80116b4:	f7fd fcd0 	bl	800f058 <rcl_client_is_valid>
 80116b8:	b1d8      	cbz	r0, 80116f2 <rcl_action_take_feedback+0x62>
 80116ba:	6820      	ldr	r0, [r4, #0]
 80116bc:	300c      	adds	r0, #12
 80116be:	f7fe fe91 	bl	80103e4 <rcl_subscription_is_valid>
 80116c2:	b1b0      	cbz	r0, 80116f2 <rcl_action_take_feedback+0x62>
 80116c4:	6820      	ldr	r0, [r4, #0]
 80116c6:	3010      	adds	r0, #16
 80116c8:	f7fe fe8c 	bl	80103e4 <rcl_subscription_is_valid>
 80116cc:	b188      	cbz	r0, 80116f2 <rcl_action_take_feedback+0x62>
 80116ce:	b1b5      	cbz	r5, 80116fe <rcl_action_take_feedback+0x6e>
 80116d0:	6820      	ldr	r0, [r4, #0]
 80116d2:	2300      	movs	r3, #0
 80116d4:	466a      	mov	r2, sp
 80116d6:	4629      	mov	r1, r5
 80116d8:	300c      	adds	r0, #12
 80116da:	f7fe fe25 	bl	8010328 <rcl_take>
 80116de:	b160      	cbz	r0, 80116fa <rcl_action_take_feedback+0x6a>
 80116e0:	f240 1391 	movw	r3, #401	@ 0x191
 80116e4:	4298      	cmp	r0, r3
 80116e6:	d010      	beq.n	801170a <rcl_action_take_feedback+0x7a>
 80116e8:	280a      	cmp	r0, #10
 80116ea:	bf18      	it	ne
 80116ec:	2001      	movne	r0, #1
 80116ee:	b00f      	add	sp, #60	@ 0x3c
 80116f0:	bd30      	pop	{r4, r5, pc}
 80116f2:	f7fb fe19 	bl	800d328 <rcutils_reset_error>
 80116f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80116fa:	b00f      	add	sp, #60	@ 0x3c
 80116fc:	bd30      	pop	{r4, r5, pc}
 80116fe:	200b      	movs	r0, #11
 8011700:	b00f      	add	sp, #60	@ 0x3c
 8011702:	bd30      	pop	{r4, r5, pc}
 8011704:	f640 0036 	movw	r0, #2102	@ 0x836
 8011708:	4770      	bx	lr
 801170a:	f640 0037 	movw	r0, #2103	@ 0x837
 801170e:	e7f4      	b.n	80116fa <rcl_action_take_feedback+0x6a>

08011710 <rcl_action_wait_set_add_action_client>:
 8011710:	2800      	cmp	r0, #0
 8011712:	d045      	beq.n	80117a0 <rcl_action_wait_set_add_action_client+0x90>
 8011714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011716:	460c      	mov	r4, r1
 8011718:	2900      	cmp	r1, #0
 801171a:	d03e      	beq.n	801179a <rcl_action_wait_set_add_action_client+0x8a>
 801171c:	4605      	mov	r5, r0
 801171e:	6808      	ldr	r0, [r1, #0]
 8011720:	2800      	cmp	r0, #0
 8011722:	d03a      	beq.n	801179a <rcl_action_wait_set_add_action_client+0x8a>
 8011724:	4617      	mov	r7, r2
 8011726:	461e      	mov	r6, r3
 8011728:	f7fd fc96 	bl	800f058 <rcl_client_is_valid>
 801172c:	b398      	cbz	r0, 8011796 <rcl_action_wait_set_add_action_client+0x86>
 801172e:	6820      	ldr	r0, [r4, #0]
 8011730:	3004      	adds	r0, #4
 8011732:	f7fd fc91 	bl	800f058 <rcl_client_is_valid>
 8011736:	b370      	cbz	r0, 8011796 <rcl_action_wait_set_add_action_client+0x86>
 8011738:	6820      	ldr	r0, [r4, #0]
 801173a:	3008      	adds	r0, #8
 801173c:	f7fd fc8c 	bl	800f058 <rcl_client_is_valid>
 8011740:	b348      	cbz	r0, 8011796 <rcl_action_wait_set_add_action_client+0x86>
 8011742:	6820      	ldr	r0, [r4, #0]
 8011744:	300c      	adds	r0, #12
 8011746:	f7fe fe4d 	bl	80103e4 <rcl_subscription_is_valid>
 801174a:	b320      	cbz	r0, 8011796 <rcl_action_wait_set_add_action_client+0x86>
 801174c:	6820      	ldr	r0, [r4, #0]
 801174e:	3010      	adds	r0, #16
 8011750:	f7fe fe48 	bl	80103e4 <rcl_subscription_is_valid>
 8011754:	b1f8      	cbz	r0, 8011796 <rcl_action_wait_set_add_action_client+0x86>
 8011756:	6821      	ldr	r1, [r4, #0]
 8011758:	4628      	mov	r0, r5
 801175a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801175e:	f7ff fc73 	bl	8011048 <rcl_wait_set_add_client>
 8011762:	b9b8      	cbnz	r0, 8011794 <rcl_action_wait_set_add_action_client+0x84>
 8011764:	6821      	ldr	r1, [r4, #0]
 8011766:	4628      	mov	r0, r5
 8011768:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801176c:	3104      	adds	r1, #4
 801176e:	f7ff fc6b 	bl	8011048 <rcl_wait_set_add_client>
 8011772:	b978      	cbnz	r0, 8011794 <rcl_action_wait_set_add_action_client+0x84>
 8011774:	6821      	ldr	r1, [r4, #0]
 8011776:	4628      	mov	r0, r5
 8011778:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801177c:	3108      	adds	r1, #8
 801177e:	f7ff fc63 	bl	8011048 <rcl_wait_set_add_client>
 8011782:	b938      	cbnz	r0, 8011794 <rcl_action_wait_set_add_action_client+0x84>
 8011784:	6821      	ldr	r1, [r4, #0]
 8011786:	4628      	mov	r0, r5
 8011788:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801178c:	310c      	adds	r1, #12
 801178e:	f7ff f8fb 	bl	8010988 <rcl_wait_set_add_subscription>
 8011792:	b140      	cbz	r0, 80117a6 <rcl_action_wait_set_add_action_client+0x96>
 8011794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011796:	f7fb fdc7 	bl	800d328 <rcutils_reset_error>
 801179a:	f640 0036 	movw	r0, #2102	@ 0x836
 801179e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117a0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80117a4:	4770      	bx	lr
 80117a6:	6821      	ldr	r1, [r4, #0]
 80117a8:	4628      	mov	r0, r5
 80117aa:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80117ae:	3110      	adds	r1, #16
 80117b0:	f7ff f8ea 	bl	8010988 <rcl_wait_set_add_subscription>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d1ed      	bne.n	8011794 <rcl_action_wait_set_add_action_client+0x84>
 80117b8:	b11f      	cbz	r7, 80117c2 <rcl_action_wait_set_add_action_client+0xb2>
 80117ba:	6823      	ldr	r3, [r4, #0]
 80117bc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80117c0:	603b      	str	r3, [r7, #0]
 80117c2:	2e00      	cmp	r6, #0
 80117c4:	d0e6      	beq.n	8011794 <rcl_action_wait_set_add_action_client+0x84>
 80117c6:	6823      	ldr	r3, [r4, #0]
 80117c8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80117cc:	6033      	str	r3, [r6, #0]
 80117ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080117d0 <rcl_action_client_wait_set_get_entities_ready>:
 80117d0:	2800      	cmp	r0, #0
 80117d2:	f000 8089 	beq.w	80118e8 <rcl_action_client_wait_set_get_entities_ready+0x118>
 80117d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117da:	460c      	mov	r4, r1
 80117dc:	2900      	cmp	r1, #0
 80117de:	d079      	beq.n	80118d4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80117e0:	4605      	mov	r5, r0
 80117e2:	6808      	ldr	r0, [r1, #0]
 80117e4:	2800      	cmp	r0, #0
 80117e6:	d075      	beq.n	80118d4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80117e8:	4616      	mov	r6, r2
 80117ea:	461f      	mov	r7, r3
 80117ec:	f7fd fc34 	bl	800f058 <rcl_client_is_valid>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	d06d      	beq.n	80118d0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80117f4:	6820      	ldr	r0, [r4, #0]
 80117f6:	3004      	adds	r0, #4
 80117f8:	f7fd fc2e 	bl	800f058 <rcl_client_is_valid>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d067      	beq.n	80118d0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011800:	6820      	ldr	r0, [r4, #0]
 8011802:	3008      	adds	r0, #8
 8011804:	f7fd fc28 	bl	800f058 <rcl_client_is_valid>
 8011808:	2800      	cmp	r0, #0
 801180a:	d061      	beq.n	80118d0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801180c:	6820      	ldr	r0, [r4, #0]
 801180e:	300c      	adds	r0, #12
 8011810:	f7fe fde8 	bl	80103e4 <rcl_subscription_is_valid>
 8011814:	2800      	cmp	r0, #0
 8011816:	d05b      	beq.n	80118d0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011818:	6820      	ldr	r0, [r4, #0]
 801181a:	3010      	adds	r0, #16
 801181c:	f7fe fde2 	bl	80103e4 <rcl_subscription_is_valid>
 8011820:	2800      	cmp	r0, #0
 8011822:	d055      	beq.n	80118d0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011824:	2e00      	cmp	r6, #0
 8011826:	d05c      	beq.n	80118e2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8011828:	2f00      	cmp	r7, #0
 801182a:	d05a      	beq.n	80118e2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801182c:	9b06      	ldr	r3, [sp, #24]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d057      	beq.n	80118e2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8011832:	9b07      	ldr	r3, [sp, #28]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d054      	beq.n	80118e2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8011838:	9b08      	ldr	r3, [sp, #32]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d051      	beq.n	80118e2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801183e:	6823      	ldr	r3, [r4, #0]
 8011840:	686a      	ldr	r2, [r5, #4]
 8011842:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011846:	428a      	cmp	r2, r1
 8011848:	d948      	bls.n	80118dc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801184a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801184e:	4282      	cmp	r2, r0
 8011850:	d944      	bls.n	80118dc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8011852:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011856:	69ea      	ldr	r2, [r5, #28]
 8011858:	42a2      	cmp	r2, r4
 801185a:	d93f      	bls.n	80118dc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801185c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8011860:	4562      	cmp	r2, ip
 8011862:	d93b      	bls.n	80118dc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8011864:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8011868:	4572      	cmp	r2, lr
 801186a:	d937      	bls.n	80118dc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801186c:	69aa      	ldr	r2, [r5, #24]
 801186e:	682d      	ldr	r5, [r5, #0]
 8011870:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011874:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011878:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801187c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011880:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011884:	f103 0c0c 	add.w	ip, r3, #12
 8011888:	eba5 050c 	sub.w	r5, r5, ip
 801188c:	fab5 f585 	clz	r5, r5
 8011890:	096d      	lsrs	r5, r5, #5
 8011892:	7035      	strb	r5, [r6, #0]
 8011894:	f103 0510 	add.w	r5, r3, #16
 8011898:	1b64      	subs	r4, r4, r5
 801189a:	fab4 f484 	clz	r4, r4
 801189e:	0964      	lsrs	r4, r4, #5
 80118a0:	703c      	strb	r4, [r7, #0]
 80118a2:	eba3 0008 	sub.w	r0, r3, r8
 80118a6:	1d1c      	adds	r4, r3, #4
 80118a8:	3308      	adds	r3, #8
 80118aa:	1ad3      	subs	r3, r2, r3
 80118ac:	fab0 f080 	clz	r0, r0
 80118b0:	9a06      	ldr	r2, [sp, #24]
 80118b2:	0940      	lsrs	r0, r0, #5
 80118b4:	1b09      	subs	r1, r1, r4
 80118b6:	7010      	strb	r0, [r2, #0]
 80118b8:	fab1 f181 	clz	r1, r1
 80118bc:	9a07      	ldr	r2, [sp, #28]
 80118be:	0949      	lsrs	r1, r1, #5
 80118c0:	7011      	strb	r1, [r2, #0]
 80118c2:	fab3 f383 	clz	r3, r3
 80118c6:	9a08      	ldr	r2, [sp, #32]
 80118c8:	095b      	lsrs	r3, r3, #5
 80118ca:	2000      	movs	r0, #0
 80118cc:	7013      	strb	r3, [r2, #0]
 80118ce:	e003      	b.n	80118d8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80118d0:	f7fb fd2a 	bl	800d328 <rcutils_reset_error>
 80118d4:	f640 0036 	movw	r0, #2102	@ 0x836
 80118d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118dc:	2001      	movs	r0, #1
 80118de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e2:	200b      	movs	r0, #11
 80118e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop

080118f0 <rcl_action_take_goal_request>:
 80118f0:	b3b0      	cbz	r0, 8011960 <rcl_action_take_goal_request+0x70>
 80118f2:	b570      	push	{r4, r5, r6, lr}
 80118f4:	4604      	mov	r4, r0
 80118f6:	6800      	ldr	r0, [r0, #0]
 80118f8:	b368      	cbz	r0, 8011956 <rcl_action_take_goal_request+0x66>
 80118fa:	460d      	mov	r5, r1
 80118fc:	4616      	mov	r6, r2
 80118fe:	f7fe fba3 	bl	8010048 <rcl_service_is_valid>
 8011902:	b330      	cbz	r0, 8011952 <rcl_action_take_goal_request+0x62>
 8011904:	6820      	ldr	r0, [r4, #0]
 8011906:	3004      	adds	r0, #4
 8011908:	f7fe fb9e 	bl	8010048 <rcl_service_is_valid>
 801190c:	b308      	cbz	r0, 8011952 <rcl_action_take_goal_request+0x62>
 801190e:	6820      	ldr	r0, [r4, #0]
 8011910:	3008      	adds	r0, #8
 8011912:	f7fe fb99 	bl	8010048 <rcl_service_is_valid>
 8011916:	b1e0      	cbz	r0, 8011952 <rcl_action_take_goal_request+0x62>
 8011918:	6820      	ldr	r0, [r4, #0]
 801191a:	300c      	adds	r0, #12
 801191c:	f7fe fa00 	bl	800fd20 <rcl_publisher_is_valid>
 8011920:	b1b8      	cbz	r0, 8011952 <rcl_action_take_goal_request+0x62>
 8011922:	6820      	ldr	r0, [r4, #0]
 8011924:	3010      	adds	r0, #16
 8011926:	f7fe f9fb 	bl	800fd20 <rcl_publisher_is_valid>
 801192a:	b190      	cbz	r0, 8011952 <rcl_action_take_goal_request+0x62>
 801192c:	b1b5      	cbz	r5, 801195c <rcl_action_take_goal_request+0x6c>
 801192e:	b1ae      	cbz	r6, 801195c <rcl_action_take_goal_request+0x6c>
 8011930:	6820      	ldr	r0, [r4, #0]
 8011932:	4632      	mov	r2, r6
 8011934:	4629      	mov	r1, r5
 8011936:	f7fe fb07 	bl	800ff48 <rcl_take_request>
 801193a:	b148      	cbz	r0, 8011950 <rcl_action_take_goal_request+0x60>
 801193c:	280a      	cmp	r0, #10
 801193e:	d007      	beq.n	8011950 <rcl_action_take_goal_request+0x60>
 8011940:	f240 2259 	movw	r2, #601	@ 0x259
 8011944:	f640 0399 	movw	r3, #2201	@ 0x899
 8011948:	4290      	cmp	r0, r2
 801194a:	bf0c      	ite	eq
 801194c:	4618      	moveq	r0, r3
 801194e:	2001      	movne	r0, #1
 8011950:	bd70      	pop	{r4, r5, r6, pc}
 8011952:	f7fb fce9 	bl	800d328 <rcutils_reset_error>
 8011956:	f640 0098 	movw	r0, #2200	@ 0x898
 801195a:	bd70      	pop	{r4, r5, r6, pc}
 801195c:	200b      	movs	r0, #11
 801195e:	bd70      	pop	{r4, r5, r6, pc}
 8011960:	f640 0098 	movw	r0, #2200	@ 0x898
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop

08011968 <rcl_action_send_goal_response>:
 8011968:	b378      	cbz	r0, 80119ca <rcl_action_send_goal_response+0x62>
 801196a:	b570      	push	{r4, r5, r6, lr}
 801196c:	4604      	mov	r4, r0
 801196e:	6800      	ldr	r0, [r0, #0]
 8011970:	b330      	cbz	r0, 80119c0 <rcl_action_send_goal_response+0x58>
 8011972:	460d      	mov	r5, r1
 8011974:	4616      	mov	r6, r2
 8011976:	f7fe fb67 	bl	8010048 <rcl_service_is_valid>
 801197a:	b1f8      	cbz	r0, 80119bc <rcl_action_send_goal_response+0x54>
 801197c:	6820      	ldr	r0, [r4, #0]
 801197e:	3004      	adds	r0, #4
 8011980:	f7fe fb62 	bl	8010048 <rcl_service_is_valid>
 8011984:	b1d0      	cbz	r0, 80119bc <rcl_action_send_goal_response+0x54>
 8011986:	6820      	ldr	r0, [r4, #0]
 8011988:	3008      	adds	r0, #8
 801198a:	f7fe fb5d 	bl	8010048 <rcl_service_is_valid>
 801198e:	b1a8      	cbz	r0, 80119bc <rcl_action_send_goal_response+0x54>
 8011990:	6820      	ldr	r0, [r4, #0]
 8011992:	300c      	adds	r0, #12
 8011994:	f7fe f9c4 	bl	800fd20 <rcl_publisher_is_valid>
 8011998:	b180      	cbz	r0, 80119bc <rcl_action_send_goal_response+0x54>
 801199a:	6820      	ldr	r0, [r4, #0]
 801199c:	3010      	adds	r0, #16
 801199e:	f7fe f9bf 	bl	800fd20 <rcl_publisher_is_valid>
 80119a2:	b158      	cbz	r0, 80119bc <rcl_action_send_goal_response+0x54>
 80119a4:	b17d      	cbz	r5, 80119c6 <rcl_action_send_goal_response+0x5e>
 80119a6:	b176      	cbz	r6, 80119c6 <rcl_action_send_goal_response+0x5e>
 80119a8:	6820      	ldr	r0, [r4, #0]
 80119aa:	4632      	mov	r2, r6
 80119ac:	4629      	mov	r1, r5
 80119ae:	f7fe fb1b 	bl	800ffe8 <rcl_send_response>
 80119b2:	b110      	cbz	r0, 80119ba <rcl_action_send_goal_response+0x52>
 80119b4:	2802      	cmp	r0, #2
 80119b6:	bf18      	it	ne
 80119b8:	2001      	movne	r0, #1
 80119ba:	bd70      	pop	{r4, r5, r6, pc}
 80119bc:	f7fb fcb4 	bl	800d328 <rcutils_reset_error>
 80119c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80119c4:	bd70      	pop	{r4, r5, r6, pc}
 80119c6:	200b      	movs	r0, #11
 80119c8:	bd70      	pop	{r4, r5, r6, pc}
 80119ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80119ce:	4770      	bx	lr

080119d0 <rcl_action_take_result_request>:
 80119d0:	2800      	cmp	r0, #0
 80119d2:	d037      	beq.n	8011a44 <rcl_action_take_result_request+0x74>
 80119d4:	b570      	push	{r4, r5, r6, lr}
 80119d6:	4604      	mov	r4, r0
 80119d8:	6800      	ldr	r0, [r0, #0]
 80119da:	b370      	cbz	r0, 8011a3a <rcl_action_take_result_request+0x6a>
 80119dc:	460d      	mov	r5, r1
 80119de:	4616      	mov	r6, r2
 80119e0:	f7fe fb32 	bl	8010048 <rcl_service_is_valid>
 80119e4:	b338      	cbz	r0, 8011a36 <rcl_action_take_result_request+0x66>
 80119e6:	6820      	ldr	r0, [r4, #0]
 80119e8:	3004      	adds	r0, #4
 80119ea:	f7fe fb2d 	bl	8010048 <rcl_service_is_valid>
 80119ee:	b310      	cbz	r0, 8011a36 <rcl_action_take_result_request+0x66>
 80119f0:	6820      	ldr	r0, [r4, #0]
 80119f2:	3008      	adds	r0, #8
 80119f4:	f7fe fb28 	bl	8010048 <rcl_service_is_valid>
 80119f8:	b1e8      	cbz	r0, 8011a36 <rcl_action_take_result_request+0x66>
 80119fa:	6820      	ldr	r0, [r4, #0]
 80119fc:	300c      	adds	r0, #12
 80119fe:	f7fe f98f 	bl	800fd20 <rcl_publisher_is_valid>
 8011a02:	b1c0      	cbz	r0, 8011a36 <rcl_action_take_result_request+0x66>
 8011a04:	6820      	ldr	r0, [r4, #0]
 8011a06:	3010      	adds	r0, #16
 8011a08:	f7fe f98a 	bl	800fd20 <rcl_publisher_is_valid>
 8011a0c:	b198      	cbz	r0, 8011a36 <rcl_action_take_result_request+0x66>
 8011a0e:	b1bd      	cbz	r5, 8011a40 <rcl_action_take_result_request+0x70>
 8011a10:	b1b6      	cbz	r6, 8011a40 <rcl_action_take_result_request+0x70>
 8011a12:	6820      	ldr	r0, [r4, #0]
 8011a14:	4632      	mov	r2, r6
 8011a16:	4629      	mov	r1, r5
 8011a18:	3008      	adds	r0, #8
 8011a1a:	f7fe fa95 	bl	800ff48 <rcl_take_request>
 8011a1e:	b148      	cbz	r0, 8011a34 <rcl_action_take_result_request+0x64>
 8011a20:	280a      	cmp	r0, #10
 8011a22:	d007      	beq.n	8011a34 <rcl_action_take_result_request+0x64>
 8011a24:	f240 2259 	movw	r2, #601	@ 0x259
 8011a28:	f640 0399 	movw	r3, #2201	@ 0x899
 8011a2c:	4290      	cmp	r0, r2
 8011a2e:	bf0c      	ite	eq
 8011a30:	4618      	moveq	r0, r3
 8011a32:	2001      	movne	r0, #1
 8011a34:	bd70      	pop	{r4, r5, r6, pc}
 8011a36:	f7fb fc77 	bl	800d328 <rcutils_reset_error>
 8011a3a:	f640 0098 	movw	r0, #2200	@ 0x898
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}
 8011a40:	200b      	movs	r0, #11
 8011a42:	bd70      	pop	{r4, r5, r6, pc}
 8011a44:	f640 0098 	movw	r0, #2200	@ 0x898
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop

08011a4c <rcl_action_take_cancel_request>:
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d037      	beq.n	8011ac0 <rcl_action_take_cancel_request+0x74>
 8011a50:	b570      	push	{r4, r5, r6, lr}
 8011a52:	4604      	mov	r4, r0
 8011a54:	6800      	ldr	r0, [r0, #0]
 8011a56:	b370      	cbz	r0, 8011ab6 <rcl_action_take_cancel_request+0x6a>
 8011a58:	460d      	mov	r5, r1
 8011a5a:	4616      	mov	r6, r2
 8011a5c:	f7fe faf4 	bl	8010048 <rcl_service_is_valid>
 8011a60:	b338      	cbz	r0, 8011ab2 <rcl_action_take_cancel_request+0x66>
 8011a62:	6820      	ldr	r0, [r4, #0]
 8011a64:	3004      	adds	r0, #4
 8011a66:	f7fe faef 	bl	8010048 <rcl_service_is_valid>
 8011a6a:	b310      	cbz	r0, 8011ab2 <rcl_action_take_cancel_request+0x66>
 8011a6c:	6820      	ldr	r0, [r4, #0]
 8011a6e:	3008      	adds	r0, #8
 8011a70:	f7fe faea 	bl	8010048 <rcl_service_is_valid>
 8011a74:	b1e8      	cbz	r0, 8011ab2 <rcl_action_take_cancel_request+0x66>
 8011a76:	6820      	ldr	r0, [r4, #0]
 8011a78:	300c      	adds	r0, #12
 8011a7a:	f7fe f951 	bl	800fd20 <rcl_publisher_is_valid>
 8011a7e:	b1c0      	cbz	r0, 8011ab2 <rcl_action_take_cancel_request+0x66>
 8011a80:	6820      	ldr	r0, [r4, #0]
 8011a82:	3010      	adds	r0, #16
 8011a84:	f7fe f94c 	bl	800fd20 <rcl_publisher_is_valid>
 8011a88:	b198      	cbz	r0, 8011ab2 <rcl_action_take_cancel_request+0x66>
 8011a8a:	b1bd      	cbz	r5, 8011abc <rcl_action_take_cancel_request+0x70>
 8011a8c:	b1b6      	cbz	r6, 8011abc <rcl_action_take_cancel_request+0x70>
 8011a8e:	6820      	ldr	r0, [r4, #0]
 8011a90:	4632      	mov	r2, r6
 8011a92:	4629      	mov	r1, r5
 8011a94:	3004      	adds	r0, #4
 8011a96:	f7fe fa57 	bl	800ff48 <rcl_take_request>
 8011a9a:	b148      	cbz	r0, 8011ab0 <rcl_action_take_cancel_request+0x64>
 8011a9c:	280a      	cmp	r0, #10
 8011a9e:	d007      	beq.n	8011ab0 <rcl_action_take_cancel_request+0x64>
 8011aa0:	f240 2259 	movw	r2, #601	@ 0x259
 8011aa4:	f640 0399 	movw	r3, #2201	@ 0x899
 8011aa8:	4290      	cmp	r0, r2
 8011aaa:	bf0c      	ite	eq
 8011aac:	4618      	moveq	r0, r3
 8011aae:	2001      	movne	r0, #1
 8011ab0:	bd70      	pop	{r4, r5, r6, pc}
 8011ab2:	f7fb fc39 	bl	800d328 <rcutils_reset_error>
 8011ab6:	f640 0098 	movw	r0, #2200	@ 0x898
 8011aba:	bd70      	pop	{r4, r5, r6, pc}
 8011abc:	200b      	movs	r0, #11
 8011abe:	bd70      	pop	{r4, r5, r6, pc}
 8011ac0:	f640 0098 	movw	r0, #2200	@ 0x898
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop

08011ac8 <rcl_action_send_cancel_response>:
 8011ac8:	b380      	cbz	r0, 8011b2c <rcl_action_send_cancel_response+0x64>
 8011aca:	b570      	push	{r4, r5, r6, lr}
 8011acc:	4604      	mov	r4, r0
 8011ace:	6800      	ldr	r0, [r0, #0]
 8011ad0:	b338      	cbz	r0, 8011b22 <rcl_action_send_cancel_response+0x5a>
 8011ad2:	460d      	mov	r5, r1
 8011ad4:	4616      	mov	r6, r2
 8011ad6:	f7fe fab7 	bl	8010048 <rcl_service_is_valid>
 8011ada:	b300      	cbz	r0, 8011b1e <rcl_action_send_cancel_response+0x56>
 8011adc:	6820      	ldr	r0, [r4, #0]
 8011ade:	3004      	adds	r0, #4
 8011ae0:	f7fe fab2 	bl	8010048 <rcl_service_is_valid>
 8011ae4:	b1d8      	cbz	r0, 8011b1e <rcl_action_send_cancel_response+0x56>
 8011ae6:	6820      	ldr	r0, [r4, #0]
 8011ae8:	3008      	adds	r0, #8
 8011aea:	f7fe faad 	bl	8010048 <rcl_service_is_valid>
 8011aee:	b1b0      	cbz	r0, 8011b1e <rcl_action_send_cancel_response+0x56>
 8011af0:	6820      	ldr	r0, [r4, #0]
 8011af2:	300c      	adds	r0, #12
 8011af4:	f7fe f914 	bl	800fd20 <rcl_publisher_is_valid>
 8011af8:	b188      	cbz	r0, 8011b1e <rcl_action_send_cancel_response+0x56>
 8011afa:	6820      	ldr	r0, [r4, #0]
 8011afc:	3010      	adds	r0, #16
 8011afe:	f7fe f90f 	bl	800fd20 <rcl_publisher_is_valid>
 8011b02:	b160      	cbz	r0, 8011b1e <rcl_action_send_cancel_response+0x56>
 8011b04:	b185      	cbz	r5, 8011b28 <rcl_action_send_cancel_response+0x60>
 8011b06:	b17e      	cbz	r6, 8011b28 <rcl_action_send_cancel_response+0x60>
 8011b08:	6820      	ldr	r0, [r4, #0]
 8011b0a:	4632      	mov	r2, r6
 8011b0c:	4629      	mov	r1, r5
 8011b0e:	3004      	adds	r0, #4
 8011b10:	f7fe fa6a 	bl	800ffe8 <rcl_send_response>
 8011b14:	b110      	cbz	r0, 8011b1c <rcl_action_send_cancel_response+0x54>
 8011b16:	2802      	cmp	r0, #2
 8011b18:	bf18      	it	ne
 8011b1a:	2001      	movne	r0, #1
 8011b1c:	bd70      	pop	{r4, r5, r6, pc}
 8011b1e:	f7fb fc03 	bl	800d328 <rcutils_reset_error>
 8011b22:	f640 0098 	movw	r0, #2200	@ 0x898
 8011b26:	bd70      	pop	{r4, r5, r6, pc}
 8011b28:	200b      	movs	r0, #11
 8011b2a:	bd70      	pop	{r4, r5, r6, pc}
 8011b2c:	f640 0098 	movw	r0, #2200	@ 0x898
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop

08011b34 <rcl_action_wait_set_add_action_server>:
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d04d      	beq.n	8011bd4 <rcl_action_wait_set_add_action_server+0xa0>
 8011b38:	b570      	push	{r4, r5, r6, lr}
 8011b3a:	460c      	mov	r4, r1
 8011b3c:	b159      	cbz	r1, 8011b56 <rcl_action_wait_set_add_action_server+0x22>
 8011b3e:	4605      	mov	r5, r0
 8011b40:	6808      	ldr	r0, [r1, #0]
 8011b42:	b140      	cbz	r0, 8011b56 <rcl_action_wait_set_add_action_server+0x22>
 8011b44:	4616      	mov	r6, r2
 8011b46:	f7fe fa7f 	bl	8010048 <rcl_service_is_valid>
 8011b4a:	b120      	cbz	r0, 8011b56 <rcl_action_wait_set_add_action_server+0x22>
 8011b4c:	6820      	ldr	r0, [r4, #0]
 8011b4e:	3004      	adds	r0, #4
 8011b50:	f7fe fa7a 	bl	8010048 <rcl_service_is_valid>
 8011b54:	b910      	cbnz	r0, 8011b5c <rcl_action_wait_set_add_action_server+0x28>
 8011b56:	f640 0098 	movw	r0, #2200	@ 0x898
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}
 8011b5c:	6820      	ldr	r0, [r4, #0]
 8011b5e:	3008      	adds	r0, #8
 8011b60:	f7fe fa72 	bl	8010048 <rcl_service_is_valid>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	d0f6      	beq.n	8011b56 <rcl_action_wait_set_add_action_server+0x22>
 8011b68:	6820      	ldr	r0, [r4, #0]
 8011b6a:	300c      	adds	r0, #12
 8011b6c:	f7fe f8f0 	bl	800fd50 <rcl_publisher_is_valid_except_context>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	d0f0      	beq.n	8011b56 <rcl_action_wait_set_add_action_server+0x22>
 8011b74:	6820      	ldr	r0, [r4, #0]
 8011b76:	3010      	adds	r0, #16
 8011b78:	f7fe f8ea 	bl	800fd50 <rcl_publisher_is_valid_except_context>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	d0ea      	beq.n	8011b56 <rcl_action_wait_set_add_action_server+0x22>
 8011b80:	6821      	ldr	r1, [r4, #0]
 8011b82:	4628      	mov	r0, r5
 8011b84:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8011b88:	f7ff fa8a 	bl	80110a0 <rcl_wait_set_add_service>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	d1e4      	bne.n	8011b5a <rcl_action_wait_set_add_action_server+0x26>
 8011b90:	6821      	ldr	r1, [r4, #0]
 8011b92:	4628      	mov	r0, r5
 8011b94:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8011b98:	3104      	adds	r1, #4
 8011b9a:	f7ff fa81 	bl	80110a0 <rcl_wait_set_add_service>
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d1db      	bne.n	8011b5a <rcl_action_wait_set_add_action_server+0x26>
 8011ba2:	6821      	ldr	r1, [r4, #0]
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8011baa:	3108      	adds	r1, #8
 8011bac:	f7ff fa78 	bl	80110a0 <rcl_wait_set_add_service>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d1d2      	bne.n	8011b5a <rcl_action_wait_set_add_action_server+0x26>
 8011bb4:	6821      	ldr	r1, [r4, #0]
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8011bbc:	3114      	adds	r1, #20
 8011bbe:	f7ff fa13 	bl	8010fe8 <rcl_wait_set_add_timer>
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d1c9      	bne.n	8011b5a <rcl_action_wait_set_add_action_server+0x26>
 8011bc6:	2e00      	cmp	r6, #0
 8011bc8:	d0c7      	beq.n	8011b5a <rcl_action_wait_set_add_action_server+0x26>
 8011bca:	6823      	ldr	r3, [r4, #0]
 8011bcc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8011bd0:	6033      	str	r3, [r6, #0]
 8011bd2:	bd70      	pop	{r4, r5, r6, pc}
 8011bd4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop

08011bdc <rcl_action_server_wait_set_get_entities_ready>:
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d05a      	beq.n	8011c96 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8011be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be2:	460c      	mov	r4, r1
 8011be4:	b161      	cbz	r1, 8011c00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011be6:	4605      	mov	r5, r0
 8011be8:	6808      	ldr	r0, [r1, #0]
 8011bea:	b148      	cbz	r0, 8011c00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011bec:	4616      	mov	r6, r2
 8011bee:	461f      	mov	r7, r3
 8011bf0:	f7fe fa2a 	bl	8010048 <rcl_service_is_valid>
 8011bf4:	b120      	cbz	r0, 8011c00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011bf6:	6820      	ldr	r0, [r4, #0]
 8011bf8:	3004      	adds	r0, #4
 8011bfa:	f7fe fa25 	bl	8010048 <rcl_service_is_valid>
 8011bfe:	b910      	cbnz	r0, 8011c06 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8011c00:	f640 0098 	movw	r0, #2200	@ 0x898
 8011c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c06:	6820      	ldr	r0, [r4, #0]
 8011c08:	3008      	adds	r0, #8
 8011c0a:	f7fe fa1d 	bl	8010048 <rcl_service_is_valid>
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d0f6      	beq.n	8011c00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011c12:	6820      	ldr	r0, [r4, #0]
 8011c14:	300c      	adds	r0, #12
 8011c16:	f7fe f89b 	bl	800fd50 <rcl_publisher_is_valid_except_context>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	d0f0      	beq.n	8011c00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011c1e:	6820      	ldr	r0, [r4, #0]
 8011c20:	3010      	adds	r0, #16
 8011c22:	f7fe f895 	bl	800fd50 <rcl_publisher_is_valid_except_context>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d0ea      	beq.n	8011c00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011c2a:	b3be      	cbz	r6, 8011c9c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011c2c:	b3b7      	cbz	r7, 8011c9c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011c2e:	9b06      	ldr	r3, [sp, #24]
 8011c30:	b3a3      	cbz	r3, 8011c9c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011c32:	9b07      	ldr	r3, [sp, #28]
 8011c34:	b393      	cbz	r3, 8011c9c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011c36:	6821      	ldr	r1, [r4, #0]
 8011c38:	692a      	ldr	r2, [r5, #16]
 8011c3a:	6a2c      	ldr	r4, [r5, #32]
 8011c3c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8011c40:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8011c44:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8011c48:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8011c4c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8011c50:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011c54:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011c58:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011c5c:	1a64      	subs	r4, r4, r1
 8011c5e:	fab4 f484 	clz	r4, r4
 8011c62:	0964      	lsrs	r4, r4, #5
 8011c64:	7034      	strb	r4, [r6, #0]
 8011c66:	1d0c      	adds	r4, r1, #4
 8011c68:	1b1b      	subs	r3, r3, r4
 8011c6a:	fab3 f383 	clz	r3, r3
 8011c6e:	095b      	lsrs	r3, r3, #5
 8011c70:	f101 0408 	add.w	r4, r1, #8
 8011c74:	703b      	strb	r3, [r7, #0]
 8011c76:	f101 0314 	add.w	r3, r1, #20
 8011c7a:	1b01      	subs	r1, r0, r4
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	fab1 f181 	clz	r1, r1
 8011c82:	9a06      	ldr	r2, [sp, #24]
 8011c84:	0949      	lsrs	r1, r1, #5
 8011c86:	7011      	strb	r1, [r2, #0]
 8011c88:	fab3 f383 	clz	r3, r3
 8011c8c:	9a07      	ldr	r2, [sp, #28]
 8011c8e:	095b      	lsrs	r3, r3, #5
 8011c90:	2000      	movs	r0, #0
 8011c92:	7013      	strb	r3, [r2, #0]
 8011c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011c9a:	4770      	bx	lr
 8011c9c:	200b      	movs	r0, #11
 8011c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ca0 <_execute_event_handler>:
 8011ca0:	2002      	movs	r0, #2
 8011ca2:	4770      	bx	lr

08011ca4 <_cancel_goal_event_handler>:
 8011ca4:	2003      	movs	r0, #3
 8011ca6:	4770      	bx	lr

08011ca8 <_succeed_event_handler>:
 8011ca8:	2004      	movs	r0, #4
 8011caa:	4770      	bx	lr

08011cac <_abort_event_handler>:
 8011cac:	2006      	movs	r0, #6
 8011cae:	4770      	bx	lr

08011cb0 <_canceled_event_handler>:
 8011cb0:	2005      	movs	r0, #5
 8011cb2:	4770      	bx	lr

08011cb4 <rcl_action_transition_goal_state>:
 8011cb4:	fa5f fc80 	uxtb.w	ip, r0
 8011cb8:	f1bc 0f06 	cmp.w	ip, #6
 8011cbc:	d80c      	bhi.n	8011cd8 <rcl_action_transition_goal_state+0x24>
 8011cbe:	2904      	cmp	r1, #4
 8011cc0:	d80a      	bhi.n	8011cd8 <rcl_action_transition_goal_state+0x24>
 8011cc2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011cc6:	b410      	push	{r4}
 8011cc8:	440b      	add	r3, r1
 8011cca:	4c06      	ldr	r4, [pc, #24]	@ (8011ce4 <rcl_action_transition_goal_state+0x30>)
 8011ccc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011cd0:	b123      	cbz	r3, 8011cdc <rcl_action_transition_goal_state+0x28>
 8011cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cd6:	4718      	bx	r3
 8011cd8:	2000      	movs	r0, #0
 8011cda:	4770      	bx	lr
 8011cdc:	2000      	movs	r0, #0
 8011cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ce2:	4770      	bx	lr
 8011ce4:	0801f80c 	.word	0x0801f80c

08011ce8 <rcl_action_get_zero_initialized_cancel_response>:
 8011ce8:	b510      	push	{r4, lr}
 8011cea:	4c07      	ldr	r4, [pc, #28]	@ (8011d08 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011cec:	4686      	mov	lr, r0
 8011cee:	4684      	mov	ip, r0
 8011cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cfc:	6823      	ldr	r3, [r4, #0]
 8011cfe:	f8cc 3000 	str.w	r3, [ip]
 8011d02:	4670      	mov	r0, lr
 8011d04:	bd10      	pop	{r4, pc}
 8011d06:	bf00      	nop
 8011d08:	0801f898 	.word	0x0801f898

08011d0c <rclc_action_send_result_request>:
 8011d0c:	b1d0      	cbz	r0, 8011d44 <rclc_action_send_result_request+0x38>
 8011d0e:	b500      	push	{lr}
 8011d10:	4684      	mov	ip, r0
 8011d12:	b087      	sub	sp, #28
 8011d14:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011d18:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011d1c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011d20:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011d24:	f10d 0e08 	add.w	lr, sp, #8
 8011d28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d2c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011d30:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8011d34:	a902      	add	r1, sp, #8
 8011d36:	3010      	adds	r0, #16
 8011d38:	f7ff fbfa 	bl	8011530 <rcl_action_send_result_request>
 8011d3c:	b920      	cbnz	r0, 8011d48 <rclc_action_send_result_request+0x3c>
 8011d3e:	b007      	add	sp, #28
 8011d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d44:	200b      	movs	r0, #11
 8011d46:	4770      	bx	lr
 8011d48:	9001      	str	r0, [sp, #4]
 8011d4a:	f7fb faed 	bl	800d328 <rcutils_reset_error>
 8011d4e:	9801      	ldr	r0, [sp, #4]
 8011d50:	b007      	add	sp, #28
 8011d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d56:	bf00      	nop

08011d58 <rclc_action_take_goal_handle>:
 8011d58:	4603      	mov	r3, r0
 8011d5a:	b158      	cbz	r0, 8011d74 <rclc_action_take_goal_handle+0x1c>
 8011d5c:	6880      	ldr	r0, [r0, #8]
 8011d5e:	b148      	cbz	r0, 8011d74 <rclc_action_take_goal_handle+0x1c>
 8011d60:	6801      	ldr	r1, [r0, #0]
 8011d62:	6099      	str	r1, [r3, #8]
 8011d64:	2200      	movs	r2, #0
 8011d66:	7202      	strb	r2, [r0, #8]
 8011d68:	68d9      	ldr	r1, [r3, #12]
 8011d6a:	6001      	str	r1, [r0, #0]
 8011d6c:	6202      	str	r2, [r0, #32]
 8011d6e:	8482      	strh	r2, [r0, #36]	@ 0x24
 8011d70:	60d8      	str	r0, [r3, #12]
 8011d72:	4770      	bx	lr
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop

08011d78 <rclc_action_remove_used_goal_handle>:
 8011d78:	b180      	cbz	r0, 8011d9c <rclc_action_remove_used_goal_handle+0x24>
 8011d7a:	b179      	cbz	r1, 8011d9c <rclc_action_remove_used_goal_handle+0x24>
 8011d7c:	68c3      	ldr	r3, [r0, #12]
 8011d7e:	4299      	cmp	r1, r3
 8011d80:	d00d      	beq.n	8011d9e <rclc_action_remove_used_goal_handle+0x26>
 8011d82:	b12b      	cbz	r3, 8011d90 <rclc_action_remove_used_goal_handle+0x18>
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	4291      	cmp	r1, r2
 8011d88:	d003      	beq.n	8011d92 <rclc_action_remove_used_goal_handle+0x1a>
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1f9      	bne.n	8011d84 <rclc_action_remove_used_goal_handle+0xc>
 8011d90:	4770      	bx	lr
 8011d92:	680a      	ldr	r2, [r1, #0]
 8011d94:	601a      	str	r2, [r3, #0]
 8011d96:	6883      	ldr	r3, [r0, #8]
 8011d98:	600b      	str	r3, [r1, #0]
 8011d9a:	6081      	str	r1, [r0, #8]
 8011d9c:	4770      	bx	lr
 8011d9e:	680b      	ldr	r3, [r1, #0]
 8011da0:	60c3      	str	r3, [r0, #12]
 8011da2:	e7f8      	b.n	8011d96 <rclc_action_remove_used_goal_handle+0x1e>

08011da4 <rclc_action_find_goal_handle_by_uuid>:
 8011da4:	b538      	push	{r3, r4, r5, lr}
 8011da6:	b180      	cbz	r0, 8011dca <rclc_action_find_goal_handle_by_uuid+0x26>
 8011da8:	460d      	mov	r5, r1
 8011daa:	b181      	cbz	r1, 8011dce <rclc_action_find_goal_handle_by_uuid+0x2a>
 8011dac:	68c4      	ldr	r4, [r0, #12]
 8011dae:	b914      	cbnz	r4, 8011db6 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011db0:	e009      	b.n	8011dc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011db2:	6824      	ldr	r4, [r4, #0]
 8011db4:	b13c      	cbz	r4, 8011dc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011db6:	2210      	movs	r2, #16
 8011db8:	4629      	mov	r1, r5
 8011dba:	f104 0009 	add.w	r0, r4, #9
 8011dbe:	f009 fd53 	bl	801b868 <memcmp>
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d1f5      	bne.n	8011db2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	bd38      	pop	{r3, r4, r5, pc}
 8011dca:	4604      	mov	r4, r0
 8011dcc:	e7fb      	b.n	8011dc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011dce:	460c      	mov	r4, r1
 8011dd0:	e7f9      	b.n	8011dc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011dd2:	bf00      	nop

08011dd4 <rclc_action_find_first_handle_by_status>:
 8011dd4:	b140      	cbz	r0, 8011de8 <rclc_action_find_first_handle_by_status+0x14>
 8011dd6:	68c0      	ldr	r0, [r0, #12]
 8011dd8:	b910      	cbnz	r0, 8011de0 <rclc_action_find_first_handle_by_status+0xc>
 8011dda:	e005      	b.n	8011de8 <rclc_action_find_first_handle_by_status+0x14>
 8011ddc:	6800      	ldr	r0, [r0, #0]
 8011dde:	b118      	cbz	r0, 8011de8 <rclc_action_find_first_handle_by_status+0x14>
 8011de0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011de4:	428b      	cmp	r3, r1
 8011de6:	d1f9      	bne.n	8011ddc <rclc_action_find_first_handle_by_status+0x8>
 8011de8:	4770      	bx	lr
 8011dea:	bf00      	nop

08011dec <rclc_action_find_first_terminated_handle>:
 8011dec:	b140      	cbz	r0, 8011e00 <rclc_action_find_first_terminated_handle+0x14>
 8011dee:	68c0      	ldr	r0, [r0, #12]
 8011df0:	b910      	cbnz	r0, 8011df8 <rclc_action_find_first_terminated_handle+0xc>
 8011df2:	e005      	b.n	8011e00 <rclc_action_find_first_terminated_handle+0x14>
 8011df4:	6800      	ldr	r0, [r0, #0]
 8011df6:	b118      	cbz	r0, 8011e00 <rclc_action_find_first_terminated_handle+0x14>
 8011df8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011dfc:	2b03      	cmp	r3, #3
 8011dfe:	ddf9      	ble.n	8011df4 <rclc_action_find_first_terminated_handle+0x8>
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop

08011e04 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011e04:	b170      	cbz	r0, 8011e24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011e06:	68c0      	ldr	r0, [r0, #12]
 8011e08:	b160      	cbz	r0, 8011e24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011e0a:	b410      	push	{r4}
 8011e0c:	e001      	b.n	8011e12 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011e0e:	6800      	ldr	r0, [r0, #0]
 8011e10:	b128      	cbz	r0, 8011e1e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011e12:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8011e16:	4299      	cmp	r1, r3
 8011e18:	bf08      	it	eq
 8011e1a:	4294      	cmpeq	r4, r2
 8011e1c:	d1f7      	bne.n	8011e0e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	4770      	bx	lr
 8011e26:	bf00      	nop

08011e28 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011e28:	b170      	cbz	r0, 8011e48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011e2a:	68c0      	ldr	r0, [r0, #12]
 8011e2c:	b160      	cbz	r0, 8011e48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011e2e:	b410      	push	{r4}
 8011e30:	e001      	b.n	8011e36 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011e32:	6800      	ldr	r0, [r0, #0]
 8011e34:	b128      	cbz	r0, 8011e42 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011e36:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8011e3a:	4299      	cmp	r1, r3
 8011e3c:	bf08      	it	eq
 8011e3e:	4294      	cmpeq	r4, r2
 8011e40:	d1f7      	bne.n	8011e32 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e46:	4770      	bx	lr
 8011e48:	4770      	bx	lr
 8011e4a:	bf00      	nop

08011e4c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011e4c:	b170      	cbz	r0, 8011e6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011e4e:	68c0      	ldr	r0, [r0, #12]
 8011e50:	b160      	cbz	r0, 8011e6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011e52:	b410      	push	{r4}
 8011e54:	e001      	b.n	8011e5a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011e56:	6800      	ldr	r0, [r0, #0]
 8011e58:	b128      	cbz	r0, 8011e66 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011e5a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8011e5e:	4299      	cmp	r1, r3
 8011e60:	bf08      	it	eq
 8011e62:	4294      	cmpeq	r4, r2
 8011e64:	d1f7      	bne.n	8011e56 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e6a:	4770      	bx	lr
 8011e6c:	4770      	bx	lr
 8011e6e:	bf00      	nop

08011e70 <rclc_action_find_first_handle_with_goal_response>:
 8011e70:	b140      	cbz	r0, 8011e84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011e72:	68c0      	ldr	r0, [r0, #12]
 8011e74:	b910      	cbnz	r0, 8011e7c <rclc_action_find_first_handle_with_goal_response+0xc>
 8011e76:	e005      	b.n	8011e84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011e78:	6800      	ldr	r0, [r0, #0]
 8011e7a:	b118      	cbz	r0, 8011e84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011e7c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d0f9      	beq.n	8011e78 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011e84:	4770      	bx	lr
 8011e86:	bf00      	nop

08011e88 <rclc_action_find_first_handle_with_result_response>:
 8011e88:	b140      	cbz	r0, 8011e9c <rclc_action_find_first_handle_with_result_response+0x14>
 8011e8a:	68c0      	ldr	r0, [r0, #12]
 8011e8c:	b910      	cbnz	r0, 8011e94 <rclc_action_find_first_handle_with_result_response+0xc>
 8011e8e:	e005      	b.n	8011e9c <rclc_action_find_first_handle_with_result_response+0x14>
 8011e90:	6800      	ldr	r0, [r0, #0]
 8011e92:	b118      	cbz	r0, 8011e9c <rclc_action_find_first_handle_with_result_response+0x14>
 8011e94:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d0f9      	beq.n	8011e90 <rclc_action_find_first_handle_with_result_response+0x8>
 8011e9c:	4770      	bx	lr
 8011e9e:	bf00      	nop

08011ea0 <rclc_action_server_response_goal_request>:
 8011ea0:	b198      	cbz	r0, 8011eca <rclc_action_server_response_goal_request+0x2a>
 8011ea2:	b510      	push	{r4, lr}
 8011ea4:	6844      	ldr	r4, [r0, #4]
 8011ea6:	b086      	sub	sp, #24
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011eae:	460b      	mov	r3, r1
 8011eb0:	9205      	str	r2, [sp, #20]
 8011eb2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8011eb6:	aa03      	add	r2, sp, #12
 8011eb8:	f104 0010 	add.w	r0, r4, #16
 8011ebc:	f88d 300c 	strb.w	r3, [sp, #12]
 8011ec0:	f7ff fd52 	bl	8011968 <rcl_action_send_goal_response>
 8011ec4:	b918      	cbnz	r0, 8011ece <rclc_action_server_response_goal_request+0x2e>
 8011ec6:	b006      	add	sp, #24
 8011ec8:	bd10      	pop	{r4, pc}
 8011eca:	200b      	movs	r0, #11
 8011ecc:	4770      	bx	lr
 8011ece:	9001      	str	r0, [sp, #4]
 8011ed0:	f7fb fa2a 	bl	800d328 <rcutils_reset_error>
 8011ed4:	9801      	ldr	r0, [sp, #4]
 8011ed6:	b006      	add	sp, #24
 8011ed8:	bd10      	pop	{r4, pc}
 8011eda:	bf00      	nop
 8011edc:	0000      	movs	r0, r0
	...

08011ee0 <rclc_action_server_goal_cancel_accept>:
 8011ee0:	b310      	cbz	r0, 8011f28 <rclc_action_server_goal_cancel_accept+0x48>
 8011ee2:	b510      	push	{r4, lr}
 8011ee4:	b090      	sub	sp, #64	@ 0x40
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	a806      	add	r0, sp, #24
 8011eea:	f7ff fefd 	bl	8011ce8 <rcl_action_get_zero_initialized_cancel_response>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011ef4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011ef8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011efc:	f88d 3018 	strb.w	r3, [sp, #24]
 8011f00:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011f04:	f8cd d01c 	str.w	sp, [sp, #28]
 8011f08:	46ec      	mov	ip, sp
 8011f0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f0e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8011f30 <rclc_action_server_goal_cancel_accept+0x50>
 8011f12:	6860      	ldr	r0, [r4, #4]
 8011f14:	aa06      	add	r2, sp, #24
 8011f16:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8011f1a:	3010      	adds	r0, #16
 8011f1c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011f20:	f7ff fdd2 	bl	8011ac8 <rcl_action_send_cancel_response>
 8011f24:	b010      	add	sp, #64	@ 0x40
 8011f26:	bd10      	pop	{r4, pc}
 8011f28:	200b      	movs	r0, #11
 8011f2a:	4770      	bx	lr
 8011f2c:	f3af 8000 	nop.w
 8011f30:	00000001 	.word	0x00000001
 8011f34:	00000001 	.word	0x00000001

08011f38 <rclc_action_server_goal_cancel_reject>:
 8011f38:	b082      	sub	sp, #8
 8011f3a:	b530      	push	{r4, r5, lr}
 8011f3c:	b08b      	sub	sp, #44	@ 0x2c
 8011f3e:	ac0e      	add	r4, sp, #56	@ 0x38
 8011f40:	e884 000c 	stmia.w	r4, {r2, r3}
 8011f44:	b188      	cbz	r0, 8011f6a <rclc_action_server_goal_cancel_reject+0x32>
 8011f46:	4604      	mov	r4, r0
 8011f48:	a801      	add	r0, sp, #4
 8011f4a:	460d      	mov	r5, r1
 8011f4c:	f7ff fecc 	bl	8011ce8 <rcl_action_get_zero_initialized_cancel_response>
 8011f50:	aa01      	add	r2, sp, #4
 8011f52:	a90e      	add	r1, sp, #56	@ 0x38
 8011f54:	f104 0010 	add.w	r0, r4, #16
 8011f58:	f88d 5004 	strb.w	r5, [sp, #4]
 8011f5c:	f7ff fdb4 	bl	8011ac8 <rcl_action_send_cancel_response>
 8011f60:	b00b      	add	sp, #44	@ 0x2c
 8011f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f66:	b002      	add	sp, #8
 8011f68:	4770      	bx	lr
 8011f6a:	200b      	movs	r0, #11
 8011f6c:	b00b      	add	sp, #44	@ 0x2c
 8011f6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f72:	b002      	add	sp, #8
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop

08011f78 <__atomic_load_8>:
 8011f78:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011f7c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011f80:	4a15      	ldr	r2, [pc, #84]	@ (8011fd8 <__atomic_load_8+0x60>)
 8011f82:	4b16      	ldr	r3, [pc, #88]	@ (8011fdc <__atomic_load_8+0x64>)
 8011f84:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011f88:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011f8c:	fb02 f101 	mul.w	r1, r2, r1
 8011f90:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011f94:	fba3 2301 	umull	r2, r3, r3, r1
 8011f98:	091b      	lsrs	r3, r3, #4
 8011f9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011f9e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011fa2:	b4f0      	push	{r4, r5, r6, r7}
 8011fa4:	4d0e      	ldr	r5, [pc, #56]	@ (8011fe0 <__atomic_load_8+0x68>)
 8011fa6:	1ac9      	subs	r1, r1, r3
 8011fa8:	194a      	adds	r2, r1, r5
 8011faa:	f04f 0c01 	mov.w	ip, #1
 8011fae:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011fb2:	e8c2 cf44 	strexb	r4, ip, [r2]
 8011fb6:	2c00      	cmp	r4, #0
 8011fb8:	d1f9      	bne.n	8011fae <__atomic_load_8+0x36>
 8011fba:	f3bf 8f5b 	dmb	ish
 8011fbe:	b2dc      	uxtb	r4, r3
 8011fc0:	2c00      	cmp	r4, #0
 8011fc2:	d1f4      	bne.n	8011fae <__atomic_load_8+0x36>
 8011fc4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011fc8:	f3bf 8f5b 	dmb	ish
 8011fcc:	546b      	strb	r3, [r5, r1]
 8011fce:	4630      	mov	r0, r6
 8011fd0:	4639      	mov	r1, r7
 8011fd2:	bcf0      	pop	{r4, r5, r6, r7}
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	27d4eb2d 	.word	0x27d4eb2d
 8011fdc:	b21642c9 	.word	0xb21642c9
 8011fe0:	20012da0 	.word	0x20012da0

08011fe4 <__atomic_store_8>:
 8011fe4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011fe8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011ff2:	4c14      	ldr	r4, [pc, #80]	@ (8012044 <__atomic_store_8+0x60>)
 8011ff4:	4e14      	ldr	r6, [pc, #80]	@ (8012048 <__atomic_store_8+0x64>)
 8011ff6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011ffa:	fb04 f101 	mul.w	r1, r4, r1
 8011ffe:	4c13      	ldr	r4, [pc, #76]	@ (801204c <__atomic_store_8+0x68>)
 8012000:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012004:	fba4 5401 	umull	r5, r4, r4, r1
 8012008:	0924      	lsrs	r4, r4, #4
 801200a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801200e:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8012012:	eba1 0e04 	sub.w	lr, r1, r4
 8012016:	f04f 0501 	mov.w	r5, #1
 801201a:	eb0e 0c06 	add.w	ip, lr, r6
 801201e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012022:	e8cc 5f44 	strexb	r4, r5, [ip]
 8012026:	2c00      	cmp	r4, #0
 8012028:	d1f9      	bne.n	801201e <__atomic_store_8+0x3a>
 801202a:	f3bf 8f5b 	dmb	ish
 801202e:	b2cc      	uxtb	r4, r1
 8012030:	2c00      	cmp	r4, #0
 8012032:	d1f4      	bne.n	801201e <__atomic_store_8+0x3a>
 8012034:	e9c0 2300 	strd	r2, r3, [r0]
 8012038:	f3bf 8f5b 	dmb	ish
 801203c:	f806 100e 	strb.w	r1, [r6, lr]
 8012040:	bd70      	pop	{r4, r5, r6, pc}
 8012042:	bf00      	nop
 8012044:	27d4eb2d 	.word	0x27d4eb2d
 8012048:	20012da0 	.word	0x20012da0
 801204c:	b21642c9 	.word	0xb21642c9

08012050 <__atomic_exchange_8>:
 8012050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012052:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8012056:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801205a:	4917      	ldr	r1, [pc, #92]	@ (80120b8 <__atomic_exchange_8+0x68>)
 801205c:	4f17      	ldr	r7, [pc, #92]	@ (80120bc <__atomic_exchange_8+0x6c>)
 801205e:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8012062:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8012066:	fb01 fe0e 	mul.w	lr, r1, lr
 801206a:	4915      	ldr	r1, [pc, #84]	@ (80120c0 <__atomic_exchange_8+0x70>)
 801206c:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8012070:	4606      	mov	r6, r0
 8012072:	fba1 010e 	umull	r0, r1, r1, lr
 8012076:	0909      	lsrs	r1, r1, #4
 8012078:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801207c:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012080:	ebae 0e01 	sub.w	lr, lr, r1
 8012084:	f04f 0501 	mov.w	r5, #1
 8012088:	eb0e 0107 	add.w	r1, lr, r7
 801208c:	e8d1 cf4f 	ldrexb	ip, [r1]
 8012090:	e8c1 5f40 	strexb	r0, r5, [r1]
 8012094:	2800      	cmp	r0, #0
 8012096:	d1f9      	bne.n	801208c <__atomic_exchange_8+0x3c>
 8012098:	f3bf 8f5b 	dmb	ish
 801209c:	fa5f f48c 	uxtb.w	r4, ip
 80120a0:	2c00      	cmp	r4, #0
 80120a2:	d1f3      	bne.n	801208c <__atomic_exchange_8+0x3c>
 80120a4:	e9d6 0100 	ldrd	r0, r1, [r6]
 80120a8:	e9c6 2300 	strd	r2, r3, [r6]
 80120ac:	f3bf 8f5b 	dmb	ish
 80120b0:	f807 c00e 	strb.w	ip, [r7, lr]
 80120b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120b6:	bf00      	nop
 80120b8:	27d4eb2d 	.word	0x27d4eb2d
 80120bc:	20012da0 	.word	0x20012da0
 80120c0:	b21642c9 	.word	0xb21642c9

080120c4 <rcutils_get_env>:
 80120c4:	b150      	cbz	r0, 80120dc <rcutils_get_env+0x18>
 80120c6:	b510      	push	{r4, lr}
 80120c8:	460c      	mov	r4, r1
 80120ca:	b909      	cbnz	r1, 80120d0 <rcutils_get_env+0xc>
 80120cc:	4806      	ldr	r0, [pc, #24]	@ (80120e8 <rcutils_get_env+0x24>)
 80120ce:	bd10      	pop	{r4, pc}
 80120d0:	f008 f84e 	bl	801a170 <getenv>
 80120d4:	b120      	cbz	r0, 80120e0 <rcutils_get_env+0x1c>
 80120d6:	6020      	str	r0, [r4, #0]
 80120d8:	2000      	movs	r0, #0
 80120da:	bd10      	pop	{r4, pc}
 80120dc:	4803      	ldr	r0, [pc, #12]	@ (80120ec <rcutils_get_env+0x28>)
 80120de:	4770      	bx	lr
 80120e0:	4b03      	ldr	r3, [pc, #12]	@ (80120f0 <rcutils_get_env+0x2c>)
 80120e2:	6023      	str	r3, [r4, #0]
 80120e4:	e7f8      	b.n	80120d8 <rcutils_get_env+0x14>
 80120e6:	bf00      	nop
 80120e8:	0801f8d8 	.word	0x0801f8d8
 80120ec:	0801f8bc 	.word	0x0801f8bc
 80120f0:	080201c0 	.word	0x080201c0

080120f4 <rcutils_is_directory>:
 80120f4:	2000      	movs	r0, #0
 80120f6:	4770      	bx	lr

080120f8 <rcutils_join_path>:
 80120f8:	b082      	sub	sp, #8
 80120fa:	e88d 000c 	stmia.w	sp, {r2, r3}
 80120fe:	2000      	movs	r0, #0
 8012100:	b002      	add	sp, #8
 8012102:	4770      	bx	lr

08012104 <rcutils_to_native_path>:
 8012104:	b084      	sub	sp, #16
 8012106:	a801      	add	r0, sp, #4
 8012108:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801210c:	b004      	add	sp, #16
 801210e:	2000      	movs	r0, #0
 8012110:	4770      	bx	lr
 8012112:	bf00      	nop

08012114 <rcutils_format_string_limit>:
 8012114:	b40f      	push	{r0, r1, r2, r3}
 8012116:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012118:	b083      	sub	sp, #12
 801211a:	ac08      	add	r4, sp, #32
 801211c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801211e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012122:	b376      	cbz	r6, 8012182 <rcutils_format_string_limit+0x6e>
 8012124:	4620      	mov	r0, r4
 8012126:	f7fb f8db 	bl	800d2e0 <rcutils_allocator_is_valid>
 801212a:	b350      	cbz	r0, 8012182 <rcutils_format_string_limit+0x6e>
 801212c:	2100      	movs	r1, #0
 801212e:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012130:	4632      	mov	r2, r6
 8012132:	4608      	mov	r0, r1
 8012134:	e9cd 3300 	strd	r3, r3, [sp]
 8012138:	f000 f8f8 	bl	801232c <rcutils_vsnprintf>
 801213c:	1c43      	adds	r3, r0, #1
 801213e:	4605      	mov	r5, r0
 8012140:	d01f      	beq.n	8012182 <rcutils_format_string_limit+0x6e>
 8012142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012144:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012146:	1c47      	adds	r7, r0, #1
 8012148:	429f      	cmp	r7, r3
 801214a:	bf84      	itt	hi
 801214c:	461f      	movhi	r7, r3
 801214e:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8012152:	4638      	mov	r0, r7
 8012154:	9b08      	ldr	r3, [sp, #32]
 8012156:	4798      	blx	r3
 8012158:	4604      	mov	r4, r0
 801215a:	b190      	cbz	r0, 8012182 <rcutils_format_string_limit+0x6e>
 801215c:	9b01      	ldr	r3, [sp, #4]
 801215e:	4632      	mov	r2, r6
 8012160:	4639      	mov	r1, r7
 8012162:	f000 f8e3 	bl	801232c <rcutils_vsnprintf>
 8012166:	2800      	cmp	r0, #0
 8012168:	db07      	blt.n	801217a <rcutils_format_string_limit+0x66>
 801216a:	2300      	movs	r3, #0
 801216c:	5563      	strb	r3, [r4, r5]
 801216e:	4620      	mov	r0, r4
 8012170:	b003      	add	sp, #12
 8012172:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012176:	b004      	add	sp, #16
 8012178:	4770      	bx	lr
 801217a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801217c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801217e:	4620      	mov	r0, r4
 8012180:	4798      	blx	r3
 8012182:	2400      	movs	r4, #0
 8012184:	e7f3      	b.n	801216e <rcutils_format_string_limit+0x5a>
 8012186:	bf00      	nop

08012188 <rcutils_repl_str>:
 8012188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801218c:	4699      	mov	r9, r3
 801218e:	b089      	sub	sp, #36	@ 0x24
 8012190:	4603      	mov	r3, r0
 8012192:	4648      	mov	r0, r9
 8012194:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012198:	4698      	mov	r8, r3
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	460c      	mov	r4, r1
 801219e:	f7fb f89f 	bl	800d2e0 <rcutils_allocator_is_valid>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	f000 80a3 	beq.w	80122ee <rcutils_repl_str+0x166>
 80121a8:	4620      	mov	r0, r4
 80121aa:	f7ee f891 	bl	80002d0 <strlen>
 80121ae:	f04f 0a00 	mov.w	sl, #0
 80121b2:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80121b6:	9001      	str	r0, [sp, #4]
 80121b8:	4657      	mov	r7, sl
 80121ba:	4655      	mov	r5, sl
 80121bc:	2610      	movs	r6, #16
 80121be:	e01e      	b.n	80121fe <rcutils_repl_str+0x76>
 80121c0:	3501      	adds	r5, #1
 80121c2:	45aa      	cmp	sl, r5
 80121c4:	d212      	bcs.n	80121ec <rcutils_repl_str+0x64>
 80121c6:	44b2      	add	sl, r6
 80121c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80121cc:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80121d0:	4798      	blx	r3
 80121d2:	2800      	cmp	r0, #0
 80121d4:	f000 8088 	beq.w	80122e8 <rcutils_repl_str+0x160>
 80121d8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80121dc:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 80121e0:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80121e4:	4607      	mov	r7, r0
 80121e6:	bf28      	it	cs
 80121e8:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 80121ec:	9a00      	ldr	r2, [sp, #0]
 80121ee:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80121f2:	1aa2      	subs	r2, r4, r2
 80121f4:	f843 2c04 	str.w	r2, [r3, #-4]
 80121f8:	9b01      	ldr	r3, [sp, #4]
 80121fa:	eb04 0803 	add.w	r8, r4, r3
 80121fe:	9902      	ldr	r1, [sp, #8]
 8012200:	4640      	mov	r0, r8
 8012202:	f009 fb95 	bl	801b930 <strstr>
 8012206:	4604      	mov	r4, r0
 8012208:	465a      	mov	r2, fp
 801220a:	4638      	mov	r0, r7
 801220c:	2c00      	cmp	r4, #0
 801220e:	d1d7      	bne.n	80121c0 <rcutils_repl_str+0x38>
 8012210:	4640      	mov	r0, r8
 8012212:	f7ee f85d 	bl	80002d0 <strlen>
 8012216:	9b00      	ldr	r3, [sp, #0]
 8012218:	eba8 0803 	sub.w	r8, r8, r3
 801221c:	eb08 0300 	add.w	r3, r8, r0
 8012220:	9304      	str	r3, [sp, #16]
 8012222:	f8d9 8000 	ldr.w	r8, [r9]
 8012226:	2d00      	cmp	r5, #0
 8012228:	d03f      	beq.n	80122aa <rcutils_repl_str+0x122>
 801222a:	9803      	ldr	r0, [sp, #12]
 801222c:	f7ee f850 	bl	80002d0 <strlen>
 8012230:	4606      	mov	r6, r0
 8012232:	9801      	ldr	r0, [sp, #4]
 8012234:	9a04      	ldr	r2, [sp, #16]
 8012236:	1a33      	subs	r3, r6, r0
 8012238:	fb05 2a03 	mla	sl, r5, r3, r2
 801223c:	4659      	mov	r1, fp
 801223e:	f10a 0001 	add.w	r0, sl, #1
 8012242:	47c0      	blx	r8
 8012244:	4683      	mov	fp, r0
 8012246:	2800      	cmp	r0, #0
 8012248:	d04e      	beq.n	80122e8 <rcutils_repl_str+0x160>
 801224a:	683a      	ldr	r2, [r7, #0]
 801224c:	9900      	ldr	r1, [sp, #0]
 801224e:	f009 fc6a 	bl	801bb26 <memcpy>
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	9706      	str	r7, [sp, #24]
 8012256:	1e6a      	subs	r2, r5, #1
 8012258:	445b      	add	r3, fp
 801225a:	46a8      	mov	r8, r5
 801225c:	9202      	str	r2, [sp, #8]
 801225e:	4625      	mov	r5, r4
 8012260:	f8cd 901c 	str.w	r9, [sp, #28]
 8012264:	461c      	mov	r4, r3
 8012266:	9903      	ldr	r1, [sp, #12]
 8012268:	4632      	mov	r2, r6
 801226a:	4620      	mov	r0, r4
 801226c:	f009 fc5b 	bl	801bb26 <memcpy>
 8012270:	9b01      	ldr	r3, [sp, #4]
 8012272:	f857 2b04 	ldr.w	r2, [r7], #4
 8012276:	eb02 0c03 	add.w	ip, r2, r3
 801227a:	9b00      	ldr	r3, [sp, #0]
 801227c:	eb03 010c 	add.w	r1, r3, ip
 8012280:	9b02      	ldr	r3, [sp, #8]
 8012282:	4434      	add	r4, r6
 8012284:	429d      	cmp	r5, r3
 8012286:	4620      	mov	r0, r4
 8012288:	d022      	beq.n	80122d0 <rcutils_repl_str+0x148>
 801228a:	683a      	ldr	r2, [r7, #0]
 801228c:	eba2 090c 	sub.w	r9, r2, ip
 8012290:	464a      	mov	r2, r9
 8012292:	3501      	adds	r5, #1
 8012294:	f009 fc47 	bl	801bb26 <memcpy>
 8012298:	45a8      	cmp	r8, r5
 801229a:	444c      	add	r4, r9
 801229c:	d1e3      	bne.n	8012266 <rcutils_repl_str+0xde>
 801229e:	2300      	movs	r3, #0
 80122a0:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 80122a4:	f80b 300a 	strb.w	r3, [fp, sl]
 80122a8:	e008      	b.n	80122bc <rcutils_repl_str+0x134>
 80122aa:	4618      	mov	r0, r3
 80122ac:	4659      	mov	r1, fp
 80122ae:	3001      	adds	r0, #1
 80122b0:	47c0      	blx	r8
 80122b2:	4683      	mov	fp, r0
 80122b4:	b110      	cbz	r0, 80122bc <rcutils_repl_str+0x134>
 80122b6:	9900      	ldr	r1, [sp, #0]
 80122b8:	f009 fc2d 	bl	801bb16 <strcpy>
 80122bc:	4638      	mov	r0, r7
 80122be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80122c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80122c6:	4798      	blx	r3
 80122c8:	4658      	mov	r0, fp
 80122ca:	b009      	add	sp, #36	@ 0x24
 80122cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d0:	9b04      	ldr	r3, [sp, #16]
 80122d2:	eba3 020c 	sub.w	r2, r3, ip
 80122d6:	9205      	str	r2, [sp, #20]
 80122d8:	3501      	adds	r5, #1
 80122da:	f009 fc24 	bl	801bb26 <memcpy>
 80122de:	9a05      	ldr	r2, [sp, #20]
 80122e0:	45a8      	cmp	r8, r5
 80122e2:	4414      	add	r4, r2
 80122e4:	d1bf      	bne.n	8012266 <rcutils_repl_str+0xde>
 80122e6:	e7da      	b.n	801229e <rcutils_repl_str+0x116>
 80122e8:	f04f 0b00 	mov.w	fp, #0
 80122ec:	e7e6      	b.n	80122bc <rcutils_repl_str+0x134>
 80122ee:	4683      	mov	fp, r0
 80122f0:	4658      	mov	r0, fp
 80122f2:	b009      	add	sp, #36	@ 0x24
 80122f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122f8 <rcutils_snprintf>:
 80122f8:	b40c      	push	{r2, r3}
 80122fa:	b530      	push	{r4, r5, lr}
 80122fc:	b083      	sub	sp, #12
 80122fe:	ab06      	add	r3, sp, #24
 8012300:	f853 2b04 	ldr.w	r2, [r3], #4
 8012304:	9301      	str	r3, [sp, #4]
 8012306:	b152      	cbz	r2, 801231e <rcutils_snprintf+0x26>
 8012308:	b138      	cbz	r0, 801231a <rcutils_snprintf+0x22>
 801230a:	b141      	cbz	r1, 801231e <rcutils_snprintf+0x26>
 801230c:	f009 fa0a 	bl	801b724 <vsniprintf>
 8012310:	b003      	add	sp, #12
 8012312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012316:	b002      	add	sp, #8
 8012318:	4770      	bx	lr
 801231a:	2900      	cmp	r1, #0
 801231c:	d0f6      	beq.n	801230c <rcutils_snprintf+0x14>
 801231e:	f009 fbcd 	bl	801babc <__errno>
 8012322:	2316      	movs	r3, #22
 8012324:	6003      	str	r3, [r0, #0]
 8012326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801232a:	e7f1      	b.n	8012310 <rcutils_snprintf+0x18>

0801232c <rcutils_vsnprintf>:
 801232c:	b570      	push	{r4, r5, r6, lr}
 801232e:	b13a      	cbz	r2, 8012340 <rcutils_vsnprintf+0x14>
 8012330:	b120      	cbz	r0, 801233c <rcutils_vsnprintf+0x10>
 8012332:	b129      	cbz	r1, 8012340 <rcutils_vsnprintf+0x14>
 8012334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012338:	f009 b9f4 	b.w	801b724 <vsniprintf>
 801233c:	2900      	cmp	r1, #0
 801233e:	d0f9      	beq.n	8012334 <rcutils_vsnprintf+0x8>
 8012340:	f009 fbbc 	bl	801babc <__errno>
 8012344:	2316      	movs	r3, #22
 8012346:	6003      	str	r3, [r0, #0]
 8012348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801234c:	bd70      	pop	{r4, r5, r6, pc}
 801234e:	bf00      	nop

08012350 <rcutils_strdup>:
 8012350:	b084      	sub	sp, #16
 8012352:	b570      	push	{r4, r5, r6, lr}
 8012354:	b086      	sub	sp, #24
 8012356:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801235a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801235e:	4604      	mov	r4, r0
 8012360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012364:	f10d 0e04 	add.w	lr, sp, #4
 8012368:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801236c:	f8dc 3000 	ldr.w	r3, [ip]
 8012370:	f8ce 3000 	str.w	r3, [lr]
 8012374:	b304      	cbz	r4, 80123b8 <rcutils_strdup+0x68>
 8012376:	a801      	add	r0, sp, #4
 8012378:	f7fa ffb2 	bl	800d2e0 <rcutils_allocator_is_valid>
 801237c:	b1e0      	cbz	r0, 80123b8 <rcutils_strdup+0x68>
 801237e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012382:	2100      	movs	r1, #0
 8012384:	4620      	mov	r0, r4
 8012386:	f7ed ff53 	bl	8000230 <memchr>
 801238a:	b190      	cbz	r0, 80123b2 <rcutils_strdup+0x62>
 801238c:	1b06      	subs	r6, r0, r4
 801238e:	1c70      	adds	r0, r6, #1
 8012390:	9b01      	ldr	r3, [sp, #4]
 8012392:	9905      	ldr	r1, [sp, #20]
 8012394:	4798      	blx	r3
 8012396:	4605      	mov	r5, r0
 8012398:	b128      	cbz	r0, 80123a6 <rcutils_strdup+0x56>
 801239a:	4632      	mov	r2, r6
 801239c:	4621      	mov	r1, r4
 801239e:	f009 fbc2 	bl	801bb26 <memcpy>
 80123a2:	2300      	movs	r3, #0
 80123a4:	55ab      	strb	r3, [r5, r6]
 80123a6:	4628      	mov	r0, r5
 80123a8:	b006      	add	sp, #24
 80123aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123ae:	b004      	add	sp, #16
 80123b0:	4770      	bx	lr
 80123b2:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80123b6:	e7eb      	b.n	8012390 <rcutils_strdup+0x40>
 80123b8:	2500      	movs	r5, #0
 80123ba:	e7f4      	b.n	80123a6 <rcutils_strdup+0x56>

080123bc <rcutils_strndup>:
 80123bc:	b082      	sub	sp, #8
 80123be:	b570      	push	{r4, r5, r6, lr}
 80123c0:	ac04      	add	r4, sp, #16
 80123c2:	e884 000c 	stmia.w	r4, {r2, r3}
 80123c6:	b1e8      	cbz	r0, 8012404 <rcutils_strndup+0x48>
 80123c8:	4605      	mov	r5, r0
 80123ca:	a804      	add	r0, sp, #16
 80123cc:	460c      	mov	r4, r1
 80123ce:	f7fa ff87 	bl	800d2e0 <rcutils_allocator_is_valid>
 80123d2:	b1b8      	cbz	r0, 8012404 <rcutils_strndup+0x48>
 80123d4:	4622      	mov	r2, r4
 80123d6:	2100      	movs	r1, #0
 80123d8:	4628      	mov	r0, r5
 80123da:	f7ed ff29 	bl	8000230 <memchr>
 80123de:	b100      	cbz	r0, 80123e2 <rcutils_strndup+0x26>
 80123e0:	1b44      	subs	r4, r0, r5
 80123e2:	9b04      	ldr	r3, [sp, #16]
 80123e4:	9908      	ldr	r1, [sp, #32]
 80123e6:	1c60      	adds	r0, r4, #1
 80123e8:	4798      	blx	r3
 80123ea:	4606      	mov	r6, r0
 80123ec:	b128      	cbz	r0, 80123fa <rcutils_strndup+0x3e>
 80123ee:	4622      	mov	r2, r4
 80123f0:	4629      	mov	r1, r5
 80123f2:	f009 fb98 	bl	801bb26 <memcpy>
 80123f6:	2300      	movs	r3, #0
 80123f8:	5533      	strb	r3, [r6, r4]
 80123fa:	4630      	mov	r0, r6
 80123fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012400:	b002      	add	sp, #8
 8012402:	4770      	bx	lr
 8012404:	2600      	movs	r6, #0
 8012406:	4630      	mov	r0, r6
 8012408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801240c:	b002      	add	sp, #8
 801240e:	4770      	bx	lr

08012410 <rcutils_get_zero_initialized_string_map>:
 8012410:	4b01      	ldr	r3, [pc, #4]	@ (8012418 <rcutils_get_zero_initialized_string_map+0x8>)
 8012412:	2000      	movs	r0, #0
 8012414:	6018      	str	r0, [r3, #0]
 8012416:	4770      	bx	lr
 8012418:	20012db8 	.word	0x20012db8

0801241c <rcutils_string_map_reserve>:
 801241c:	2800      	cmp	r0, #0
 801241e:	d04e      	beq.n	80124be <rcutils_string_map_reserve+0xa2>
 8012420:	b530      	push	{r4, r5, lr}
 8012422:	6803      	ldr	r3, [r0, #0]
 8012424:	b087      	sub	sp, #28
 8012426:	4604      	mov	r4, r0
 8012428:	2b00      	cmp	r3, #0
 801242a:	d043      	beq.n	80124b4 <rcutils_string_map_reserve+0x98>
 801242c:	f103 0c0c 	add.w	ip, r3, #12
 8012430:	460d      	mov	r5, r1
 8012432:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012436:	f10d 0e04 	add.w	lr, sp, #4
 801243a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801243e:	f8dc 3000 	ldr.w	r3, [ip]
 8012442:	f8ce 3000 	str.w	r3, [lr]
 8012446:	a801      	add	r0, sp, #4
 8012448:	f7fa ff4a 	bl	800d2e0 <rcutils_allocator_is_valid>
 801244c:	b308      	cbz	r0, 8012492 <rcutils_string_map_reserve+0x76>
 801244e:	6823      	ldr	r3, [r4, #0]
 8012450:	6899      	ldr	r1, [r3, #8]
 8012452:	42a9      	cmp	r1, r5
 8012454:	d829      	bhi.n	80124aa <rcutils_string_map_reserve+0x8e>
 8012456:	685a      	ldr	r2, [r3, #4]
 8012458:	42aa      	cmp	r2, r5
 801245a:	d024      	beq.n	80124a6 <rcutils_string_map_reserve+0x8a>
 801245c:	b1e5      	cbz	r5, 8012498 <rcutils_string_map_reserve+0x7c>
 801245e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8012462:	d22a      	bcs.n	80124ba <rcutils_string_map_reserve+0x9e>
 8012464:	6818      	ldr	r0, [r3, #0]
 8012466:	9a05      	ldr	r2, [sp, #20]
 8012468:	9b03      	ldr	r3, [sp, #12]
 801246a:	00e9      	lsls	r1, r5, #3
 801246c:	4798      	blx	r3
 801246e:	b320      	cbz	r0, 80124ba <rcutils_string_map_reserve+0x9e>
 8012470:	6824      	ldr	r4, [r4, #0]
 8012472:	6861      	ldr	r1, [r4, #4]
 8012474:	6020      	str	r0, [r4, #0]
 8012476:	42a9      	cmp	r1, r5
 8012478:	d214      	bcs.n	80124a4 <rcutils_string_map_reserve+0x88>
 801247a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 801247e:	1a69      	subs	r1, r5, r1
 8012480:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8012484:	2200      	movs	r2, #0
 8012486:	e9c3 2200 	strd	r2, r2, [r3]
 801248a:	3308      	adds	r3, #8
 801248c:	428b      	cmp	r3, r1
 801248e:	d1fa      	bne.n	8012486 <rcutils_string_map_reserve+0x6a>
 8012490:	e008      	b.n	80124a4 <rcutils_string_map_reserve+0x88>
 8012492:	200b      	movs	r0, #11
 8012494:	b007      	add	sp, #28
 8012496:	bd30      	pop	{r4, r5, pc}
 8012498:	9a02      	ldr	r2, [sp, #8]
 801249a:	9905      	ldr	r1, [sp, #20]
 801249c:	6818      	ldr	r0, [r3, #0]
 801249e:	4790      	blx	r2
 80124a0:	6824      	ldr	r4, [r4, #0]
 80124a2:	6025      	str	r5, [r4, #0]
 80124a4:	6065      	str	r5, [r4, #4]
 80124a6:	2000      	movs	r0, #0
 80124a8:	e7f4      	b.n	8012494 <rcutils_string_map_reserve+0x78>
 80124aa:	4620      	mov	r0, r4
 80124ac:	f7ff ffb6 	bl	801241c <rcutils_string_map_reserve>
 80124b0:	b007      	add	sp, #28
 80124b2:	bd30      	pop	{r4, r5, pc}
 80124b4:	201f      	movs	r0, #31
 80124b6:	b007      	add	sp, #28
 80124b8:	bd30      	pop	{r4, r5, pc}
 80124ba:	200a      	movs	r0, #10
 80124bc:	e7ea      	b.n	8012494 <rcutils_string_map_reserve+0x78>
 80124be:	200b      	movs	r0, #11
 80124c0:	4770      	bx	lr
 80124c2:	bf00      	nop

080124c4 <rcutils_string_map_init>:
 80124c4:	b082      	sub	sp, #8
 80124c6:	b570      	push	{r4, r5, r6, lr}
 80124c8:	ac04      	add	r4, sp, #16
 80124ca:	e884 000c 	stmia.w	r4, {r2, r3}
 80124ce:	b378      	cbz	r0, 8012530 <rcutils_string_map_init+0x6c>
 80124d0:	6806      	ldr	r6, [r0, #0]
 80124d2:	4604      	mov	r4, r0
 80124d4:	b12e      	cbz	r6, 80124e2 <rcutils_string_map_init+0x1e>
 80124d6:	251e      	movs	r5, #30
 80124d8:	4628      	mov	r0, r5
 80124da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124de:	b002      	add	sp, #8
 80124e0:	4770      	bx	lr
 80124e2:	a804      	add	r0, sp, #16
 80124e4:	460d      	mov	r5, r1
 80124e6:	f7fa fefb 	bl	800d2e0 <rcutils_allocator_is_valid>
 80124ea:	b308      	cbz	r0, 8012530 <rcutils_string_map_init+0x6c>
 80124ec:	9b04      	ldr	r3, [sp, #16]
 80124ee:	9908      	ldr	r1, [sp, #32]
 80124f0:	2020      	movs	r0, #32
 80124f2:	4798      	blx	r3
 80124f4:	6020      	str	r0, [r4, #0]
 80124f6:	b308      	cbz	r0, 801253c <rcutils_string_map_init+0x78>
 80124f8:	f10d 0e10 	add.w	lr, sp, #16
 80124fc:	e9c0 6600 	strd	r6, r6, [r0]
 8012500:	6086      	str	r6, [r0, #8]
 8012502:	f100 0c0c 	add.w	ip, r0, #12
 8012506:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801250a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801250e:	f8de 3000 	ldr.w	r3, [lr]
 8012512:	f8cc 3000 	str.w	r3, [ip]
 8012516:	4629      	mov	r1, r5
 8012518:	4620      	mov	r0, r4
 801251a:	f7ff ff7f 	bl	801241c <rcutils_string_map_reserve>
 801251e:	4605      	mov	r5, r0
 8012520:	2800      	cmp	r0, #0
 8012522:	d0d9      	beq.n	80124d8 <rcutils_string_map_init+0x14>
 8012524:	9b05      	ldr	r3, [sp, #20]
 8012526:	9908      	ldr	r1, [sp, #32]
 8012528:	6820      	ldr	r0, [r4, #0]
 801252a:	4798      	blx	r3
 801252c:	6026      	str	r6, [r4, #0]
 801252e:	e7d3      	b.n	80124d8 <rcutils_string_map_init+0x14>
 8012530:	250b      	movs	r5, #11
 8012532:	4628      	mov	r0, r5
 8012534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012538:	b002      	add	sp, #8
 801253a:	4770      	bx	lr
 801253c:	250a      	movs	r5, #10
 801253e:	e7cb      	b.n	80124d8 <rcutils_string_map_init+0x14>

08012540 <rcutils_string_map_fini>:
 8012540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012544:	b086      	sub	sp, #24
 8012546:	2800      	cmp	r0, #0
 8012548:	d04f      	beq.n	80125ea <rcutils_string_map_fini+0xaa>
 801254a:	6805      	ldr	r5, [r0, #0]
 801254c:	4606      	mov	r6, r0
 801254e:	2d00      	cmp	r5, #0
 8012550:	d046      	beq.n	80125e0 <rcutils_string_map_fini+0xa0>
 8012552:	686b      	ldr	r3, [r5, #4]
 8012554:	b353      	cbz	r3, 80125ac <rcutils_string_map_fini+0x6c>
 8012556:	2400      	movs	r4, #0
 8012558:	682a      	ldr	r2, [r5, #0]
 801255a:	4627      	mov	r7, r4
 801255c:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8012560:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8012564:	b1f8      	cbz	r0, 80125a6 <rcutils_string_map_fini+0x66>
 8012566:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 801256a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801256e:	4651      	mov	r1, sl
 8012570:	47c8      	blx	r9
 8012572:	682b      	ldr	r3, [r5, #0]
 8012574:	eb03 0208 	add.w	r2, r3, r8
 8012578:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 801257c:	6850      	ldr	r0, [r2, #4]
 801257e:	4651      	mov	r1, sl
 8012580:	47c8      	blx	r9
 8012582:	682a      	ldr	r2, [r5, #0]
 8012584:	68ab      	ldr	r3, [r5, #8]
 8012586:	4442      	add	r2, r8
 8012588:	3b01      	subs	r3, #1
 801258a:	6057      	str	r7, [r2, #4]
 801258c:	60ab      	str	r3, [r5, #8]
 801258e:	6835      	ldr	r5, [r6, #0]
 8012590:	686b      	ldr	r3, [r5, #4]
 8012592:	3401      	adds	r4, #1
 8012594:	429c      	cmp	r4, r3
 8012596:	d209      	bcs.n	80125ac <rcutils_string_map_fini+0x6c>
 8012598:	682a      	ldr	r2, [r5, #0]
 801259a:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801259e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d1df      	bne.n	8012566 <rcutils_string_map_fini+0x26>
 80125a6:	3401      	adds	r4, #1
 80125a8:	42a3      	cmp	r3, r4
 80125aa:	d8d7      	bhi.n	801255c <rcutils_string_map_fini+0x1c>
 80125ac:	2100      	movs	r1, #0
 80125ae:	4630      	mov	r0, r6
 80125b0:	f7ff ff34 	bl	801241c <rcutils_string_map_reserve>
 80125b4:	4604      	mov	r4, r0
 80125b6:	b118      	cbz	r0, 80125c0 <rcutils_string_map_fini+0x80>
 80125b8:	4620      	mov	r0, r4
 80125ba:	b006      	add	sp, #24
 80125bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c0:	6835      	ldr	r5, [r6, #0]
 80125c2:	350c      	adds	r5, #12
 80125c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80125c6:	af01      	add	r7, sp, #4
 80125c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80125ca:	682b      	ldr	r3, [r5, #0]
 80125cc:	603b      	str	r3, [r7, #0]
 80125ce:	a801      	add	r0, sp, #4
 80125d0:	f7fa fe86 	bl	800d2e0 <rcutils_allocator_is_valid>
 80125d4:	b148      	cbz	r0, 80125ea <rcutils_string_map_fini+0xaa>
 80125d6:	9b02      	ldr	r3, [sp, #8]
 80125d8:	9905      	ldr	r1, [sp, #20]
 80125da:	6830      	ldr	r0, [r6, #0]
 80125dc:	4798      	blx	r3
 80125de:	6034      	str	r4, [r6, #0]
 80125e0:	2400      	movs	r4, #0
 80125e2:	4620      	mov	r0, r4
 80125e4:	b006      	add	sp, #24
 80125e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125ea:	240b      	movs	r4, #11
 80125ec:	4620      	mov	r0, r4
 80125ee:	b006      	add	sp, #24
 80125f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080125f4 <rcutils_string_map_getn>:
 80125f4:	b338      	cbz	r0, 8012646 <rcutils_string_map_getn+0x52>
 80125f6:	6800      	ldr	r0, [r0, #0]
 80125f8:	b328      	cbz	r0, 8012646 <rcutils_string_map_getn+0x52>
 80125fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125fe:	460e      	mov	r6, r1
 8012600:	b1c1      	cbz	r1, 8012634 <rcutils_string_map_getn+0x40>
 8012602:	e9d0 9800 	ldrd	r9, r8, [r0]
 8012606:	f1b8 0f00 	cmp.w	r8, #0
 801260a:	d013      	beq.n	8012634 <rcutils_string_map_getn+0x40>
 801260c:	4617      	mov	r7, r2
 801260e:	2400      	movs	r4, #0
 8012610:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8012614:	4628      	mov	r0, r5
 8012616:	b155      	cbz	r5, 801262e <rcutils_string_map_getn+0x3a>
 8012618:	f7ed fe5a 	bl	80002d0 <strlen>
 801261c:	42b8      	cmp	r0, r7
 801261e:	4602      	mov	r2, r0
 8012620:	4629      	mov	r1, r5
 8012622:	bf38      	it	cc
 8012624:	463a      	movcc	r2, r7
 8012626:	4630      	mov	r0, r6
 8012628:	f009 f95d 	bl	801b8e6 <strncmp>
 801262c:	b128      	cbz	r0, 801263a <rcutils_string_map_getn+0x46>
 801262e:	3401      	adds	r4, #1
 8012630:	45a0      	cmp	r8, r4
 8012632:	d1ed      	bne.n	8012610 <rcutils_string_map_getn+0x1c>
 8012634:	2000      	movs	r0, #0
 8012636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801263a:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 801263e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8012642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012646:	4770      	bx	lr

08012648 <rmw_get_zero_initialized_context>:
 8012648:	b530      	push	{r4, r5, lr}
 801264a:	b097      	sub	sp, #92	@ 0x5c
 801264c:	4604      	mov	r4, r0
 801264e:	4668      	mov	r0, sp
 8012650:	f000 f812 	bl	8012678 <rmw_get_zero_initialized_init_options>
 8012654:	2300      	movs	r3, #0
 8012656:	2200      	movs	r2, #0
 8012658:	e9c4 2300 	strd	r2, r3, [r4]
 801265c:	2500      	movs	r5, #0
 801265e:	4669      	mov	r1, sp
 8012660:	2258      	movs	r2, #88	@ 0x58
 8012662:	f104 0010 	add.w	r0, r4, #16
 8012666:	60a5      	str	r5, [r4, #8]
 8012668:	f009 fa5d 	bl	801bb26 <memcpy>
 801266c:	4620      	mov	r0, r4
 801266e:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8012672:	b017      	add	sp, #92	@ 0x5c
 8012674:	bd30      	pop	{r4, r5, pc}
 8012676:	bf00      	nop

08012678 <rmw_get_zero_initialized_init_options>:
 8012678:	b530      	push	{r4, r5, lr}
 801267a:	b08b      	sub	sp, #44	@ 0x2c
 801267c:	466d      	mov	r5, sp
 801267e:	4604      	mov	r4, r0
 8012680:	4628      	mov	r0, r5
 8012682:	f000 f825 	bl	80126d0 <rmw_get_default_security_options>
 8012686:	a802      	add	r0, sp, #8
 8012688:	f006 fd0e 	bl	80190a8 <rmw_get_zero_initialized_discovery_options>
 801268c:	2258      	movs	r2, #88	@ 0x58
 801268e:	2100      	movs	r1, #0
 8012690:	4620      	mov	r0, r4
 8012692:	f009 f913 	bl	801b8bc <memset>
 8012696:	e895 0003 	ldmia.w	r5, {r0, r1}
 801269a:	f104 0310 	add.w	r3, r4, #16
 801269e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80126a2:	f10d 0c08 	add.w	ip, sp, #8
 80126a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80126aa:	60e2      	str	r2, [r4, #12]
 80126ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126b0:	f104 0e1c 	add.w	lr, r4, #28
 80126b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126b8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80126bc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80126c0:	4620      	mov	r0, r4
 80126c2:	b00b      	add	sp, #44	@ 0x2c
 80126c4:	bd30      	pop	{r4, r5, pc}
 80126c6:	bf00      	nop

080126c8 <rmw_get_default_publisher_options>:
 80126c8:	2200      	movs	r2, #0
 80126ca:	6002      	str	r2, [r0, #0]
 80126cc:	7102      	strb	r2, [r0, #4]
 80126ce:	4770      	bx	lr

080126d0 <rmw_get_default_security_options>:
 80126d0:	2200      	movs	r2, #0
 80126d2:	7002      	strb	r2, [r0, #0]
 80126d4:	6042      	str	r2, [r0, #4]
 80126d6:	4770      	bx	lr

080126d8 <rmw_subscription_content_filter_options_fini>:
 80126d8:	b1b0      	cbz	r0, 8012708 <rmw_subscription_content_filter_options_fini+0x30>
 80126da:	b538      	push	{r3, r4, r5, lr}
 80126dc:	4604      	mov	r4, r0
 80126de:	4608      	mov	r0, r1
 80126e0:	460d      	mov	r5, r1
 80126e2:	f7fa fdfd 	bl	800d2e0 <rcutils_allocator_is_valid>
 80126e6:	b168      	cbz	r0, 8012704 <rmw_subscription_content_filter_options_fini+0x2c>
 80126e8:	6820      	ldr	r0, [r4, #0]
 80126ea:	b120      	cbz	r0, 80126f6 <rmw_subscription_content_filter_options_fini+0x1e>
 80126ec:	686b      	ldr	r3, [r5, #4]
 80126ee:	6929      	ldr	r1, [r5, #16]
 80126f0:	4798      	blx	r3
 80126f2:	2300      	movs	r3, #0
 80126f4:	6023      	str	r3, [r4, #0]
 80126f6:	1d20      	adds	r0, r4, #4
 80126f8:	f006 fcb0 	bl	801905c <rcutils_string_array_fini>
 80126fc:	3800      	subs	r0, #0
 80126fe:	bf18      	it	ne
 8012700:	2001      	movne	r0, #1
 8012702:	bd38      	pop	{r3, r4, r5, pc}
 8012704:	200b      	movs	r0, #11
 8012706:	bd38      	pop	{r3, r4, r5, pc}
 8012708:	200b      	movs	r0, #11
 801270a:	4770      	bx	lr

0801270c <rmw_get_default_subscription_options>:
 801270c:	2200      	movs	r2, #0
 801270e:	e9c0 2200 	strd	r2, r2, [r0]
 8012712:	6082      	str	r2, [r0, #8]
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop

08012718 <rmw_get_zero_initialized_message_info>:
 8012718:	b510      	push	{r4, lr}
 801271a:	2238      	movs	r2, #56	@ 0x38
 801271c:	4604      	mov	r4, r0
 801271e:	2100      	movs	r1, #0
 8012720:	f009 f8cc 	bl	801b8bc <memset>
 8012724:	4620      	mov	r0, r4
 8012726:	bd10      	pop	{r4, pc}

08012728 <rmw_validate_full_topic_name>:
 8012728:	2800      	cmp	r0, #0
 801272a:	d049      	beq.n	80127c0 <rmw_validate_full_topic_name+0x98>
 801272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012730:	460e      	mov	r6, r1
 8012732:	2900      	cmp	r1, #0
 8012734:	d056      	beq.n	80127e4 <rmw_validate_full_topic_name+0xbc>
 8012736:	4615      	mov	r5, r2
 8012738:	4604      	mov	r4, r0
 801273a:	f7ed fdc9 	bl	80002d0 <strlen>
 801273e:	b150      	cbz	r0, 8012756 <rmw_validate_full_topic_name+0x2e>
 8012740:	7823      	ldrb	r3, [r4, #0]
 8012742:	2b2f      	cmp	r3, #47	@ 0x2f
 8012744:	d00c      	beq.n	8012760 <rmw_validate_full_topic_name+0x38>
 8012746:	2302      	movs	r3, #2
 8012748:	6033      	str	r3, [r6, #0]
 801274a:	b10d      	cbz	r5, 8012750 <rmw_validate_full_topic_name+0x28>
 801274c:	2300      	movs	r3, #0
 801274e:	602b      	str	r3, [r5, #0]
 8012750:	2000      	movs	r0, #0
 8012752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012756:	2301      	movs	r3, #1
 8012758:	6033      	str	r3, [r6, #0]
 801275a:	2d00      	cmp	r5, #0
 801275c:	d1f6      	bne.n	801274c <rmw_validate_full_topic_name+0x24>
 801275e:	e7f7      	b.n	8012750 <rmw_validate_full_topic_name+0x28>
 8012760:	1e47      	subs	r7, r0, #1
 8012762:	5de3      	ldrb	r3, [r4, r7]
 8012764:	2b2f      	cmp	r3, #47	@ 0x2f
 8012766:	d03f      	beq.n	80127e8 <rmw_validate_full_topic_name+0xc0>
 8012768:	1e63      	subs	r3, r4, #1
 801276a:	4621      	mov	r1, r4
 801276c:	eb03 0e00 	add.w	lr, r3, r0
 8012770:	469c      	mov	ip, r3
 8012772:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8012776:	2a5f      	cmp	r2, #95	@ 0x5f
 8012778:	d006      	beq.n	8012788 <rmw_validate_full_topic_name+0x60>
 801277a:	d823      	bhi.n	80127c4 <rmw_validate_full_topic_name+0x9c>
 801277c:	2a39      	cmp	r2, #57	@ 0x39
 801277e:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8012782:	d82b      	bhi.n	80127dc <rmw_validate_full_topic_name+0xb4>
 8012784:	2a2e      	cmp	r2, #46	@ 0x2e
 8012786:	d920      	bls.n	80127ca <rmw_validate_full_topic_name+0xa2>
 8012788:	4573      	cmp	r3, lr
 801278a:	d1f1      	bne.n	8012770 <rmw_validate_full_topic_name+0x48>
 801278c:	4c21      	ldr	r4, [pc, #132]	@ (8012814 <rmw_validate_full_topic_name+0xec>)
 801278e:	2300      	movs	r3, #0
 8012790:	e003      	b.n	801279a <rmw_validate_full_topic_name+0x72>
 8012792:	4298      	cmp	r0, r3
 8012794:	f101 0101 	add.w	r1, r1, #1
 8012798:	d02c      	beq.n	80127f4 <rmw_validate_full_topic_name+0xcc>
 801279a:	429f      	cmp	r7, r3
 801279c:	f103 0301 	add.w	r3, r3, #1
 80127a0:	d0f7      	beq.n	8012792 <rmw_validate_full_topic_name+0x6a>
 80127a2:	780a      	ldrb	r2, [r1, #0]
 80127a4:	2a2f      	cmp	r2, #47	@ 0x2f
 80127a6:	d1f4      	bne.n	8012792 <rmw_validate_full_topic_name+0x6a>
 80127a8:	784a      	ldrb	r2, [r1, #1]
 80127aa:	2a2f      	cmp	r2, #47	@ 0x2f
 80127ac:	d02d      	beq.n	801280a <rmw_validate_full_topic_name+0xe2>
 80127ae:	5ca2      	ldrb	r2, [r4, r2]
 80127b0:	0752      	lsls	r2, r2, #29
 80127b2:	d5ee      	bpl.n	8012792 <rmw_validate_full_topic_name+0x6a>
 80127b4:	2206      	movs	r2, #6
 80127b6:	6032      	str	r2, [r6, #0]
 80127b8:	2d00      	cmp	r5, #0
 80127ba:	d0c9      	beq.n	8012750 <rmw_validate_full_topic_name+0x28>
 80127bc:	602b      	str	r3, [r5, #0]
 80127be:	e7c7      	b.n	8012750 <rmw_validate_full_topic_name+0x28>
 80127c0:	200b      	movs	r0, #11
 80127c2:	4770      	bx	lr
 80127c4:	3a61      	subs	r2, #97	@ 0x61
 80127c6:	2a19      	cmp	r2, #25
 80127c8:	d9de      	bls.n	8012788 <rmw_validate_full_topic_name+0x60>
 80127ca:	2304      	movs	r3, #4
 80127cc:	6033      	str	r3, [r6, #0]
 80127ce:	2d00      	cmp	r5, #0
 80127d0:	d0be      	beq.n	8012750 <rmw_validate_full_topic_name+0x28>
 80127d2:	f1c4 0401 	rsb	r4, r4, #1
 80127d6:	4464      	add	r4, ip
 80127d8:	602c      	str	r4, [r5, #0]
 80127da:	e7b9      	b.n	8012750 <rmw_validate_full_topic_name+0x28>
 80127dc:	f1b8 0f19 	cmp.w	r8, #25
 80127e0:	d9d2      	bls.n	8012788 <rmw_validate_full_topic_name+0x60>
 80127e2:	e7f2      	b.n	80127ca <rmw_validate_full_topic_name+0xa2>
 80127e4:	200b      	movs	r0, #11
 80127e6:	e7b4      	b.n	8012752 <rmw_validate_full_topic_name+0x2a>
 80127e8:	2303      	movs	r3, #3
 80127ea:	6033      	str	r3, [r6, #0]
 80127ec:	2d00      	cmp	r5, #0
 80127ee:	d0af      	beq.n	8012750 <rmw_validate_full_topic_name+0x28>
 80127f0:	602f      	str	r7, [r5, #0]
 80127f2:	e7ad      	b.n	8012750 <rmw_validate_full_topic_name+0x28>
 80127f4:	28f7      	cmp	r0, #247	@ 0xf7
 80127f6:	d802      	bhi.n	80127fe <rmw_validate_full_topic_name+0xd6>
 80127f8:	2300      	movs	r3, #0
 80127fa:	6033      	str	r3, [r6, #0]
 80127fc:	e7a8      	b.n	8012750 <rmw_validate_full_topic_name+0x28>
 80127fe:	2307      	movs	r3, #7
 8012800:	6033      	str	r3, [r6, #0]
 8012802:	2d00      	cmp	r5, #0
 8012804:	d0a4      	beq.n	8012750 <rmw_validate_full_topic_name+0x28>
 8012806:	23f6      	movs	r3, #246	@ 0xf6
 8012808:	e7d8      	b.n	80127bc <rmw_validate_full_topic_name+0x94>
 801280a:	2205      	movs	r2, #5
 801280c:	6032      	str	r2, [r6, #0]
 801280e:	2d00      	cmp	r5, #0
 8012810:	d1d4      	bne.n	80127bc <rmw_validate_full_topic_name+0x94>
 8012812:	e79d      	b.n	8012750 <rmw_validate_full_topic_name+0x28>
 8012814:	080202d6 	.word	0x080202d6

08012818 <rmw_validate_namespace_with_size>:
 8012818:	2800      	cmp	r0, #0
 801281a:	d031      	beq.n	8012880 <rmw_validate_namespace_with_size+0x68>
 801281c:	b570      	push	{r4, r5, r6, lr}
 801281e:	4614      	mov	r4, r2
 8012820:	b0c2      	sub	sp, #264	@ 0x108
 8012822:	b1ba      	cbz	r2, 8012854 <rmw_validate_namespace_with_size+0x3c>
 8012824:	2901      	cmp	r1, #1
 8012826:	460e      	mov	r6, r1
 8012828:	461d      	mov	r5, r3
 801282a:	d102      	bne.n	8012832 <rmw_validate_namespace_with_size+0x1a>
 801282c:	7803      	ldrb	r3, [r0, #0]
 801282e:	2b2f      	cmp	r3, #47	@ 0x2f
 8012830:	d015      	beq.n	801285e <rmw_validate_namespace_with_size+0x46>
 8012832:	aa01      	add	r2, sp, #4
 8012834:	4669      	mov	r1, sp
 8012836:	f7ff ff77 	bl	8012728 <rmw_validate_full_topic_name>
 801283a:	b960      	cbnz	r0, 8012856 <rmw_validate_namespace_with_size+0x3e>
 801283c:	9b00      	ldr	r3, [sp, #0]
 801283e:	b163      	cbz	r3, 801285a <rmw_validate_namespace_with_size+0x42>
 8012840:	2b07      	cmp	r3, #7
 8012842:	d00a      	beq.n	801285a <rmw_validate_namespace_with_size+0x42>
 8012844:	1e5a      	subs	r2, r3, #1
 8012846:	2a05      	cmp	r2, #5
 8012848:	d81c      	bhi.n	8012884 <rmw_validate_namespace_with_size+0x6c>
 801284a:	e8df f002 	tbb	[pc, r2]
 801284e:	0c0c      	.short	0x0c0c
 8012850:	0c0c0c0c 	.word	0x0c0c0c0c
 8012854:	200b      	movs	r0, #11
 8012856:	b042      	add	sp, #264	@ 0x108
 8012858:	bd70      	pop	{r4, r5, r6, pc}
 801285a:	2ef5      	cmp	r6, #245	@ 0xf5
 801285c:	d809      	bhi.n	8012872 <rmw_validate_namespace_with_size+0x5a>
 801285e:	2300      	movs	r3, #0
 8012860:	6023      	str	r3, [r4, #0]
 8012862:	2000      	movs	r0, #0
 8012864:	e7f7      	b.n	8012856 <rmw_validate_namespace_with_size+0x3e>
 8012866:	6023      	str	r3, [r4, #0]
 8012868:	2d00      	cmp	r5, #0
 801286a:	d0fa      	beq.n	8012862 <rmw_validate_namespace_with_size+0x4a>
 801286c:	9b01      	ldr	r3, [sp, #4]
 801286e:	602b      	str	r3, [r5, #0]
 8012870:	e7f7      	b.n	8012862 <rmw_validate_namespace_with_size+0x4a>
 8012872:	2307      	movs	r3, #7
 8012874:	6023      	str	r3, [r4, #0]
 8012876:	2d00      	cmp	r5, #0
 8012878:	d0f3      	beq.n	8012862 <rmw_validate_namespace_with_size+0x4a>
 801287a:	23f4      	movs	r3, #244	@ 0xf4
 801287c:	602b      	str	r3, [r5, #0]
 801287e:	e7f0      	b.n	8012862 <rmw_validate_namespace_with_size+0x4a>
 8012880:	200b      	movs	r0, #11
 8012882:	4770      	bx	lr
 8012884:	4a03      	ldr	r2, [pc, #12]	@ (8012894 <rmw_validate_namespace_with_size+0x7c>)
 8012886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801288a:	a802      	add	r0, sp, #8
 801288c:	f7ff fd34 	bl	80122f8 <rcutils_snprintf>
 8012890:	2001      	movs	r0, #1
 8012892:	e7e0      	b.n	8012856 <rmw_validate_namespace_with_size+0x3e>
 8012894:	0801f8f4 	.word	0x0801f8f4

08012898 <rmw_validate_namespace>:
 8012898:	b168      	cbz	r0, 80128b6 <rmw_validate_namespace+0x1e>
 801289a:	b570      	push	{r4, r5, r6, lr}
 801289c:	460d      	mov	r5, r1
 801289e:	4616      	mov	r6, r2
 80128a0:	4604      	mov	r4, r0
 80128a2:	f7ed fd15 	bl	80002d0 <strlen>
 80128a6:	4633      	mov	r3, r6
 80128a8:	4601      	mov	r1, r0
 80128aa:	462a      	mov	r2, r5
 80128ac:	4620      	mov	r0, r4
 80128ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128b2:	f7ff bfb1 	b.w	8012818 <rmw_validate_namespace_with_size>
 80128b6:	200b      	movs	r0, #11
 80128b8:	4770      	bx	lr
 80128ba:	bf00      	nop

080128bc <rmw_namespace_validation_result_string>:
 80128bc:	2807      	cmp	r0, #7
 80128be:	bf9a      	itte	ls
 80128c0:	4b02      	ldrls	r3, [pc, #8]	@ (80128cc <rmw_namespace_validation_result_string+0x10>)
 80128c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80128c6:	4802      	ldrhi	r0, [pc, #8]	@ (80128d0 <rmw_namespace_validation_result_string+0x14>)
 80128c8:	4770      	bx	lr
 80128ca:	bf00      	nop
 80128cc:	0801faec 	.word	0x0801faec
 80128d0:	0801f944 	.word	0x0801f944

080128d4 <rmw_validate_node_name>:
 80128d4:	2800      	cmp	r0, #0
 80128d6:	d037      	beq.n	8012948 <rmw_validate_node_name+0x74>
 80128d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128da:	460e      	mov	r6, r1
 80128dc:	2900      	cmp	r1, #0
 80128de:	d035      	beq.n	801294c <rmw_validate_node_name+0x78>
 80128e0:	4617      	mov	r7, r2
 80128e2:	4604      	mov	r4, r0
 80128e4:	f7ed fcf4 	bl	80002d0 <strlen>
 80128e8:	b1d8      	cbz	r0, 8012922 <rmw_validate_node_name+0x4e>
 80128ea:	1e63      	subs	r3, r4, #1
 80128ec:	1819      	adds	r1, r3, r0
 80128ee:	461a      	mov	r2, r3
 80128f0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80128f4:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 80128f8:	f02e 0c20 	bic.w	ip, lr, #32
 80128fc:	2d09      	cmp	r5, #9
 80128fe:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012902:	d915      	bls.n	8012930 <rmw_validate_node_name+0x5c>
 8012904:	f1bc 0f19 	cmp.w	ip, #25
 8012908:	d912      	bls.n	8012930 <rmw_validate_node_name+0x5c>
 801290a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801290e:	d00f      	beq.n	8012930 <rmw_validate_node_name+0x5c>
 8012910:	2302      	movs	r3, #2
 8012912:	6033      	str	r3, [r6, #0]
 8012914:	b11f      	cbz	r7, 801291e <rmw_validate_node_name+0x4a>
 8012916:	f1c4 0401 	rsb	r4, r4, #1
 801291a:	4414      	add	r4, r2
 801291c:	603c      	str	r4, [r7, #0]
 801291e:	2000      	movs	r0, #0
 8012920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012922:	2301      	movs	r3, #1
 8012924:	6033      	str	r3, [r6, #0]
 8012926:	2f00      	cmp	r7, #0
 8012928:	d0f9      	beq.n	801291e <rmw_validate_node_name+0x4a>
 801292a:	2300      	movs	r3, #0
 801292c:	603b      	str	r3, [r7, #0]
 801292e:	e7f6      	b.n	801291e <rmw_validate_node_name+0x4a>
 8012930:	4299      	cmp	r1, r3
 8012932:	d1dc      	bne.n	80128ee <rmw_validate_node_name+0x1a>
 8012934:	7823      	ldrb	r3, [r4, #0]
 8012936:	4a0c      	ldr	r2, [pc, #48]	@ (8012968 <rmw_validate_node_name+0x94>)
 8012938:	5cd3      	ldrb	r3, [r2, r3]
 801293a:	f013 0304 	ands.w	r3, r3, #4
 801293e:	d10e      	bne.n	801295e <rmw_validate_node_name+0x8a>
 8012940:	28ff      	cmp	r0, #255	@ 0xff
 8012942:	d805      	bhi.n	8012950 <rmw_validate_node_name+0x7c>
 8012944:	6033      	str	r3, [r6, #0]
 8012946:	e7ea      	b.n	801291e <rmw_validate_node_name+0x4a>
 8012948:	200b      	movs	r0, #11
 801294a:	4770      	bx	lr
 801294c:	200b      	movs	r0, #11
 801294e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012950:	2304      	movs	r3, #4
 8012952:	6033      	str	r3, [r6, #0]
 8012954:	2f00      	cmp	r7, #0
 8012956:	d0e2      	beq.n	801291e <rmw_validate_node_name+0x4a>
 8012958:	23fe      	movs	r3, #254	@ 0xfe
 801295a:	603b      	str	r3, [r7, #0]
 801295c:	e7df      	b.n	801291e <rmw_validate_node_name+0x4a>
 801295e:	2303      	movs	r3, #3
 8012960:	6033      	str	r3, [r6, #0]
 8012962:	2f00      	cmp	r7, #0
 8012964:	d1e1      	bne.n	801292a <rmw_validate_node_name+0x56>
 8012966:	e7da      	b.n	801291e <rmw_validate_node_name+0x4a>
 8012968:	080202d6 	.word	0x080202d6

0801296c <rmw_node_name_validation_result_string>:
 801296c:	2804      	cmp	r0, #4
 801296e:	bf9a      	itte	ls
 8012970:	4b02      	ldrls	r3, [pc, #8]	@ (801297c <rmw_node_name_validation_result_string+0x10>)
 8012972:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012976:	4802      	ldrhi	r0, [pc, #8]	@ (8012980 <rmw_node_name_validation_result_string+0x14>)
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop
 801297c:	0801fbf8 	.word	0x0801fbf8
 8012980:	0801fb0c 	.word	0x0801fb0c

08012984 <rmw_destroy_client>:
 8012984:	b570      	push	{r4, r5, r6, lr}
 8012986:	b128      	cbz	r0, 8012994 <rmw_destroy_client+0x10>
 8012988:	4604      	mov	r4, r0
 801298a:	6800      	ldr	r0, [r0, #0]
 801298c:	460d      	mov	r5, r1
 801298e:	f001 fd97 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 8012992:	b910      	cbnz	r0, 801299a <rmw_destroy_client+0x16>
 8012994:	2401      	movs	r4, #1
 8012996:	4620      	mov	r0, r4
 8012998:	bd70      	pop	{r4, r5, r6, pc}
 801299a:	6863      	ldr	r3, [r4, #4]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d0f9      	beq.n	8012994 <rmw_destroy_client+0x10>
 80129a0:	2d00      	cmp	r5, #0
 80129a2:	d0f7      	beq.n	8012994 <rmw_destroy_client+0x10>
 80129a4:	6828      	ldr	r0, [r5, #0]
 80129a6:	f001 fd8b 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	d0f2      	beq.n	8012994 <rmw_destroy_client+0x10>
 80129ae:	686e      	ldr	r6, [r5, #4]
 80129b0:	2e00      	cmp	r6, #0
 80129b2:	d0ef      	beq.n	8012994 <rmw_destroy_client+0x10>
 80129b4:	6864      	ldr	r4, [r4, #4]
 80129b6:	6932      	ldr	r2, [r6, #16]
 80129b8:	6920      	ldr	r0, [r4, #16]
 80129ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80129be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80129c2:	6819      	ldr	r1, [r3, #0]
 80129c4:	f002 fd34 	bl	8015430 <uxr_buffer_cancel_data>
 80129c8:	4602      	mov	r2, r0
 80129ca:	6920      	ldr	r0, [r4, #16]
 80129cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80129d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80129d4:	f001 fcee 	bl	80143b4 <run_xrce_session>
 80129d8:	6920      	ldr	r0, [r4, #16]
 80129da:	6932      	ldr	r2, [r6, #16]
 80129dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80129e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80129e4:	6819      	ldr	r1, [r3, #0]
 80129e6:	f002 fa23 	bl	8014e30 <uxr_buffer_delete_entity>
 80129ea:	4602      	mov	r2, r0
 80129ec:	6920      	ldr	r0, [r4, #16]
 80129ee:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80129f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80129f6:	f001 fcdd 	bl	80143b4 <run_xrce_session>
 80129fa:	f080 0401 	eor.w	r4, r0, #1
 80129fe:	b2e4      	uxtb	r4, r4
 8012a00:	4628      	mov	r0, r5
 8012a02:	0064      	lsls	r4, r4, #1
 8012a04:	f001 fbb8 	bl	8014178 <rmw_uxrce_fini_client_memory>
 8012a08:	e7c5      	b.n	8012996 <rmw_destroy_client+0x12>
 8012a0a:	bf00      	nop

08012a0c <rmw_get_gid_for_client>:
 8012a0c:	b1a8      	cbz	r0, 8012a3a <rmw_get_gid_for_client+0x2e>
 8012a0e:	b538      	push	{r3, r4, r5, lr}
 8012a10:	460c      	mov	r4, r1
 8012a12:	b1a1      	cbz	r1, 8012a3e <rmw_get_gid_for_client+0x32>
 8012a14:	4605      	mov	r5, r0
 8012a16:	6800      	ldr	r0, [r0, #0]
 8012a18:	b120      	cbz	r0, 8012a24 <rmw_get_gid_for_client+0x18>
 8012a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8012a44 <rmw_get_gid_for_client+0x38>)
 8012a1c:	6819      	ldr	r1, [r3, #0]
 8012a1e:	f7ed fbf7 	bl	8000210 <strcmp>
 8012a22:	b940      	cbnz	r0, 8012a36 <rmw_get_gid_for_client+0x2a>
 8012a24:	686b      	ldr	r3, [r5, #4]
 8012a26:	2000      	movs	r0, #0
 8012a28:	6060      	str	r0, [r4, #4]
 8012a2a:	60a0      	str	r0, [r4, #8]
 8012a2c:	60e0      	str	r0, [r4, #12]
 8012a2e:	6120      	str	r0, [r4, #16]
 8012a30:	691b      	ldr	r3, [r3, #16]
 8012a32:	6063      	str	r3, [r4, #4]
 8012a34:	bd38      	pop	{r3, r4, r5, pc}
 8012a36:	200c      	movs	r0, #12
 8012a38:	bd38      	pop	{r3, r4, r5, pc}
 8012a3a:	200b      	movs	r0, #11
 8012a3c:	4770      	bx	lr
 8012a3e:	200b      	movs	r0, #11
 8012a40:	bd38      	pop	{r3, r4, r5, pc}
 8012a42:	bf00      	nop
 8012a44:	08020170 	.word	0x08020170

08012a48 <rmw_get_implementation_identifier>:
 8012a48:	4b01      	ldr	r3, [pc, #4]	@ (8012a50 <rmw_get_implementation_identifier+0x8>)
 8012a4a:	6818      	ldr	r0, [r3, #0]
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop
 8012a50:	08020170 	.word	0x08020170

08012a54 <rmw_init_options_init>:
 8012a54:	b084      	sub	sp, #16
 8012a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a58:	b083      	sub	sp, #12
 8012a5a:	ad09      	add	r5, sp, #36	@ 0x24
 8012a5c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012a60:	b130      	cbz	r0, 8012a70 <rmw_init_options_init+0x1c>
 8012a62:	4604      	mov	r4, r0
 8012a64:	4628      	mov	r0, r5
 8012a66:	f7fa fc3b 	bl	800d2e0 <rcutils_allocator_is_valid>
 8012a6a:	b108      	cbz	r0, 8012a70 <rmw_init_options_init+0x1c>
 8012a6c:	68a6      	ldr	r6, [r4, #8]
 8012a6e:	b12e      	cbz	r6, 8012a7c <rmw_init_options_init+0x28>
 8012a70:	200b      	movs	r0, #11
 8012a72:	b003      	add	sp, #12
 8012a74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012a78:	b004      	add	sp, #16
 8012a7a:	4770      	bx	lr
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	2300      	movs	r3, #0
 8012a80:	e9c4 2300 	strd	r2, r3, [r4]
 8012a84:	4b22      	ldr	r3, [pc, #136]	@ (8012b10 <rmw_init_options_init+0xbc>)
 8012a86:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8012b20 <rmw_init_options_init+0xcc>
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	60a3      	str	r3, [r4, #8]
 8012a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a90:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8012a94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a98:	466f      	mov	r7, sp
 8012a9a:	682b      	ldr	r3, [r5, #0]
 8012a9c:	f8cc 3000 	str.w	r3, [ip]
 8012aa0:	4638      	mov	r0, r7
 8012aa2:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 8012aa6:	60e6      	str	r6, [r4, #12]
 8012aa8:	f7ff fe12 	bl	80126d0 <rmw_get_default_security_options>
 8012aac:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012ab0:	f104 0310 	add.w	r3, r4, #16
 8012ab4:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ab8:	2203      	movs	r2, #3
 8012aba:	4816      	ldr	r0, [pc, #88]	@ (8012b14 <rmw_init_options_init+0xc0>)
 8012abc:	4916      	ldr	r1, [pc, #88]	@ (8012b18 <rmw_init_options_init+0xc4>)
 8012abe:	7626      	strb	r6, [r4, #24]
 8012ac0:	f001 fa9a 	bl	8013ff8 <rmw_uxrce_init_init_options_impl_memory>
 8012ac4:	4813      	ldr	r0, [pc, #76]	@ (8012b14 <rmw_init_options_init+0xc0>)
 8012ac6:	f006 fc91 	bl	80193ec <get_memory>
 8012aca:	b1f0      	cbz	r0, 8012b0a <rmw_init_options_init+0xb6>
 8012acc:	4a13      	ldr	r2, [pc, #76]	@ (8012b1c <rmw_init_options_init+0xc8>)
 8012ace:	6883      	ldr	r3, [r0, #8]
 8012ad0:	6851      	ldr	r1, [r2, #4]
 8012ad2:	7810      	ldrb	r0, [r2, #0]
 8012ad4:	6563      	str	r3, [r4, #84]	@ 0x54
 8012ad6:	7418      	strb	r0, [r3, #16]
 8012ad8:	6159      	str	r1, [r3, #20]
 8012ada:	68d1      	ldr	r1, [r2, #12]
 8012adc:	61d9      	str	r1, [r3, #28]
 8012ade:	6911      	ldr	r1, [r2, #16]
 8012ae0:	6219      	str	r1, [r3, #32]
 8012ae2:	6951      	ldr	r1, [r2, #20]
 8012ae4:	6892      	ldr	r2, [r2, #8]
 8012ae6:	619a      	str	r2, [r3, #24]
 8012ae8:	6259      	str	r1, [r3, #36]	@ 0x24
 8012aea:	f004 fbdb 	bl	80172a4 <uxr_nanos>
 8012aee:	f007 fc45 	bl	801a37c <srand>
 8012af2:	f007 fc71 	bl	801a3d8 <rand>
 8012af6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8012af8:	6298      	str	r0, [r3, #40]	@ 0x28
 8012afa:	2800      	cmp	r0, #0
 8012afc:	d0f9      	beq.n	8012af2 <rmw_init_options_init+0x9e>
 8012afe:	2000      	movs	r0, #0
 8012b00:	b003      	add	sp, #12
 8012b02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012b06:	b004      	add	sp, #16
 8012b08:	4770      	bx	lr
 8012b0a:	2001      	movs	r0, #1
 8012b0c:	e7b1      	b.n	8012a72 <rmw_init_options_init+0x1e>
 8012b0e:	bf00      	nop
 8012b10:	08020170 	.word	0x08020170
 8012b14:	20012f8c 	.word	0x20012f8c
 8012b18:	20012f08 	.word	0x20012f08
 8012b1c:	20012c98 	.word	0x20012c98
 8012b20:	0801f610 	.word	0x0801f610

08012b24 <rmw_init_options_copy>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	b158      	cbz	r0, 8012b40 <rmw_init_options_copy+0x1c>
 8012b28:	460d      	mov	r5, r1
 8012b2a:	b149      	cbz	r1, 8012b40 <rmw_init_options_copy+0x1c>
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	6880      	ldr	r0, [r0, #8]
 8012b30:	b120      	cbz	r0, 8012b3c <rmw_init_options_copy+0x18>
 8012b32:	4b14      	ldr	r3, [pc, #80]	@ (8012b84 <rmw_init_options_copy+0x60>)
 8012b34:	6819      	ldr	r1, [r3, #0]
 8012b36:	f7ed fb6b 	bl	8000210 <strcmp>
 8012b3a:	b9e8      	cbnz	r0, 8012b78 <rmw_init_options_copy+0x54>
 8012b3c:	68ae      	ldr	r6, [r5, #8]
 8012b3e:	b116      	cbz	r6, 8012b46 <rmw_init_options_copy+0x22>
 8012b40:	260b      	movs	r6, #11
 8012b42:	4630      	mov	r0, r6
 8012b44:	bd70      	pop	{r4, r5, r6, pc}
 8012b46:	2258      	movs	r2, #88	@ 0x58
 8012b48:	4621      	mov	r1, r4
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	f008 ffeb 	bl	801bb26 <memcpy>
 8012b50:	480d      	ldr	r0, [pc, #52]	@ (8012b88 <rmw_init_options_copy+0x64>)
 8012b52:	f006 fc4b 	bl	80193ec <get_memory>
 8012b56:	b190      	cbz	r0, 8012b7e <rmw_init_options_copy+0x5a>
 8012b58:	6883      	ldr	r3, [r0, #8]
 8012b5a:	656b      	str	r3, [r5, #84]	@ 0x54
 8012b5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012b5e:	f102 0c10 	add.w	ip, r2, #16
 8012b62:	f103 0510 	add.w	r5, r3, #16
 8012b66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b6c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012b70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012b74:	4630      	mov	r0, r6
 8012b76:	bd70      	pop	{r4, r5, r6, pc}
 8012b78:	260c      	movs	r6, #12
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	bd70      	pop	{r4, r5, r6, pc}
 8012b7e:	2601      	movs	r6, #1
 8012b80:	e7df      	b.n	8012b42 <rmw_init_options_copy+0x1e>
 8012b82:	bf00      	nop
 8012b84:	08020170 	.word	0x08020170
 8012b88:	20012f8c 	.word	0x20012f8c

08012b8c <rmw_init_options_fini>:
 8012b8c:	b368      	cbz	r0, 8012bea <rmw_init_options_fini+0x5e>
 8012b8e:	b510      	push	{r4, lr}
 8012b90:	4604      	mov	r4, r0
 8012b92:	b096      	sub	sp, #88	@ 0x58
 8012b94:	3040      	adds	r0, #64	@ 0x40
 8012b96:	f7fa fba3 	bl	800d2e0 <rcutils_allocator_is_valid>
 8012b9a:	b1f0      	cbz	r0, 8012bda <rmw_init_options_fini+0x4e>
 8012b9c:	68a0      	ldr	r0, [r4, #8]
 8012b9e:	b120      	cbz	r0, 8012baa <rmw_init_options_fini+0x1e>
 8012ba0:	4b13      	ldr	r3, [pc, #76]	@ (8012bf0 <rmw_init_options_fini+0x64>)
 8012ba2:	6819      	ldr	r1, [r3, #0]
 8012ba4:	f7ed fb34 	bl	8000210 <strcmp>
 8012ba8:	b9e8      	cbnz	r0, 8012be6 <rmw_init_options_fini+0x5a>
 8012baa:	4b12      	ldr	r3, [pc, #72]	@ (8012bf4 <rmw_init_options_fini+0x68>)
 8012bac:	6819      	ldr	r1, [r3, #0]
 8012bae:	b1b9      	cbz	r1, 8012be0 <rmw_init_options_fini+0x54>
 8012bb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012bb2:	e001      	b.n	8012bb8 <rmw_init_options_fini+0x2c>
 8012bb4:	6849      	ldr	r1, [r1, #4]
 8012bb6:	b199      	cbz	r1, 8012be0 <rmw_init_options_fini+0x54>
 8012bb8:	688b      	ldr	r3, [r1, #8]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d1fa      	bne.n	8012bb4 <rmw_init_options_fini+0x28>
 8012bbe:	480d      	ldr	r0, [pc, #52]	@ (8012bf4 <rmw_init_options_fini+0x68>)
 8012bc0:	f006 fc24 	bl	801940c <put_memory>
 8012bc4:	4668      	mov	r0, sp
 8012bc6:	f7ff fd57 	bl	8012678 <rmw_get_zero_initialized_init_options>
 8012bca:	2258      	movs	r2, #88	@ 0x58
 8012bcc:	4669      	mov	r1, sp
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f008 ffa9 	bl	801bb26 <memcpy>
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	b016      	add	sp, #88	@ 0x58
 8012bd8:	bd10      	pop	{r4, pc}
 8012bda:	200b      	movs	r0, #11
 8012bdc:	b016      	add	sp, #88	@ 0x58
 8012bde:	bd10      	pop	{r4, pc}
 8012be0:	2001      	movs	r0, #1
 8012be2:	b016      	add	sp, #88	@ 0x58
 8012be4:	bd10      	pop	{r4, pc}
 8012be6:	200c      	movs	r0, #12
 8012be8:	e7f5      	b.n	8012bd6 <rmw_init_options_fini+0x4a>
 8012bea:	200b      	movs	r0, #11
 8012bec:	4770      	bx	lr
 8012bee:	bf00      	nop
 8012bf0:	08020170 	.word	0x08020170
 8012bf4:	20012f8c 	.word	0x20012f8c

08012bf8 <rmw_init>:
 8012bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bfc:	b083      	sub	sp, #12
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	f000 80d4 	beq.w	8012dac <rmw_init+0x1b4>
 8012c04:	460e      	mov	r6, r1
 8012c06:	2900      	cmp	r1, #0
 8012c08:	f000 80d0 	beq.w	8012dac <rmw_init+0x1b4>
 8012c0c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8012c0e:	4605      	mov	r5, r0
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	f000 80cb 	beq.w	8012dac <rmw_init+0x1b4>
 8012c16:	4b77      	ldr	r3, [pc, #476]	@ (8012df4 <rmw_init+0x1fc>)
 8012c18:	6880      	ldr	r0, [r0, #8]
 8012c1a:	681f      	ldr	r7, [r3, #0]
 8012c1c:	b128      	cbz	r0, 8012c2a <rmw_init+0x32>
 8012c1e:	4639      	mov	r1, r7
 8012c20:	f7ed faf6 	bl	8000210 <strcmp>
 8012c24:	2800      	cmp	r0, #0
 8012c26:	f040 80d3 	bne.w	8012dd0 <rmw_init+0x1d8>
 8012c2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c2e:	4c72      	ldr	r4, [pc, #456]	@ (8012df8 <rmw_init+0x200>)
 8012c30:	4972      	ldr	r1, [pc, #456]	@ (8012dfc <rmw_init+0x204>)
 8012c32:	4873      	ldr	r0, [pc, #460]	@ (8012e00 <rmw_init+0x208>)
 8012c34:	60b7      	str	r7, [r6, #8]
 8012c36:	e9c6 2300 	strd	r2, r3, [r6]
 8012c3a:	68eb      	ldr	r3, [r5, #12]
 8012c3c:	66b3      	str	r3, [r6, #104]	@ 0x68
 8012c3e:	2201      	movs	r2, #1
 8012c40:	f001 f97a 	bl	8013f38 <rmw_uxrce_init_session_memory>
 8012c44:	4620      	mov	r0, r4
 8012c46:	496f      	ldr	r1, [pc, #444]	@ (8012e04 <rmw_init+0x20c>)
 8012c48:	2204      	movs	r2, #4
 8012c4a:	f001 f9b5 	bl	8013fb8 <rmw_uxrce_init_static_input_buffer_memory>
 8012c4e:	f04f 0800 	mov.w	r8, #0
 8012c52:	486b      	ldr	r0, [pc, #428]	@ (8012e00 <rmw_init+0x208>)
 8012c54:	f884 800d 	strb.w	r8, [r4, #13]
 8012c58:	f006 fbc8 	bl	80193ec <get_memory>
 8012c5c:	2800      	cmp	r0, #0
 8012c5e:	f000 80b2 	beq.w	8012dc6 <rmw_init+0x1ce>
 8012c62:	6884      	ldr	r4, [r0, #8]
 8012c64:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8012c66:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8012c68:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012c6c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012c70:	9101      	str	r1, [sp, #4]
 8012c72:	6a00      	ldr	r0, [r0, #32]
 8012c74:	9000      	str	r0, [sp, #0]
 8012c76:	f104 0910 	add.w	r9, r4, #16
 8012c7a:	4661      	mov	r1, ip
 8012c7c:	4648      	mov	r0, r9
 8012c7e:	f002 fb2b 	bl	80152d8 <uxr_set_custom_transport_callbacks>
 8012c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012c86:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 8012c8a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8012c8e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8012c92:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8012c96:	495c      	ldr	r1, [pc, #368]	@ (8012e08 <rmw_init+0x210>)
 8012c98:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8012c9c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8012ca0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8012ca4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8012ca8:	4858      	ldr	r0, [pc, #352]	@ (8012e0c <rmw_init+0x214>)
 8012caa:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8012cae:	2201      	movs	r2, #1
 8012cb0:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8012cb2:	f001 f921 	bl	8013ef8 <rmw_uxrce_init_node_memory>
 8012cb6:	4956      	ldr	r1, [pc, #344]	@ (8012e10 <rmw_init+0x218>)
 8012cb8:	4856      	ldr	r0, [pc, #344]	@ (8012e14 <rmw_init+0x21c>)
 8012cba:	2205      	movs	r2, #5
 8012cbc:	f001 f8fc 	bl	8013eb8 <rmw_uxrce_init_subscription_memory>
 8012cc0:	4955      	ldr	r1, [pc, #340]	@ (8012e18 <rmw_init+0x220>)
 8012cc2:	4856      	ldr	r0, [pc, #344]	@ (8012e1c <rmw_init+0x224>)
 8012cc4:	220a      	movs	r2, #10
 8012cc6:	f001 f8d7 	bl	8013e78 <rmw_uxrce_init_publisher_memory>
 8012cca:	4955      	ldr	r1, [pc, #340]	@ (8012e20 <rmw_init+0x228>)
 8012ccc:	4855      	ldr	r0, [pc, #340]	@ (8012e24 <rmw_init+0x22c>)
 8012cce:	2201      	movs	r2, #1
 8012cd0:	f001 f892 	bl	8013df8 <rmw_uxrce_init_service_memory>
 8012cd4:	4954      	ldr	r1, [pc, #336]	@ (8012e28 <rmw_init+0x230>)
 8012cd6:	4855      	ldr	r0, [pc, #340]	@ (8012e2c <rmw_init+0x234>)
 8012cd8:	2201      	movs	r2, #1
 8012cda:	f001 f8ad 	bl	8013e38 <rmw_uxrce_init_client_memory>
 8012cde:	4954      	ldr	r1, [pc, #336]	@ (8012e30 <rmw_init+0x238>)
 8012ce0:	4854      	ldr	r0, [pc, #336]	@ (8012e34 <rmw_init+0x23c>)
 8012ce2:	220f      	movs	r2, #15
 8012ce4:	f001 f948 	bl	8013f78 <rmw_uxrce_init_topic_memory>
 8012ce8:	4953      	ldr	r1, [pc, #332]	@ (8012e38 <rmw_init+0x240>)
 8012cea:	4854      	ldr	r0, [pc, #336]	@ (8012e3c <rmw_init+0x244>)
 8012cec:	2203      	movs	r2, #3
 8012cee:	f001 f983 	bl	8013ff8 <rmw_uxrce_init_init_options_impl_memory>
 8012cf2:	4953      	ldr	r1, [pc, #332]	@ (8012e40 <rmw_init+0x248>)
 8012cf4:	4853      	ldr	r0, [pc, #332]	@ (8012e44 <rmw_init+0x24c>)
 8012cf6:	2204      	movs	r2, #4
 8012cf8:	f001 f99e 	bl	8014038 <rmw_uxrce_init_wait_set_memory>
 8012cfc:	4952      	ldr	r1, [pc, #328]	@ (8012e48 <rmw_init+0x250>)
 8012cfe:	4853      	ldr	r0, [pc, #332]	@ (8012e4c <rmw_init+0x254>)
 8012d00:	2204      	movs	r2, #4
 8012d02:	f001 f9b9 	bl	8014078 <rmw_uxrce_init_guard_condition_memory>
 8012d06:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8012d08:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8012d0a:	4642      	mov	r2, r8
 8012d0c:	f000 febc 	bl	8013a88 <rmw_uxrce_transport_init>
 8012d10:	4607      	mov	r7, r0
 8012d12:	2800      	cmp	r0, #0
 8012d14:	d161      	bne.n	8012dda <rmw_init+0x1e2>
 8012d16:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8012d18:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8012d1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012d1e:	4628      	mov	r0, r5
 8012d20:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8012d24:	f002 fd10 	bl	8015748 <uxr_init_session>
 8012d28:	4628      	mov	r0, r5
 8012d2a:	4949      	ldr	r1, [pc, #292]	@ (8012e50 <rmw_init+0x258>)
 8012d2c:	4622      	mov	r2, r4
 8012d2e:	f002 fd2f 	bl	8015790 <uxr_set_topic_callback>
 8012d32:	4628      	mov	r0, r5
 8012d34:	4947      	ldr	r1, [pc, #284]	@ (8012e54 <rmw_init+0x25c>)
 8012d36:	463a      	mov	r2, r7
 8012d38:	f002 fd26 	bl	8015788 <uxr_set_status_callback>
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	4946      	ldr	r1, [pc, #280]	@ (8012e58 <rmw_init+0x260>)
 8012d40:	463a      	mov	r2, r7
 8012d42:	f002 fd29 	bl	8015798 <uxr_set_request_callback>
 8012d46:	4628      	mov	r0, r5
 8012d48:	4944      	ldr	r1, [pc, #272]	@ (8012e5c <rmw_init+0x264>)
 8012d4a:	463a      	mov	r2, r7
 8012d4c:	f002 fd28 	bl	80157a0 <uxr_set_reply_callback>
 8012d50:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012d54:	2304      	movs	r3, #4
 8012d56:	0092      	lsls	r2, r2, #2
 8012d58:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	f002 fd4d 	bl	80157fc <uxr_create_input_reliable_stream>
 8012d62:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012d66:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8012d6a:	2304      	movs	r3, #4
 8012d6c:	0092      	lsls	r2, r2, #2
 8012d6e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8012d72:	4628      	mov	r0, r5
 8012d74:	f002 fd2a 	bl	80157cc <uxr_create_output_reliable_stream>
 8012d78:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8012d7c:	4628      	mov	r0, r5
 8012d7e:	f002 fd37 	bl	80157f0 <uxr_create_input_best_effort_stream>
 8012d82:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8012d86:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012d8a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8012d8e:	3114      	adds	r1, #20
 8012d90:	4628      	mov	r0, r5
 8012d92:	f002 fd09 	bl	80157a8 <uxr_create_output_best_effort_stream>
 8012d96:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	f003 fa52 	bl	8016244 <uxr_create_session>
 8012da0:	4605      	mov	r5, r0
 8012da2:	b140      	cbz	r0, 8012db6 <rmw_init+0x1be>
 8012da4:	4638      	mov	r0, r7
 8012da6:	b003      	add	sp, #12
 8012da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dac:	270b      	movs	r7, #11
 8012dae:	4638      	mov	r0, r7
 8012db0:	b003      	add	sp, #12
 8012db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012db6:	4648      	mov	r0, r9
 8012db8:	f002 fad0 	bl	801535c <uxr_close_custom_transport>
 8012dbc:	4810      	ldr	r0, [pc, #64]	@ (8012e00 <rmw_init+0x208>)
 8012dbe:	4621      	mov	r1, r4
 8012dc0:	f006 fb24 	bl	801940c <put_memory>
 8012dc4:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8012dc6:	2701      	movs	r7, #1
 8012dc8:	4638      	mov	r0, r7
 8012dca:	b003      	add	sp, #12
 8012dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dd0:	270c      	movs	r7, #12
 8012dd2:	4638      	mov	r0, r7
 8012dd4:	b003      	add	sp, #12
 8012dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dda:	4648      	mov	r0, r9
 8012ddc:	f002 fabe 	bl	801535c <uxr_close_custom_transport>
 8012de0:	4807      	ldr	r0, [pc, #28]	@ (8012e00 <rmw_init+0x208>)
 8012de2:	4621      	mov	r1, r4
 8012de4:	f006 fb12 	bl	801940c <put_memory>
 8012de8:	4638      	mov	r0, r7
 8012dea:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 8012dee:	b003      	add	sp, #12
 8012df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012df4:	08020170 	.word	0x08020170
 8012df8:	200150a0 	.word	0x200150a0
 8012dfc:	20016198 	.word	0x20016198
 8012e00:	20017740 	.word	0x20017740
 8012e04:	20012fa0 	.word	0x20012fa0
 8012e08:	200160e0 	.word	0x200160e0
 8012e0c:	20016184 	.word	0x20016184
 8012e10:	20015418 	.word	0x20015418
 8012e14:	20015850 	.word	0x20015850
 8012e18:	20015860 	.word	0x20015860
 8012e1c:	200160d0 	.word	0x200160d0
 8012e20:	20015340 	.word	0x20015340
 8012e24:	20015408 	.word	0x20015408
 8012e28:	20015268 	.word	0x20015268
 8012e2c:	20015330 	.word	0x20015330
 8012e30:	200150b0 	.word	0x200150b0
 8012e34:	20015254 	.word	0x20015254
 8012e38:	20012f08 	.word	0x20012f08
 8012e3c:	20012f8c 	.word	0x20012f8c
 8012e40:	20012e88 	.word	0x20012e88
 8012e44:	20012ef8 	.word	0x20012ef8
 8012e48:	20012df8 	.word	0x20012df8
 8012e4c:	20012e78 	.word	0x20012e78
 8012e50:	08019225 	.word	0x08019225
 8012e54:	0801921d 	.word	0x0801921d
 8012e58:	080192bd 	.word	0x080192bd
 8012e5c:	08019359 	.word	0x08019359

08012e60 <rmw_context_fini>:
 8012e60:	4b17      	ldr	r3, [pc, #92]	@ (8012ec0 <rmw_context_fini+0x60>)
 8012e62:	b570      	push	{r4, r5, r6, lr}
 8012e64:	681c      	ldr	r4, [r3, #0]
 8012e66:	4605      	mov	r5, r0
 8012e68:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8012e6a:	b33c      	cbz	r4, 8012ebc <rmw_context_fini+0x5c>
 8012e6c:	2600      	movs	r6, #0
 8012e6e:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 8012e72:	691a      	ldr	r2, [r3, #16]
 8012e74:	4282      	cmp	r2, r0
 8012e76:	d018      	beq.n	8012eaa <rmw_context_fini+0x4a>
 8012e78:	2c00      	cmp	r4, #0
 8012e7a:	d1f8      	bne.n	8012e6e <rmw_context_fini+0xe>
 8012e7c:	b188      	cbz	r0, 8012ea2 <rmw_context_fini+0x42>
 8012e7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012e82:	789b      	ldrb	r3, [r3, #2]
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	bf14      	ite	ne
 8012e88:	210a      	movne	r1, #10
 8012e8a:	2100      	moveq	r1, #0
 8012e8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012e90:	f003 f9b0 	bl	80161f4 <uxr_delete_session_retries>
 8012e94:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8012e96:	f001 f90f 	bl	80140b8 <rmw_uxrce_fini_session_memory>
 8012e9a:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8012e9c:	3010      	adds	r0, #16
 8012e9e:	f002 fa5d 	bl	801535c <uxr_close_custom_transport>
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8012ea6:	4630      	mov	r0, r6
 8012ea8:	bd70      	pop	{r4, r5, r6, pc}
 8012eaa:	f103 0018 	add.w	r0, r3, #24
 8012eae:	f000 f89b 	bl	8012fe8 <rmw_destroy_node>
 8012eb2:	4606      	mov	r6, r0
 8012eb4:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8012eb6:	2c00      	cmp	r4, #0
 8012eb8:	d1d9      	bne.n	8012e6e <rmw_context_fini+0xe>
 8012eba:	e7df      	b.n	8012e7c <rmw_context_fini+0x1c>
 8012ebc:	4626      	mov	r6, r4
 8012ebe:	e7dd      	b.n	8012e7c <rmw_context_fini+0x1c>
 8012ec0:	20016184 	.word	0x20016184

08012ec4 <create_node>:
 8012ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ec8:	b083      	sub	sp, #12
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d063      	beq.n	8012f96 <create_node+0xd2>
 8012ece:	4606      	mov	r6, r0
 8012ed0:	4836      	ldr	r0, [pc, #216]	@ (8012fac <create_node+0xe8>)
 8012ed2:	460f      	mov	r7, r1
 8012ed4:	4690      	mov	r8, r2
 8012ed6:	461d      	mov	r5, r3
 8012ed8:	f006 fa88 	bl	80193ec <get_memory>
 8012edc:	2800      	cmp	r0, #0
 8012ede:	d05a      	beq.n	8012f96 <create_node+0xd2>
 8012ee0:	6884      	ldr	r4, [r0, #8]
 8012ee2:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8012ee4:	6123      	str	r3, [r4, #16]
 8012ee6:	f7ff fdaf 	bl	8012a48 <rmw_get_implementation_identifier>
 8012eea:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8012eee:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012ef2:	f8c4 9020 	str.w	r9, [r4, #32]
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	f7ed f9ea 	bl	80002d0 <strlen>
 8012efc:	1c42      	adds	r2, r0, #1
 8012efe:	2a3c      	cmp	r2, #60	@ 0x3c
 8012f00:	f104 0518 	add.w	r5, r4, #24
 8012f04:	d844      	bhi.n	8012f90 <create_node+0xcc>
 8012f06:	4648      	mov	r0, r9
 8012f08:	4631      	mov	r1, r6
 8012f0a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8012f0e:	f008 fe0a 	bl	801bb26 <memcpy>
 8012f12:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8012f16:	4638      	mov	r0, r7
 8012f18:	f7ed f9da 	bl	80002d0 <strlen>
 8012f1c:	1c42      	adds	r2, r0, #1
 8012f1e:	2a3c      	cmp	r2, #60	@ 0x3c
 8012f20:	d836      	bhi.n	8012f90 <create_node+0xcc>
 8012f22:	4639      	mov	r1, r7
 8012f24:	4648      	mov	r0, r9
 8012f26:	f008 fdfe 	bl	801bb26 <memcpy>
 8012f2a:	6923      	ldr	r3, [r4, #16]
 8012f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012f30:	2101      	movs	r1, #1
 8012f32:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8012f36:	1842      	adds	r2, r0, r1
 8012f38:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8012f3c:	f002 fa12 	bl	8015364 <uxr_object_id>
 8012f40:	6160      	str	r0, [r4, #20]
 8012f42:	783b      	ldrb	r3, [r7, #0]
 8012f44:	2b2f      	cmp	r3, #47	@ 0x2f
 8012f46:	d128      	bne.n	8012f9a <create_node+0xd6>
 8012f48:	787b      	ldrb	r3, [r7, #1]
 8012f4a:	bb33      	cbnz	r3, 8012f9a <create_node+0xd6>
 8012f4c:	4a18      	ldr	r2, [pc, #96]	@ (8012fb0 <create_node+0xec>)
 8012f4e:	4819      	ldr	r0, [pc, #100]	@ (8012fb4 <create_node+0xf0>)
 8012f50:	4633      	mov	r3, r6
 8012f52:	213c      	movs	r1, #60	@ 0x3c
 8012f54:	f008 fb24 	bl	801b5a0 <sniprintf>
 8012f58:	6920      	ldr	r0, [r4, #16]
 8012f5a:	4916      	ldr	r1, [pc, #88]	@ (8012fb4 <create_node+0xf0>)
 8012f5c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012f60:	9100      	str	r1, [sp, #0]
 8012f62:	2106      	movs	r1, #6
 8012f64:	9101      	str	r1, [sp, #4]
 8012f66:	6811      	ldr	r1, [r2, #0]
 8012f68:	6962      	ldr	r2, [r4, #20]
 8012f6a:	fa1f f388 	uxth.w	r3, r8
 8012f6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012f72:	f001 ffa7 	bl	8014ec4 <uxr_buffer_create_participant_bin>
 8012f76:	4602      	mov	r2, r0
 8012f78:	6920      	ldr	r0, [r4, #16]
 8012f7a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012f7e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012f82:	f001 fa17 	bl	80143b4 <run_xrce_session>
 8012f86:	b118      	cbz	r0, 8012f90 <create_node+0xcc>
 8012f88:	4628      	mov	r0, r5
 8012f8a:	b003      	add	sp, #12
 8012f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f90:	4628      	mov	r0, r5
 8012f92:	f001 f897 	bl	80140c4 <rmw_uxrce_fini_node_memory>
 8012f96:	2500      	movs	r5, #0
 8012f98:	e7f6      	b.n	8012f88 <create_node+0xc4>
 8012f9a:	4a07      	ldr	r2, [pc, #28]	@ (8012fb8 <create_node+0xf4>)
 8012f9c:	9600      	str	r6, [sp, #0]
 8012f9e:	463b      	mov	r3, r7
 8012fa0:	213c      	movs	r1, #60	@ 0x3c
 8012fa2:	4804      	ldr	r0, [pc, #16]	@ (8012fb4 <create_node+0xf0>)
 8012fa4:	f008 fafc 	bl	801b5a0 <sniprintf>
 8012fa8:	e7d6      	b.n	8012f58 <create_node+0x94>
 8012faa:	bf00      	nop
 8012fac:	20016184 	.word	0x20016184
 8012fb0:	0801fc1c 	.word	0x0801fc1c
 8012fb4:	20012dbc 	.word	0x20012dbc
 8012fb8:	0801f620 	.word	0x0801f620

08012fbc <rmw_create_node>:
 8012fbc:	b191      	cbz	r1, 8012fe4 <rmw_create_node+0x28>
 8012fbe:	b410      	push	{r4}
 8012fc0:	4614      	mov	r4, r2
 8012fc2:	780a      	ldrb	r2, [r1, #0]
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	4608      	mov	r0, r1
 8012fc8:	b142      	cbz	r2, 8012fdc <rmw_create_node+0x20>
 8012fca:	b13c      	cbz	r4, 8012fdc <rmw_create_node+0x20>
 8012fcc:	7822      	ldrb	r2, [r4, #0]
 8012fce:	b12a      	cbz	r2, 8012fdc <rmw_create_node+0x20>
 8012fd0:	4621      	mov	r1, r4
 8012fd2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8012fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fd8:	f7ff bf74 	b.w	8012ec4 <create_node>
 8012fdc:	2000      	movs	r0, #0
 8012fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fe2:	4770      	bx	lr
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	4770      	bx	lr

08012fe8 <rmw_destroy_node>:
 8012fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fea:	b328      	cbz	r0, 8013038 <rmw_destroy_node+0x50>
 8012fec:	4607      	mov	r7, r0
 8012fee:	6800      	ldr	r0, [r0, #0]
 8012ff0:	b120      	cbz	r0, 8012ffc <rmw_destroy_node+0x14>
 8012ff2:	4b36      	ldr	r3, [pc, #216]	@ (80130cc <rmw_destroy_node+0xe4>)
 8012ff4:	6819      	ldr	r1, [r3, #0]
 8012ff6:	f7ed f90b 	bl	8000210 <strcmp>
 8012ffa:	b9e8      	cbnz	r0, 8013038 <rmw_destroy_node+0x50>
 8012ffc:	687d      	ldr	r5, [r7, #4]
 8012ffe:	b1dd      	cbz	r5, 8013038 <rmw_destroy_node+0x50>
 8013000:	4b33      	ldr	r3, [pc, #204]	@ (80130d0 <rmw_destroy_node+0xe8>)
 8013002:	681c      	ldr	r4, [r3, #0]
 8013004:	2c00      	cmp	r4, #0
 8013006:	d05f      	beq.n	80130c8 <rmw_destroy_node+0xe0>
 8013008:	2600      	movs	r6, #0
 801300a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801300e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8013012:	429d      	cmp	r5, r3
 8013014:	d013      	beq.n	801303e <rmw_destroy_node+0x56>
 8013016:	2c00      	cmp	r4, #0
 8013018:	d1f7      	bne.n	801300a <rmw_destroy_node+0x22>
 801301a:	4b2e      	ldr	r3, [pc, #184]	@ (80130d4 <rmw_destroy_node+0xec>)
 801301c:	681c      	ldr	r4, [r3, #0]
 801301e:	b1c4      	cbz	r4, 8013052 <rmw_destroy_node+0x6a>
 8013020:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013024:	6a0b      	ldr	r3, [r1, #32]
 8013026:	429d      	cmp	r5, r3
 8013028:	d1f9      	bne.n	801301e <rmw_destroy_node+0x36>
 801302a:	317c      	adds	r1, #124	@ 0x7c
 801302c:	4638      	mov	r0, r7
 801302e:	f000 fc79 	bl	8013924 <rmw_destroy_subscription>
 8013032:	2801      	cmp	r0, #1
 8013034:	4606      	mov	r6, r0
 8013036:	d1f2      	bne.n	801301e <rmw_destroy_node+0x36>
 8013038:	2601      	movs	r6, #1
 801303a:	4630      	mov	r0, r6
 801303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801303e:	3184      	adds	r1, #132	@ 0x84
 8013040:	4638      	mov	r0, r7
 8013042:	f000 f9a1 	bl	8013388 <rmw_destroy_publisher>
 8013046:	2801      	cmp	r0, #1
 8013048:	4606      	mov	r6, r0
 801304a:	d0f5      	beq.n	8013038 <rmw_destroy_node+0x50>
 801304c:	2c00      	cmp	r4, #0
 801304e:	d1dc      	bne.n	801300a <rmw_destroy_node+0x22>
 8013050:	e7e3      	b.n	801301a <rmw_destroy_node+0x32>
 8013052:	4b21      	ldr	r3, [pc, #132]	@ (80130d8 <rmw_destroy_node+0xf0>)
 8013054:	681c      	ldr	r4, [r3, #0]
 8013056:	b16c      	cbz	r4, 8013074 <rmw_destroy_node+0x8c>
 8013058:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801305c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801305e:	429d      	cmp	r5, r3
 8013060:	d1f9      	bne.n	8013056 <rmw_destroy_node+0x6e>
 8013062:	317c      	adds	r1, #124	@ 0x7c
 8013064:	4638      	mov	r0, r7
 8013066:	f000 fb2b 	bl	80136c0 <rmw_destroy_service>
 801306a:	2801      	cmp	r0, #1
 801306c:	4606      	mov	r6, r0
 801306e:	d0e3      	beq.n	8013038 <rmw_destroy_node+0x50>
 8013070:	2c00      	cmp	r4, #0
 8013072:	d1f1      	bne.n	8013058 <rmw_destroy_node+0x70>
 8013074:	4b19      	ldr	r3, [pc, #100]	@ (80130dc <rmw_destroy_node+0xf4>)
 8013076:	681c      	ldr	r4, [r3, #0]
 8013078:	b16c      	cbz	r4, 8013096 <rmw_destroy_node+0xae>
 801307a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801307e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013080:	429d      	cmp	r5, r3
 8013082:	d1f9      	bne.n	8013078 <rmw_destroy_node+0x90>
 8013084:	317c      	adds	r1, #124	@ 0x7c
 8013086:	4638      	mov	r0, r7
 8013088:	f7ff fc7c 	bl	8012984 <rmw_destroy_client>
 801308c:	2801      	cmp	r0, #1
 801308e:	4606      	mov	r6, r0
 8013090:	d0d2      	beq.n	8013038 <rmw_destroy_node+0x50>
 8013092:	2c00      	cmp	r4, #0
 8013094:	d1f1      	bne.n	801307a <rmw_destroy_node+0x92>
 8013096:	6928      	ldr	r0, [r5, #16]
 8013098:	696a      	ldr	r2, [r5, #20]
 801309a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801309e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130a2:	6819      	ldr	r1, [r3, #0]
 80130a4:	f001 fec4 	bl	8014e30 <uxr_buffer_delete_entity>
 80130a8:	4602      	mov	r2, r0
 80130aa:	6928      	ldr	r0, [r5, #16]
 80130ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80130b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80130b4:	f001 f97e 	bl	80143b4 <run_xrce_session>
 80130b8:	2800      	cmp	r0, #0
 80130ba:	bf08      	it	eq
 80130bc:	2602      	moveq	r6, #2
 80130be:	4638      	mov	r0, r7
 80130c0:	f001 f800 	bl	80140c4 <rmw_uxrce_fini_node_memory>
 80130c4:	4630      	mov	r0, r6
 80130c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130c8:	4626      	mov	r6, r4
 80130ca:	e7a6      	b.n	801301a <rmw_destroy_node+0x32>
 80130cc:	08020170 	.word	0x08020170
 80130d0:	200160d0 	.word	0x200160d0
 80130d4:	20015850 	.word	0x20015850
 80130d8:	20015408 	.word	0x20015408
 80130dc:	20015330 	.word	0x20015330

080130e0 <rmw_node_get_graph_guard_condition>:
 80130e0:	6843      	ldr	r3, [r0, #4]
 80130e2:	6918      	ldr	r0, [r3, #16]
 80130e4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80130e8:	4770      	bx	lr
 80130ea:	bf00      	nop

080130ec <flush_session>:
 80130ec:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80130ee:	f002 bf33 	b.w	8015f58 <uxr_run_session_until_confirm_delivery>
 80130f2:	bf00      	nop

080130f4 <rmw_publish>:
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d053      	beq.n	80131a0 <rmw_publish+0xac>
 80130f8:	b570      	push	{r4, r5, r6, lr}
 80130fa:	460d      	mov	r5, r1
 80130fc:	b08e      	sub	sp, #56	@ 0x38
 80130fe:	2900      	cmp	r1, #0
 8013100:	d04b      	beq.n	801319a <rmw_publish+0xa6>
 8013102:	4604      	mov	r4, r0
 8013104:	6800      	ldr	r0, [r0, #0]
 8013106:	f001 f9db 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 801310a:	2800      	cmp	r0, #0
 801310c:	d045      	beq.n	801319a <rmw_publish+0xa6>
 801310e:	6866      	ldr	r6, [r4, #4]
 8013110:	2e00      	cmp	r6, #0
 8013112:	d042      	beq.n	801319a <rmw_publish+0xa6>
 8013114:	69b4      	ldr	r4, [r6, #24]
 8013116:	4628      	mov	r0, r5
 8013118:	6923      	ldr	r3, [r4, #16]
 801311a:	4798      	blx	r3
 801311c:	69f3      	ldr	r3, [r6, #28]
 801311e:	9005      	str	r0, [sp, #20]
 8013120:	b113      	cbz	r3, 8013128 <rmw_publish+0x34>
 8013122:	a805      	add	r0, sp, #20
 8013124:	4798      	blx	r3
 8013126:	9805      	ldr	r0, [sp, #20]
 8013128:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801312c:	691b      	ldr	r3, [r3, #16]
 801312e:	9000      	str	r0, [sp, #0]
 8013130:	6972      	ldr	r2, [r6, #20]
 8013132:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8013134:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013138:	ab06      	add	r3, sp, #24
 801313a:	f004 f955 	bl	80173e8 <uxr_prepare_output_stream>
 801313e:	b1d8      	cbz	r0, 8013178 <rmw_publish+0x84>
 8013140:	68a3      	ldr	r3, [r4, #8]
 8013142:	a906      	add	r1, sp, #24
 8013144:	4628      	mov	r0, r5
 8013146:	4798      	blx	r3
 8013148:	6a33      	ldr	r3, [r6, #32]
 801314a:	4604      	mov	r4, r0
 801314c:	b10b      	cbz	r3, 8013152 <rmw_publish+0x5e>
 801314e:	a806      	add	r0, sp, #24
 8013150:	4798      	blx	r3
 8013152:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8013156:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 801315a:	2b01      	cmp	r3, #1
 801315c:	6910      	ldr	r0, [r2, #16]
 801315e:	d021      	beq.n	80131a4 <rmw_publish+0xb0>
 8013160:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8013162:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013166:	f002 fef7 	bl	8015f58 <uxr_run_session_until_confirm_delivery>
 801316a:	4004      	ands	r4, r0
 801316c:	b2e4      	uxtb	r4, r4
 801316e:	f084 0001 	eor.w	r0, r4, #1
 8013172:	b2c0      	uxtb	r0, r0
 8013174:	b00e      	add	sp, #56	@ 0x38
 8013176:	bd70      	pop	{r4, r5, r6, pc}
 8013178:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801317c:	6918      	ldr	r0, [r3, #16]
 801317e:	4b0c      	ldr	r3, [pc, #48]	@ (80131b0 <rmw_publish+0xbc>)
 8013180:	9301      	str	r3, [sp, #4]
 8013182:	9b05      	ldr	r3, [sp, #20]
 8013184:	9300      	str	r3, [sp, #0]
 8013186:	9602      	str	r6, [sp, #8]
 8013188:	6972      	ldr	r2, [r6, #20]
 801318a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801318c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013190:	ab06      	add	r3, sp, #24
 8013192:	f004 f959 	bl	8017448 <uxr_prepare_output_stream_fragmented>
 8013196:	2800      	cmp	r0, #0
 8013198:	d1d2      	bne.n	8013140 <rmw_publish+0x4c>
 801319a:	2001      	movs	r0, #1
 801319c:	b00e      	add	sp, #56	@ 0x38
 801319e:	bd70      	pop	{r4, r5, r6, pc}
 80131a0:	2001      	movs	r0, #1
 80131a2:	4770      	bx	lr
 80131a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80131a8:	f002 fb3e 	bl	8015828 <uxr_flash_output_streams>
 80131ac:	e7df      	b.n	801316e <rmw_publish+0x7a>
 80131ae:	bf00      	nop
 80131b0:	080130ed 	.word	0x080130ed

080131b4 <rmw_create_publisher>:
 80131b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b8:	b087      	sub	sp, #28
 80131ba:	2800      	cmp	r0, #0
 80131bc:	f000 80c9 	beq.w	8013352 <rmw_create_publisher+0x19e>
 80131c0:	460f      	mov	r7, r1
 80131c2:	2900      	cmp	r1, #0
 80131c4:	f000 80c5 	beq.w	8013352 <rmw_create_publisher+0x19e>
 80131c8:	4604      	mov	r4, r0
 80131ca:	6800      	ldr	r0, [r0, #0]
 80131cc:	4615      	mov	r5, r2
 80131ce:	461e      	mov	r6, r3
 80131d0:	f001 f976 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 80131d4:	2800      	cmp	r0, #0
 80131d6:	f000 80bc 	beq.w	8013352 <rmw_create_publisher+0x19e>
 80131da:	2d00      	cmp	r5, #0
 80131dc:	f000 80b9 	beq.w	8013352 <rmw_create_publisher+0x19e>
 80131e0:	782b      	ldrb	r3, [r5, #0]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	f000 80b5 	beq.w	8013352 <rmw_create_publisher+0x19e>
 80131e8:	2e00      	cmp	r6, #0
 80131ea:	f000 80b2 	beq.w	8013352 <rmw_create_publisher+0x19e>
 80131ee:	485c      	ldr	r0, [pc, #368]	@ (8013360 <rmw_create_publisher+0x1ac>)
 80131f0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80131f4:	f006 f8fa 	bl	80193ec <get_memory>
 80131f8:	2800      	cmp	r0, #0
 80131fa:	f000 80aa 	beq.w	8013352 <rmw_create_publisher+0x19e>
 80131fe:	6884      	ldr	r4, [r0, #8]
 8013200:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8013204:	f7ff fc20 	bl	8012a48 <rmw_get_implementation_identifier>
 8013208:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801320c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8013210:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8013214:	4628      	mov	r0, r5
 8013216:	f7ed f85b 	bl	80002d0 <strlen>
 801321a:	3001      	adds	r0, #1
 801321c:	283c      	cmp	r0, #60	@ 0x3c
 801321e:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8013222:	f200 808f 	bhi.w	8013344 <rmw_create_publisher+0x190>
 8013226:	4a4f      	ldr	r2, [pc, #316]	@ (8013364 <rmw_create_publisher+0x1b0>)
 8013228:	462b      	mov	r3, r5
 801322a:	213c      	movs	r1, #60	@ 0x3c
 801322c:	4650      	mov	r0, sl
 801322e:	f008 f9b7 	bl	801b5a0 <sniprintf>
 8013232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013236:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8013238:	4631      	mov	r1, r6
 801323a:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 801323e:	2250      	movs	r2, #80	@ 0x50
 8013240:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013244:	f008 fc6f 	bl	801bb26 <memcpy>
 8013248:	7a33      	ldrb	r3, [r6, #8]
 801324a:	4947      	ldr	r1, [pc, #284]	@ (8013368 <rmw_create_publisher+0x1b4>)
 801324c:	2b02      	cmp	r3, #2
 801324e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013252:	bf0c      	ite	eq
 8013254:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8013258:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801325c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801325e:	2300      	movs	r3, #0
 8013260:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013264:	4638      	mov	r0, r7
 8013266:	f001 f939 	bl	80144dc <get_message_typesupport_handle>
 801326a:	2800      	cmp	r0, #0
 801326c:	d06a      	beq.n	8013344 <rmw_create_publisher+0x190>
 801326e:	6842      	ldr	r2, [r0, #4]
 8013270:	61a2      	str	r2, [r4, #24]
 8013272:	2a00      	cmp	r2, #0
 8013274:	d066      	beq.n	8013344 <rmw_create_publisher+0x190>
 8013276:	4629      	mov	r1, r5
 8013278:	4633      	mov	r3, r6
 801327a:	4648      	mov	r0, r9
 801327c:	f006 f902 	bl	8019484 <create_topic>
 8013280:	6260      	str	r0, [r4, #36]	@ 0x24
 8013282:	2800      	cmp	r0, #0
 8013284:	d062      	beq.n	801334c <rmw_create_publisher+0x198>
 8013286:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801328a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801328e:	2103      	movs	r1, #3
 8013290:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8013294:	1c42      	adds	r2, r0, #1
 8013296:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801329a:	f002 f863 	bl	8015364 <uxr_object_id>
 801329e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80132a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132a6:	6120      	str	r0, [r4, #16]
 80132a8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80132ac:	6910      	ldr	r0, [r2, #16]
 80132ae:	2506      	movs	r5, #6
 80132b0:	9500      	str	r5, [sp, #0]
 80132b2:	6819      	ldr	r1, [r3, #0]
 80132b4:	6922      	ldr	r2, [r4, #16]
 80132b6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80132ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80132be:	f001 fe67 	bl	8014f90 <uxr_buffer_create_publisher_bin>
 80132c2:	4602      	mov	r2, r0
 80132c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80132c8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80132cc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80132d0:	f001 f870 	bl	80143b4 <run_xrce_session>
 80132d4:	b3b0      	cbz	r0, 8013344 <rmw_create_publisher+0x190>
 80132d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80132de:	2105      	movs	r1, #5
 80132e0:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80132e4:	1c42      	adds	r2, r0, #1
 80132e6:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80132ea:	f002 f83b 	bl	8015364 <uxr_object_id>
 80132ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80132f2:	6160      	str	r0, [r4, #20]
 80132f4:	4631      	mov	r1, r6
 80132f6:	af04      	add	r7, sp, #16
 80132f8:	691e      	ldr	r6, [r3, #16]
 80132fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132fe:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8013302:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 8013306:	4638      	mov	r0, r7
 8013308:	f001 f874 	bl	80143f4 <convert_qos_profile>
 801330c:	9503      	str	r5, [sp, #12]
 801330e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013312:	9001      	str	r0, [sp, #4]
 8013314:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013318:	f8db 3010 	ldr.w	r3, [fp, #16]
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8013322:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8013326:	f8da 1000 	ldr.w	r1, [sl]
 801332a:	4630      	mov	r0, r6
 801332c:	f001 fe8e 	bl	801504c <uxr_buffer_create_datawriter_bin>
 8013330:	4602      	mov	r2, r0
 8013332:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013336:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801333a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801333e:	f001 f839 	bl	80143b4 <run_xrce_session>
 8013342:	b940      	cbnz	r0, 8013356 <rmw_create_publisher+0x1a2>
 8013344:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8013346:	b108      	cbz	r0, 801334c <rmw_create_publisher+0x198>
 8013348:	f000 ff2c 	bl	80141a4 <rmw_uxrce_fini_topic_memory>
 801334c:	4640      	mov	r0, r8
 801334e:	f000 fed1 	bl	80140f4 <rmw_uxrce_fini_publisher_memory>
 8013352:	f04f 0800 	mov.w	r8, #0
 8013356:	4640      	mov	r0, r8
 8013358:	b007      	add	sp, #28
 801335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801335e:	bf00      	nop
 8013360:	200160d0 	.word	0x200160d0
 8013364:	0801fc1c 	.word	0x0801fc1c
 8013368:	0801f400 	.word	0x0801f400

0801336c <rmw_publisher_get_actual_qos>:
 801336c:	b508      	push	{r3, lr}
 801336e:	4603      	mov	r3, r0
 8013370:	b140      	cbz	r0, 8013384 <rmw_publisher_get_actual_qos+0x18>
 8013372:	4608      	mov	r0, r1
 8013374:	b131      	cbz	r1, 8013384 <rmw_publisher_get_actual_qos+0x18>
 8013376:	6859      	ldr	r1, [r3, #4]
 8013378:	2250      	movs	r2, #80	@ 0x50
 801337a:	3128      	adds	r1, #40	@ 0x28
 801337c:	f008 fbd3 	bl	801bb26 <memcpy>
 8013380:	2000      	movs	r0, #0
 8013382:	bd08      	pop	{r3, pc}
 8013384:	200b      	movs	r0, #11
 8013386:	bd08      	pop	{r3, pc}

08013388 <rmw_destroy_publisher>:
 8013388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801338c:	b128      	cbz	r0, 801339a <rmw_destroy_publisher+0x12>
 801338e:	4604      	mov	r4, r0
 8013390:	6800      	ldr	r0, [r0, #0]
 8013392:	460d      	mov	r5, r1
 8013394:	f001 f894 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 8013398:	b918      	cbnz	r0, 80133a2 <rmw_destroy_publisher+0x1a>
 801339a:	2401      	movs	r4, #1
 801339c:	4620      	mov	r0, r4
 801339e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133a2:	6863      	ldr	r3, [r4, #4]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d0f8      	beq.n	801339a <rmw_destroy_publisher+0x12>
 80133a8:	2d00      	cmp	r5, #0
 80133aa:	d0f6      	beq.n	801339a <rmw_destroy_publisher+0x12>
 80133ac:	6828      	ldr	r0, [r5, #0]
 80133ae:	f001 f887 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 80133b2:	2800      	cmp	r0, #0
 80133b4:	d0f1      	beq.n	801339a <rmw_destroy_publisher+0x12>
 80133b6:	686c      	ldr	r4, [r5, #4]
 80133b8:	2c00      	cmp	r4, #0
 80133ba:	d0ee      	beq.n	801339a <rmw_destroy_publisher+0x12>
 80133bc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80133be:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80133c2:	f006 f8b3 	bl	801952c <destroy_topic>
 80133c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80133ca:	6962      	ldr	r2, [r4, #20]
 80133cc:	6918      	ldr	r0, [r3, #16]
 80133ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80133d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80133d6:	6819      	ldr	r1, [r3, #0]
 80133d8:	f001 fd2a 	bl	8014e30 <uxr_buffer_delete_entity>
 80133dc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80133e0:	6922      	ldr	r2, [r4, #16]
 80133e2:	4680      	mov	r8, r0
 80133e4:	6918      	ldr	r0, [r3, #16]
 80133e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80133ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80133ee:	6819      	ldr	r1, [r3, #0]
 80133f0:	f001 fd1e 	bl	8014e30 <uxr_buffer_delete_entity>
 80133f4:	4606      	mov	r6, r0
 80133f6:	6938      	ldr	r0, [r7, #16]
 80133f8:	4642      	mov	r2, r8
 80133fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80133fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013402:	f000 ffd7 	bl	80143b4 <run_xrce_session>
 8013406:	4604      	mov	r4, r0
 8013408:	6938      	ldr	r0, [r7, #16]
 801340a:	4632      	mov	r2, r6
 801340c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013410:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013414:	f000 ffce 	bl	80143b4 <run_xrce_session>
 8013418:	4004      	ands	r4, r0
 801341a:	f084 0401 	eor.w	r4, r4, #1
 801341e:	b2e4      	uxtb	r4, r4
 8013420:	4628      	mov	r0, r5
 8013422:	0064      	lsls	r4, r4, #1
 8013424:	f000 fe66 	bl	80140f4 <rmw_uxrce_fini_publisher_memory>
 8013428:	e7b8      	b.n	801339c <rmw_destroy_publisher+0x14>
 801342a:	bf00      	nop

0801342c <rmw_send_request>:
 801342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013430:	4604      	mov	r4, r0
 8013432:	6800      	ldr	r0, [r0, #0]
 8013434:	b08a      	sub	sp, #40	@ 0x28
 8013436:	460e      	mov	r6, r1
 8013438:	4615      	mov	r5, r2
 801343a:	b128      	cbz	r0, 8013448 <rmw_send_request+0x1c>
 801343c:	4b1e      	ldr	r3, [pc, #120]	@ (80134b8 <rmw_send_request+0x8c>)
 801343e:	6819      	ldr	r1, [r3, #0]
 8013440:	f7ec fee6 	bl	8000210 <strcmp>
 8013444:	2800      	cmp	r0, #0
 8013446:	d133      	bne.n	80134b0 <rmw_send_request+0x84>
 8013448:	6864      	ldr	r4, [r4, #4]
 801344a:	6963      	ldr	r3, [r4, #20]
 801344c:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 801344e:	689b      	ldr	r3, [r3, #8]
 8013450:	4798      	blx	r3
 8013452:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013456:	4630      	mov	r0, r6
 8013458:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801345c:	4798      	blx	r3
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	9000      	str	r0, [sp, #0]
 8013462:	6922      	ldr	r2, [r4, #16]
 8013464:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013466:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801346a:	ab02      	add	r3, sp, #8
 801346c:	f003 ffbc 	bl	80173e8 <uxr_prepare_output_stream>
 8013470:	2300      	movs	r3, #0
 8013472:	6028      	str	r0, [r5, #0]
 8013474:	606b      	str	r3, [r5, #4]
 8013476:	b190      	cbz	r0, 801349e <rmw_send_request+0x72>
 8013478:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801347c:	a902      	add	r1, sp, #8
 801347e:	4630      	mov	r0, r6
 8013480:	4798      	blx	r3
 8013482:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013486:	6938      	ldr	r0, [r7, #16]
 8013488:	2b01      	cmp	r3, #1
 801348a:	d00c      	beq.n	80134a6 <rmw_send_request+0x7a>
 801348c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801348e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013492:	f002 fd61 	bl	8015f58 <uxr_run_session_until_confirm_delivery>
 8013496:	2000      	movs	r0, #0
 8013498:	b00a      	add	sp, #40	@ 0x28
 801349a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801349e:	2001      	movs	r0, #1
 80134a0:	b00a      	add	sp, #40	@ 0x28
 80134a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134aa:	f002 f9bd 	bl	8015828 <uxr_flash_output_streams>
 80134ae:	e7f2      	b.n	8013496 <rmw_send_request+0x6a>
 80134b0:	200c      	movs	r0, #12
 80134b2:	b00a      	add	sp, #40	@ 0x28
 80134b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134b8:	08020170 	.word	0x08020170

080134bc <rmw_take_request>:
 80134bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134c0:	4605      	mov	r5, r0
 80134c2:	6800      	ldr	r0, [r0, #0]
 80134c4:	b089      	sub	sp, #36	@ 0x24
 80134c6:	460c      	mov	r4, r1
 80134c8:	4690      	mov	r8, r2
 80134ca:	461e      	mov	r6, r3
 80134cc:	b128      	cbz	r0, 80134da <rmw_take_request+0x1e>
 80134ce:	4b28      	ldr	r3, [pc, #160]	@ (8013570 <rmw_take_request+0xb4>)
 80134d0:	6819      	ldr	r1, [r3, #0]
 80134d2:	f7ec fe9d 	bl	8000210 <strcmp>
 80134d6:	2800      	cmp	r0, #0
 80134d8:	d146      	bne.n	8013568 <rmw_take_request+0xac>
 80134da:	b10e      	cbz	r6, 80134e0 <rmw_take_request+0x24>
 80134dc:	2300      	movs	r3, #0
 80134de:	7033      	strb	r3, [r6, #0]
 80134e0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80134e4:	f000 fee8 	bl	80142b8 <rmw_uxrce_clean_expired_static_input_buffer>
 80134e8:	4648      	mov	r0, r9
 80134ea:	f000 febf 	bl	801426c <rmw_uxrce_find_static_input_buffer_by_owner>
 80134ee:	4607      	mov	r7, r0
 80134f0:	b3b0      	cbz	r0, 8013560 <rmw_take_request+0xa4>
 80134f2:	6885      	ldr	r5, [r0, #8]
 80134f4:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80134f8:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80134fc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013500:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013504:	7423      	strb	r3, [r4, #16]
 8013506:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801350a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801350e:	74e2      	strb	r2, [r4, #19]
 8013510:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013514:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8013518:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801351c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013520:	61e1      	str	r1, [r4, #28]
 8013522:	6162      	str	r2, [r4, #20]
 8013524:	61a3      	str	r3, [r4, #24]
 8013526:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	4798      	blx	r3
 801352e:	6844      	ldr	r4, [r0, #4]
 8013530:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013534:	f105 0110 	add.w	r1, r5, #16
 8013538:	4668      	mov	r0, sp
 801353a:	f7fb fbcf 	bl	800ecdc <ucdr_init_buffer>
 801353e:	68e3      	ldr	r3, [r4, #12]
 8013540:	4641      	mov	r1, r8
 8013542:	4668      	mov	r0, sp
 8013544:	4798      	blx	r3
 8013546:	4639      	mov	r1, r7
 8013548:	4604      	mov	r4, r0
 801354a:	480a      	ldr	r0, [pc, #40]	@ (8013574 <rmw_take_request+0xb8>)
 801354c:	f005 ff5e 	bl	801940c <put_memory>
 8013550:	b106      	cbz	r6, 8013554 <rmw_take_request+0x98>
 8013552:	7034      	strb	r4, [r6, #0]
 8013554:	f084 0001 	eor.w	r0, r4, #1
 8013558:	b2c0      	uxtb	r0, r0
 801355a:	b009      	add	sp, #36	@ 0x24
 801355c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013560:	2001      	movs	r0, #1
 8013562:	b009      	add	sp, #36	@ 0x24
 8013564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013568:	200c      	movs	r0, #12
 801356a:	b009      	add	sp, #36	@ 0x24
 801356c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013570:	08020170 	.word	0x08020170
 8013574:	200150a0 	.word	0x200150a0

08013578 <rmw_send_response>:
 8013578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801357a:	4605      	mov	r5, r0
 801357c:	6800      	ldr	r0, [r0, #0]
 801357e:	b091      	sub	sp, #68	@ 0x44
 8013580:	460c      	mov	r4, r1
 8013582:	4616      	mov	r6, r2
 8013584:	b128      	cbz	r0, 8013592 <rmw_send_response+0x1a>
 8013586:	4b28      	ldr	r3, [pc, #160]	@ (8013628 <rmw_send_response+0xb0>)
 8013588:	6819      	ldr	r1, [r3, #0]
 801358a:	f7ec fe41 	bl	8000210 <strcmp>
 801358e:	2800      	cmp	r0, #0
 8013590:	d141      	bne.n	8013616 <rmw_send_response+0x9e>
 8013592:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8013596:	9306      	str	r3, [sp, #24]
 8013598:	4623      	mov	r3, r4
 801359a:	9207      	str	r2, [sp, #28]
 801359c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135a0:	686d      	ldr	r5, [r5, #4]
 80135a2:	789b      	ldrb	r3, [r3, #2]
 80135a4:	68a1      	ldr	r1, [r4, #8]
 80135a6:	f88d 2017 	strb.w	r2, [sp, #23]
 80135aa:	f88d 3016 	strb.w	r3, [sp, #22]
 80135ae:	68e2      	ldr	r2, [r4, #12]
 80135b0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80135b4:	6860      	ldr	r0, [r4, #4]
 80135b6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80135ba:	ab02      	add	r3, sp, #8
 80135bc:	c307      	stmia	r3!, {r0, r1, r2}
 80135be:	696b      	ldr	r3, [r5, #20]
 80135c0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	4798      	blx	r3
 80135c6:	6844      	ldr	r4, [r0, #4]
 80135c8:	4630      	mov	r0, r6
 80135ca:	6923      	ldr	r3, [r4, #16]
 80135cc:	4798      	blx	r3
 80135ce:	f100 0318 	add.w	r3, r0, #24
 80135d2:	6938      	ldr	r0, [r7, #16]
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	692a      	ldr	r2, [r5, #16]
 80135d8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80135da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135de:	ab08      	add	r3, sp, #32
 80135e0:	f003 ff02 	bl	80173e8 <uxr_prepare_output_stream>
 80135e4:	b910      	cbnz	r0, 80135ec <rmw_send_response+0x74>
 80135e6:	2001      	movs	r0, #1
 80135e8:	b011      	add	sp, #68	@ 0x44
 80135ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ec:	a902      	add	r1, sp, #8
 80135ee:	a808      	add	r0, sp, #32
 80135f0:	f005 f80a 	bl	8018608 <uxr_serialize_SampleIdentity>
 80135f4:	68a3      	ldr	r3, [r4, #8]
 80135f6:	a908      	add	r1, sp, #32
 80135f8:	4630      	mov	r0, r6
 80135fa:	4798      	blx	r3
 80135fc:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013600:	6938      	ldr	r0, [r7, #16]
 8013602:	2b01      	cmp	r3, #1
 8013604:	d00a      	beq.n	801361c <rmw_send_response+0xa4>
 8013606:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8013608:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801360c:	f002 fca4 	bl	8015f58 <uxr_run_session_until_confirm_delivery>
 8013610:	2000      	movs	r0, #0
 8013612:	b011      	add	sp, #68	@ 0x44
 8013614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013616:	200c      	movs	r0, #12
 8013618:	b011      	add	sp, #68	@ 0x44
 801361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801361c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013620:	f002 f902 	bl	8015828 <uxr_flash_output_streams>
 8013624:	e7f4      	b.n	8013610 <rmw_send_response+0x98>
 8013626:	bf00      	nop
 8013628:	08020170 	.word	0x08020170

0801362c <rmw_take_response>:
 801362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013630:	4604      	mov	r4, r0
 8013632:	6800      	ldr	r0, [r0, #0]
 8013634:	b088      	sub	sp, #32
 8013636:	4688      	mov	r8, r1
 8013638:	4617      	mov	r7, r2
 801363a:	461d      	mov	r5, r3
 801363c:	b120      	cbz	r0, 8013648 <rmw_take_response+0x1c>
 801363e:	4b1e      	ldr	r3, [pc, #120]	@ (80136b8 <rmw_take_response+0x8c>)
 8013640:	6819      	ldr	r1, [r3, #0]
 8013642:	f7ec fde5 	bl	8000210 <strcmp>
 8013646:	bb78      	cbnz	r0, 80136a8 <rmw_take_response+0x7c>
 8013648:	b10d      	cbz	r5, 801364e <rmw_take_response+0x22>
 801364a:	2300      	movs	r3, #0
 801364c:	702b      	strb	r3, [r5, #0]
 801364e:	6864      	ldr	r4, [r4, #4]
 8013650:	f000 fe32 	bl	80142b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013654:	4620      	mov	r0, r4
 8013656:	f000 fe09 	bl	801426c <rmw_uxrce_find_static_input_buffer_by_owner>
 801365a:	4606      	mov	r6, r0
 801365c:	b340      	cbz	r0, 80136b0 <rmw_take_response+0x84>
 801365e:	6963      	ldr	r3, [r4, #20]
 8013660:	6884      	ldr	r4, [r0, #8]
 8013662:	68db      	ldr	r3, [r3, #12]
 8013664:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013668:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801366c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013670:	4798      	blx	r3
 8013672:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013676:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801367a:	f104 0110 	add.w	r1, r4, #16
 801367e:	4668      	mov	r0, sp
 8013680:	f7fb fb2c 	bl	800ecdc <ucdr_init_buffer>
 8013684:	4639      	mov	r1, r7
 8013686:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801368a:	4668      	mov	r0, sp
 801368c:	4798      	blx	r3
 801368e:	4631      	mov	r1, r6
 8013690:	4604      	mov	r4, r0
 8013692:	480a      	ldr	r0, [pc, #40]	@ (80136bc <rmw_take_response+0x90>)
 8013694:	f005 feba 	bl	801940c <put_memory>
 8013698:	b105      	cbz	r5, 801369c <rmw_take_response+0x70>
 801369a:	702c      	strb	r4, [r5, #0]
 801369c:	f084 0001 	eor.w	r0, r4, #1
 80136a0:	b2c0      	uxtb	r0, r0
 80136a2:	b008      	add	sp, #32
 80136a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a8:	200c      	movs	r0, #12
 80136aa:	b008      	add	sp, #32
 80136ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b0:	2001      	movs	r0, #1
 80136b2:	b008      	add	sp, #32
 80136b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b8:	08020170 	.word	0x08020170
 80136bc:	200150a0 	.word	0x200150a0

080136c0 <rmw_destroy_service>:
 80136c0:	b570      	push	{r4, r5, r6, lr}
 80136c2:	b128      	cbz	r0, 80136d0 <rmw_destroy_service+0x10>
 80136c4:	4604      	mov	r4, r0
 80136c6:	6800      	ldr	r0, [r0, #0]
 80136c8:	460d      	mov	r5, r1
 80136ca:	f000 fef9 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 80136ce:	b910      	cbnz	r0, 80136d6 <rmw_destroy_service+0x16>
 80136d0:	2401      	movs	r4, #1
 80136d2:	4620      	mov	r0, r4
 80136d4:	bd70      	pop	{r4, r5, r6, pc}
 80136d6:	6863      	ldr	r3, [r4, #4]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d0f9      	beq.n	80136d0 <rmw_destroy_service+0x10>
 80136dc:	2d00      	cmp	r5, #0
 80136de:	d0f7      	beq.n	80136d0 <rmw_destroy_service+0x10>
 80136e0:	6828      	ldr	r0, [r5, #0]
 80136e2:	f000 feed 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 80136e6:	2800      	cmp	r0, #0
 80136e8:	d0f2      	beq.n	80136d0 <rmw_destroy_service+0x10>
 80136ea:	686e      	ldr	r6, [r5, #4]
 80136ec:	2e00      	cmp	r6, #0
 80136ee:	d0ef      	beq.n	80136d0 <rmw_destroy_service+0x10>
 80136f0:	6864      	ldr	r4, [r4, #4]
 80136f2:	6932      	ldr	r2, [r6, #16]
 80136f4:	6920      	ldr	r0, [r4, #16]
 80136f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80136fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80136fe:	6819      	ldr	r1, [r3, #0]
 8013700:	f001 fe96 	bl	8015430 <uxr_buffer_cancel_data>
 8013704:	4602      	mov	r2, r0
 8013706:	6920      	ldr	r0, [r4, #16]
 8013708:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801370c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013710:	f000 fe50 	bl	80143b4 <run_xrce_session>
 8013714:	6920      	ldr	r0, [r4, #16]
 8013716:	6932      	ldr	r2, [r6, #16]
 8013718:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801371c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013720:	6819      	ldr	r1, [r3, #0]
 8013722:	f001 fb85 	bl	8014e30 <uxr_buffer_delete_entity>
 8013726:	4602      	mov	r2, r0
 8013728:	6920      	ldr	r0, [r4, #16]
 801372a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801372e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013732:	f000 fe3f 	bl	80143b4 <run_xrce_session>
 8013736:	f080 0401 	eor.w	r4, r0, #1
 801373a:	b2e4      	uxtb	r4, r4
 801373c:	4628      	mov	r0, r5
 801373e:	0064      	lsls	r4, r4, #1
 8013740:	f000 fd04 	bl	801414c <rmw_uxrce_fini_service_memory>
 8013744:	e7c5      	b.n	80136d2 <rmw_destroy_service+0x12>
 8013746:	bf00      	nop

08013748 <rmw_create_subscription>:
 8013748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801374c:	b08d      	sub	sp, #52	@ 0x34
 801374e:	2800      	cmp	r0, #0
 8013750:	f000 80d1 	beq.w	80138f6 <rmw_create_subscription+0x1ae>
 8013754:	460f      	mov	r7, r1
 8013756:	2900      	cmp	r1, #0
 8013758:	f000 80cd 	beq.w	80138f6 <rmw_create_subscription+0x1ae>
 801375c:	4604      	mov	r4, r0
 801375e:	6800      	ldr	r0, [r0, #0]
 8013760:	4615      	mov	r5, r2
 8013762:	461e      	mov	r6, r3
 8013764:	f000 feac 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 8013768:	2800      	cmp	r0, #0
 801376a:	f000 80c4 	beq.w	80138f6 <rmw_create_subscription+0x1ae>
 801376e:	2d00      	cmp	r5, #0
 8013770:	f000 80c1 	beq.w	80138f6 <rmw_create_subscription+0x1ae>
 8013774:	782b      	ldrb	r3, [r5, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	f000 80bd 	beq.w	80138f6 <rmw_create_subscription+0x1ae>
 801377c:	2e00      	cmp	r6, #0
 801377e:	f000 80ba 	beq.w	80138f6 <rmw_create_subscription+0x1ae>
 8013782:	485e      	ldr	r0, [pc, #376]	@ (80138fc <rmw_create_subscription+0x1b4>)
 8013784:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013788:	f005 fe30 	bl	80193ec <get_memory>
 801378c:	2800      	cmp	r0, #0
 801378e:	f000 80b2 	beq.w	80138f6 <rmw_create_subscription+0x1ae>
 8013792:	6884      	ldr	r4, [r0, #8]
 8013794:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8013798:	f7ff f956 	bl	8012a48 <rmw_get_implementation_identifier>
 801379c:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 80137a0:	67e0      	str	r0, [r4, #124]	@ 0x7c
 80137a2:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 80137a6:	4628      	mov	r0, r5
 80137a8:	f7ec fd92 	bl	80002d0 <strlen>
 80137ac:	3001      	adds	r0, #1
 80137ae:	283c      	cmp	r0, #60	@ 0x3c
 80137b0:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 80137b4:	f200 8098 	bhi.w	80138e8 <rmw_create_subscription+0x1a0>
 80137b8:	4a51      	ldr	r2, [pc, #324]	@ (8013900 <rmw_create_subscription+0x1b8>)
 80137ba:	462b      	mov	r3, r5
 80137bc:	213c      	movs	r1, #60	@ 0x3c
 80137be:	4650      	mov	r0, sl
 80137c0:	f007 feee 	bl	801b5a0 <sniprintf>
 80137c4:	4631      	mov	r1, r6
 80137c6:	f8c4 9020 	str.w	r9, [r4, #32]
 80137ca:	2250      	movs	r2, #80	@ 0x50
 80137cc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80137d0:	f008 f9a9 	bl	801bb26 <memcpy>
 80137d4:	494b      	ldr	r1, [pc, #300]	@ (8013904 <rmw_create_subscription+0x1bc>)
 80137d6:	4638      	mov	r0, r7
 80137d8:	f000 fe80 	bl	80144dc <get_message_typesupport_handle>
 80137dc:	2800      	cmp	r0, #0
 80137de:	f000 8083 	beq.w	80138e8 <rmw_create_subscription+0x1a0>
 80137e2:	6842      	ldr	r2, [r0, #4]
 80137e4:	61a2      	str	r2, [r4, #24]
 80137e6:	2a00      	cmp	r2, #0
 80137e8:	d07e      	beq.n	80138e8 <rmw_create_subscription+0x1a0>
 80137ea:	4629      	mov	r1, r5
 80137ec:	4633      	mov	r3, r6
 80137ee:	4648      	mov	r0, r9
 80137f0:	f005 fe48 	bl	8019484 <create_topic>
 80137f4:	61e0      	str	r0, [r4, #28]
 80137f6:	2800      	cmp	r0, #0
 80137f8:	d07a      	beq.n	80138f0 <rmw_create_subscription+0x1a8>
 80137fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80137fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013802:	2104      	movs	r1, #4
 8013804:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8013808:	1c42      	adds	r2, r0, #1
 801380a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801380e:	f001 fda9 	bl	8015364 <uxr_object_id>
 8013812:	6120      	str	r0, [r4, #16]
 8013814:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013818:	2506      	movs	r5, #6
 801381a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801381e:	9500      	str	r5, [sp, #0]
 8013820:	6819      	ldr	r1, [r3, #0]
 8013822:	6922      	ldr	r2, [r4, #16]
 8013824:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013828:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801382c:	f001 fbde 	bl	8014fec <uxr_buffer_create_subscriber_bin>
 8013830:	4602      	mov	r2, r0
 8013832:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013836:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801383a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801383e:	f000 fdb9 	bl	80143b4 <run_xrce_session>
 8013842:	2800      	cmp	r0, #0
 8013844:	d050      	beq.n	80138e8 <rmw_create_subscription+0x1a0>
 8013846:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801384a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801384e:	4629      	mov	r1, r5
 8013850:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8013854:	1c42      	adds	r2, r0, #1
 8013856:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801385a:	f001 fd83 	bl	8015364 <uxr_object_id>
 801385e:	af08      	add	r7, sp, #32
 8013860:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013864:	69e3      	ldr	r3, [r4, #28]
 8013866:	6160      	str	r0, [r4, #20]
 8013868:	4631      	mov	r1, r6
 801386a:	4638      	mov	r0, r7
 801386c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8013870:	9305      	str	r3, [sp, #20]
 8013872:	f000 fdbf 	bl	80143f4 <convert_qos_profile>
 8013876:	9503      	str	r5, [sp, #12]
 8013878:	e897 0003 	ldmia.w	r7, {r0, r1}
 801387c:	9b05      	ldr	r3, [sp, #20]
 801387e:	9001      	str	r0, [sp, #4]
 8013880:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013884:	691b      	ldr	r3, [r3, #16]
 8013886:	9300      	str	r3, [sp, #0]
 8013888:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801388c:	f8db 1000 	ldr.w	r1, [fp]
 8013890:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8013894:	f001 fc3e 	bl	8015114 <uxr_buffer_create_datareader_bin>
 8013898:	4602      	mov	r2, r0
 801389a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801389e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80138a2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80138a6:	f000 fd85 	bl	80143b4 <run_xrce_session>
 80138aa:	b1e8      	cbz	r0, 80138e8 <rmw_create_subscription+0x1a0>
 80138ac:	7a33      	ldrb	r3, [r6, #8]
 80138ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80138b2:	2b02      	cmp	r3, #2
 80138b4:	bf0c      	ite	eq
 80138b6:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80138ba:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80138be:	9307      	str	r3, [sp, #28]
 80138c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80138c4:	2200      	movs	r2, #0
 80138c6:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80138ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80138cc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80138d0:	9300      	str	r3, [sp, #0]
 80138d2:	6962      	ldr	r2, [r4, #20]
 80138d4:	9b07      	ldr	r3, [sp, #28]
 80138d6:	6809      	ldr	r1, [r1, #0]
 80138d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138dc:	f001 fd70 	bl	80153c0 <uxr_buffer_request_data>
 80138e0:	4640      	mov	r0, r8
 80138e2:	b00d      	add	sp, #52	@ 0x34
 80138e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e8:	69e0      	ldr	r0, [r4, #28]
 80138ea:	b108      	cbz	r0, 80138f0 <rmw_create_subscription+0x1a8>
 80138ec:	f000 fc5a 	bl	80141a4 <rmw_uxrce_fini_topic_memory>
 80138f0:	4640      	mov	r0, r8
 80138f2:	f000 fc15 	bl	8014120 <rmw_uxrce_fini_subscription_memory>
 80138f6:	f04f 0800 	mov.w	r8, #0
 80138fa:	e7f1      	b.n	80138e0 <rmw_create_subscription+0x198>
 80138fc:	20015850 	.word	0x20015850
 8013900:	0801fc1c 	.word	0x0801fc1c
 8013904:	0801f400 	.word	0x0801f400

08013908 <rmw_subscription_get_actual_qos>:
 8013908:	b508      	push	{r3, lr}
 801390a:	4603      	mov	r3, r0
 801390c:	b140      	cbz	r0, 8013920 <rmw_subscription_get_actual_qos+0x18>
 801390e:	4608      	mov	r0, r1
 8013910:	b131      	cbz	r1, 8013920 <rmw_subscription_get_actual_qos+0x18>
 8013912:	6859      	ldr	r1, [r3, #4]
 8013914:	2250      	movs	r2, #80	@ 0x50
 8013916:	3128      	adds	r1, #40	@ 0x28
 8013918:	f008 f905 	bl	801bb26 <memcpy>
 801391c:	2000      	movs	r0, #0
 801391e:	bd08      	pop	{r3, pc}
 8013920:	200b      	movs	r0, #11
 8013922:	bd08      	pop	{r3, pc}

08013924 <rmw_destroy_subscription>:
 8013924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013928:	b128      	cbz	r0, 8013936 <rmw_destroy_subscription+0x12>
 801392a:	4604      	mov	r4, r0
 801392c:	6800      	ldr	r0, [r0, #0]
 801392e:	460d      	mov	r5, r1
 8013930:	f000 fdc6 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 8013934:	b918      	cbnz	r0, 801393e <rmw_destroy_subscription+0x1a>
 8013936:	2401      	movs	r4, #1
 8013938:	4620      	mov	r0, r4
 801393a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801393e:	6863      	ldr	r3, [r4, #4]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d0f8      	beq.n	8013936 <rmw_destroy_subscription+0x12>
 8013944:	2d00      	cmp	r5, #0
 8013946:	d0f6      	beq.n	8013936 <rmw_destroy_subscription+0x12>
 8013948:	6828      	ldr	r0, [r5, #0]
 801394a:	f000 fdb9 	bl	80144c0 <is_uxrce_rmw_identifier_valid>
 801394e:	2800      	cmp	r0, #0
 8013950:	d0f1      	beq.n	8013936 <rmw_destroy_subscription+0x12>
 8013952:	686c      	ldr	r4, [r5, #4]
 8013954:	2c00      	cmp	r4, #0
 8013956:	d0ee      	beq.n	8013936 <rmw_destroy_subscription+0x12>
 8013958:	6a26      	ldr	r6, [r4, #32]
 801395a:	6962      	ldr	r2, [r4, #20]
 801395c:	6930      	ldr	r0, [r6, #16]
 801395e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013962:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013966:	6819      	ldr	r1, [r3, #0]
 8013968:	f001 fd62 	bl	8015430 <uxr_buffer_cancel_data>
 801396c:	4602      	mov	r2, r0
 801396e:	6930      	ldr	r0, [r6, #16]
 8013970:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013974:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013978:	f000 fd1c 	bl	80143b4 <run_xrce_session>
 801397c:	69e0      	ldr	r0, [r4, #28]
 801397e:	f005 fdd5 	bl	801952c <destroy_topic>
 8013982:	6a23      	ldr	r3, [r4, #32]
 8013984:	6962      	ldr	r2, [r4, #20]
 8013986:	6918      	ldr	r0, [r3, #16]
 8013988:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801398c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013990:	6819      	ldr	r1, [r3, #0]
 8013992:	f001 fa4d 	bl	8014e30 <uxr_buffer_delete_entity>
 8013996:	6a23      	ldr	r3, [r4, #32]
 8013998:	6922      	ldr	r2, [r4, #16]
 801399a:	4680      	mov	r8, r0
 801399c:	6918      	ldr	r0, [r3, #16]
 801399e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80139a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139a6:	6819      	ldr	r1, [r3, #0]
 80139a8:	f001 fa42 	bl	8014e30 <uxr_buffer_delete_entity>
 80139ac:	4607      	mov	r7, r0
 80139ae:	6930      	ldr	r0, [r6, #16]
 80139b0:	4642      	mov	r2, r8
 80139b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80139b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80139ba:	f000 fcfb 	bl	80143b4 <run_xrce_session>
 80139be:	4604      	mov	r4, r0
 80139c0:	6930      	ldr	r0, [r6, #16]
 80139c2:	463a      	mov	r2, r7
 80139c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80139c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80139cc:	f000 fcf2 	bl	80143b4 <run_xrce_session>
 80139d0:	4004      	ands	r4, r0
 80139d2:	f084 0401 	eor.w	r4, r4, #1
 80139d6:	b2e4      	uxtb	r4, r4
 80139d8:	4628      	mov	r0, r5
 80139da:	0064      	lsls	r4, r4, #1
 80139dc:	f000 fba0 	bl	8014120 <rmw_uxrce_fini_subscription_memory>
 80139e0:	e7aa      	b.n	8013938 <rmw_destroy_subscription+0x14>
 80139e2:	bf00      	nop

080139e4 <rmw_take_with_info>:
 80139e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139e6:	4604      	mov	r4, r0
 80139e8:	6800      	ldr	r0, [r0, #0]
 80139ea:	b089      	sub	sp, #36	@ 0x24
 80139ec:	460f      	mov	r7, r1
 80139ee:	4615      	mov	r5, r2
 80139f0:	b128      	cbz	r0, 80139fe <rmw_take_with_info+0x1a>
 80139f2:	4b23      	ldr	r3, [pc, #140]	@ (8013a80 <rmw_take_with_info+0x9c>)
 80139f4:	6819      	ldr	r1, [r3, #0]
 80139f6:	f7ec fc0b 	bl	8000210 <strcmp>
 80139fa:	2800      	cmp	r0, #0
 80139fc:	d13d      	bne.n	8013a7a <rmw_take_with_info+0x96>
 80139fe:	6864      	ldr	r4, [r4, #4]
 8013a00:	b1fd      	cbz	r5, 8013a42 <rmw_take_with_info+0x5e>
 8013a02:	2300      	movs	r3, #0
 8013a04:	702b      	strb	r3, [r5, #0]
 8013a06:	f000 fc57 	bl	80142b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f000 fc2e 	bl	801426c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a10:	4606      	mov	r6, r0
 8013a12:	b1e8      	cbz	r0, 8013a50 <rmw_take_with_info+0x6c>
 8013a14:	6881      	ldr	r1, [r0, #8]
 8013a16:	4668      	mov	r0, sp
 8013a18:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013a1c:	3110      	adds	r1, #16
 8013a1e:	f7fb f95d 	bl	800ecdc <ucdr_init_buffer>
 8013a22:	69a3      	ldr	r3, [r4, #24]
 8013a24:	4639      	mov	r1, r7
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	4668      	mov	r0, sp
 8013a2a:	4798      	blx	r3
 8013a2c:	4631      	mov	r1, r6
 8013a2e:	4604      	mov	r4, r0
 8013a30:	4814      	ldr	r0, [pc, #80]	@ (8013a84 <rmw_take_with_info+0xa0>)
 8013a32:	f005 fceb 	bl	801940c <put_memory>
 8013a36:	702c      	strb	r4, [r5, #0]
 8013a38:	f084 0001 	eor.w	r0, r4, #1
 8013a3c:	b2c0      	uxtb	r0, r0
 8013a3e:	b009      	add	sp, #36	@ 0x24
 8013a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a42:	f000 fc39 	bl	80142b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013a46:	4620      	mov	r0, r4
 8013a48:	f000 fc10 	bl	801426c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a4c:	4605      	mov	r5, r0
 8013a4e:	b910      	cbnz	r0, 8013a56 <rmw_take_with_info+0x72>
 8013a50:	2001      	movs	r0, #1
 8013a52:	b009      	add	sp, #36	@ 0x24
 8013a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a56:	68a9      	ldr	r1, [r5, #8]
 8013a58:	4668      	mov	r0, sp
 8013a5a:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013a5e:	3110      	adds	r1, #16
 8013a60:	f7fb f93c 	bl	800ecdc <ucdr_init_buffer>
 8013a64:	69a3      	ldr	r3, [r4, #24]
 8013a66:	4639      	mov	r1, r7
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	4668      	mov	r0, sp
 8013a6c:	4798      	blx	r3
 8013a6e:	4629      	mov	r1, r5
 8013a70:	4604      	mov	r4, r0
 8013a72:	4804      	ldr	r0, [pc, #16]	@ (8013a84 <rmw_take_with_info+0xa0>)
 8013a74:	f005 fcca 	bl	801940c <put_memory>
 8013a78:	e7de      	b.n	8013a38 <rmw_take_with_info+0x54>
 8013a7a:	200c      	movs	r0, #12
 8013a7c:	b009      	add	sp, #36	@ 0x24
 8013a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a80:	08020170 	.word	0x08020170
 8013a84:	200150a0 	.word	0x200150a0

08013a88 <rmw_uxrce_transport_init>:
 8013a88:	b508      	push	{r3, lr}
 8013a8a:	b108      	cbz	r0, 8013a90 <rmw_uxrce_transport_init+0x8>
 8013a8c:	f100 0210 	add.w	r2, r0, #16
 8013a90:	b139      	cbz	r1, 8013aa2 <rmw_uxrce_transport_init+0x1a>
 8013a92:	6949      	ldr	r1, [r1, #20]
 8013a94:	4610      	mov	r0, r2
 8013a96:	f001 fc2d 	bl	80152f4 <uxr_init_custom_transport>
 8013a9a:	f080 0001 	eor.w	r0, r0, #1
 8013a9e:	b2c0      	uxtb	r0, r0
 8013aa0:	bd08      	pop	{r3, pc}
 8013aa2:	4b04      	ldr	r3, [pc, #16]	@ (8013ab4 <rmw_uxrce_transport_init+0x2c>)
 8013aa4:	4610      	mov	r0, r2
 8013aa6:	6859      	ldr	r1, [r3, #4]
 8013aa8:	f001 fc24 	bl	80152f4 <uxr_init_custom_transport>
 8013aac:	f080 0001 	eor.w	r0, r0, #1
 8013ab0:	b2c0      	uxtb	r0, r0
 8013ab2:	bd08      	pop	{r3, pc}
 8013ab4:	20012c98 	.word	0x20012c98

08013ab8 <rmw_wait>:
 8013ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013abc:	b089      	sub	sp, #36	@ 0x24
 8013abe:	4607      	mov	r7, r0
 8013ac0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8013ac2:	460e      	mov	r6, r1
 8013ac4:	4698      	mov	r8, r3
 8013ac6:	4691      	mov	r9, r2
 8013ac8:	2a00      	cmp	r2, #0
 8013aca:	f000 811e 	beq.w	8013d0a <rmw_wait+0x252>
 8013ace:	2c00      	cmp	r4, #0
 8013ad0:	f000 80ef 	beq.w	8013cb2 <rmw_wait+0x1fa>
 8013ad4:	4bb5      	ldr	r3, [pc, #724]	@ (8013dac <rmw_wait+0x2f4>)
 8013ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013ad8:	ad04      	add	r5, sp, #16
 8013ada:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8013ade:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013ae2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013ae6:	f005 fb13 	bl	8019110 <rmw_time_equal>
 8013aea:	2800      	cmp	r0, #0
 8013aec:	f000 811b 	beq.w	8013d26 <rmw_wait+0x26e>
 8013af0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013af4:	f000 fbe0 	bl	80142b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013af8:	4bad      	ldr	r3, [pc, #692]	@ (8013db0 <rmw_wait+0x2f8>)
 8013afa:	681c      	ldr	r4, [r3, #0]
 8013afc:	b14c      	cbz	r4, 8013b12 <rmw_wait+0x5a>
 8013afe:	4623      	mov	r3, r4
 8013b00:	2100      	movs	r1, #0
 8013b02:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013b06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013b0a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d1f7      	bne.n	8013b02 <rmw_wait+0x4a>
 8013b12:	f1b9 0f00 	cmp.w	r9, #0
 8013b16:	d011      	beq.n	8013b3c <rmw_wait+0x84>
 8013b18:	f8d9 1000 	ldr.w	r1, [r9]
 8013b1c:	b171      	cbz	r1, 8013b3c <rmw_wait+0x84>
 8013b1e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013b22:	2300      	movs	r3, #0
 8013b24:	2001      	movs	r0, #1
 8013b26:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013b2a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013b2c:	6912      	ldr	r2, [r2, #16]
 8013b2e:	3301      	adds	r3, #1
 8013b30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013b34:	4299      	cmp	r1, r3
 8013b36:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013b3a:	d1f4      	bne.n	8013b26 <rmw_wait+0x6e>
 8013b3c:	f1b8 0f00 	cmp.w	r8, #0
 8013b40:	f000 8109 	beq.w	8013d56 <rmw_wait+0x29e>
 8013b44:	f8d8 1000 	ldr.w	r1, [r8]
 8013b48:	2900      	cmp	r1, #0
 8013b4a:	f000 8116 	beq.w	8013d7a <rmw_wait+0x2c2>
 8013b4e:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013b52:	2300      	movs	r3, #0
 8013b54:	2001      	movs	r0, #1
 8013b56:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013b5a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013b5c:	6912      	ldr	r2, [r2, #16]
 8013b5e:	3301      	adds	r3, #1
 8013b60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013b64:	4299      	cmp	r1, r3
 8013b66:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013b6a:	d1f4      	bne.n	8013b56 <rmw_wait+0x9e>
 8013b6c:	2f00      	cmp	r7, #0
 8013b6e:	f000 8114 	beq.w	8013d9a <rmw_wait+0x2e2>
 8013b72:	6839      	ldr	r1, [r7, #0]
 8013b74:	b171      	cbz	r1, 8013b94 <rmw_wait+0xdc>
 8013b76:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	2001      	movs	r0, #1
 8013b7e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013b82:	6a12      	ldr	r2, [r2, #32]
 8013b84:	6912      	ldr	r2, [r2, #16]
 8013b86:	3301      	adds	r3, #1
 8013b88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013b8c:	4299      	cmp	r1, r3
 8013b8e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013b92:	d1f4      	bne.n	8013b7e <rmw_wait+0xc6>
 8013b94:	b344      	cbz	r4, 8013be8 <rmw_wait+0x130>
 8013b96:	4622      	mov	r2, r4
 8013b98:	2300      	movs	r3, #0
 8013b9a:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013b9e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013ba2:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013ba6:	440b      	add	r3, r1
 8013ba8:	b2db      	uxtb	r3, r3
 8013baa:	2a00      	cmp	r2, #0
 8013bac:	d1f5      	bne.n	8013b9a <rmw_wait+0xe2>
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d075      	beq.n	8013c9e <rmw_wait+0x1e6>
 8013bb2:	1c6a      	adds	r2, r5, #1
 8013bb4:	d00d      	beq.n	8013bd2 <rmw_wait+0x11a>
 8013bb6:	ee07 5a90 	vmov	s15, r5
 8013bba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013bbe:	ee07 3a90 	vmov	s15, r3
 8013bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bca:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013bce:	ee17 5a90 	vmov	r5, s15
 8013bd2:	68a0      	ldr	r0, [r4, #8]
 8013bd4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8013bd8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	f040 808a 	bne.w	8013cf6 <rmw_wait+0x23e>
 8013be2:	6864      	ldr	r4, [r4, #4]
 8013be4:	2c00      	cmp	r4, #0
 8013be6:	d1f4      	bne.n	8013bd2 <rmw_wait+0x11a>
 8013be8:	f1b9 0f00 	cmp.w	r9, #0
 8013bec:	f000 80c3 	beq.w	8013d76 <rmw_wait+0x2be>
 8013bf0:	f8d9 5000 	ldr.w	r5, [r9]
 8013bf4:	b185      	cbz	r5, 8013c18 <rmw_wait+0x160>
 8013bf6:	2400      	movs	r4, #0
 8013bf8:	4625      	mov	r5, r4
 8013bfa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013bfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c02:	f000 fb33 	bl	801426c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d06d      	beq.n	8013ce6 <rmw_wait+0x22e>
 8013c0a:	f8d9 3000 	ldr.w	r3, [r9]
 8013c0e:	3401      	adds	r4, #1
 8013c10:	42a3      	cmp	r3, r4
 8013c12:	f04f 0501 	mov.w	r5, #1
 8013c16:	d8f0      	bhi.n	8013bfa <rmw_wait+0x142>
 8013c18:	f1b8 0f00 	cmp.w	r8, #0
 8013c1c:	d012      	beq.n	8013c44 <rmw_wait+0x18c>
 8013c1e:	f8d8 1000 	ldr.w	r1, [r8]
 8013c22:	2400      	movs	r4, #0
 8013c24:	b171      	cbz	r1, 8013c44 <rmw_wait+0x18c>
 8013c26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013c2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c2e:	f000 fb1d 	bl	801426c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013c32:	2800      	cmp	r0, #0
 8013c34:	d047      	beq.n	8013cc6 <rmw_wait+0x20e>
 8013c36:	f8d8 3000 	ldr.w	r3, [r8]
 8013c3a:	3401      	adds	r4, #1
 8013c3c:	42a3      	cmp	r3, r4
 8013c3e:	f04f 0501 	mov.w	r5, #1
 8013c42:	d8f0      	bhi.n	8013c26 <rmw_wait+0x16e>
 8013c44:	b17f      	cbz	r7, 8013c66 <rmw_wait+0x1ae>
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	2400      	movs	r4, #0
 8013c4a:	b163      	cbz	r3, 8013c66 <rmw_wait+0x1ae>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c52:	f000 fb0b 	bl	801426c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013c56:	2800      	cmp	r0, #0
 8013c58:	d03d      	beq.n	8013cd6 <rmw_wait+0x21e>
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	3401      	adds	r4, #1
 8013c5e:	42a3      	cmp	r3, r4
 8013c60:	f04f 0501 	mov.w	r5, #1
 8013c64:	d8f2      	bhi.n	8013c4c <rmw_wait+0x194>
 8013c66:	b1a6      	cbz	r6, 8013c92 <rmw_wait+0x1da>
 8013c68:	6834      	ldr	r4, [r6, #0]
 8013c6a:	b194      	cbz	r4, 8013c92 <rmw_wait+0x1da>
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	461f      	mov	r7, r3
 8013c70:	e004      	b.n	8013c7c <rmw_wait+0x1c4>
 8013c72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013c76:	3301      	adds	r3, #1
 8013c78:	429c      	cmp	r4, r3
 8013c7a:	d00a      	beq.n	8013c92 <rmw_wait+0x1da>
 8013c7c:	6870      	ldr	r0, [r6, #4]
 8013c7e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013c82:	7c0a      	ldrb	r2, [r1, #16]
 8013c84:	2a00      	cmp	r2, #0
 8013c86:	d0f4      	beq.n	8013c72 <rmw_wait+0x1ba>
 8013c88:	3301      	adds	r3, #1
 8013c8a:	429c      	cmp	r4, r3
 8013c8c:	740f      	strb	r7, [r1, #16]
 8013c8e:	4615      	mov	r5, r2
 8013c90:	d1f4      	bne.n	8013c7c <rmw_wait+0x1c4>
 8013c92:	f085 0001 	eor.w	r0, r5, #1
 8013c96:	0040      	lsls	r0, r0, #1
 8013c98:	b009      	add	sp, #36	@ 0x24
 8013c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c9e:	68a0      	ldr	r0, [r4, #8]
 8013ca0:	2100      	movs	r1, #0
 8013ca2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ca6:	f002 f91d 	bl	8015ee4 <uxr_run_session_timeout>
 8013caa:	6864      	ldr	r4, [r4, #4]
 8013cac:	2c00      	cmp	r4, #0
 8013cae:	d1f6      	bne.n	8013c9e <rmw_wait+0x1e6>
 8013cb0:	e79a      	b.n	8013be8 <rmw_wait+0x130>
 8013cb2:	f000 fb01 	bl	80142b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8013db0 <rmw_wait+0x2f8>)
 8013cb8:	681c      	ldr	r4, [r3, #0]
 8013cba:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013cbe:	2c00      	cmp	r4, #0
 8013cc0:	f47f af1d 	bne.w	8013afe <rmw_wait+0x46>
 8013cc4:	e728      	b.n	8013b18 <rmw_wait+0x60>
 8013cc6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013cca:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013cce:	3401      	adds	r4, #1
 8013cd0:	429c      	cmp	r4, r3
 8013cd2:	d3a8      	bcc.n	8013c26 <rmw_wait+0x16e>
 8013cd4:	e7b6      	b.n	8013c44 <rmw_wait+0x18c>
 8013cd6:	e9d7 3200 	ldrd	r3, r2, [r7]
 8013cda:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013cde:	3401      	adds	r4, #1
 8013ce0:	42a3      	cmp	r3, r4
 8013ce2:	d8b3      	bhi.n	8013c4c <rmw_wait+0x194>
 8013ce4:	e7bf      	b.n	8013c66 <rmw_wait+0x1ae>
 8013ce6:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013cea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013cee:	3401      	adds	r4, #1
 8013cf0:	42a3      	cmp	r3, r4
 8013cf2:	d882      	bhi.n	8013bfa <rmw_wait+0x142>
 8013cf4:	e790      	b.n	8013c18 <rmw_wait+0x160>
 8013cf6:	4629      	mov	r1, r5
 8013cf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013cfc:	f002 f90c 	bl	8015f18 <uxr_run_session_until_data>
 8013d00:	6864      	ldr	r4, [r4, #4]
 8013d02:	2c00      	cmp	r4, #0
 8013d04:	f47f af65 	bne.w	8013bd2 <rmw_wait+0x11a>
 8013d08:	e76e      	b.n	8013be8 <rmw_wait+0x130>
 8013d0a:	b1f3      	cbz	r3, 8013d4a <rmw_wait+0x292>
 8013d0c:	2c00      	cmp	r4, #0
 8013d0e:	f47f aee1 	bne.w	8013ad4 <rmw_wait+0x1c>
 8013d12:	f000 fad1 	bl	80142b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013d16:	4b26      	ldr	r3, [pc, #152]	@ (8013db0 <rmw_wait+0x2f8>)
 8013d18:	681c      	ldr	r4, [r3, #0]
 8013d1a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013d1e:	2c00      	cmp	r4, #0
 8013d20:	f47f aeed 	bne.w	8013afe <rmw_wait+0x46>
 8013d24:	e70a      	b.n	8013b3c <rmw_wait+0x84>
 8013d26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013d2a:	f005 fa45 	bl	80191b8 <rmw_time_total_nsec>
 8013d2e:	4a21      	ldr	r2, [pc, #132]	@ (8013db4 <rmw_wait+0x2fc>)
 8013d30:	2300      	movs	r3, #0
 8013d32:	f7ed f937 	bl	8000fa4 <__aeabi_uldivmod>
 8013d36:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8013d3a:	f171 0100 	sbcs.w	r1, r1, #0
 8013d3e:	4605      	mov	r5, r0
 8013d40:	f6ff aed8 	blt.w	8013af4 <rmw_wait+0x3c>
 8013d44:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8013d48:	e6d4      	b.n	8013af4 <rmw_wait+0x3c>
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	d1de      	bne.n	8013d0c <rmw_wait+0x254>
 8013d4e:	2900      	cmp	r1, #0
 8013d50:	d1dc      	bne.n	8013d0c <rmw_wait+0x254>
 8013d52:	4608      	mov	r0, r1
 8013d54:	e7a0      	b.n	8013c98 <rmw_wait+0x1e0>
 8013d56:	2f00      	cmp	r7, #0
 8013d58:	f47f af0b 	bne.w	8013b72 <rmw_wait+0xba>
 8013d5c:	2c00      	cmp	r4, #0
 8013d5e:	f47f af1a 	bne.w	8013b96 <rmw_wait+0xde>
 8013d62:	f1b9 0f00 	cmp.w	r9, #0
 8013d66:	d027      	beq.n	8013db8 <rmw_wait+0x300>
 8013d68:	f8d9 3000 	ldr.w	r3, [r9]
 8013d6c:	4625      	mov	r5, r4
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	f47f af41 	bne.w	8013bf6 <rmw_wait+0x13e>
 8013d74:	e777      	b.n	8013c66 <rmw_wait+0x1ae>
 8013d76:	464d      	mov	r5, r9
 8013d78:	e74e      	b.n	8013c18 <rmw_wait+0x160>
 8013d7a:	2f00      	cmp	r7, #0
 8013d7c:	f47f aef9 	bne.w	8013b72 <rmw_wait+0xba>
 8013d80:	2c00      	cmp	r4, #0
 8013d82:	f47f af08 	bne.w	8013b96 <rmw_wait+0xde>
 8013d86:	f1b9 0f00 	cmp.w	r9, #0
 8013d8a:	d015      	beq.n	8013db8 <rmw_wait+0x300>
 8013d8c:	f8d9 3000 	ldr.w	r3, [r9]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	f47f af30 	bne.w	8013bf6 <rmw_wait+0x13e>
 8013d96:	2500      	movs	r5, #0
 8013d98:	e743      	b.n	8013c22 <rmw_wait+0x16a>
 8013d9a:	2c00      	cmp	r4, #0
 8013d9c:	f47f aefb 	bne.w	8013b96 <rmw_wait+0xde>
 8013da0:	f1b9 0f00 	cmp.w	r9, #0
 8013da4:	f47f af24 	bne.w	8013bf0 <rmw_wait+0x138>
 8013da8:	e7f5      	b.n	8013d96 <rmw_wait+0x2de>
 8013daa:	bf00      	nop
 8013dac:	0801efe0 	.word	0x0801efe0
 8013db0:	20017740 	.word	0x20017740
 8013db4:	000f4240 	.word	0x000f4240
 8013db8:	464d      	mov	r5, r9
 8013dba:	e754      	b.n	8013c66 <rmw_wait+0x1ae>

08013dbc <rmw_create_wait_set>:
 8013dbc:	b508      	push	{r3, lr}
 8013dbe:	4803      	ldr	r0, [pc, #12]	@ (8013dcc <rmw_create_wait_set+0x10>)
 8013dc0:	f005 fb14 	bl	80193ec <get_memory>
 8013dc4:	b108      	cbz	r0, 8013dca <rmw_create_wait_set+0xe>
 8013dc6:	6880      	ldr	r0, [r0, #8]
 8013dc8:	3010      	adds	r0, #16
 8013dca:	bd08      	pop	{r3, pc}
 8013dcc:	20012ef8 	.word	0x20012ef8

08013dd0 <rmw_destroy_wait_set>:
 8013dd0:	b508      	push	{r3, lr}
 8013dd2:	4b08      	ldr	r3, [pc, #32]	@ (8013df4 <rmw_destroy_wait_set+0x24>)
 8013dd4:	6819      	ldr	r1, [r3, #0]
 8013dd6:	b911      	cbnz	r1, 8013dde <rmw_destroy_wait_set+0xe>
 8013dd8:	e00a      	b.n	8013df0 <rmw_destroy_wait_set+0x20>
 8013dda:	6849      	ldr	r1, [r1, #4]
 8013ddc:	b141      	cbz	r1, 8013df0 <rmw_destroy_wait_set+0x20>
 8013dde:	688b      	ldr	r3, [r1, #8]
 8013de0:	3310      	adds	r3, #16
 8013de2:	4298      	cmp	r0, r3
 8013de4:	d1f9      	bne.n	8013dda <rmw_destroy_wait_set+0xa>
 8013de6:	4803      	ldr	r0, [pc, #12]	@ (8013df4 <rmw_destroy_wait_set+0x24>)
 8013de8:	f005 fb10 	bl	801940c <put_memory>
 8013dec:	2000      	movs	r0, #0
 8013dee:	bd08      	pop	{r3, pc}
 8013df0:	2001      	movs	r0, #1
 8013df2:	bd08      	pop	{r3, pc}
 8013df4:	20012ef8 	.word	0x20012ef8

08013df8 <rmw_uxrce_init_service_memory>:
 8013df8:	b1e2      	cbz	r2, 8013e34 <rmw_uxrce_init_service_memory+0x3c>
 8013dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dfe:	7b05      	ldrb	r5, [r0, #12]
 8013e00:	4606      	mov	r6, r0
 8013e02:	b9ad      	cbnz	r5, 8013e30 <rmw_uxrce_init_service_memory+0x38>
 8013e04:	23c8      	movs	r3, #200	@ 0xc8
 8013e06:	e9c0 5500 	strd	r5, r5, [r0]
 8013e0a:	6083      	str	r3, [r0, #8]
 8013e0c:	f240 1301 	movw	r3, #257	@ 0x101
 8013e10:	4617      	mov	r7, r2
 8013e12:	8183      	strh	r3, [r0, #12]
 8013e14:	460c      	mov	r4, r1
 8013e16:	46a8      	mov	r8, r5
 8013e18:	4621      	mov	r1, r4
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	3501      	adds	r5, #1
 8013e1e:	f005 faf5 	bl	801940c <put_memory>
 8013e22:	42af      	cmp	r7, r5
 8013e24:	60a4      	str	r4, [r4, #8]
 8013e26:	f884 800c 	strb.w	r8, [r4, #12]
 8013e2a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8013e2e:	d1f3      	bne.n	8013e18 <rmw_uxrce_init_service_memory+0x20>
 8013e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e34:	4770      	bx	lr
 8013e36:	bf00      	nop

08013e38 <rmw_uxrce_init_client_memory>:
 8013e38:	b1e2      	cbz	r2, 8013e74 <rmw_uxrce_init_client_memory+0x3c>
 8013e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3e:	7b05      	ldrb	r5, [r0, #12]
 8013e40:	4606      	mov	r6, r0
 8013e42:	b9ad      	cbnz	r5, 8013e70 <rmw_uxrce_init_client_memory+0x38>
 8013e44:	23c8      	movs	r3, #200	@ 0xc8
 8013e46:	e9c0 5500 	strd	r5, r5, [r0]
 8013e4a:	6083      	str	r3, [r0, #8]
 8013e4c:	f240 1301 	movw	r3, #257	@ 0x101
 8013e50:	4617      	mov	r7, r2
 8013e52:	8183      	strh	r3, [r0, #12]
 8013e54:	460c      	mov	r4, r1
 8013e56:	46a8      	mov	r8, r5
 8013e58:	4621      	mov	r1, r4
 8013e5a:	4630      	mov	r0, r6
 8013e5c:	3501      	adds	r5, #1
 8013e5e:	f005 fad5 	bl	801940c <put_memory>
 8013e62:	42af      	cmp	r7, r5
 8013e64:	60a4      	str	r4, [r4, #8]
 8013e66:	f884 800c 	strb.w	r8, [r4, #12]
 8013e6a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8013e6e:	d1f3      	bne.n	8013e58 <rmw_uxrce_init_client_memory+0x20>
 8013e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop

08013e78 <rmw_uxrce_init_publisher_memory>:
 8013e78:	b1e2      	cbz	r2, 8013eb4 <rmw_uxrce_init_publisher_memory+0x3c>
 8013e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e7e:	7b05      	ldrb	r5, [r0, #12]
 8013e80:	4606      	mov	r6, r0
 8013e82:	b9ad      	cbnz	r5, 8013eb0 <rmw_uxrce_init_publisher_memory+0x38>
 8013e84:	23d8      	movs	r3, #216	@ 0xd8
 8013e86:	e9c0 5500 	strd	r5, r5, [r0]
 8013e8a:	6083      	str	r3, [r0, #8]
 8013e8c:	f240 1301 	movw	r3, #257	@ 0x101
 8013e90:	4617      	mov	r7, r2
 8013e92:	8183      	strh	r3, [r0, #12]
 8013e94:	460c      	mov	r4, r1
 8013e96:	46a8      	mov	r8, r5
 8013e98:	4621      	mov	r1, r4
 8013e9a:	4630      	mov	r0, r6
 8013e9c:	3501      	adds	r5, #1
 8013e9e:	f005 fab5 	bl	801940c <put_memory>
 8013ea2:	42af      	cmp	r7, r5
 8013ea4:	60a4      	str	r4, [r4, #8]
 8013ea6:	f884 800c 	strb.w	r8, [r4, #12]
 8013eaa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8013eae:	d1f3      	bne.n	8013e98 <rmw_uxrce_init_publisher_memory+0x20>
 8013eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb4:	4770      	bx	lr
 8013eb6:	bf00      	nop

08013eb8 <rmw_uxrce_init_subscription_memory>:
 8013eb8:	b1e2      	cbz	r2, 8013ef4 <rmw_uxrce_init_subscription_memory+0x3c>
 8013eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ebe:	7b05      	ldrb	r5, [r0, #12]
 8013ec0:	4606      	mov	r6, r0
 8013ec2:	b9ad      	cbnz	r5, 8013ef0 <rmw_uxrce_init_subscription_memory+0x38>
 8013ec4:	23d8      	movs	r3, #216	@ 0xd8
 8013ec6:	e9c0 5500 	strd	r5, r5, [r0]
 8013eca:	6083      	str	r3, [r0, #8]
 8013ecc:	f240 1301 	movw	r3, #257	@ 0x101
 8013ed0:	4617      	mov	r7, r2
 8013ed2:	8183      	strh	r3, [r0, #12]
 8013ed4:	460c      	mov	r4, r1
 8013ed6:	46a8      	mov	r8, r5
 8013ed8:	4621      	mov	r1, r4
 8013eda:	4630      	mov	r0, r6
 8013edc:	3501      	adds	r5, #1
 8013ede:	f005 fa95 	bl	801940c <put_memory>
 8013ee2:	42af      	cmp	r7, r5
 8013ee4:	60a4      	str	r4, [r4, #8]
 8013ee6:	f884 800c 	strb.w	r8, [r4, #12]
 8013eea:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8013eee:	d1f3      	bne.n	8013ed8 <rmw_uxrce_init_subscription_memory+0x20>
 8013ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef4:	4770      	bx	lr
 8013ef6:	bf00      	nop

08013ef8 <rmw_uxrce_init_node_memory>:
 8013ef8:	b1e2      	cbz	r2, 8013f34 <rmw_uxrce_init_node_memory+0x3c>
 8013efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013efe:	7b05      	ldrb	r5, [r0, #12]
 8013f00:	4606      	mov	r6, r0
 8013f02:	b9ad      	cbnz	r5, 8013f30 <rmw_uxrce_init_node_memory+0x38>
 8013f04:	23a4      	movs	r3, #164	@ 0xa4
 8013f06:	e9c0 5500 	strd	r5, r5, [r0]
 8013f0a:	6083      	str	r3, [r0, #8]
 8013f0c:	f240 1301 	movw	r3, #257	@ 0x101
 8013f10:	4617      	mov	r7, r2
 8013f12:	8183      	strh	r3, [r0, #12]
 8013f14:	460c      	mov	r4, r1
 8013f16:	46a8      	mov	r8, r5
 8013f18:	4621      	mov	r1, r4
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	3501      	adds	r5, #1
 8013f1e:	f005 fa75 	bl	801940c <put_memory>
 8013f22:	42af      	cmp	r7, r5
 8013f24:	60a4      	str	r4, [r4, #8]
 8013f26:	f884 800c 	strb.w	r8, [r4, #12]
 8013f2a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8013f2e:	d1f3      	bne.n	8013f18 <rmw_uxrce_init_node_memory+0x20>
 8013f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop

08013f38 <rmw_uxrce_init_session_memory>:
 8013f38:	b1ea      	cbz	r2, 8013f76 <rmw_uxrce_init_session_memory+0x3e>
 8013f3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f3e:	7b05      	ldrb	r5, [r0, #12]
 8013f40:	4606      	mov	r6, r0
 8013f42:	b9b5      	cbnz	r5, 8013f72 <rmw_uxrce_init_session_memory+0x3a>
 8013f44:	e9c0 5500 	strd	r5, r5, [r0]
 8013f48:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8013f4c:	f240 1301 	movw	r3, #257	@ 0x101
 8013f50:	4617      	mov	r7, r2
 8013f52:	f8c0 8008 	str.w	r8, [r0, #8]
 8013f56:	460c      	mov	r4, r1
 8013f58:	8183      	strh	r3, [r0, #12]
 8013f5a:	46a9      	mov	r9, r5
 8013f5c:	4621      	mov	r1, r4
 8013f5e:	4630      	mov	r0, r6
 8013f60:	3501      	adds	r5, #1
 8013f62:	f005 fa53 	bl	801940c <put_memory>
 8013f66:	42af      	cmp	r7, r5
 8013f68:	60a4      	str	r4, [r4, #8]
 8013f6a:	f884 900c 	strb.w	r9, [r4, #12]
 8013f6e:	4444      	add	r4, r8
 8013f70:	d1f4      	bne.n	8013f5c <rmw_uxrce_init_session_memory+0x24>
 8013f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f76:	4770      	bx	lr

08013f78 <rmw_uxrce_init_topic_memory>:
 8013f78:	b1e2      	cbz	r2, 8013fb4 <rmw_uxrce_init_topic_memory+0x3c>
 8013f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f7e:	7b05      	ldrb	r5, [r0, #12]
 8013f80:	4606      	mov	r6, r0
 8013f82:	b9ad      	cbnz	r5, 8013fb0 <rmw_uxrce_init_topic_memory+0x38>
 8013f84:	231c      	movs	r3, #28
 8013f86:	e9c0 5500 	strd	r5, r5, [r0]
 8013f8a:	6083      	str	r3, [r0, #8]
 8013f8c:	f240 1301 	movw	r3, #257	@ 0x101
 8013f90:	4617      	mov	r7, r2
 8013f92:	8183      	strh	r3, [r0, #12]
 8013f94:	460c      	mov	r4, r1
 8013f96:	46a8      	mov	r8, r5
 8013f98:	4621      	mov	r1, r4
 8013f9a:	4630      	mov	r0, r6
 8013f9c:	3501      	adds	r5, #1
 8013f9e:	f005 fa35 	bl	801940c <put_memory>
 8013fa2:	42af      	cmp	r7, r5
 8013fa4:	60a4      	str	r4, [r4, #8]
 8013fa6:	f884 800c 	strb.w	r8, [r4, #12]
 8013faa:	f104 041c 	add.w	r4, r4, #28
 8013fae:	d1f3      	bne.n	8013f98 <rmw_uxrce_init_topic_memory+0x20>
 8013fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb4:	4770      	bx	lr
 8013fb6:	bf00      	nop

08013fb8 <rmw_uxrce_init_static_input_buffer_memory>:
 8013fb8:	b1ea      	cbz	r2, 8013ff6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8013fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fbe:	7b05      	ldrb	r5, [r0, #12]
 8013fc0:	4606      	mov	r6, r0
 8013fc2:	b9b5      	cbnz	r5, 8013ff2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8013fc4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8013fc8:	e9c0 5500 	strd	r5, r5, [r0]
 8013fcc:	6083      	str	r3, [r0, #8]
 8013fce:	f240 1301 	movw	r3, #257	@ 0x101
 8013fd2:	4617      	mov	r7, r2
 8013fd4:	8183      	strh	r3, [r0, #12]
 8013fd6:	460c      	mov	r4, r1
 8013fd8:	46a8      	mov	r8, r5
 8013fda:	4621      	mov	r1, r4
 8013fdc:	4630      	mov	r0, r6
 8013fde:	3501      	adds	r5, #1
 8013fe0:	f005 fa14 	bl	801940c <put_memory>
 8013fe4:	42af      	cmp	r7, r5
 8013fe6:	60a4      	str	r4, [r4, #8]
 8013fe8:	f884 800c 	strb.w	r8, [r4, #12]
 8013fec:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8013ff0:	d1f3      	bne.n	8013fda <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8013ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ff6:	4770      	bx	lr

08013ff8 <rmw_uxrce_init_init_options_impl_memory>:
 8013ff8:	b1e2      	cbz	r2, 8014034 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8013ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ffe:	7b05      	ldrb	r5, [r0, #12]
 8014000:	4606      	mov	r6, r0
 8014002:	b9ad      	cbnz	r5, 8014030 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8014004:	232c      	movs	r3, #44	@ 0x2c
 8014006:	e9c0 5500 	strd	r5, r5, [r0]
 801400a:	6083      	str	r3, [r0, #8]
 801400c:	f240 1301 	movw	r3, #257	@ 0x101
 8014010:	4617      	mov	r7, r2
 8014012:	8183      	strh	r3, [r0, #12]
 8014014:	460c      	mov	r4, r1
 8014016:	46a8      	mov	r8, r5
 8014018:	4621      	mov	r1, r4
 801401a:	4630      	mov	r0, r6
 801401c:	3501      	adds	r5, #1
 801401e:	f005 f9f5 	bl	801940c <put_memory>
 8014022:	42af      	cmp	r7, r5
 8014024:	60a4      	str	r4, [r4, #8]
 8014026:	f884 800c 	strb.w	r8, [r4, #12]
 801402a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801402e:	d1f3      	bne.n	8014018 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8014030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014034:	4770      	bx	lr
 8014036:	bf00      	nop

08014038 <rmw_uxrce_init_wait_set_memory>:
 8014038:	b1e2      	cbz	r2, 8014074 <rmw_uxrce_init_wait_set_memory+0x3c>
 801403a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801403e:	7b05      	ldrb	r5, [r0, #12]
 8014040:	4606      	mov	r6, r0
 8014042:	b9ad      	cbnz	r5, 8014070 <rmw_uxrce_init_wait_set_memory+0x38>
 8014044:	231c      	movs	r3, #28
 8014046:	e9c0 5500 	strd	r5, r5, [r0]
 801404a:	6083      	str	r3, [r0, #8]
 801404c:	f240 1301 	movw	r3, #257	@ 0x101
 8014050:	4617      	mov	r7, r2
 8014052:	8183      	strh	r3, [r0, #12]
 8014054:	460c      	mov	r4, r1
 8014056:	46a8      	mov	r8, r5
 8014058:	4621      	mov	r1, r4
 801405a:	4630      	mov	r0, r6
 801405c:	3501      	adds	r5, #1
 801405e:	f005 f9d5 	bl	801940c <put_memory>
 8014062:	42af      	cmp	r7, r5
 8014064:	60a4      	str	r4, [r4, #8]
 8014066:	f884 800c 	strb.w	r8, [r4, #12]
 801406a:	f104 041c 	add.w	r4, r4, #28
 801406e:	d1f3      	bne.n	8014058 <rmw_uxrce_init_wait_set_memory+0x20>
 8014070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014074:	4770      	bx	lr
 8014076:	bf00      	nop

08014078 <rmw_uxrce_init_guard_condition_memory>:
 8014078:	b1e2      	cbz	r2, 80140b4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801407a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801407e:	7b05      	ldrb	r5, [r0, #12]
 8014080:	4606      	mov	r6, r0
 8014082:	b9ad      	cbnz	r5, 80140b0 <rmw_uxrce_init_guard_condition_memory+0x38>
 8014084:	2320      	movs	r3, #32
 8014086:	e9c0 5500 	strd	r5, r5, [r0]
 801408a:	6083      	str	r3, [r0, #8]
 801408c:	f240 1301 	movw	r3, #257	@ 0x101
 8014090:	4617      	mov	r7, r2
 8014092:	8183      	strh	r3, [r0, #12]
 8014094:	460c      	mov	r4, r1
 8014096:	46a8      	mov	r8, r5
 8014098:	4621      	mov	r1, r4
 801409a:	4630      	mov	r0, r6
 801409c:	3501      	adds	r5, #1
 801409e:	f005 f9b5 	bl	801940c <put_memory>
 80140a2:	42af      	cmp	r7, r5
 80140a4:	60a4      	str	r4, [r4, #8]
 80140a6:	f884 800c 	strb.w	r8, [r4, #12]
 80140aa:	f104 0420 	add.w	r4, r4, #32
 80140ae:	d1f3      	bne.n	8014098 <rmw_uxrce_init_guard_condition_memory+0x20>
 80140b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop

080140b8 <rmw_uxrce_fini_session_memory>:
 80140b8:	4601      	mov	r1, r0
 80140ba:	4801      	ldr	r0, [pc, #4]	@ (80140c0 <rmw_uxrce_fini_session_memory+0x8>)
 80140bc:	f005 b9a6 	b.w	801940c <put_memory>
 80140c0:	20017740 	.word	0x20017740

080140c4 <rmw_uxrce_fini_node_memory>:
 80140c4:	b538      	push	{r3, r4, r5, lr}
 80140c6:	4604      	mov	r4, r0
 80140c8:	6800      	ldr	r0, [r0, #0]
 80140ca:	b128      	cbz	r0, 80140d8 <rmw_uxrce_fini_node_memory+0x14>
 80140cc:	4b07      	ldr	r3, [pc, #28]	@ (80140ec <rmw_uxrce_fini_node_memory+0x28>)
 80140ce:	6819      	ldr	r1, [r3, #0]
 80140d0:	f7ec f89e 	bl	8000210 <strcmp>
 80140d4:	b940      	cbnz	r0, 80140e8 <rmw_uxrce_fini_node_memory+0x24>
 80140d6:	6020      	str	r0, [r4, #0]
 80140d8:	6861      	ldr	r1, [r4, #4]
 80140da:	b129      	cbz	r1, 80140e8 <rmw_uxrce_fini_node_memory+0x24>
 80140dc:	2500      	movs	r5, #0
 80140de:	4804      	ldr	r0, [pc, #16]	@ (80140f0 <rmw_uxrce_fini_node_memory+0x2c>)
 80140e0:	610d      	str	r5, [r1, #16]
 80140e2:	f005 f993 	bl	801940c <put_memory>
 80140e6:	6065      	str	r5, [r4, #4]
 80140e8:	bd38      	pop	{r3, r4, r5, pc}
 80140ea:	bf00      	nop
 80140ec:	08020170 	.word	0x08020170
 80140f0:	20016184 	.word	0x20016184

080140f4 <rmw_uxrce_fini_publisher_memory>:
 80140f4:	b510      	push	{r4, lr}
 80140f6:	4604      	mov	r4, r0
 80140f8:	6800      	ldr	r0, [r0, #0]
 80140fa:	b128      	cbz	r0, 8014108 <rmw_uxrce_fini_publisher_memory+0x14>
 80140fc:	4b06      	ldr	r3, [pc, #24]	@ (8014118 <rmw_uxrce_fini_publisher_memory+0x24>)
 80140fe:	6819      	ldr	r1, [r3, #0]
 8014100:	f7ec f886 	bl	8000210 <strcmp>
 8014104:	b938      	cbnz	r0, 8014116 <rmw_uxrce_fini_publisher_memory+0x22>
 8014106:	6020      	str	r0, [r4, #0]
 8014108:	6861      	ldr	r1, [r4, #4]
 801410a:	b121      	cbz	r1, 8014116 <rmw_uxrce_fini_publisher_memory+0x22>
 801410c:	4803      	ldr	r0, [pc, #12]	@ (801411c <rmw_uxrce_fini_publisher_memory+0x28>)
 801410e:	f005 f97d 	bl	801940c <put_memory>
 8014112:	2300      	movs	r3, #0
 8014114:	6063      	str	r3, [r4, #4]
 8014116:	bd10      	pop	{r4, pc}
 8014118:	08020170 	.word	0x08020170
 801411c:	200160d0 	.word	0x200160d0

08014120 <rmw_uxrce_fini_subscription_memory>:
 8014120:	b510      	push	{r4, lr}
 8014122:	4604      	mov	r4, r0
 8014124:	6800      	ldr	r0, [r0, #0]
 8014126:	b128      	cbz	r0, 8014134 <rmw_uxrce_fini_subscription_memory+0x14>
 8014128:	4b06      	ldr	r3, [pc, #24]	@ (8014144 <rmw_uxrce_fini_subscription_memory+0x24>)
 801412a:	6819      	ldr	r1, [r3, #0]
 801412c:	f7ec f870 	bl	8000210 <strcmp>
 8014130:	b938      	cbnz	r0, 8014142 <rmw_uxrce_fini_subscription_memory+0x22>
 8014132:	6020      	str	r0, [r4, #0]
 8014134:	6861      	ldr	r1, [r4, #4]
 8014136:	b121      	cbz	r1, 8014142 <rmw_uxrce_fini_subscription_memory+0x22>
 8014138:	4803      	ldr	r0, [pc, #12]	@ (8014148 <rmw_uxrce_fini_subscription_memory+0x28>)
 801413a:	f005 f967 	bl	801940c <put_memory>
 801413e:	2300      	movs	r3, #0
 8014140:	6063      	str	r3, [r4, #4]
 8014142:	bd10      	pop	{r4, pc}
 8014144:	08020170 	.word	0x08020170
 8014148:	20015850 	.word	0x20015850

0801414c <rmw_uxrce_fini_service_memory>:
 801414c:	b510      	push	{r4, lr}
 801414e:	4604      	mov	r4, r0
 8014150:	6800      	ldr	r0, [r0, #0]
 8014152:	b128      	cbz	r0, 8014160 <rmw_uxrce_fini_service_memory+0x14>
 8014154:	4b06      	ldr	r3, [pc, #24]	@ (8014170 <rmw_uxrce_fini_service_memory+0x24>)
 8014156:	6819      	ldr	r1, [r3, #0]
 8014158:	f7ec f85a 	bl	8000210 <strcmp>
 801415c:	b938      	cbnz	r0, 801416e <rmw_uxrce_fini_service_memory+0x22>
 801415e:	6020      	str	r0, [r4, #0]
 8014160:	6861      	ldr	r1, [r4, #4]
 8014162:	b121      	cbz	r1, 801416e <rmw_uxrce_fini_service_memory+0x22>
 8014164:	4803      	ldr	r0, [pc, #12]	@ (8014174 <rmw_uxrce_fini_service_memory+0x28>)
 8014166:	f005 f951 	bl	801940c <put_memory>
 801416a:	2300      	movs	r3, #0
 801416c:	6063      	str	r3, [r4, #4]
 801416e:	bd10      	pop	{r4, pc}
 8014170:	08020170 	.word	0x08020170
 8014174:	20015408 	.word	0x20015408

08014178 <rmw_uxrce_fini_client_memory>:
 8014178:	b510      	push	{r4, lr}
 801417a:	4604      	mov	r4, r0
 801417c:	6800      	ldr	r0, [r0, #0]
 801417e:	b128      	cbz	r0, 801418c <rmw_uxrce_fini_client_memory+0x14>
 8014180:	4b06      	ldr	r3, [pc, #24]	@ (801419c <rmw_uxrce_fini_client_memory+0x24>)
 8014182:	6819      	ldr	r1, [r3, #0]
 8014184:	f7ec f844 	bl	8000210 <strcmp>
 8014188:	b938      	cbnz	r0, 801419a <rmw_uxrce_fini_client_memory+0x22>
 801418a:	6020      	str	r0, [r4, #0]
 801418c:	6861      	ldr	r1, [r4, #4]
 801418e:	b121      	cbz	r1, 801419a <rmw_uxrce_fini_client_memory+0x22>
 8014190:	4803      	ldr	r0, [pc, #12]	@ (80141a0 <rmw_uxrce_fini_client_memory+0x28>)
 8014192:	f005 f93b 	bl	801940c <put_memory>
 8014196:	2300      	movs	r3, #0
 8014198:	6063      	str	r3, [r4, #4]
 801419a:	bd10      	pop	{r4, pc}
 801419c:	08020170 	.word	0x08020170
 80141a0:	20015330 	.word	0x20015330

080141a4 <rmw_uxrce_fini_topic_memory>:
 80141a4:	b510      	push	{r4, lr}
 80141a6:	4604      	mov	r4, r0
 80141a8:	4621      	mov	r1, r4
 80141aa:	4803      	ldr	r0, [pc, #12]	@ (80141b8 <rmw_uxrce_fini_topic_memory+0x14>)
 80141ac:	f005 f92e 	bl	801940c <put_memory>
 80141b0:	2300      	movs	r3, #0
 80141b2:	61a3      	str	r3, [r4, #24]
 80141b4:	bd10      	pop	{r4, pc}
 80141b6:	bf00      	nop
 80141b8:	20015254 	.word	0x20015254

080141bc <rmw_uxrce_get_static_input_buffer_for_entity>:
 80141bc:	b082      	sub	sp, #8
 80141be:	b530      	push	{r4, r5, lr}
 80141c0:	4929      	ldr	r1, [pc, #164]	@ (8014268 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 80141c2:	ac03      	add	r4, sp, #12
 80141c4:	e884 000c 	stmia.w	r4, {r2, r3}
 80141c8:	680c      	ldr	r4, [r1, #0]
 80141ca:	461d      	mov	r5, r3
 80141cc:	4602      	mov	r2, r0
 80141ce:	2c00      	cmp	r4, #0
 80141d0:	d043      	beq.n	801425a <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 80141d2:	4620      	mov	r0, r4
 80141d4:	2100      	movs	r1, #0
 80141d6:	6883      	ldr	r3, [r0, #8]
 80141d8:	6840      	ldr	r0, [r0, #4]
 80141da:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 80141de:	429a      	cmp	r2, r3
 80141e0:	bf08      	it	eq
 80141e2:	3101      	addeq	r1, #1
 80141e4:	2800      	cmp	r0, #0
 80141e6:	d1f6      	bne.n	80141d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 80141e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80141ec:	2b02      	cmp	r3, #2
 80141ee:	d027      	beq.n	8014240 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 80141f0:	d906      	bls.n	8014200 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80141f2:	2b03      	cmp	r3, #3
 80141f4:	d004      	beq.n	8014200 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80141f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141fa:	2000      	movs	r0, #0
 80141fc:	b002      	add	sp, #8
 80141fe:	4770      	bx	lr
 8014200:	b1fd      	cbz	r5, 8014242 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8014202:	428d      	cmp	r5, r1
 8014204:	d81d      	bhi.n	8014242 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8014206:	2c00      	cmp	r4, #0
 8014208:	d0f5      	beq.n	80141f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801420a:	2000      	movs	r0, #0
 801420c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014210:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8014214:	e001      	b.n	801421a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8014216:	6864      	ldr	r4, [r4, #4]
 8014218:	b1dc      	cbz	r4, 8014252 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801421a:	68a3      	ldr	r3, [r4, #8]
 801421c:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8014220:	428a      	cmp	r2, r1
 8014222:	d1f8      	bne.n	8014216 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014224:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8014228:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801422c:	4561      	cmp	r1, ip
 801422e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014232:	eb73 0e05 	sbcs.w	lr, r3, r5
 8014236:	daee      	bge.n	8014216 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014238:	468c      	mov	ip, r1
 801423a:	461d      	mov	r5, r3
 801423c:	4620      	mov	r0, r4
 801423e:	e7ea      	b.n	8014216 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014240:	b92d      	cbnz	r5, 801424e <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 8014242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014246:	4808      	ldr	r0, [pc, #32]	@ (8014268 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 8014248:	b002      	add	sp, #8
 801424a:	f005 b8cf 	b.w	80193ec <get_memory>
 801424e:	428d      	cmp	r5, r1
 8014250:	d8f7      	bhi.n	8014242 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8014252:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014256:	b002      	add	sp, #8
 8014258:	4770      	bx	lr
 801425a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801425e:	2b02      	cmp	r3, #2
 8014260:	d0ef      	beq.n	8014242 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8014262:	d9ee      	bls.n	8014242 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8014264:	4621      	mov	r1, r4
 8014266:	e7c4      	b.n	80141f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 8014268:	200150a0 	.word	0x200150a0

0801426c <rmw_uxrce_find_static_input_buffer_by_owner>:
 801426c:	4b11      	ldr	r3, [pc, #68]	@ (80142b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	b1eb      	cbz	r3, 80142ae <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8014272:	b530      	push	{r4, r5, lr}
 8014274:	4684      	mov	ip, r0
 8014276:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801427a:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 801427e:	2000      	movs	r0, #0
 8014280:	e001      	b.n	8014286 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	b193      	cbz	r3, 80142ac <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 8014286:	689a      	ldr	r2, [r3, #8]
 8014288:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801428c:	458c      	cmp	ip, r1
 801428e:	d1f8      	bne.n	8014282 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8014290:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8014294:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8014298:	42a1      	cmp	r1, r4
 801429a:	eb72 050e 	sbcs.w	r5, r2, lr
 801429e:	daf0      	bge.n	8014282 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80142a0:	4618      	mov	r0, r3
 80142a2:	685b      	ldr	r3, [r3, #4]
 80142a4:	460c      	mov	r4, r1
 80142a6:	4696      	mov	lr, r2
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d1ec      	bne.n	8014286 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80142ac:	bd30      	pop	{r4, r5, pc}
 80142ae:	4618      	mov	r0, r3
 80142b0:	4770      	bx	lr
 80142b2:	bf00      	nop
 80142b4:	200150a0 	.word	0x200150a0

080142b8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80142b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142bc:	4b3c      	ldr	r3, [pc, #240]	@ (80143b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80142be:	ed2d 8b06 	vpush	{d8-d10}
 80142c2:	f8d3 8000 	ldr.w	r8, [r3]
 80142c6:	b08d      	sub	sp, #52	@ 0x34
 80142c8:	f005 f952 	bl	8019570 <rmw_uros_epoch_nanos>
 80142cc:	f1b8 0f00 	cmp.w	r8, #0
 80142d0:	d05c      	beq.n	801438c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 80142d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80142d6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80142da:	2b04      	cmp	r3, #4
 80142dc:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 8014398 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80142e0:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 80143a0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80142e4:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 80143a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80142e8:	4683      	mov	fp, r0
 80142ea:	ac04      	add	r4, sp, #16
 80142ec:	468a      	mov	sl, r1
 80142ee:	d03f      	beq.n	8014370 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 80142f0:	2b05      	cmp	r3, #5
 80142f2:	d044      	beq.n	801437e <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 80142f4:	2b03      	cmp	r3, #3
 80142f6:	d03b      	beq.n	8014370 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 80142f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80142fc:	ed8d ab06 	vstr	d10, [sp, #24]
 8014300:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014304:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8014308:	ab08      	add	r3, sp, #32
 801430a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801430c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014310:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014314:	f004 fefc 	bl	8019110 <rmw_time_equal>
 8014318:	b118      	cbz	r0, 8014322 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 801431a:	ed8d 9b04 	vstr	d9, [sp, #16]
 801431e:	ed8d 8b06 	vstr	d8, [sp, #24]
 8014322:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014326:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 801432a:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 801432e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8014332:	f004 ff41 	bl	80191b8 <rmw_time_total_nsec>
 8014336:	183f      	adds	r7, r7, r0
 8014338:	eb46 0601 	adc.w	r6, r6, r1
 801433c:	455f      	cmp	r7, fp
 801433e:	eb76 060a 	sbcs.w	r6, r6, sl
 8014342:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8014346:	db05      	blt.n	8014354 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 8014348:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801434c:	4593      	cmp	fp, r2
 801434e:	eb7a 0303 	sbcs.w	r3, sl, r3
 8014352:	da03      	bge.n	801435c <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 8014354:	4816      	ldr	r0, [pc, #88]	@ (80143b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8014356:	4641      	mov	r1, r8
 8014358:	f005 f858 	bl	801940c <put_memory>
 801435c:	f1b9 0f00 	cmp.w	r9, #0
 8014360:	d014      	beq.n	801438c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 8014362:	46c8      	mov	r8, r9
 8014364:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014368:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801436c:	2b04      	cmp	r3, #4
 801436e:	d1bf      	bne.n	80142f0 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 8014370:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014374:	3340      	adds	r3, #64	@ 0x40
 8014376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801437c:	e7c0      	b.n	8014300 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 801437e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014382:	3348      	adds	r3, #72	@ 0x48
 8014384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801438a:	e7b9      	b.n	8014300 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 801438c:	b00d      	add	sp, #52	@ 0x34
 801438e:	ecbd 8b06 	vpop	{d8-d10}
 8014392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014396:	bf00      	nop
	...
 80143a0:	00000001 	.word	0x00000001
 80143a4:	00000000 	.word	0x00000000
 80143a8:	0000001e 	.word	0x0000001e
 80143ac:	00000000 	.word	0x00000000
 80143b0:	200150a0 	.word	0x200150a0

080143b4 <run_xrce_session>:
 80143b4:	b500      	push	{lr}
 80143b6:	f891 c002 	ldrb.w	ip, [r1, #2]
 80143ba:	b087      	sub	sp, #28
 80143bc:	f1bc 0f01 	cmp.w	ip, #1
 80143c0:	f8ad 200e 	strh.w	r2, [sp, #14]
 80143c4:	d00f      	beq.n	80143e6 <run_xrce_session+0x32>
 80143c6:	4619      	mov	r1, r3
 80143c8:	2301      	movs	r3, #1
 80143ca:	9300      	str	r3, [sp, #0]
 80143cc:	f10d 020e 	add.w	r2, sp, #14
 80143d0:	f10d 0317 	add.w	r3, sp, #23
 80143d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80143d8:	f001 fde4 	bl	8015fa4 <uxr_run_session_until_all_status>
 80143dc:	b100      	cbz	r0, 80143e0 <run_xrce_session+0x2c>
 80143de:	2001      	movs	r0, #1
 80143e0:	b007      	add	sp, #28
 80143e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80143e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80143ea:	f001 fa1d 	bl	8015828 <uxr_flash_output_streams>
 80143ee:	2001      	movs	r0, #1
 80143f0:	e7f6      	b.n	80143e0 <run_xrce_session+0x2c>
 80143f2:	bf00      	nop

080143f4 <convert_qos_profile>:
 80143f4:	780a      	ldrb	r2, [r1, #0]
 80143f6:	f891 c008 	ldrb.w	ip, [r1, #8]
 80143fa:	f1a2 0202 	sub.w	r2, r2, #2
 80143fe:	fab2 f282 	clz	r2, r2
 8014402:	0952      	lsrs	r2, r2, #5
 8014404:	7082      	strb	r2, [r0, #2]
 8014406:	7a4a      	ldrb	r2, [r1, #9]
 8014408:	8889      	ldrh	r1, [r1, #4]
 801440a:	8081      	strh	r1, [r0, #4]
 801440c:	f1a2 0202 	sub.w	r2, r2, #2
 8014410:	f1ac 0c02 	sub.w	ip, ip, #2
 8014414:	fab2 f282 	clz	r2, r2
 8014418:	fabc fc8c 	clz	ip, ip
 801441c:	0952      	lsrs	r2, r2, #5
 801441e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014422:	0052      	lsls	r2, r2, #1
 8014424:	f880 c001 	strb.w	ip, [r0, #1]
 8014428:	7002      	strb	r2, [r0, #0]
 801442a:	4770      	bx	lr

0801442c <generate_type_name>:
 801442c:	b530      	push	{r4, r5, lr}
 801442e:	2300      	movs	r3, #0
 8014430:	700b      	strb	r3, [r1, #0]
 8014432:	6803      	ldr	r3, [r0, #0]
 8014434:	b087      	sub	sp, #28
 8014436:	4614      	mov	r4, r2
 8014438:	b1d3      	cbz	r3, 8014470 <generate_type_name+0x44>
 801443a:	4a0f      	ldr	r2, [pc, #60]	@ (8014478 <generate_type_name+0x4c>)
 801443c:	4615      	mov	r5, r2
 801443e:	9203      	str	r2, [sp, #12]
 8014440:	9500      	str	r5, [sp, #0]
 8014442:	6842      	ldr	r2, [r0, #4]
 8014444:	480d      	ldr	r0, [pc, #52]	@ (801447c <generate_type_name+0x50>)
 8014446:	9001      	str	r0, [sp, #4]
 8014448:	4608      	mov	r0, r1
 801444a:	490d      	ldr	r1, [pc, #52]	@ (8014480 <generate_type_name+0x54>)
 801444c:	9204      	str	r2, [sp, #16]
 801444e:	9105      	str	r1, [sp, #20]
 8014450:	9102      	str	r1, [sp, #8]
 8014452:	4a0c      	ldr	r2, [pc, #48]	@ (8014484 <generate_type_name+0x58>)
 8014454:	4621      	mov	r1, r4
 8014456:	f007 f8a3 	bl	801b5a0 <sniprintf>
 801445a:	2800      	cmp	r0, #0
 801445c:	db05      	blt.n	801446a <generate_type_name+0x3e>
 801445e:	4284      	cmp	r4, r0
 8014460:	bfd4      	ite	le
 8014462:	2000      	movle	r0, #0
 8014464:	2001      	movgt	r0, #1
 8014466:	b007      	add	sp, #28
 8014468:	bd30      	pop	{r4, r5, pc}
 801446a:	2000      	movs	r0, #0
 801446c:	b007      	add	sp, #28
 801446e:	bd30      	pop	{r4, r5, pc}
 8014470:	4b05      	ldr	r3, [pc, #20]	@ (8014488 <generate_type_name+0x5c>)
 8014472:	4a01      	ldr	r2, [pc, #4]	@ (8014478 <generate_type_name+0x4c>)
 8014474:	461d      	mov	r5, r3
 8014476:	e7e2      	b.n	801443e <generate_type_name+0x12>
 8014478:	0801fc0c 	.word	0x0801fc0c
 801447c:	0801fc24 	.word	0x0801fc24
 8014480:	0801fc20 	.word	0x0801fc20
 8014484:	0801fc10 	.word	0x0801fc10
 8014488:	080201c0 	.word	0x080201c0

0801448c <generate_topic_name>:
 801448c:	b510      	push	{r4, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	4614      	mov	r4, r2
 8014492:	9000      	str	r0, [sp, #0]
 8014494:	4b08      	ldr	r3, [pc, #32]	@ (80144b8 <generate_topic_name+0x2c>)
 8014496:	4a09      	ldr	r2, [pc, #36]	@ (80144bc <generate_topic_name+0x30>)
 8014498:	4608      	mov	r0, r1
 801449a:	4621      	mov	r1, r4
 801449c:	f007 f880 	bl	801b5a0 <sniprintf>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	db05      	blt.n	80144b0 <generate_topic_name+0x24>
 80144a4:	4284      	cmp	r4, r0
 80144a6:	bfd4      	ite	le
 80144a8:	2000      	movle	r0, #0
 80144aa:	2001      	movgt	r0, #1
 80144ac:	b002      	add	sp, #8
 80144ae:	bd10      	pop	{r4, pc}
 80144b0:	2000      	movs	r0, #0
 80144b2:	b002      	add	sp, #8
 80144b4:	bd10      	pop	{r4, pc}
 80144b6:	bf00      	nop
 80144b8:	0801fc28 	.word	0x0801fc28
 80144bc:	0801f618 	.word	0x0801f618

080144c0 <is_uxrce_rmw_identifier_valid>:
 80144c0:	b510      	push	{r4, lr}
 80144c2:	4604      	mov	r4, r0
 80144c4:	b140      	cbz	r0, 80144d8 <is_uxrce_rmw_identifier_valid+0x18>
 80144c6:	f7fe fabf 	bl	8012a48 <rmw_get_implementation_identifier>
 80144ca:	4601      	mov	r1, r0
 80144cc:	4620      	mov	r0, r4
 80144ce:	f7eb fe9f 	bl	8000210 <strcmp>
 80144d2:	fab0 f080 	clz	r0, r0
 80144d6:	0940      	lsrs	r0, r0, #5
 80144d8:	bd10      	pop	{r4, pc}
 80144da:	bf00      	nop

080144dc <get_message_typesupport_handle>:
 80144dc:	6883      	ldr	r3, [r0, #8]
 80144de:	4718      	bx	r3

080144e0 <get_message_typesupport_handle_function>:
 80144e0:	b510      	push	{r4, lr}
 80144e2:	4604      	mov	r4, r0
 80144e4:	6800      	ldr	r0, [r0, #0]
 80144e6:	f7eb fe93 	bl	8000210 <strcmp>
 80144ea:	2800      	cmp	r0, #0
 80144ec:	bf0c      	ite	eq
 80144ee:	4620      	moveq	r0, r4
 80144f0:	2000      	movne	r0, #0
 80144f2:	bd10      	pop	{r4, pc}

080144f4 <rosidl_runtime_c__float__Sequence__init>:
 80144f4:	b1b0      	cbz	r0, 8014524 <rosidl_runtime_c__float__Sequence__init+0x30>
 80144f6:	b530      	push	{r4, r5, lr}
 80144f8:	460d      	mov	r5, r1
 80144fa:	b087      	sub	sp, #28
 80144fc:	4604      	mov	r4, r0
 80144fe:	b931      	cbnz	r1, 801450e <rosidl_runtime_c__float__Sequence__init+0x1a>
 8014500:	4608      	mov	r0, r1
 8014502:	e9c4 0500 	strd	r0, r5, [r4]
 8014506:	60a5      	str	r5, [r4, #8]
 8014508:	2001      	movs	r0, #1
 801450a:	b007      	add	sp, #28
 801450c:	bd30      	pop	{r4, r5, pc}
 801450e:	a801      	add	r0, sp, #4
 8014510:	f7f8 feba 	bl	800d288 <rcutils_get_default_allocator>
 8014514:	9b01      	ldr	r3, [sp, #4]
 8014516:	9905      	ldr	r1, [sp, #20]
 8014518:	00a8      	lsls	r0, r5, #2
 801451a:	4798      	blx	r3
 801451c:	2800      	cmp	r0, #0
 801451e:	d1f0      	bne.n	8014502 <rosidl_runtime_c__float__Sequence__init+0xe>
 8014520:	2000      	movs	r0, #0
 8014522:	e7f2      	b.n	801450a <rosidl_runtime_c__float__Sequence__init+0x16>
 8014524:	2000      	movs	r0, #0
 8014526:	4770      	bx	lr

08014528 <rosidl_runtime_c__float__Sequence__fini>:
 8014528:	b188      	cbz	r0, 801454e <rosidl_runtime_c__float__Sequence__fini+0x26>
 801452a:	b510      	push	{r4, lr}
 801452c:	6803      	ldr	r3, [r0, #0]
 801452e:	b086      	sub	sp, #24
 8014530:	4604      	mov	r4, r0
 8014532:	b153      	cbz	r3, 801454a <rosidl_runtime_c__float__Sequence__fini+0x22>
 8014534:	a801      	add	r0, sp, #4
 8014536:	f7f8 fea7 	bl	800d288 <rcutils_get_default_allocator>
 801453a:	9b02      	ldr	r3, [sp, #8]
 801453c:	9905      	ldr	r1, [sp, #20]
 801453e:	6820      	ldr	r0, [r4, #0]
 8014540:	4798      	blx	r3
 8014542:	2300      	movs	r3, #0
 8014544:	e9c4 3300 	strd	r3, r3, [r4]
 8014548:	60a3      	str	r3, [r4, #8]
 801454a:	b006      	add	sp, #24
 801454c:	bd10      	pop	{r4, pc}
 801454e:	4770      	bx	lr

08014550 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014554:	6805      	ldr	r5, [r0, #0]
 8014556:	4604      	mov	r4, r0
 8014558:	4628      	mov	r0, r5
 801455a:	460e      	mov	r6, r1
 801455c:	f7eb fe58 	bl	8000210 <strcmp>
 8014560:	b308      	cbz	r0, 80145a6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8014562:	4b12      	ldr	r3, [pc, #72]	@ (80145ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 8014564:	4628      	mov	r0, r5
 8014566:	6819      	ldr	r1, [r3, #0]
 8014568:	f7eb fe52 	bl	8000210 <strcmp>
 801456c:	4605      	mov	r5, r0
 801456e:	b980      	cbnz	r0, 8014592 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8014570:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014574:	f8d8 4000 	ldr.w	r4, [r8]
 8014578:	b1ac      	cbz	r4, 80145a6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 801457a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801457e:	3f04      	subs	r7, #4
 8014580:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8014584:	4631      	mov	r1, r6
 8014586:	f7eb fe43 	bl	8000210 <strcmp>
 801458a:	b128      	cbz	r0, 8014598 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 801458c:	3501      	adds	r5, #1
 801458e:	42a5      	cmp	r5, r4
 8014590:	d1f6      	bne.n	8014580 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 8014592:	2000      	movs	r0, #0
 8014594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014598:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801459c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80145a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145a4:	4718      	bx	r3
 80145a6:	4620      	mov	r0, r4
 80145a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ac:	200003ec 	.word	0x200003ec

080145b0 <std_msgs__msg__Float32__get_type_hash>:
 80145b0:	4800      	ldr	r0, [pc, #0]	@ (80145b4 <std_msgs__msg__Float32__get_type_hash+0x4>)
 80145b2:	4770      	bx	lr
 80145b4:	200003f4 	.word	0x200003f4

080145b8 <std_msgs__msg__Float32__get_type_description>:
 80145b8:	4b03      	ldr	r3, [pc, #12]	@ (80145c8 <std_msgs__msg__Float32__get_type_description+0x10>)
 80145ba:	781a      	ldrb	r2, [r3, #0]
 80145bc:	b90a      	cbnz	r2, 80145c2 <std_msgs__msg__Float32__get_type_description+0xa>
 80145be:	2201      	movs	r2, #1
 80145c0:	701a      	strb	r2, [r3, #0]
 80145c2:	4802      	ldr	r0, [pc, #8]	@ (80145cc <std_msgs__msg__Float32__get_type_description+0x14>)
 80145c4:	4770      	bx	lr
 80145c6:	bf00      	nop
 80145c8:	20017775 	.word	0x20017775
 80145cc:	0801fc74 	.word	0x0801fc74

080145d0 <std_msgs__msg__Float32__get_type_description_sources>:
 80145d0:	4b09      	ldr	r3, [pc, #36]	@ (80145f8 <std_msgs__msg__Float32__get_type_description_sources+0x28>)
 80145d2:	781a      	ldrb	r2, [r3, #0]
 80145d4:	b96a      	cbnz	r2, 80145f2 <std_msgs__msg__Float32__get_type_description_sources+0x22>
 80145d6:	b430      	push	{r4, r5}
 80145d8:	4d08      	ldr	r5, [pc, #32]	@ (80145fc <std_msgs__msg__Float32__get_type_description_sources+0x2c>)
 80145da:	4c09      	ldr	r4, [pc, #36]	@ (8014600 <std_msgs__msg__Float32__get_type_description_sources+0x30>)
 80145dc:	2201      	movs	r2, #1
 80145de:	701a      	strb	r2, [r3, #0]
 80145e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80145e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80145e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80145e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80145e8:	682b      	ldr	r3, [r5, #0]
 80145ea:	4806      	ldr	r0, [pc, #24]	@ (8014604 <std_msgs__msg__Float32__get_type_description_sources+0x34>)
 80145ec:	6023      	str	r3, [r4, #0]
 80145ee:	bc30      	pop	{r4, r5}
 80145f0:	4770      	bx	lr
 80145f2:	4804      	ldr	r0, [pc, #16]	@ (8014604 <std_msgs__msg__Float32__get_type_description_sources+0x34>)
 80145f4:	4770      	bx	lr
 80145f6:	bf00      	nop
 80145f8:	20017774 	.word	0x20017774
 80145fc:	0801fc50 	.word	0x0801fc50
 8014600:	20017750 	.word	0x20017750
 8014604:	0801fc44 	.word	0x0801fc44

08014608 <std_msgs__msg__Float32__init>:
 8014608:	3800      	subs	r0, #0
 801460a:	bf18      	it	ne
 801460c:	2001      	movne	r0, #1
 801460e:	4770      	bx	lr

08014610 <std_msgs__msg__Float32__fini>:
 8014610:	4770      	bx	lr
 8014612:	bf00      	nop

08014614 <std_msgs__msg__Float32MultiArray__get_type_hash>:
 8014614:	4800      	ldr	r0, [pc, #0]	@ (8014618 <std_msgs__msg__Float32MultiArray__get_type_hash+0x4>)
 8014616:	4770      	bx	lr
 8014618:	20000590 	.word	0x20000590

0801461c <std_msgs__msg__Float32MultiArray__get_type_description>:
 801461c:	b570      	push	{r4, r5, r6, lr}
 801461e:	4e0c      	ldr	r6, [pc, #48]	@ (8014650 <std_msgs__msg__Float32MultiArray__get_type_description+0x34>)
 8014620:	7835      	ldrb	r5, [r6, #0]
 8014622:	b10d      	cbz	r5, 8014628 <std_msgs__msg__Float32MultiArray__get_type_description+0xc>
 8014624:	480b      	ldr	r0, [pc, #44]	@ (8014654 <std_msgs__msg__Float32MultiArray__get_type_description+0x38>)
 8014626:	bd70      	pop	{r4, r5, r6, pc}
 8014628:	4628      	mov	r0, r5
 801462a:	f000 f87f 	bl	801472c <std_msgs__msg__MultiArrayDimension__get_type_description>
 801462e:	300c      	adds	r0, #12
 8014630:	c807      	ldmia	r0, {r0, r1, r2}
 8014632:	4c09      	ldr	r4, [pc, #36]	@ (8014658 <std_msgs__msg__Float32MultiArray__get_type_description+0x3c>)
 8014634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014638:	4628      	mov	r0, r5
 801463a:	f000 f925 	bl	8014888 <std_msgs__msg__MultiArrayLayout__get_type_description>
 801463e:	300c      	adds	r0, #12
 8014640:	c807      	ldmia	r0, {r0, r1, r2}
 8014642:	3418      	adds	r4, #24
 8014644:	2301      	movs	r3, #1
 8014646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801464a:	7033      	strb	r3, [r6, #0]
 801464c:	4801      	ldr	r0, [pc, #4]	@ (8014654 <std_msgs__msg__Float32MultiArray__get_type_description+0x38>)
 801464e:	bd70      	pop	{r4, r5, r6, pc}
 8014650:	200177e5 	.word	0x200177e5
 8014654:	0801fcc8 	.word	0x0801fcc8
 8014658:	20000790 	.word	0x20000790

0801465c <std_msgs__msg__Float32MultiArray__get_type_description_sources>:
 801465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801465e:	4e17      	ldr	r6, [pc, #92]	@ (80146bc <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x60>)
 8014660:	7837      	ldrb	r7, [r6, #0]
 8014662:	b10f      	cbz	r7, 8014668 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0xc>
 8014664:	4816      	ldr	r0, [pc, #88]	@ (80146c0 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x64>)
 8014666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014668:	4d16      	ldr	r5, [pc, #88]	@ (80146c4 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x68>)
 801466a:	4c17      	ldr	r4, [pc, #92]	@ (80146c8 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x6c>)
 801466c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801466e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014674:	682b      	ldr	r3, [r5, #0]
 8014676:	4625      	mov	r5, r4
 8014678:	4638      	mov	r0, r7
 801467a:	f845 3b04 	str.w	r3, [r5], #4
 801467e:	f000 f861 	bl	8014744 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8014682:	4684      	mov	ip, r0
 8014684:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801468a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801468e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014690:	4638      	mov	r0, r7
 8014692:	f8dc 3000 	ldr.w	r3, [ip]
 8014696:	602b      	str	r3, [r5, #0]
 8014698:	f000 f90e 	bl	80148b8 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 801469c:	2301      	movs	r3, #1
 801469e:	4684      	mov	ip, r0
 80146a0:	7033      	strb	r3, [r6, #0]
 80146a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80146a6:	3428      	adds	r4, #40	@ 0x28
 80146a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80146ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146b0:	f8dc 3000 	ldr.w	r3, [ip]
 80146b4:	4802      	ldr	r0, [pc, #8]	@ (80146c0 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x64>)
 80146b6:	6023      	str	r3, [r4, #0]
 80146b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146ba:	bf00      	nop
 80146bc:	200177e4 	.word	0x200177e4
 80146c0:	0801fc98 	.word	0x0801fc98
 80146c4:	0801fca4 	.word	0x0801fca4
 80146c8:	20017778 	.word	0x20017778

080146cc <std_msgs__msg__Float32MultiArray__init>:
 80146cc:	b1e0      	cbz	r0, 8014708 <std_msgs__msg__Float32MultiArray__init+0x3c>
 80146ce:	b538      	push	{r3, r4, r5, lr}
 80146d0:	4604      	mov	r4, r0
 80146d2:	f000 f91d 	bl	8014910 <std_msgs__msg__MultiArrayLayout__init>
 80146d6:	b138      	cbz	r0, 80146e8 <std_msgs__msg__Float32MultiArray__init+0x1c>
 80146d8:	f104 0510 	add.w	r5, r4, #16
 80146dc:	2100      	movs	r1, #0
 80146de:	4628      	mov	r0, r5
 80146e0:	f7ff ff08 	bl	80144f4 <rosidl_runtime_c__float__Sequence__init>
 80146e4:	b148      	cbz	r0, 80146fa <std_msgs__msg__Float32MultiArray__init+0x2e>
 80146e6:	bd38      	pop	{r3, r4, r5, pc}
 80146e8:	4620      	mov	r0, r4
 80146ea:	f000 f921 	bl	8014930 <std_msgs__msg__MultiArrayLayout__fini>
 80146ee:	f104 0010 	add.w	r0, r4, #16
 80146f2:	f7ff ff19 	bl	8014528 <rosidl_runtime_c__float__Sequence__fini>
 80146f6:	2000      	movs	r0, #0
 80146f8:	bd38      	pop	{r3, r4, r5, pc}
 80146fa:	4620      	mov	r0, r4
 80146fc:	f000 f918 	bl	8014930 <std_msgs__msg__MultiArrayLayout__fini>
 8014700:	4628      	mov	r0, r5
 8014702:	f7ff ff11 	bl	8014528 <rosidl_runtime_c__float__Sequence__fini>
 8014706:	e7f6      	b.n	80146f6 <std_msgs__msg__Float32MultiArray__init+0x2a>
 8014708:	2000      	movs	r0, #0
 801470a:	4770      	bx	lr

0801470c <std_msgs__msg__Float32MultiArray__fini>:
 801470c:	b148      	cbz	r0, 8014722 <std_msgs__msg__Float32MultiArray__fini+0x16>
 801470e:	b510      	push	{r4, lr}
 8014710:	4604      	mov	r4, r0
 8014712:	f000 f90d 	bl	8014930 <std_msgs__msg__MultiArrayLayout__fini>
 8014716:	f104 0010 	add.w	r0, r4, #16
 801471a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801471e:	f7ff bf03 	b.w	8014528 <rosidl_runtime_c__float__Sequence__fini>
 8014722:	4770      	bx	lr

08014724 <std_msgs__msg__MultiArrayDimension__get_type_hash>:
 8014724:	4800      	ldr	r0, [pc, #0]	@ (8014728 <std_msgs__msg__MultiArrayDimension__get_type_hash+0x4>)
 8014726:	4770      	bx	lr
 8014728:	200008bc 	.word	0x200008bc

0801472c <std_msgs__msg__MultiArrayDimension__get_type_description>:
 801472c:	4b03      	ldr	r3, [pc, #12]	@ (801473c <std_msgs__msg__MultiArrayDimension__get_type_description+0x10>)
 801472e:	781a      	ldrb	r2, [r3, #0]
 8014730:	b90a      	cbnz	r2, 8014736 <std_msgs__msg__MultiArrayDimension__get_type_description+0xa>
 8014732:	2201      	movs	r2, #1
 8014734:	701a      	strb	r2, [r3, #0]
 8014736:	4802      	ldr	r0, [pc, #8]	@ (8014740 <std_msgs__msg__MultiArrayDimension__get_type_description+0x14>)
 8014738:	4770      	bx	lr
 801473a:	bf00      	nop
 801473c:	2001780d 	.word	0x2001780d
 8014740:	0801fd1c 	.word	0x0801fd1c

08014744 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>:
 8014744:	4800      	ldr	r0, [pc, #0]	@ (8014748 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source+0x4>)
 8014746:	4770      	bx	lr
 8014748:	0801fcf8 	.word	0x0801fcf8

0801474c <std_msgs__msg__MultiArrayDimension__get_type_description_sources>:
 801474c:	4b09      	ldr	r3, [pc, #36]	@ (8014774 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x28>)
 801474e:	781a      	ldrb	r2, [r3, #0]
 8014750:	b96a      	cbnz	r2, 801476e <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x22>
 8014752:	b430      	push	{r4, r5}
 8014754:	4d08      	ldr	r5, [pc, #32]	@ (8014778 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x2c>)
 8014756:	4c09      	ldr	r4, [pc, #36]	@ (801477c <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x30>)
 8014758:	2201      	movs	r2, #1
 801475a:	701a      	strb	r2, [r3, #0]
 801475c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801475e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014764:	682b      	ldr	r3, [r5, #0]
 8014766:	4806      	ldr	r0, [pc, #24]	@ (8014780 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8014768:	6023      	str	r3, [r4, #0]
 801476a:	bc30      	pop	{r4, r5}
 801476c:	4770      	bx	lr
 801476e:	4804      	ldr	r0, [pc, #16]	@ (8014780 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop
 8014774:	2001780c 	.word	0x2001780c
 8014778:	0801fcf8 	.word	0x0801fcf8
 801477c:	200177e8 	.word	0x200177e8
 8014780:	0801fcec 	.word	0x0801fcec

08014784 <std_msgs__msg__MultiArrayDimension__init>:
 8014784:	b150      	cbz	r0, 801479c <std_msgs__msg__MultiArrayDimension__init+0x18>
 8014786:	b510      	push	{r4, lr}
 8014788:	4604      	mov	r4, r0
 801478a:	f004 feff 	bl	801958c <rosidl_runtime_c__String__init>
 801478e:	b100      	cbz	r0, 8014792 <std_msgs__msg__MultiArrayDimension__init+0xe>
 8014790:	bd10      	pop	{r4, pc}
 8014792:	4620      	mov	r0, r4
 8014794:	f004 ff14 	bl	80195c0 <rosidl_runtime_c__String__fini>
 8014798:	2000      	movs	r0, #0
 801479a:	bd10      	pop	{r4, pc}
 801479c:	2000      	movs	r0, #0
 801479e:	4770      	bx	lr

080147a0 <std_msgs__msg__MultiArrayDimension__fini>:
 80147a0:	b108      	cbz	r0, 80147a6 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 80147a2:	f004 bf0d 	b.w	80195c0 <rosidl_runtime_c__String__fini>
 80147a6:	4770      	bx	lr

080147a8 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 80147a8:	2800      	cmp	r0, #0
 80147aa:	d03f      	beq.n	801482c <std_msgs__msg__MultiArrayDimension__Sequence__init+0x84>
 80147ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147b0:	b087      	sub	sp, #28
 80147b2:	460d      	mov	r5, r1
 80147b4:	4681      	mov	r9, r0
 80147b6:	a801      	add	r0, sp, #4
 80147b8:	f7f8 fd66 	bl	800d288 <rcutils_get_default_allocator>
 80147bc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80147c0:	b35d      	cbz	r5, 801481a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x72>
 80147c2:	9b04      	ldr	r3, [sp, #16]
 80147c4:	4642      	mov	r2, r8
 80147c6:	2114      	movs	r1, #20
 80147c8:	4628      	mov	r0, r5
 80147ca:	4798      	blx	r3
 80147cc:	4607      	mov	r7, r0
 80147ce:	b310      	cbz	r0, 8014816 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6e>
 80147d0:	4606      	mov	r6, r0
 80147d2:	2400      	movs	r4, #0
 80147d4:	e004      	b.n	80147e0 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x38>
 80147d6:	3401      	adds	r4, #1
 80147d8:	42a5      	cmp	r5, r4
 80147da:	f106 0614 	add.w	r6, r6, #20
 80147de:	d01d      	beq.n	801481c <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 80147e0:	4630      	mov	r0, r6
 80147e2:	f004 fed3 	bl	801958c <rosidl_runtime_c__String__init>
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d1f5      	bne.n	80147d6 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x2e>
 80147ea:	4630      	mov	r0, r6
 80147ec:	f004 fee8 	bl	80195c0 <rosidl_runtime_c__String__fini>
 80147f0:	42a5      	cmp	r5, r4
 80147f2:	d913      	bls.n	801481c <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 80147f4:	b15c      	cbz	r4, 801480e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x66>
 80147f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80147fa:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80147fe:	3c14      	subs	r4, #20
 8014800:	4620      	mov	r0, r4
 8014802:	f004 fedd 	bl	80195c0 <rosidl_runtime_c__String__fini>
 8014806:	42bc      	cmp	r4, r7
 8014808:	f1a4 0414 	sub.w	r4, r4, #20
 801480c:	d1f8      	bne.n	8014800 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x58>
 801480e:	9b02      	ldr	r3, [sp, #8]
 8014810:	4641      	mov	r1, r8
 8014812:	4638      	mov	r0, r7
 8014814:	4798      	blx	r3
 8014816:	2000      	movs	r0, #0
 8014818:	e005      	b.n	8014826 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x7e>
 801481a:	462f      	mov	r7, r5
 801481c:	e9c9 7500 	strd	r7, r5, [r9]
 8014820:	f8c9 5008 	str.w	r5, [r9, #8]
 8014824:	2001      	movs	r0, #1
 8014826:	b007      	add	sp, #28
 8014828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801482c:	2000      	movs	r0, #0
 801482e:	4770      	bx	lr

08014830 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8014830:	b320      	cbz	r0, 801487c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8014832:	b530      	push	{r4, r5, lr}
 8014834:	4605      	mov	r5, r0
 8014836:	b087      	sub	sp, #28
 8014838:	a801      	add	r0, sp, #4
 801483a:	f7f8 fd25 	bl	800d288 <rcutils_get_default_allocator>
 801483e:	682a      	ldr	r2, [r5, #0]
 8014840:	b1b2      	cbz	r2, 8014870 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8014842:	68a9      	ldr	r1, [r5, #8]
 8014844:	b161      	cbz	r1, 8014860 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8014846:	2400      	movs	r4, #0
 8014848:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801484c:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8014850:	d010      	beq.n	8014874 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8014852:	f004 feb5 	bl	80195c0 <rosidl_runtime_c__String__fini>
 8014856:	68a9      	ldr	r1, [r5, #8]
 8014858:	682a      	ldr	r2, [r5, #0]
 801485a:	3401      	adds	r4, #1
 801485c:	428c      	cmp	r4, r1
 801485e:	d3f3      	bcc.n	8014848 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8014860:	9b02      	ldr	r3, [sp, #8]
 8014862:	9905      	ldr	r1, [sp, #20]
 8014864:	4610      	mov	r0, r2
 8014866:	4798      	blx	r3
 8014868:	2300      	movs	r3, #0
 801486a:	e9c5 3300 	strd	r3, r3, [r5]
 801486e:	60ab      	str	r3, [r5, #8]
 8014870:	b007      	add	sp, #28
 8014872:	bd30      	pop	{r4, r5, pc}
 8014874:	3401      	adds	r4, #1
 8014876:	428c      	cmp	r4, r1
 8014878:	d3e6      	bcc.n	8014848 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801487a:	e7f1      	b.n	8014860 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 801487c:	4770      	bx	lr
 801487e:	bf00      	nop

08014880 <std_msgs__msg__MultiArrayLayout__get_type_hash>:
 8014880:	4800      	ldr	r0, [pc, #0]	@ (8014884 <std_msgs__msg__MultiArrayLayout__get_type_hash+0x4>)
 8014882:	4770      	bx	lr
 8014884:	20000b84 	.word	0x20000b84

08014888 <std_msgs__msg__MultiArrayLayout__get_type_description>:
 8014888:	b510      	push	{r4, lr}
 801488a:	4c08      	ldr	r4, [pc, #32]	@ (80148ac <std_msgs__msg__MultiArrayLayout__get_type_description+0x24>)
 801488c:	7820      	ldrb	r0, [r4, #0]
 801488e:	b108      	cbz	r0, 8014894 <std_msgs__msg__MultiArrayLayout__get_type_description+0xc>
 8014890:	4807      	ldr	r0, [pc, #28]	@ (80148b0 <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 8014892:	bd10      	pop	{r4, pc}
 8014894:	f7ff ff4a 	bl	801472c <std_msgs__msg__MultiArrayDimension__get_type_description>
 8014898:	300c      	adds	r0, #12
 801489a:	c807      	ldmia	r0, {r0, r1, r2}
 801489c:	4b05      	ldr	r3, [pc, #20]	@ (80148b4 <std_msgs__msg__MultiArrayLayout__get_type_description+0x2c>)
 801489e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80148a2:	2301      	movs	r3, #1
 80148a4:	4802      	ldr	r0, [pc, #8]	@ (80148b0 <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 80148a6:	7023      	strb	r3, [r4, #0]
 80148a8:	bd10      	pop	{r4, pc}
 80148aa:	bf00      	nop
 80148ac:	20017859 	.word	0x20017859
 80148b0:	0801fd70 	.word	0x0801fd70
 80148b4:	20001040 	.word	0x20001040

080148b8 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>:
 80148b8:	4800      	ldr	r0, [pc, #0]	@ (80148bc <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source+0x4>)
 80148ba:	4770      	bx	lr
 80148bc:	0801fd4c 	.word	0x0801fd4c

080148c0 <std_msgs__msg__MultiArrayLayout__get_type_description_sources>:
 80148c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148c2:	4e0f      	ldr	r6, [pc, #60]	@ (8014900 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x40>)
 80148c4:	7837      	ldrb	r7, [r6, #0]
 80148c6:	b10f      	cbz	r7, 80148cc <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0xc>
 80148c8:	480e      	ldr	r0, [pc, #56]	@ (8014904 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 80148ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148cc:	4d0e      	ldr	r5, [pc, #56]	@ (8014908 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x48>)
 80148ce:	4c0f      	ldr	r4, [pc, #60]	@ (801490c <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x4c>)
 80148d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148d8:	682b      	ldr	r3, [r5, #0]
 80148da:	f844 3b04 	str.w	r3, [r4], #4
 80148de:	4638      	mov	r0, r7
 80148e0:	f7ff ff30 	bl	8014744 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 80148e4:	2301      	movs	r3, #1
 80148e6:	4684      	mov	ip, r0
 80148e8:	7033      	strb	r3, [r6, #0]
 80148ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148f6:	f8dc 3000 	ldr.w	r3, [ip]
 80148fa:	4802      	ldr	r0, [pc, #8]	@ (8014904 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 80148fc:	6023      	str	r3, [r4, #0]
 80148fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014900:	20017858 	.word	0x20017858
 8014904:	0801fd40 	.word	0x0801fd40
 8014908:	0801fd4c 	.word	0x0801fd4c
 801490c:	20017810 	.word	0x20017810

08014910 <std_msgs__msg__MultiArrayLayout__init>:
 8014910:	b158      	cbz	r0, 801492a <std_msgs__msg__MultiArrayLayout__init+0x1a>
 8014912:	b510      	push	{r4, lr}
 8014914:	2100      	movs	r1, #0
 8014916:	4604      	mov	r4, r0
 8014918:	f7ff ff46 	bl	80147a8 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801491c:	b100      	cbz	r0, 8014920 <std_msgs__msg__MultiArrayLayout__init+0x10>
 801491e:	bd10      	pop	{r4, pc}
 8014920:	4620      	mov	r0, r4
 8014922:	f7ff ff85 	bl	8014830 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8014926:	2000      	movs	r0, #0
 8014928:	bd10      	pop	{r4, pc}
 801492a:	2000      	movs	r0, #0
 801492c:	4770      	bx	lr
 801492e:	bf00      	nop

08014930 <std_msgs__msg__MultiArrayLayout__fini>:
 8014930:	b108      	cbz	r0, 8014936 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8014932:	f7ff bf7d 	b.w	8014830 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8014936:	4770      	bx	lr

08014938 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8014938:	f7ff bf24 	b.w	8014784 <std_msgs__msg__MultiArrayDimension__init>

0801493c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 801493c:	f7ff bf30 	b.w	80147a0 <std_msgs__msg__MultiArrayDimension__fini>

08014940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8014940:	4b04      	ldr	r3, [pc, #16]	@ (8014954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	b10a      	cbz	r2, 801494a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8014946:	4803      	ldr	r0, [pc, #12]	@ (8014954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014948:	4770      	bx	lr
 801494a:	4a03      	ldr	r2, [pc, #12]	@ (8014958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 801494c:	4801      	ldr	r0, [pc, #4]	@ (8014954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801494e:	6812      	ldr	r2, [r2, #0]
 8014950:	601a      	str	r2, [r3, #0]
 8014952:	4770      	bx	lr
 8014954:	20001134 	.word	0x20001134
 8014958:	200003f0 	.word	0x200003f0

0801495c <_MultiArrayDimension__cdr_serialize>:
 801495c:	b1d0      	cbz	r0, 8014994 <_MultiArrayDimension__cdr_serialize+0x38>
 801495e:	b570      	push	{r4, r5, r6, lr}
 8014960:	6806      	ldr	r6, [r0, #0]
 8014962:	460d      	mov	r5, r1
 8014964:	4604      	mov	r4, r0
 8014966:	b196      	cbz	r6, 801498e <_MultiArrayDimension__cdr_serialize+0x32>
 8014968:	4630      	mov	r0, r6
 801496a:	f7eb fcb1 	bl	80002d0 <strlen>
 801496e:	1c42      	adds	r2, r0, #1
 8014970:	6060      	str	r0, [r4, #4]
 8014972:	4631      	mov	r1, r6
 8014974:	4628      	mov	r0, r5
 8014976:	f7fa fa21 	bl	800edbc <ucdr_serialize_sequence_char>
 801497a:	68e1      	ldr	r1, [r4, #12]
 801497c:	4628      	mov	r0, r5
 801497e:	f7f9 f9d9 	bl	800dd34 <ucdr_serialize_uint32_t>
 8014982:	6921      	ldr	r1, [r4, #16]
 8014984:	4628      	mov	r0, r5
 8014986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801498a:	f7f9 b9d3 	b.w	800dd34 <ucdr_serialize_uint32_t>
 801498e:	4632      	mov	r2, r6
 8014990:	4630      	mov	r0, r6
 8014992:	e7ed      	b.n	8014970 <_MultiArrayDimension__cdr_serialize+0x14>
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop

08014998 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8014998:	b570      	push	{r4, r5, r6, lr}
 801499a:	4604      	mov	r4, r0
 801499c:	b1b0      	cbz	r0, 80149cc <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801499e:	460d      	mov	r5, r1
 80149a0:	4628      	mov	r0, r5
 80149a2:	2104      	movs	r1, #4
 80149a4:	f7fa f99e 	bl	800ece4 <ucdr_alignment>
 80149a8:	6863      	ldr	r3, [r4, #4]
 80149aa:	1d6e      	adds	r6, r5, #5
 80149ac:	441e      	add	r6, r3
 80149ae:	4406      	add	r6, r0
 80149b0:	2104      	movs	r1, #4
 80149b2:	4630      	mov	r0, r6
 80149b4:	f7fa f996 	bl	800ece4 <ucdr_alignment>
 80149b8:	1d04      	adds	r4, r0, #4
 80149ba:	4434      	add	r4, r6
 80149bc:	2104      	movs	r1, #4
 80149be:	4620      	mov	r0, r4
 80149c0:	f7fa f990 	bl	800ece4 <ucdr_alignment>
 80149c4:	f1c5 0504 	rsb	r5, r5, #4
 80149c8:	4405      	add	r5, r0
 80149ca:	1928      	adds	r0, r5, r4
 80149cc:	bd70      	pop	{r4, r5, r6, pc}
 80149ce:	bf00      	nop

080149d0 <_MultiArrayDimension__cdr_deserialize>:
 80149d0:	b570      	push	{r4, r5, r6, lr}
 80149d2:	460c      	mov	r4, r1
 80149d4:	b082      	sub	sp, #8
 80149d6:	b1d9      	cbz	r1, 8014a10 <_MultiArrayDimension__cdr_deserialize+0x40>
 80149d8:	688e      	ldr	r6, [r1, #8]
 80149da:	6809      	ldr	r1, [r1, #0]
 80149dc:	ab01      	add	r3, sp, #4
 80149de:	4632      	mov	r2, r6
 80149e0:	4605      	mov	r5, r0
 80149e2:	f7fa f9fd 	bl	800ede0 <ucdr_deserialize_sequence_char>
 80149e6:	9b01      	ldr	r3, [sp, #4]
 80149e8:	b970      	cbnz	r0, 8014a08 <_MultiArrayDimension__cdr_deserialize+0x38>
 80149ea:	429e      	cmp	r6, r3
 80149ec:	d313      	bcc.n	8014a16 <_MultiArrayDimension__cdr_deserialize+0x46>
 80149ee:	f104 010c 	add.w	r1, r4, #12
 80149f2:	4628      	mov	r0, r5
 80149f4:	f7f9 fac8 	bl	800df88 <ucdr_deserialize_uint32_t>
 80149f8:	f104 0110 	add.w	r1, r4, #16
 80149fc:	4628      	mov	r0, r5
 80149fe:	b002      	add	sp, #8
 8014a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a04:	f7f9 bac0 	b.w	800df88 <ucdr_deserialize_uint32_t>
 8014a08:	b103      	cbz	r3, 8014a0c <_MultiArrayDimension__cdr_deserialize+0x3c>
 8014a0a:	3b01      	subs	r3, #1
 8014a0c:	6063      	str	r3, [r4, #4]
 8014a0e:	e7ee      	b.n	80149ee <_MultiArrayDimension__cdr_deserialize+0x1e>
 8014a10:	4608      	mov	r0, r1
 8014a12:	b002      	add	sp, #8
 8014a14:	bd70      	pop	{r4, r5, r6, pc}
 8014a16:	2101      	movs	r1, #1
 8014a18:	75a8      	strb	r0, [r5, #22]
 8014a1a:	7569      	strb	r1, [r5, #21]
 8014a1c:	6060      	str	r0, [r4, #4]
 8014a1e:	4628      	mov	r0, r5
 8014a20:	f7fa f976 	bl	800ed10 <ucdr_align_to>
 8014a24:	9901      	ldr	r1, [sp, #4]
 8014a26:	4628      	mov	r0, r5
 8014a28:	f7fa f9a8 	bl	800ed7c <ucdr_advance_buffer>
 8014a2c:	e7df      	b.n	80149ee <_MultiArrayDimension__cdr_deserialize+0x1e>
 8014a2e:	bf00      	nop

08014a30 <_MultiArrayDimension__max_serialized_size>:
 8014a30:	b510      	push	{r4, lr}
 8014a32:	2104      	movs	r1, #4
 8014a34:	2000      	movs	r0, #0
 8014a36:	f7fa f955 	bl	800ece4 <ucdr_alignment>
 8014a3a:	1d04      	adds	r4, r0, #4
 8014a3c:	2104      	movs	r1, #4
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f7fa f950 	bl	800ece4 <ucdr_alignment>
 8014a44:	3004      	adds	r0, #4
 8014a46:	4420      	add	r0, r4
 8014a48:	bd10      	pop	{r4, pc}
 8014a4a:	bf00      	nop

08014a4c <_MultiArrayDimension__get_serialized_size>:
 8014a4c:	b538      	push	{r3, r4, r5, lr}
 8014a4e:	4604      	mov	r4, r0
 8014a50:	b190      	cbz	r0, 8014a78 <_MultiArrayDimension__get_serialized_size+0x2c>
 8014a52:	2104      	movs	r1, #4
 8014a54:	2000      	movs	r0, #0
 8014a56:	f7fa f945 	bl	800ece4 <ucdr_alignment>
 8014a5a:	6865      	ldr	r5, [r4, #4]
 8014a5c:	3505      	adds	r5, #5
 8014a5e:	4405      	add	r5, r0
 8014a60:	2104      	movs	r1, #4
 8014a62:	4628      	mov	r0, r5
 8014a64:	f7fa f93e 	bl	800ece4 <ucdr_alignment>
 8014a68:	1d04      	adds	r4, r0, #4
 8014a6a:	442c      	add	r4, r5
 8014a6c:	2104      	movs	r1, #4
 8014a6e:	4620      	mov	r0, r4
 8014a70:	f7fa f938 	bl	800ece4 <ucdr_alignment>
 8014a74:	3004      	adds	r0, #4
 8014a76:	4420      	add	r0, r4
 8014a78:	bd38      	pop	{r3, r4, r5, pc}
 8014a7a:	bf00      	nop

08014a7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8014a7c:	4800      	ldr	r0, [pc, #0]	@ (8014a80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8014a7e:	4770      	bx	lr
 8014a80:	20001200 	.word	0x20001200

08014a84 <ucdr_serialize_endian_array_char>:
 8014a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a88:	4619      	mov	r1, r3
 8014a8a:	461f      	mov	r7, r3
 8014a8c:	4605      	mov	r5, r0
 8014a8e:	4690      	mov	r8, r2
 8014a90:	f7fa f8d0 	bl	800ec34 <ucdr_check_buffer_available_for>
 8014a94:	b9e0      	cbnz	r0, 8014ad0 <ucdr_serialize_endian_array_char+0x4c>
 8014a96:	463e      	mov	r6, r7
 8014a98:	e009      	b.n	8014aae <ucdr_serialize_endian_array_char+0x2a>
 8014a9a:	68a8      	ldr	r0, [r5, #8]
 8014a9c:	f007 f843 	bl	801bb26 <memcpy>
 8014aa0:	68ab      	ldr	r3, [r5, #8]
 8014aa2:	6928      	ldr	r0, [r5, #16]
 8014aa4:	4423      	add	r3, r4
 8014aa6:	4420      	add	r0, r4
 8014aa8:	1b36      	subs	r6, r6, r4
 8014aaa:	60ab      	str	r3, [r5, #8]
 8014aac:	6128      	str	r0, [r5, #16]
 8014aae:	2201      	movs	r2, #1
 8014ab0:	4631      	mov	r1, r6
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	f7fa f946 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 8014ab8:	1bb9      	subs	r1, r7, r6
 8014aba:	4604      	mov	r4, r0
 8014abc:	4602      	mov	r2, r0
 8014abe:	4441      	add	r1, r8
 8014ac0:	2800      	cmp	r0, #0
 8014ac2:	d1ea      	bne.n	8014a9a <ucdr_serialize_endian_array_char+0x16>
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	7da8      	ldrb	r0, [r5, #22]
 8014ac8:	756b      	strb	r3, [r5, #21]
 8014aca:	4058      	eors	r0, r3
 8014acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad0:	463a      	mov	r2, r7
 8014ad2:	68a8      	ldr	r0, [r5, #8]
 8014ad4:	4641      	mov	r1, r8
 8014ad6:	f007 f826 	bl	801bb26 <memcpy>
 8014ada:	68aa      	ldr	r2, [r5, #8]
 8014adc:	692b      	ldr	r3, [r5, #16]
 8014ade:	443a      	add	r2, r7
 8014ae0:	443b      	add	r3, r7
 8014ae2:	60aa      	str	r2, [r5, #8]
 8014ae4:	612b      	str	r3, [r5, #16]
 8014ae6:	e7ed      	b.n	8014ac4 <ucdr_serialize_endian_array_char+0x40>

08014ae8 <ucdr_deserialize_endian_array_char>:
 8014ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aec:	4619      	mov	r1, r3
 8014aee:	461f      	mov	r7, r3
 8014af0:	4605      	mov	r5, r0
 8014af2:	4690      	mov	r8, r2
 8014af4:	f7fa f89e 	bl	800ec34 <ucdr_check_buffer_available_for>
 8014af8:	b9e0      	cbnz	r0, 8014b34 <ucdr_deserialize_endian_array_char+0x4c>
 8014afa:	463e      	mov	r6, r7
 8014afc:	e009      	b.n	8014b12 <ucdr_deserialize_endian_array_char+0x2a>
 8014afe:	68a9      	ldr	r1, [r5, #8]
 8014b00:	f007 f811 	bl	801bb26 <memcpy>
 8014b04:	68aa      	ldr	r2, [r5, #8]
 8014b06:	692b      	ldr	r3, [r5, #16]
 8014b08:	4422      	add	r2, r4
 8014b0a:	4423      	add	r3, r4
 8014b0c:	1b36      	subs	r6, r6, r4
 8014b0e:	60aa      	str	r2, [r5, #8]
 8014b10:	612b      	str	r3, [r5, #16]
 8014b12:	2201      	movs	r2, #1
 8014b14:	4631      	mov	r1, r6
 8014b16:	4628      	mov	r0, r5
 8014b18:	f7fa f914 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	1bb8      	subs	r0, r7, r6
 8014b20:	4622      	mov	r2, r4
 8014b22:	4440      	add	r0, r8
 8014b24:	2c00      	cmp	r4, #0
 8014b26:	d1ea      	bne.n	8014afe <ucdr_deserialize_endian_array_char+0x16>
 8014b28:	2301      	movs	r3, #1
 8014b2a:	7da8      	ldrb	r0, [r5, #22]
 8014b2c:	756b      	strb	r3, [r5, #21]
 8014b2e:	4058      	eors	r0, r3
 8014b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b34:	463a      	mov	r2, r7
 8014b36:	68a9      	ldr	r1, [r5, #8]
 8014b38:	4640      	mov	r0, r8
 8014b3a:	f006 fff4 	bl	801bb26 <memcpy>
 8014b3e:	68aa      	ldr	r2, [r5, #8]
 8014b40:	692b      	ldr	r3, [r5, #16]
 8014b42:	443a      	add	r2, r7
 8014b44:	443b      	add	r3, r7
 8014b46:	60aa      	str	r2, [r5, #8]
 8014b48:	612b      	str	r3, [r5, #16]
 8014b4a:	e7ed      	b.n	8014b28 <ucdr_deserialize_endian_array_char+0x40>

08014b4c <ucdr_serialize_array_uint8_t>:
 8014b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b50:	4688      	mov	r8, r1
 8014b52:	4611      	mov	r1, r2
 8014b54:	4617      	mov	r7, r2
 8014b56:	4605      	mov	r5, r0
 8014b58:	f7fa f86c 	bl	800ec34 <ucdr_check_buffer_available_for>
 8014b5c:	b9e0      	cbnz	r0, 8014b98 <ucdr_serialize_array_uint8_t+0x4c>
 8014b5e:	463e      	mov	r6, r7
 8014b60:	e009      	b.n	8014b76 <ucdr_serialize_array_uint8_t+0x2a>
 8014b62:	68a8      	ldr	r0, [r5, #8]
 8014b64:	f006 ffdf 	bl	801bb26 <memcpy>
 8014b68:	68aa      	ldr	r2, [r5, #8]
 8014b6a:	692b      	ldr	r3, [r5, #16]
 8014b6c:	4422      	add	r2, r4
 8014b6e:	4423      	add	r3, r4
 8014b70:	1b36      	subs	r6, r6, r4
 8014b72:	60aa      	str	r2, [r5, #8]
 8014b74:	612b      	str	r3, [r5, #16]
 8014b76:	2201      	movs	r2, #1
 8014b78:	4631      	mov	r1, r6
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f7fa f8e2 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 8014b80:	1bb9      	subs	r1, r7, r6
 8014b82:	4604      	mov	r4, r0
 8014b84:	4602      	mov	r2, r0
 8014b86:	4441      	add	r1, r8
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	d1ea      	bne.n	8014b62 <ucdr_serialize_array_uint8_t+0x16>
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	7da8      	ldrb	r0, [r5, #22]
 8014b90:	756b      	strb	r3, [r5, #21]
 8014b92:	4058      	eors	r0, r3
 8014b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b98:	463a      	mov	r2, r7
 8014b9a:	68a8      	ldr	r0, [r5, #8]
 8014b9c:	4641      	mov	r1, r8
 8014b9e:	f006 ffc2 	bl	801bb26 <memcpy>
 8014ba2:	68aa      	ldr	r2, [r5, #8]
 8014ba4:	692b      	ldr	r3, [r5, #16]
 8014ba6:	443a      	add	r2, r7
 8014ba8:	443b      	add	r3, r7
 8014baa:	60aa      	str	r2, [r5, #8]
 8014bac:	612b      	str	r3, [r5, #16]
 8014bae:	e7ed      	b.n	8014b8c <ucdr_serialize_array_uint8_t+0x40>

08014bb0 <ucdr_serialize_endian_array_uint8_t>:
 8014bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	461f      	mov	r7, r3
 8014bb8:	4605      	mov	r5, r0
 8014bba:	4690      	mov	r8, r2
 8014bbc:	f7fa f83a 	bl	800ec34 <ucdr_check_buffer_available_for>
 8014bc0:	b9e0      	cbnz	r0, 8014bfc <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014bc2:	463e      	mov	r6, r7
 8014bc4:	e009      	b.n	8014bda <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014bc6:	68a8      	ldr	r0, [r5, #8]
 8014bc8:	f006 ffad 	bl	801bb26 <memcpy>
 8014bcc:	68ab      	ldr	r3, [r5, #8]
 8014bce:	6928      	ldr	r0, [r5, #16]
 8014bd0:	4423      	add	r3, r4
 8014bd2:	4420      	add	r0, r4
 8014bd4:	1b36      	subs	r6, r6, r4
 8014bd6:	60ab      	str	r3, [r5, #8]
 8014bd8:	6128      	str	r0, [r5, #16]
 8014bda:	2201      	movs	r2, #1
 8014bdc:	4631      	mov	r1, r6
 8014bde:	4628      	mov	r0, r5
 8014be0:	f7fa f8b0 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 8014be4:	1bb9      	subs	r1, r7, r6
 8014be6:	4604      	mov	r4, r0
 8014be8:	4602      	mov	r2, r0
 8014bea:	4441      	add	r1, r8
 8014bec:	2800      	cmp	r0, #0
 8014bee:	d1ea      	bne.n	8014bc6 <ucdr_serialize_endian_array_uint8_t+0x16>
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	7da8      	ldrb	r0, [r5, #22]
 8014bf4:	756b      	strb	r3, [r5, #21]
 8014bf6:	4058      	eors	r0, r3
 8014bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bfc:	463a      	mov	r2, r7
 8014bfe:	68a8      	ldr	r0, [r5, #8]
 8014c00:	4641      	mov	r1, r8
 8014c02:	f006 ff90 	bl	801bb26 <memcpy>
 8014c06:	68aa      	ldr	r2, [r5, #8]
 8014c08:	692b      	ldr	r3, [r5, #16]
 8014c0a:	443a      	add	r2, r7
 8014c0c:	443b      	add	r3, r7
 8014c0e:	60aa      	str	r2, [r5, #8]
 8014c10:	612b      	str	r3, [r5, #16]
 8014c12:	e7ed      	b.n	8014bf0 <ucdr_serialize_endian_array_uint8_t+0x40>

08014c14 <ucdr_deserialize_array_uint8_t>:
 8014c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c18:	4688      	mov	r8, r1
 8014c1a:	4611      	mov	r1, r2
 8014c1c:	4617      	mov	r7, r2
 8014c1e:	4605      	mov	r5, r0
 8014c20:	f7fa f808 	bl	800ec34 <ucdr_check_buffer_available_for>
 8014c24:	b9e0      	cbnz	r0, 8014c60 <ucdr_deserialize_array_uint8_t+0x4c>
 8014c26:	463e      	mov	r6, r7
 8014c28:	e009      	b.n	8014c3e <ucdr_deserialize_array_uint8_t+0x2a>
 8014c2a:	68a9      	ldr	r1, [r5, #8]
 8014c2c:	f006 ff7b 	bl	801bb26 <memcpy>
 8014c30:	68aa      	ldr	r2, [r5, #8]
 8014c32:	692b      	ldr	r3, [r5, #16]
 8014c34:	4422      	add	r2, r4
 8014c36:	4423      	add	r3, r4
 8014c38:	1b36      	subs	r6, r6, r4
 8014c3a:	60aa      	str	r2, [r5, #8]
 8014c3c:	612b      	str	r3, [r5, #16]
 8014c3e:	2201      	movs	r2, #1
 8014c40:	4631      	mov	r1, r6
 8014c42:	4628      	mov	r0, r5
 8014c44:	f7fa f87e 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 8014c48:	4604      	mov	r4, r0
 8014c4a:	1bb8      	subs	r0, r7, r6
 8014c4c:	4622      	mov	r2, r4
 8014c4e:	4440      	add	r0, r8
 8014c50:	2c00      	cmp	r4, #0
 8014c52:	d1ea      	bne.n	8014c2a <ucdr_deserialize_array_uint8_t+0x16>
 8014c54:	2301      	movs	r3, #1
 8014c56:	7da8      	ldrb	r0, [r5, #22]
 8014c58:	756b      	strb	r3, [r5, #21]
 8014c5a:	4058      	eors	r0, r3
 8014c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c60:	463a      	mov	r2, r7
 8014c62:	68a9      	ldr	r1, [r5, #8]
 8014c64:	4640      	mov	r0, r8
 8014c66:	f006 ff5e 	bl	801bb26 <memcpy>
 8014c6a:	68aa      	ldr	r2, [r5, #8]
 8014c6c:	692b      	ldr	r3, [r5, #16]
 8014c6e:	443a      	add	r2, r7
 8014c70:	443b      	add	r3, r7
 8014c72:	60aa      	str	r2, [r5, #8]
 8014c74:	612b      	str	r3, [r5, #16]
 8014c76:	e7ed      	b.n	8014c54 <ucdr_deserialize_array_uint8_t+0x40>

08014c78 <ucdr_deserialize_endian_array_uint8_t>:
 8014c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	461f      	mov	r7, r3
 8014c80:	4605      	mov	r5, r0
 8014c82:	4690      	mov	r8, r2
 8014c84:	f7f9 ffd6 	bl	800ec34 <ucdr_check_buffer_available_for>
 8014c88:	b9e0      	cbnz	r0, 8014cc4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014c8a:	463e      	mov	r6, r7
 8014c8c:	e009      	b.n	8014ca2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014c8e:	68a9      	ldr	r1, [r5, #8]
 8014c90:	f006 ff49 	bl	801bb26 <memcpy>
 8014c94:	68aa      	ldr	r2, [r5, #8]
 8014c96:	692b      	ldr	r3, [r5, #16]
 8014c98:	4422      	add	r2, r4
 8014c9a:	4423      	add	r3, r4
 8014c9c:	1b36      	subs	r6, r6, r4
 8014c9e:	60aa      	str	r2, [r5, #8]
 8014ca0:	612b      	str	r3, [r5, #16]
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	4631      	mov	r1, r6
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	f7fa f84c 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 8014cac:	4604      	mov	r4, r0
 8014cae:	1bb8      	subs	r0, r7, r6
 8014cb0:	4622      	mov	r2, r4
 8014cb2:	4440      	add	r0, r8
 8014cb4:	2c00      	cmp	r4, #0
 8014cb6:	d1ea      	bne.n	8014c8e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014cb8:	2301      	movs	r3, #1
 8014cba:	7da8      	ldrb	r0, [r5, #22]
 8014cbc:	756b      	strb	r3, [r5, #21]
 8014cbe:	4058      	eors	r0, r3
 8014cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cc4:	463a      	mov	r2, r7
 8014cc6:	68a9      	ldr	r1, [r5, #8]
 8014cc8:	4640      	mov	r0, r8
 8014cca:	f006 ff2c 	bl	801bb26 <memcpy>
 8014cce:	68aa      	ldr	r2, [r5, #8]
 8014cd0:	692b      	ldr	r3, [r5, #16]
 8014cd2:	443a      	add	r2, r7
 8014cd4:	443b      	add	r3, r7
 8014cd6:	60aa      	str	r2, [r5, #8]
 8014cd8:	612b      	str	r3, [r5, #16]
 8014cda:	e7ed      	b.n	8014cb8 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014cdc <ucdr_serialize_endian_array_float>:
 8014cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce0:	4688      	mov	r8, r1
 8014ce2:	2104      	movs	r1, #4
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	4616      	mov	r6, r2
 8014ce8:	461f      	mov	r7, r3
 8014cea:	f7fa f803 	bl	800ecf4 <ucdr_buffer_alignment>
 8014cee:	4601      	mov	r1, r0
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	7d65      	ldrb	r5, [r4, #21]
 8014cf4:	f7fa f842 	bl	800ed7c <ucdr_advance_buffer>
 8014cf8:	f1b8 0f01 	cmp.w	r8, #1
 8014cfc:	7565      	strb	r5, [r4, #21]
 8014cfe:	d00f      	beq.n	8014d20 <ucdr_serialize_endian_array_float+0x44>
 8014d00:	2500      	movs	r5, #0
 8014d02:	b147      	cbz	r7, 8014d16 <ucdr_serialize_endian_array_float+0x3a>
 8014d04:	ecb6 0a01 	vldmia	r6!, {s0}
 8014d08:	4641      	mov	r1, r8
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	3501      	adds	r5, #1
 8014d0e:	f7f9 fde5 	bl	800e8dc <ucdr_serialize_endian_float>
 8014d12:	42af      	cmp	r7, r5
 8014d14:	d1f6      	bne.n	8014d04 <ucdr_serialize_endian_array_float+0x28>
 8014d16:	7da0      	ldrb	r0, [r4, #22]
 8014d18:	f080 0001 	eor.w	r0, r0, #1
 8014d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d20:	00bf      	lsls	r7, r7, #2
 8014d22:	4639      	mov	r1, r7
 8014d24:	4620      	mov	r0, r4
 8014d26:	f7f9 ff85 	bl	800ec34 <ucdr_check_buffer_available_for>
 8014d2a:	b9f8      	cbnz	r0, 8014d6c <ucdr_serialize_endian_array_float+0x90>
 8014d2c:	46b8      	mov	r8, r7
 8014d2e:	e00a      	b.n	8014d46 <ucdr_serialize_endian_array_float+0x6a>
 8014d30:	68a0      	ldr	r0, [r4, #8]
 8014d32:	f006 fef8 	bl	801bb26 <memcpy>
 8014d36:	68a2      	ldr	r2, [r4, #8]
 8014d38:	6923      	ldr	r3, [r4, #16]
 8014d3a:	442a      	add	r2, r5
 8014d3c:	442b      	add	r3, r5
 8014d3e:	eba8 0805 	sub.w	r8, r8, r5
 8014d42:	60a2      	str	r2, [r4, #8]
 8014d44:	6123      	str	r3, [r4, #16]
 8014d46:	2204      	movs	r2, #4
 8014d48:	4641      	mov	r1, r8
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f7f9 fffa 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 8014d50:	eba7 0108 	sub.w	r1, r7, r8
 8014d54:	4605      	mov	r5, r0
 8014d56:	4602      	mov	r2, r0
 8014d58:	4431      	add	r1, r6
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	d1e8      	bne.n	8014d30 <ucdr_serialize_endian_array_float+0x54>
 8014d5e:	7da0      	ldrb	r0, [r4, #22]
 8014d60:	2304      	movs	r3, #4
 8014d62:	7563      	strb	r3, [r4, #21]
 8014d64:	f080 0001 	eor.w	r0, r0, #1
 8014d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d6c:	463a      	mov	r2, r7
 8014d6e:	68a0      	ldr	r0, [r4, #8]
 8014d70:	4631      	mov	r1, r6
 8014d72:	f006 fed8 	bl	801bb26 <memcpy>
 8014d76:	68a2      	ldr	r2, [r4, #8]
 8014d78:	6923      	ldr	r3, [r4, #16]
 8014d7a:	443a      	add	r2, r7
 8014d7c:	443b      	add	r3, r7
 8014d7e:	60a2      	str	r2, [r4, #8]
 8014d80:	6123      	str	r3, [r4, #16]
 8014d82:	e7ec      	b.n	8014d5e <ucdr_serialize_endian_array_float+0x82>

08014d84 <ucdr_deserialize_endian_array_float>:
 8014d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d88:	4688      	mov	r8, r1
 8014d8a:	2104      	movs	r1, #4
 8014d8c:	4605      	mov	r5, r0
 8014d8e:	4614      	mov	r4, r2
 8014d90:	461f      	mov	r7, r3
 8014d92:	f7f9 ffaf 	bl	800ecf4 <ucdr_buffer_alignment>
 8014d96:	4601      	mov	r1, r0
 8014d98:	4628      	mov	r0, r5
 8014d9a:	7d6e      	ldrb	r6, [r5, #21]
 8014d9c:	f7f9 ffee 	bl	800ed7c <ucdr_advance_buffer>
 8014da0:	f1b8 0f01 	cmp.w	r8, #1
 8014da4:	756e      	strb	r6, [r5, #21]
 8014da6:	d010      	beq.n	8014dca <ucdr_deserialize_endian_array_float+0x46>
 8014da8:	2600      	movs	r6, #0
 8014daa:	b14f      	cbz	r7, 8014dc0 <ucdr_deserialize_endian_array_float+0x3c>
 8014dac:	4622      	mov	r2, r4
 8014dae:	4641      	mov	r1, r8
 8014db0:	4628      	mov	r0, r5
 8014db2:	3601      	adds	r6, #1
 8014db4:	f7f9 feb2 	bl	800eb1c <ucdr_deserialize_endian_float>
 8014db8:	42b7      	cmp	r7, r6
 8014dba:	f104 0404 	add.w	r4, r4, #4
 8014dbe:	d1f5      	bne.n	8014dac <ucdr_deserialize_endian_array_float+0x28>
 8014dc0:	7da8      	ldrb	r0, [r5, #22]
 8014dc2:	f080 0001 	eor.w	r0, r0, #1
 8014dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dca:	00bf      	lsls	r7, r7, #2
 8014dcc:	4639      	mov	r1, r7
 8014dce:	4628      	mov	r0, r5
 8014dd0:	f7f9 ff30 	bl	800ec34 <ucdr_check_buffer_available_for>
 8014dd4:	b9f8      	cbnz	r0, 8014e16 <ucdr_deserialize_endian_array_float+0x92>
 8014dd6:	46b8      	mov	r8, r7
 8014dd8:	e00a      	b.n	8014df0 <ucdr_deserialize_endian_array_float+0x6c>
 8014dda:	68a9      	ldr	r1, [r5, #8]
 8014ddc:	f006 fea3 	bl	801bb26 <memcpy>
 8014de0:	68aa      	ldr	r2, [r5, #8]
 8014de2:	692b      	ldr	r3, [r5, #16]
 8014de4:	4432      	add	r2, r6
 8014de6:	4433      	add	r3, r6
 8014de8:	eba8 0806 	sub.w	r8, r8, r6
 8014dec:	60aa      	str	r2, [r5, #8]
 8014dee:	612b      	str	r3, [r5, #16]
 8014df0:	2204      	movs	r2, #4
 8014df2:	4641      	mov	r1, r8
 8014df4:	4628      	mov	r0, r5
 8014df6:	f7f9 ffa5 	bl	800ed44 <ucdr_check_final_buffer_behavior_array>
 8014dfa:	4606      	mov	r6, r0
 8014dfc:	eba7 0008 	sub.w	r0, r7, r8
 8014e00:	4632      	mov	r2, r6
 8014e02:	4420      	add	r0, r4
 8014e04:	2e00      	cmp	r6, #0
 8014e06:	d1e8      	bne.n	8014dda <ucdr_deserialize_endian_array_float+0x56>
 8014e08:	7da8      	ldrb	r0, [r5, #22]
 8014e0a:	2304      	movs	r3, #4
 8014e0c:	756b      	strb	r3, [r5, #21]
 8014e0e:	f080 0001 	eor.w	r0, r0, #1
 8014e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e16:	463a      	mov	r2, r7
 8014e18:	68a9      	ldr	r1, [r5, #8]
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f006 fe83 	bl	801bb26 <memcpy>
 8014e20:	68aa      	ldr	r2, [r5, #8]
 8014e22:	692b      	ldr	r3, [r5, #16]
 8014e24:	443a      	add	r2, r7
 8014e26:	443b      	add	r3, r7
 8014e28:	60aa      	str	r2, [r5, #8]
 8014e2a:	612b      	str	r3, [r5, #16]
 8014e2c:	e7ec      	b.n	8014e08 <ucdr_deserialize_endian_array_float+0x84>
 8014e2e:	bf00      	nop

08014e30 <uxr_buffer_delete_entity>:
 8014e30:	b510      	push	{r4, lr}
 8014e32:	2300      	movs	r3, #0
 8014e34:	b08e      	sub	sp, #56	@ 0x38
 8014e36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014e3a:	2303      	movs	r3, #3
 8014e3c:	9300      	str	r3, [sp, #0]
 8014e3e:	2204      	movs	r2, #4
 8014e40:	ab06      	add	r3, sp, #24
 8014e42:	4604      	mov	r4, r0
 8014e44:	f001 fae4 	bl	8016410 <uxr_prepare_stream_to_write_submessage>
 8014e48:	b918      	cbnz	r0, 8014e52 <uxr_buffer_delete_entity+0x22>
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	b00e      	add	sp, #56	@ 0x38
 8014e50:	bd10      	pop	{r4, pc}
 8014e52:	9902      	ldr	r1, [sp, #8]
 8014e54:	aa05      	add	r2, sp, #20
 8014e56:	4620      	mov	r0, r4
 8014e58:	f001 fc14 	bl	8016684 <uxr_init_base_object_request>
 8014e5c:	a905      	add	r1, sp, #20
 8014e5e:	4604      	mov	r4, r0
 8014e60:	a806      	add	r0, sp, #24
 8014e62:	f003 fa87 	bl	8018374 <uxr_serialize_DELETE_Payload>
 8014e66:	4620      	mov	r0, r4
 8014e68:	b00e      	add	sp, #56	@ 0x38
 8014e6a:	bd10      	pop	{r4, pc}

08014e6c <uxr_common_create_entity>:
 8014e6c:	b510      	push	{r4, lr}
 8014e6e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014e72:	b08c      	sub	sp, #48	@ 0x30
 8014e74:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014e78:	f1bc 0f01 	cmp.w	ip, #1
 8014e7c:	bf08      	it	eq
 8014e7e:	f003 0201 	andeq.w	r2, r3, #1
 8014e82:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8014e86:	bf18      	it	ne
 8014e88:	2200      	movne	r2, #0
 8014e8a:	330e      	adds	r3, #14
 8014e8c:	441a      	add	r2, r3
 8014e8e:	2301      	movs	r3, #1
 8014e90:	e9cd 3100 	strd	r3, r1, [sp]
 8014e94:	b292      	uxth	r2, r2
 8014e96:	9903      	ldr	r1, [sp, #12]
 8014e98:	ab04      	add	r3, sp, #16
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	f001 fab8 	bl	8016410 <uxr_prepare_stream_to_write_submessage>
 8014ea0:	b918      	cbnz	r0, 8014eaa <uxr_common_create_entity+0x3e>
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	4620      	mov	r0, r4
 8014ea6:	b00c      	add	sp, #48	@ 0x30
 8014ea8:	bd10      	pop	{r4, pc}
 8014eaa:	9902      	ldr	r1, [sp, #8]
 8014eac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014eae:	4620      	mov	r0, r4
 8014eb0:	f001 fbe8 	bl	8016684 <uxr_init_base_object_request>
 8014eb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014eb6:	4604      	mov	r4, r0
 8014eb8:	a804      	add	r0, sp, #16
 8014eba:	f003 f9b9 	bl	8018230 <uxr_serialize_CREATE_Payload>
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	b00c      	add	sp, #48	@ 0x30
 8014ec2:	bd10      	pop	{r4, pc}

08014ec4 <uxr_buffer_create_participant_bin>:
 8014ec4:	b570      	push	{r4, r5, r6, lr}
 8014ec6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8014eca:	ac11      	add	r4, sp, #68	@ 0x44
 8014ecc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8014ed0:	2303      	movs	r3, #3
 8014ed2:	7223      	strb	r3, [r4, #8]
 8014ed4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8014ed6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8014eda:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014ede:	2201      	movs	r2, #1
 8014ee0:	2100      	movs	r1, #0
 8014ee2:	4605      	mov	r5, r0
 8014ee4:	7122      	strb	r2, [r4, #4]
 8014ee6:	f88d 1014 	strb.w	r1, [sp, #20]
 8014eea:	b1cb      	cbz	r3, 8014f20 <uxr_buffer_create_participant_bin+0x5c>
 8014eec:	f88d 201c 	strb.w	r2, [sp, #28]
 8014ef0:	9308      	str	r3, [sp, #32]
 8014ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ef6:	a915      	add	r1, sp, #84	@ 0x54
 8014ef8:	a809      	add	r0, sp, #36	@ 0x24
 8014efa:	f7f9 feef 	bl	800ecdc <ucdr_init_buffer>
 8014efe:	a905      	add	r1, sp, #20
 8014f00:	a809      	add	r0, sp, #36	@ 0x24
 8014f02:	f002 fd9d 	bl	8017a40 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8014f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014f08:	9600      	str	r6, [sp, #0]
 8014f0a:	9401      	str	r4, [sp, #4]
 8014f0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014f10:	60e3      	str	r3, [r4, #12]
 8014f12:	4628      	mov	r0, r5
 8014f14:	b29b      	uxth	r3, r3
 8014f16:	f7ff ffa9 	bl	8014e6c <uxr_common_create_entity>
 8014f1a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8014f1e:	bd70      	pop	{r4, r5, r6, pc}
 8014f20:	f88d 301c 	strb.w	r3, [sp, #28]
 8014f24:	e7e5      	b.n	8014ef2 <uxr_buffer_create_participant_bin+0x2e>
 8014f26:	bf00      	nop

08014f28 <uxr_buffer_create_topic_bin>:
 8014f28:	b570      	push	{r4, r5, r6, lr}
 8014f2a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8014f2e:	4605      	mov	r5, r0
 8014f30:	9105      	str	r1, [sp, #20]
 8014f32:	4618      	mov	r0, r3
 8014f34:	a997      	add	r1, sp, #604	@ 0x25c
 8014f36:	2302      	movs	r3, #2
 8014f38:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8014f3c:	9204      	str	r2, [sp, #16]
 8014f3e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8014f42:	f000 fa31 	bl	80153a8 <uxr_object_id_to_raw>
 8014f46:	2303      	movs	r3, #3
 8014f48:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8014f4c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8014f4e:	9306      	str	r3, [sp, #24]
 8014f50:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8014f52:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f54:	2301      	movs	r3, #1
 8014f56:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f5e:	2300      	movs	r3, #0
 8014f60:	a917      	add	r1, sp, #92	@ 0x5c
 8014f62:	a80b      	add	r0, sp, #44	@ 0x2c
 8014f64:	f88d 301c 	strb.w	r3, [sp, #28]
 8014f68:	f7f9 feb8 	bl	800ecdc <ucdr_init_buffer>
 8014f6c:	a906      	add	r1, sp, #24
 8014f6e:	a80b      	add	r0, sp, #44	@ 0x2c
 8014f70:	f002 fd88 	bl	8017a84 <uxr_serialize_OBJK_Topic_Binary>
 8014f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f76:	9316      	str	r3, [sp, #88]	@ 0x58
 8014f78:	ac13      	add	r4, sp, #76	@ 0x4c
 8014f7a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014f7e:	9600      	str	r6, [sp, #0]
 8014f80:	9401      	str	r4, [sp, #4]
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	4628      	mov	r0, r5
 8014f86:	f7ff ff71 	bl	8014e6c <uxr_common_create_entity>
 8014f8a:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8014f8e:	bd70      	pop	{r4, r5, r6, pc}

08014f90 <uxr_buffer_create_publisher_bin>:
 8014f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f92:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8014f96:	4605      	mov	r5, r0
 8014f98:	9105      	str	r1, [sp, #20]
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	2603      	movs	r6, #3
 8014f9e:	a992      	add	r1, sp, #584	@ 0x248
 8014fa0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8014fa4:	9204      	str	r2, [sp, #16]
 8014fa6:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8014faa:	f000 f9fd 	bl	80153a8 <uxr_object_id_to_raw>
 8014fae:	2300      	movs	r3, #0
 8014fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014fb4:	a912      	add	r1, sp, #72	@ 0x48
 8014fb6:	a806      	add	r0, sp, #24
 8014fb8:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8014fbc:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8014fc0:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8014fc4:	f7f9 fe8a 	bl	800ecdc <ucdr_init_buffer>
 8014fc8:	a993      	add	r1, sp, #588	@ 0x24c
 8014fca:	a806      	add	r0, sp, #24
 8014fcc:	f002 fe10 	bl	8017bf0 <uxr_serialize_OBJK_Publisher_Binary>
 8014fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014fd2:	9311      	str	r3, [sp, #68]	@ 0x44
 8014fd4:	ac0e      	add	r4, sp, #56	@ 0x38
 8014fd6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014fda:	9700      	str	r7, [sp, #0]
 8014fdc:	9401      	str	r4, [sp, #4]
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	4628      	mov	r0, r5
 8014fe2:	f7ff ff43 	bl	8014e6c <uxr_common_create_entity>
 8014fe6:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8014fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fec <uxr_buffer_create_subscriber_bin>:
 8014fec:	b570      	push	{r4, r5, r6, lr}
 8014fee:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8014ff2:	4605      	mov	r5, r0
 8014ff4:	9105      	str	r1, [sp, #20]
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	a992      	add	r1, sp, #584	@ 0x248
 8014ffa:	2304      	movs	r3, #4
 8014ffc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8015000:	9204      	str	r2, [sp, #16]
 8015002:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8015006:	f000 f9cf 	bl	80153a8 <uxr_object_id_to_raw>
 801500a:	2203      	movs	r2, #3
 801500c:	2300      	movs	r3, #0
 801500e:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 8015012:	a912      	add	r1, sp, #72	@ 0x48
 8015014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015018:	a806      	add	r0, sp, #24
 801501a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801501e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8015022:	f7f9 fe5b 	bl	800ecdc <ucdr_init_buffer>
 8015026:	a993      	add	r1, sp, #588	@ 0x24c
 8015028:	a806      	add	r0, sp, #24
 801502a:	f002 fe93 	bl	8017d54 <uxr_serialize_OBJK_Subscriber_Binary>
 801502e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015030:	9311      	str	r3, [sp, #68]	@ 0x44
 8015032:	ac0e      	add	r4, sp, #56	@ 0x38
 8015034:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015038:	9600      	str	r6, [sp, #0]
 801503a:	9401      	str	r4, [sp, #4]
 801503c:	b29b      	uxth	r3, r3
 801503e:	4628      	mov	r0, r5
 8015040:	f7ff ff14 	bl	8014e6c <uxr_common_create_entity>
 8015044:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8015048:	bd70      	pop	{r4, r5, r6, pc}
 801504a:	bf00      	nop

0801504c <uxr_buffer_create_datawriter_bin>:
 801504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801504e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8015052:	ac1d      	add	r4, sp, #116	@ 0x74
 8015054:	9105      	str	r1, [sp, #20]
 8015056:	4605      	mov	r5, r0
 8015058:	a9a1      	add	r1, sp, #644	@ 0x284
 801505a:	4618      	mov	r0, r3
 801505c:	2305      	movs	r3, #5
 801505e:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 8015062:	9204      	str	r2, [sp, #16]
 8015064:	7123      	strb	r3, [r4, #4]
 8015066:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 801506a:	f000 f99d 	bl	80153a8 <uxr_object_id_to_raw>
 801506e:	2303      	movs	r3, #3
 8015070:	a90e      	add	r1, sp, #56	@ 0x38
 8015072:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8015074:	7223      	strb	r3, [r4, #8]
 8015076:	f000 f997 	bl	80153a8 <uxr_object_id_to_raw>
 801507a:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 801507e:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8015082:	2200      	movs	r2, #0
 8015084:	3f00      	subs	r7, #0
 8015086:	fab3 f383 	clz	r3, r3
 801508a:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 801508e:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8015092:	bf18      	it	ne
 8015094:	2701      	movne	r7, #1
 8015096:	095b      	lsrs	r3, r3, #5
 8015098:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 801509c:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 80150a0:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 80150a4:	2201      	movs	r2, #1
 80150a6:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 80150aa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80150ae:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 80150b2:	b919      	cbnz	r1, 80150bc <uxr_buffer_create_datawriter_bin+0x70>
 80150b4:	f043 0302 	orr.w	r3, r3, #2
 80150b8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80150bc:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 80150c0:	2a01      	cmp	r2, #1
 80150c2:	d022      	beq.n	801510a <uxr_buffer_create_datawriter_bin+0xbe>
 80150c4:	2a03      	cmp	r2, #3
 80150c6:	d01b      	beq.n	8015100 <uxr_buffer_create_datawriter_bin+0xb4>
 80150c8:	b91a      	cbnz	r2, 80150d2 <uxr_buffer_create_datawriter_bin+0x86>
 80150ca:	f043 0308 	orr.w	r3, r3, #8
 80150ce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80150d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80150d6:	a921      	add	r1, sp, #132	@ 0x84
 80150d8:	a806      	add	r0, sp, #24
 80150da:	f7f9 fdff 	bl	800ecdc <ucdr_init_buffer>
 80150de:	a90e      	add	r1, sp, #56	@ 0x38
 80150e0:	a806      	add	r0, sp, #24
 80150e2:	f002 fed9 	bl	8017e98 <uxr_serialize_OBJK_DataWriter_Binary>
 80150e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80150e8:	9600      	str	r6, [sp, #0]
 80150ea:	9401      	str	r4, [sp, #4]
 80150ec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80150f0:	60e3      	str	r3, [r4, #12]
 80150f2:	4628      	mov	r0, r5
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	f7ff feb9 	bl	8014e6c <uxr_common_create_entity>
 80150fa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80150fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015100:	f043 0320 	orr.w	r3, r3, #32
 8015104:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015108:	e7e3      	b.n	80150d2 <uxr_buffer_create_datawriter_bin+0x86>
 801510a:	f043 0310 	orr.w	r3, r3, #16
 801510e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015112:	e7de      	b.n	80150d2 <uxr_buffer_create_datawriter_bin+0x86>

08015114 <uxr_buffer_create_datareader_bin>:
 8015114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015116:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 801511a:	ac1f      	add	r4, sp, #124	@ 0x7c
 801511c:	9105      	str	r1, [sp, #20]
 801511e:	4605      	mov	r5, r0
 8015120:	a9a3      	add	r1, sp, #652	@ 0x28c
 8015122:	4618      	mov	r0, r3
 8015124:	2306      	movs	r3, #6
 8015126:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 801512a:	9204      	str	r2, [sp, #16]
 801512c:	7123      	strb	r3, [r4, #4]
 801512e:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 8015132:	f000 f939 	bl	80153a8 <uxr_object_id_to_raw>
 8015136:	2303      	movs	r3, #3
 8015138:	a90e      	add	r1, sp, #56	@ 0x38
 801513a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801513c:	7223      	strb	r3, [r4, #8]
 801513e:	f000 f933 	bl	80153a8 <uxr_object_id_to_raw>
 8015142:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 8015146:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 801514a:	2200      	movs	r2, #0
 801514c:	3f00      	subs	r7, #0
 801514e:	fab3 f383 	clz	r3, r3
 8015152:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 8015156:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 801515a:	bf18      	it	ne
 801515c:	2701      	movne	r7, #1
 801515e:	095b      	lsrs	r3, r3, #5
 8015160:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8015164:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8015168:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 801516c:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8015170:	2201      	movs	r2, #1
 8015172:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8015176:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801517a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 801517e:	b919      	cbnz	r1, 8015188 <uxr_buffer_create_datareader_bin+0x74>
 8015180:	f043 0302 	orr.w	r3, r3, #2
 8015184:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015188:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 801518c:	2a01      	cmp	r2, #1
 801518e:	d022      	beq.n	80151d6 <uxr_buffer_create_datareader_bin+0xc2>
 8015190:	2a03      	cmp	r2, #3
 8015192:	d01b      	beq.n	80151cc <uxr_buffer_create_datareader_bin+0xb8>
 8015194:	b91a      	cbnz	r2, 801519e <uxr_buffer_create_datareader_bin+0x8a>
 8015196:	f043 0308 	orr.w	r3, r3, #8
 801519a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801519e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151a2:	a923      	add	r1, sp, #140	@ 0x8c
 80151a4:	a806      	add	r0, sp, #24
 80151a6:	f7f9 fd99 	bl	800ecdc <ucdr_init_buffer>
 80151aa:	a90e      	add	r1, sp, #56	@ 0x38
 80151ac:	a806      	add	r0, sp, #24
 80151ae:	f002 fe37 	bl	8017e20 <uxr_serialize_OBJK_DataReader_Binary>
 80151b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80151b4:	9600      	str	r6, [sp, #0]
 80151b6:	9401      	str	r4, [sp, #4]
 80151b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80151bc:	60e3      	str	r3, [r4, #12]
 80151be:	4628      	mov	r0, r5
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	f7ff fe53 	bl	8014e6c <uxr_common_create_entity>
 80151c6:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 80151ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151cc:	f043 0320 	orr.w	r3, r3, #32
 80151d0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80151d4:	e7e3      	b.n	801519e <uxr_buffer_create_datareader_bin+0x8a>
 80151d6:	f043 0310 	orr.w	r3, r3, #16
 80151da:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80151de:	e7de      	b.n	801519e <uxr_buffer_create_datareader_bin+0x8a>

080151e0 <get_custom_error>:
 80151e0:	4b01      	ldr	r3, [pc, #4]	@ (80151e8 <get_custom_error+0x8>)
 80151e2:	7818      	ldrb	r0, [r3, #0]
 80151e4:	4770      	bx	lr
 80151e6:	bf00      	nop
 80151e8:	2001785a 	.word	0x2001785a

080151ec <recv_custom_msg>:
 80151ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151f0:	b089      	sub	sp, #36	@ 0x24
 80151f2:	4693      	mov	fp, r2
 80151f4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80151f8:	9104      	str	r1, [sp, #16]
 80151fa:	2100      	movs	r1, #0
 80151fc:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8015200:	9305      	str	r3, [sp, #20]
 8015202:	4604      	mov	r4, r0
 8015204:	f88d 101e 	strb.w	r1, [sp, #30]
 8015208:	b332      	cbz	r2, 8015258 <recv_custom_msg+0x6c>
 801520a:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 801520e:	f10d 091f 	add.w	r9, sp, #31
 8015212:	f10d 0814 	add.w	r8, sp, #20
 8015216:	f10d 071e 	add.w	r7, sp, #30
 801521a:	f44f 7600 	mov.w	r6, #512	@ 0x200
 801521e:	e004      	b.n	801522a <recv_custom_msg+0x3e>
 8015220:	9b05      	ldr	r3, [sp, #20]
 8015222:	2b00      	cmp	r3, #0
 8015224:	dd10      	ble.n	8015248 <recv_custom_msg+0x5c>
 8015226:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 801522a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801522e:	e9cd 6700 	strd	r6, r7, [sp]
 8015232:	4623      	mov	r3, r4
 8015234:	4622      	mov	r2, r4
 8015236:	4629      	mov	r1, r5
 8015238:	4650      	mov	r0, sl
 801523a:	f001 fc35 	bl	8016aa8 <uxr_read_framed_msg>
 801523e:	2800      	cmp	r0, #0
 8015240:	d0ee      	beq.n	8015220 <recv_custom_msg+0x34>
 8015242:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015246:	b1a3      	cbz	r3, 8015272 <recv_custom_msg+0x86>
 8015248:	4b0e      	ldr	r3, [pc, #56]	@ (8015284 <recv_custom_msg+0x98>)
 801524a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801524e:	701a      	strb	r2, [r3, #0]
 8015250:	2000      	movs	r0, #0
 8015252:	b009      	add	sp, #36	@ 0x24
 8015254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015258:	f10d 021f 	add.w	r2, sp, #31
 801525c:	9200      	str	r2, [sp, #0]
 801525e:	4601      	mov	r1, r0
 8015260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015264:	47a8      	blx	r5
 8015266:	2800      	cmp	r0, #0
 8015268:	d0ee      	beq.n	8015248 <recv_custom_msg+0x5c>
 801526a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d1ea      	bne.n	8015248 <recv_custom_msg+0x5c>
 8015272:	9b04      	ldr	r3, [sp, #16]
 8015274:	f8cb 0000 	str.w	r0, [fp]
 8015278:	2001      	movs	r0, #1
 801527a:	601c      	str	r4, [r3, #0]
 801527c:	b009      	add	sp, #36	@ 0x24
 801527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015282:	bf00      	nop
 8015284:	2001785a 	.word	0x2001785a

08015288 <send_custom_msg>:
 8015288:	b570      	push	{r4, r5, r6, lr}
 801528a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801528e:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8015292:	b086      	sub	sp, #24
 8015294:	4616      	mov	r6, r2
 8015296:	b965      	cbnz	r5, 80152b2 <send_custom_msg+0x2a>
 8015298:	f10d 0317 	add.w	r3, sp, #23
 801529c:	47a0      	blx	r4
 801529e:	b108      	cbz	r0, 80152a4 <send_custom_msg+0x1c>
 80152a0:	42b0      	cmp	r0, r6
 80152a2:	d014      	beq.n	80152ce <send_custom_msg+0x46>
 80152a4:	4b0b      	ldr	r3, [pc, #44]	@ (80152d4 <send_custom_msg+0x4c>)
 80152a6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80152aa:	701a      	strb	r2, [r3, #0]
 80152ac:	2000      	movs	r0, #0
 80152ae:	b006      	add	sp, #24
 80152b0:	bd70      	pop	{r4, r5, r6, pc}
 80152b2:	f10d 0217 	add.w	r2, sp, #23
 80152b6:	9202      	str	r2, [sp, #8]
 80152b8:	2200      	movs	r2, #0
 80152ba:	e9cd 6200 	strd	r6, r2, [sp]
 80152be:	460b      	mov	r3, r1
 80152c0:	4602      	mov	r2, r0
 80152c2:	4621      	mov	r1, r4
 80152c4:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80152c8:	f001 fa10 	bl	80166ec <uxr_write_framed_msg>
 80152cc:	e7e7      	b.n	801529e <send_custom_msg+0x16>
 80152ce:	2001      	movs	r0, #1
 80152d0:	b006      	add	sp, #24
 80152d2:	bd70      	pop	{r4, r5, r6, pc}
 80152d4:	2001785a 	.word	0x2001785a

080152d8 <uxr_set_custom_transport_callbacks>:
 80152d8:	b410      	push	{r4}
 80152da:	9c01      	ldr	r4, [sp, #4]
 80152dc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80152e0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80152e4:	9b02      	ldr	r3, [sp, #8]
 80152e6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80152ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152ee:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80152f2:	4770      	bx	lr

080152f4 <uxr_init_custom_transport>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80152fa:	b303      	cbz	r3, 801533e <uxr_init_custom_transport+0x4a>
 80152fc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8015300:	4604      	mov	r4, r0
 8015302:	b1e2      	cbz	r2, 801533e <uxr_init_custom_transport+0x4a>
 8015304:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8015308:	b1ca      	cbz	r2, 801533e <uxr_init_custom_transport+0x4a>
 801530a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801530e:	b1b2      	cbz	r2, 801533e <uxr_init_custom_transport+0x4a>
 8015310:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8015314:	4798      	blx	r3
 8015316:	4605      	mov	r5, r0
 8015318:	b188      	cbz	r0, 801533e <uxr_init_custom_transport+0x4a>
 801531a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801531e:	b98b      	cbnz	r3, 8015344 <uxr_init_custom_transport+0x50>
 8015320:	490b      	ldr	r1, [pc, #44]	@ (8015350 <uxr_init_custom_transport+0x5c>)
 8015322:	4b0c      	ldr	r3, [pc, #48]	@ (8015354 <uxr_init_custom_transport+0x60>)
 8015324:	4a0c      	ldr	r2, [pc, #48]	@ (8015358 <uxr_init_custom_transport+0x64>)
 8015326:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801532a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801532e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8015332:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8015336:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801533a:	4628      	mov	r0, r5
 801533c:	bd38      	pop	{r3, r4, r5, pc}
 801533e:	2500      	movs	r5, #0
 8015340:	4628      	mov	r0, r5
 8015342:	bd38      	pop	{r3, r4, r5, pc}
 8015344:	2100      	movs	r1, #0
 8015346:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801534a:	f001 f9c9 	bl	80166e0 <uxr_init_framing_io>
 801534e:	e7e7      	b.n	8015320 <uxr_init_custom_transport+0x2c>
 8015350:	08015289 	.word	0x08015289
 8015354:	080151ed 	.word	0x080151ed
 8015358:	080151e1 	.word	0x080151e1

0801535c <uxr_close_custom_transport>:
 801535c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8015360:	4718      	bx	r3
 8015362:	bf00      	nop

08015364 <uxr_object_id>:
 8015364:	b082      	sub	sp, #8
 8015366:	2300      	movs	r3, #0
 8015368:	f88d 1006 	strb.w	r1, [sp, #6]
 801536c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015370:	f360 030f 	bfi	r3, r0, #0, #16
 8015374:	f362 431f 	bfi	r3, r2, #16, #16
 8015378:	4618      	mov	r0, r3
 801537a:	b002      	add	sp, #8
 801537c:	4770      	bx	lr
 801537e:	bf00      	nop

08015380 <uxr_object_id_from_raw>:
 8015380:	7843      	ldrb	r3, [r0, #1]
 8015382:	7801      	ldrb	r1, [r0, #0]
 8015384:	b082      	sub	sp, #8
 8015386:	f003 020f 	and.w	r2, r3, #15
 801538a:	f88d 2006 	strb.w	r2, [sp, #6]
 801538e:	091b      	lsrs	r3, r3, #4
 8015390:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015394:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8015398:	2000      	movs	r0, #0
 801539a:	f363 000f 	bfi	r0, r3, #0, #16
 801539e:	f362 401f 	bfi	r0, r2, #16, #16
 80153a2:	b002      	add	sp, #8
 80153a4:	4770      	bx	lr
 80153a6:	bf00      	nop

080153a8 <uxr_object_id_to_raw>:
 80153a8:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80153ac:	b082      	sub	sp, #8
 80153ae:	f3c0 120b 	ubfx	r2, r0, #4, #12
 80153b2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80153b6:	700a      	strb	r2, [r1, #0]
 80153b8:	704b      	strb	r3, [r1, #1]
 80153ba:	b002      	add	sp, #8
 80153bc:	4770      	bx	lr
 80153be:	bf00      	nop

080153c0 <uxr_buffer_request_data>:
 80153c0:	b530      	push	{r4, r5, lr}
 80153c2:	b095      	sub	sp, #84	@ 0x54
 80153c4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80153c8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80153ca:	f88d 301c 	strb.w	r3, [sp, #28]
 80153ce:	2200      	movs	r2, #0
 80153d0:	2d00      	cmp	r5, #0
 80153d2:	bf14      	ite	ne
 80153d4:	2101      	movne	r1, #1
 80153d6:	4611      	moveq	r1, r2
 80153d8:	4604      	mov	r4, r0
 80153da:	f88d 201d 	strb.w	r2, [sp, #29]
 80153de:	f88d 201e 	strb.w	r2, [sp, #30]
 80153e2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80153e6:	d021      	beq.n	801542c <uxr_buffer_request_data+0x6c>
 80153e8:	682a      	ldr	r2, [r5, #0]
 80153ea:	686b      	ldr	r3, [r5, #4]
 80153ec:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80153f0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80153f4:	2210      	movs	r2, #16
 80153f6:	2308      	movs	r3, #8
 80153f8:	2100      	movs	r1, #0
 80153fa:	e9cd 3100 	strd	r3, r1, [sp]
 80153fe:	4620      	mov	r0, r4
 8015400:	9905      	ldr	r1, [sp, #20]
 8015402:	ab0c      	add	r3, sp, #48	@ 0x30
 8015404:	f001 f804 	bl	8016410 <uxr_prepare_stream_to_write_submessage>
 8015408:	b918      	cbnz	r0, 8015412 <uxr_buffer_request_data+0x52>
 801540a:	4604      	mov	r4, r0
 801540c:	4620      	mov	r0, r4
 801540e:	b015      	add	sp, #84	@ 0x54
 8015410:	bd30      	pop	{r4, r5, pc}
 8015412:	9904      	ldr	r1, [sp, #16]
 8015414:	aa06      	add	r2, sp, #24
 8015416:	4620      	mov	r0, r4
 8015418:	f001 f934 	bl	8016684 <uxr_init_base_object_request>
 801541c:	a906      	add	r1, sp, #24
 801541e:	4604      	mov	r4, r0
 8015420:	a80c      	add	r0, sp, #48	@ 0x30
 8015422:	f003 f851 	bl	80184c8 <uxr_serialize_READ_DATA_Payload>
 8015426:	4620      	mov	r0, r4
 8015428:	b015      	add	sp, #84	@ 0x54
 801542a:	bd30      	pop	{r4, r5, pc}
 801542c:	2208      	movs	r2, #8
 801542e:	e7e2      	b.n	80153f6 <uxr_buffer_request_data+0x36>

08015430 <uxr_buffer_cancel_data>:
 8015430:	b510      	push	{r4, lr}
 8015432:	b094      	sub	sp, #80	@ 0x50
 8015434:	2300      	movs	r3, #0
 8015436:	9301      	str	r3, [sp, #4]
 8015438:	9205      	str	r2, [sp, #20]
 801543a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801543e:	2201      	movs	r2, #1
 8015440:	f88d 301e 	strb.w	r3, [sp, #30]
 8015444:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015448:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801544c:	2308      	movs	r3, #8
 801544e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015452:	9300      	str	r3, [sp, #0]
 8015454:	2210      	movs	r2, #16
 8015456:	ab0c      	add	r3, sp, #48	@ 0x30
 8015458:	4604      	mov	r4, r0
 801545a:	f000 ffd9 	bl	8016410 <uxr_prepare_stream_to_write_submessage>
 801545e:	b918      	cbnz	r0, 8015468 <uxr_buffer_cancel_data+0x38>
 8015460:	4604      	mov	r4, r0
 8015462:	4620      	mov	r0, r4
 8015464:	b014      	add	sp, #80	@ 0x50
 8015466:	bd10      	pop	{r4, pc}
 8015468:	9905      	ldr	r1, [sp, #20]
 801546a:	aa06      	add	r2, sp, #24
 801546c:	4620      	mov	r0, r4
 801546e:	f001 f909 	bl	8016684 <uxr_init_base_object_request>
 8015472:	a906      	add	r1, sp, #24
 8015474:	4604      	mov	r4, r0
 8015476:	a80c      	add	r0, sp, #48	@ 0x30
 8015478:	f003 f826 	bl	80184c8 <uxr_serialize_READ_DATA_Payload>
 801547c:	4620      	mov	r0, r4
 801547e:	b014      	add	sp, #80	@ 0x50
 8015480:	bd10      	pop	{r4, pc}
 8015482:	bf00      	nop

08015484 <read_submessage_format>:
 8015484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015488:	b095      	sub	sp, #84	@ 0x54
 801548a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801548e:	b113      	cbz	r3, 8015496 <read_submessage_format+0x12>
 8015490:	b015      	add	sp, #84	@ 0x54
 8015492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015496:	460c      	mov	r4, r1
 8015498:	4616      	mov	r6, r2
 801549a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801549e:	461d      	mov	r5, r3
 80154a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80154a2:	9304      	str	r3, [sp, #16]
 80154a4:	1a52      	subs	r2, r2, r1
 80154a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80154a8:	9305      	str	r3, [sp, #20]
 80154aa:	4680      	mov	r8, r0
 80154ac:	a80c      	add	r0, sp, #48	@ 0x30
 80154ae:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 80154b2:	f7f9 fc13 	bl	800ecdc <ucdr_init_buffer>
 80154b6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80154ba:	a80c      	add	r0, sp, #48	@ 0x30
 80154bc:	f7f9 fbe2 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 80154c0:	69e3      	ldr	r3, [r4, #28]
 80154c2:	b35b      	cbz	r3, 801551c <read_submessage_format+0x98>
 80154c4:	f1b9 0f07 	cmp.w	r9, #7
 80154c8:	751d      	strb	r5, [r3, #20]
 80154ca:	d043      	beq.n	8015554 <read_submessage_format+0xd0>
 80154cc:	f1b9 0f08 	cmp.w	r9, #8
 80154d0:	d032      	beq.n	8015538 <read_submessage_format+0xb4>
 80154d2:	f1b9 0f06 	cmp.w	r9, #6
 80154d6:	d008      	beq.n	80154ea <read_submessage_format+0x66>
 80154d8:	2201      	movs	r2, #1
 80154da:	751a      	strb	r2, [r3, #20]
 80154dc:	4631      	mov	r1, r6
 80154de:	4620      	mov	r0, r4
 80154e0:	f7f9 fc4c 	bl	800ed7c <ucdr_advance_buffer>
 80154e4:	b015      	add	sp, #84	@ 0x54
 80154e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154ea:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80154ee:	2d00      	cmp	r5, #0
 80154f0:	d0f2      	beq.n	80154d8 <read_submessage_format+0x54>
 80154f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80154f4:	e9cd 3600 	strd	r3, r6, [sp]
 80154f8:	2306      	movs	r3, #6
 80154fa:	f88d 3016 	strb.w	r3, [sp, #22]
 80154fe:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 8015502:	9302      	str	r3, [sp, #8]
 8015504:	463a      	mov	r2, r7
 8015506:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801550a:	4640      	mov	r0, r8
 801550c:	47a8      	blx	r5
 801550e:	69e3      	ldr	r3, [r4, #28]
 8015510:	2201      	movs	r2, #1
 8015512:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8015516:	2b00      	cmp	r3, #0
 8015518:	d1de      	bne.n	80154d8 <read_submessage_format+0x54>
 801551a:	e7df      	b.n	80154dc <read_submessage_format+0x58>
 801551c:	f1b9 0f07 	cmp.w	r9, #7
 8015520:	d032      	beq.n	8015588 <read_submessage_format+0x104>
 8015522:	f1b9 0f08 	cmp.w	r9, #8
 8015526:	d02a      	beq.n	801557e <read_submessage_format+0xfa>
 8015528:	f1b9 0f06 	cmp.w	r9, #6
 801552c:	d1d6      	bne.n	80154dc <read_submessage_format+0x58>
 801552e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8015532:	2d00      	cmp	r5, #0
 8015534:	d1dd      	bne.n	80154f2 <read_submessage_format+0x6e>
 8015536:	e7d1      	b.n	80154dc <read_submessage_format+0x58>
 8015538:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 801553c:	2a00      	cmp	r2, #0
 801553e:	d0cb      	beq.n	80154d8 <read_submessage_format+0x54>
 8015540:	a906      	add	r1, sp, #24
 8015542:	a80c      	add	r0, sp, #48	@ 0x30
 8015544:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8015546:	f003 f885 	bl	8018654 <uxr_deserialize_SampleIdentity>
 801554a:	bb28      	cbnz	r0, 8015598 <read_submessage_format+0x114>
 801554c:	69e3      	ldr	r3, [r4, #28]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d1c2      	bne.n	80154d8 <read_submessage_format+0x54>
 8015552:	e7c3      	b.n	80154dc <read_submessage_format+0x58>
 8015554:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8015558:	b16a      	cbz	r2, 8015576 <read_submessage_format+0xf2>
 801555a:	a906      	add	r1, sp, #24
 801555c:	a80c      	add	r0, sp, #48	@ 0x30
 801555e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8015560:	f002 fd66 	bl	8018030 <uxr_deserialize_BaseObjectRequest>
 8015564:	2800      	cmp	r0, #0
 8015566:	d13a      	bne.n	80155de <read_submessage_format+0x15a>
 8015568:	68a2      	ldr	r2, [r4, #8]
 801556a:	69e3      	ldr	r3, [r4, #28]
 801556c:	4432      	add	r2, r6
 801556e:	60a2      	str	r2, [r4, #8]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d1b1      	bne.n	80154d8 <read_submessage_format+0x54>
 8015574:	e7b2      	b.n	80154dc <read_submessage_format+0x58>
 8015576:	68a2      	ldr	r2, [r4, #8]
 8015578:	4432      	add	r2, r6
 801557a:	60a2      	str	r2, [r4, #8]
 801557c:	e7ac      	b.n	80154d8 <read_submessage_format+0x54>
 801557e:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 8015582:	2b00      	cmp	r3, #0
 8015584:	d1dc      	bne.n	8015540 <read_submessage_format+0xbc>
 8015586:	e7a9      	b.n	80154dc <read_submessage_format+0x58>
 8015588:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 801558c:	2b00      	cmp	r3, #0
 801558e:	d1e4      	bne.n	801555a <read_submessage_format+0xd6>
 8015590:	68a3      	ldr	r3, [r4, #8]
 8015592:	4433      	add	r3, r6
 8015594:	60a3      	str	r3, [r4, #8]
 8015596:	e7a1      	b.n	80154dc <read_submessage_format+0x58>
 8015598:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801559c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801559e:	1a52      	subs	r2, r2, r1
 80155a0:	1aed      	subs	r5, r5, r3
 80155a2:	a80c      	add	r0, sp, #48	@ 0x30
 80155a4:	f7f9 fb9a 	bl	800ecdc <ucdr_init_buffer>
 80155a8:	4435      	add	r5, r6
 80155aa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80155ae:	a80c      	add	r0, sp, #48	@ 0x30
 80155b0:	f7f9 fb68 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 80155b4:	b2ad      	uxth	r5, r5
 80155b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80155b8:	9300      	str	r3, [sp, #0]
 80155ba:	9501      	str	r5, [sp, #4]
 80155bc:	2108      	movs	r1, #8
 80155be:	f88d 1016 	strb.w	r1, [sp, #22]
 80155c2:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 80155c6:	9102      	str	r1, [sp, #8]
 80155c8:	ab06      	add	r3, sp, #24
 80155ca:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 80155ce:	9905      	ldr	r1, [sp, #20]
 80155d0:	463a      	mov	r2, r7
 80155d2:	4640      	mov	r0, r8
 80155d4:	47a8      	blx	r5
 80155d6:	2301      	movs	r3, #1
 80155d8:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80155dc:	e7b6      	b.n	801554c <read_submessage_format+0xc8>
 80155de:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80155e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80155e4:	1a52      	subs	r2, r2, r1
 80155e6:	1aed      	subs	r5, r5, r3
 80155e8:	a80c      	add	r0, sp, #48	@ 0x30
 80155ea:	f7f9 fb77 	bl	800ecdc <ucdr_init_buffer>
 80155ee:	4435      	add	r5, r6
 80155f0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80155f4:	a80c      	add	r0, sp, #48	@ 0x30
 80155f6:	f7f9 fb45 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 80155fa:	b2ad      	uxth	r5, r5
 80155fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80155fe:	9300      	str	r3, [sp, #0]
 8015600:	9501      	str	r5, [sp, #4]
 8015602:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015606:	2107      	movs	r1, #7
 8015608:	f88d 1016 	strb.w	r1, [sp, #22]
 801560c:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 8015610:	9102      	str	r1, [sp, #8]
 8015612:	ba5b      	rev16	r3, r3
 8015614:	b29b      	uxth	r3, r3
 8015616:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 801561a:	9905      	ldr	r1, [sp, #20]
 801561c:	463a      	mov	r2, r7
 801561e:	4640      	mov	r0, r8
 8015620:	47a8      	blx	r5
 8015622:	2301      	movs	r3, #1
 8015624:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015628:	e79e      	b.n	8015568 <read_submessage_format+0xe4>
 801562a:	bf00      	nop

0801562c <on_get_fragmentation_info>:
 801562c:	b500      	push	{lr}
 801562e:	b08b      	sub	sp, #44	@ 0x2c
 8015630:	4601      	mov	r1, r0
 8015632:	2204      	movs	r2, #4
 8015634:	a802      	add	r0, sp, #8
 8015636:	f7f9 fb51 	bl	800ecdc <ucdr_init_buffer>
 801563a:	f10d 0305 	add.w	r3, sp, #5
 801563e:	f10d 0206 	add.w	r2, sp, #6
 8015642:	a901      	add	r1, sp, #4
 8015644:	a802      	add	r0, sp, #8
 8015646:	f001 fde7 	bl	8017218 <uxr_read_submessage_header>
 801564a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801564e:	2b0d      	cmp	r3, #13
 8015650:	d003      	beq.n	801565a <on_get_fragmentation_info+0x2e>
 8015652:	2000      	movs	r0, #0
 8015654:	b00b      	add	sp, #44	@ 0x2c
 8015656:	f85d fb04 	ldr.w	pc, [sp], #4
 801565a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801565e:	f013 0f02 	tst.w	r3, #2
 8015662:	bf0c      	ite	eq
 8015664:	2001      	moveq	r0, #1
 8015666:	2002      	movne	r0, #2
 8015668:	b00b      	add	sp, #44	@ 0x2c
 801566a:	f85d fb04 	ldr.w	pc, [sp], #4
 801566e:	bf00      	nop

08015670 <read_submessage_get_info>:
 8015670:	b570      	push	{r4, r5, r6, lr}
 8015672:	2500      	movs	r5, #0
 8015674:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8015678:	4604      	mov	r4, r0
 801567a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801567e:	460e      	mov	r6, r1
 8015680:	a810      	add	r0, sp, #64	@ 0x40
 8015682:	4629      	mov	r1, r5
 8015684:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8015688:	f006 f918 	bl	801b8bc <memset>
 801568c:	a903      	add	r1, sp, #12
 801568e:	4630      	mov	r0, r6
 8015690:	f002 fe5c 	bl	801834c <uxr_deserialize_GET_INFO_Payload>
 8015694:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015698:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801569c:	4620      	mov	r0, r4
 801569e:	f000 ffe9 	bl	8016674 <uxr_session_header_offset>
 80156a2:	462b      	mov	r3, r5
 80156a4:	9000      	str	r0, [sp, #0]
 80156a6:	220c      	movs	r2, #12
 80156a8:	a905      	add	r1, sp, #20
 80156aa:	a808      	add	r0, sp, #32
 80156ac:	f7f9 fb04 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 80156b0:	a910      	add	r1, sp, #64	@ 0x40
 80156b2:	a808      	add	r0, sp, #32
 80156b4:	f002 febc 	bl	8018430 <uxr_serialize_INFO_Payload>
 80156b8:	9b08      	ldr	r3, [sp, #32]
 80156ba:	462a      	mov	r2, r5
 80156bc:	4629      	mov	r1, r5
 80156be:	4620      	mov	r0, r4
 80156c0:	f000 ff84 	bl	80165cc <uxr_stamp_session_header>
 80156c4:	a808      	add	r0, sp, #32
 80156c6:	f7f9 fb35 	bl	800ed34 <ucdr_buffer_length>
 80156ca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80156cc:	4602      	mov	r2, r0
 80156ce:	a905      	add	r1, sp, #20
 80156d0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80156d4:	47a0      	blx	r4
 80156d6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80156da:	bd70      	pop	{r4, r5, r6, pc}

080156dc <write_submessage_acknack.isra.0>:
 80156dc:	b570      	push	{r4, r5, r6, lr}
 80156de:	b092      	sub	sp, #72	@ 0x48
 80156e0:	4605      	mov	r5, r0
 80156e2:	460e      	mov	r6, r1
 80156e4:	4614      	mov	r4, r2
 80156e6:	f000 ffc5 	bl	8016674 <uxr_session_header_offset>
 80156ea:	a905      	add	r1, sp, #20
 80156ec:	9000      	str	r0, [sp, #0]
 80156ee:	2300      	movs	r3, #0
 80156f0:	a80a      	add	r0, sp, #40	@ 0x28
 80156f2:	2211      	movs	r2, #17
 80156f4:	f7f9 fae0 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 80156f8:	2318      	movs	r3, #24
 80156fa:	fb03 5404 	mla	r4, r3, r4, r5
 80156fe:	2205      	movs	r2, #5
 8015700:	2300      	movs	r3, #0
 8015702:	3450      	adds	r4, #80	@ 0x50
 8015704:	210a      	movs	r1, #10
 8015706:	a80a      	add	r0, sp, #40	@ 0x28
 8015708:	f001 fd6c 	bl	80171e4 <uxr_buffer_submessage_header>
 801570c:	a903      	add	r1, sp, #12
 801570e:	4620      	mov	r0, r4
 8015710:	f004 f94a 	bl	80199a8 <uxr_compute_acknack>
 8015714:	ba40      	rev16	r0, r0
 8015716:	f8ad 000e 	strh.w	r0, [sp, #14]
 801571a:	a903      	add	r1, sp, #12
 801571c:	a80a      	add	r0, sp, #40	@ 0x28
 801571e:	f88d 6010 	strb.w	r6, [sp, #16]
 8015722:	f002 fef5 	bl	8018510 <uxr_serialize_ACKNACK_Payload>
 8015726:	2200      	movs	r2, #0
 8015728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801572a:	4611      	mov	r1, r2
 801572c:	4628      	mov	r0, r5
 801572e:	f000 ff4d 	bl	80165cc <uxr_stamp_session_header>
 8015732:	a80a      	add	r0, sp, #40	@ 0x28
 8015734:	f7f9 fafe 	bl	800ed34 <ucdr_buffer_length>
 8015738:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801573a:	4602      	mov	r2, r0
 801573c:	a905      	add	r1, sp, #20
 801573e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8015742:	47a0      	blx	r4
 8015744:	b012      	add	sp, #72	@ 0x48
 8015746:	bd70      	pop	{r4, r5, r6, pc}

08015748 <uxr_init_session>:
 8015748:	b510      	push	{r4, lr}
 801574a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8015780 <uxr_init_session+0x38>
 801574e:	2300      	movs	r3, #0
 8015750:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8015754:	4604      	mov	r4, r0
 8015756:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801575a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801575e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8015762:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8015766:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801576a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801576e:	2181      	movs	r1, #129	@ 0x81
 8015770:	f000 fe90 	bl	8016494 <uxr_init_session_info>
 8015774:	f104 0008 	add.w	r0, r4, #8
 8015778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801577c:	f001 bc4e 	b.w	801701c <uxr_init_stream_storage>
	...

08015788 <uxr_set_status_callback>:
 8015788:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801578c:	4770      	bx	lr
 801578e:	bf00      	nop

08015790 <uxr_set_topic_callback>:
 8015790:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8015794:	4770      	bx	lr
 8015796:	bf00      	nop

08015798 <uxr_set_request_callback>:
 8015798:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801579c:	4770      	bx	lr
 801579e:	bf00      	nop

080157a0 <uxr_set_reply_callback>:
 80157a0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop

080157a8 <uxr_create_output_best_effort_stream>:
 80157a8:	b570      	push	{r4, r5, r6, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	4604      	mov	r4, r0
 80157ae:	460d      	mov	r5, r1
 80157b0:	4616      	mov	r6, r2
 80157b2:	f000 ff5f 	bl	8016674 <uxr_session_header_offset>
 80157b6:	4632      	mov	r2, r6
 80157b8:	4603      	mov	r3, r0
 80157ba:	4629      	mov	r1, r5
 80157bc:	f104 0008 	add.w	r0, r4, #8
 80157c0:	b002      	add	sp, #8
 80157c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157c6:	f001 bc73 	b.w	80170b0 <uxr_add_output_best_effort_buffer>
 80157ca:	bf00      	nop

080157cc <uxr_create_output_reliable_stream>:
 80157cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ce:	b085      	sub	sp, #20
 80157d0:	4604      	mov	r4, r0
 80157d2:	460d      	mov	r5, r1
 80157d4:	4616      	mov	r6, r2
 80157d6:	461f      	mov	r7, r3
 80157d8:	f000 ff4c 	bl	8016674 <uxr_session_header_offset>
 80157dc:	463b      	mov	r3, r7
 80157de:	9000      	str	r0, [sp, #0]
 80157e0:	4632      	mov	r2, r6
 80157e2:	4629      	mov	r1, r5
 80157e4:	f104 0008 	add.w	r0, r4, #8
 80157e8:	f001 fc76 	bl	80170d8 <uxr_add_output_reliable_buffer>
 80157ec:	b005      	add	sp, #20
 80157ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157f0 <uxr_create_input_best_effort_stream>:
 80157f0:	b082      	sub	sp, #8
 80157f2:	3008      	adds	r0, #8
 80157f4:	b002      	add	sp, #8
 80157f6:	f001 bc89 	b.w	801710c <uxr_add_input_best_effort_buffer>
 80157fa:	bf00      	nop

080157fc <uxr_create_input_reliable_stream>:
 80157fc:	b510      	push	{r4, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	4c03      	ldr	r4, [pc, #12]	@ (8015810 <uxr_create_input_reliable_stream+0x14>)
 8015802:	9400      	str	r4, [sp, #0]
 8015804:	3008      	adds	r0, #8
 8015806:	f001 fc97 	bl	8017138 <uxr_add_input_reliable_buffer>
 801580a:	b004      	add	sp, #16
 801580c:	bd10      	pop	{r4, pc}
 801580e:	bf00      	nop
 8015810:	0801562d 	.word	0x0801562d

08015814 <uxr_epoch_nanos>:
 8015814:	b510      	push	{r4, lr}
 8015816:	4604      	mov	r4, r0
 8015818:	f001 fd44 	bl	80172a4 <uxr_nanos>
 801581c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8015820:	1ac0      	subs	r0, r0, r3
 8015822:	eb61 0102 	sbc.w	r1, r1, r2
 8015826:	bd10      	pop	{r4, pc}

08015828 <uxr_flash_output_streams>:
 8015828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801582c:	7e03      	ldrb	r3, [r0, #24]
 801582e:	b084      	sub	sp, #16
 8015830:	4604      	mov	r4, r0
 8015832:	b373      	cbz	r3, 8015892 <uxr_flash_output_streams+0x6a>
 8015834:	2500      	movs	r5, #0
 8015836:	f100 0908 	add.w	r9, r0, #8
 801583a:	f10d 0802 	add.w	r8, sp, #2
 801583e:	4628      	mov	r0, r5
 8015840:	af03      	add	r7, sp, #12
 8015842:	ae02      	add	r6, sp, #8
 8015844:	e006      	b.n	8015854 <uxr_flash_output_streams+0x2c>
 8015846:	7e23      	ldrb	r3, [r4, #24]
 8015848:	3501      	adds	r5, #1
 801584a:	b2e8      	uxtb	r0, r5
 801584c:	4283      	cmp	r3, r0
 801584e:	f109 0910 	add.w	r9, r9, #16
 8015852:	d91e      	bls.n	8015892 <uxr_flash_output_streams+0x6a>
 8015854:	2201      	movs	r2, #1
 8015856:	4611      	mov	r1, r2
 8015858:	f001 fba8 	bl	8016fac <uxr_stream_id>
 801585c:	4643      	mov	r3, r8
 801585e:	4684      	mov	ip, r0
 8015860:	463a      	mov	r2, r7
 8015862:	4631      	mov	r1, r6
 8015864:	4648      	mov	r0, r9
 8015866:	f8cd c004 	str.w	ip, [sp, #4]
 801586a:	f004 f921 	bl	8019ab0 <uxr_prepare_best_effort_buffer_to_send>
 801586e:	2800      	cmp	r0, #0
 8015870:	d0e9      	beq.n	8015846 <uxr_flash_output_streams+0x1e>
 8015872:	9b02      	ldr	r3, [sp, #8]
 8015874:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015878:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801587c:	4620      	mov	r0, r4
 801587e:	f000 fea5 	bl	80165cc <uxr_stamp_session_header>
 8015882:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015884:	9a03      	ldr	r2, [sp, #12]
 8015886:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801588a:	9902      	ldr	r1, [sp, #8]
 801588c:	6818      	ldr	r0, [r3, #0]
 801588e:	47d0      	blx	sl
 8015890:	e7d9      	b.n	8015846 <uxr_flash_output_streams+0x1e>
 8015892:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015896:	b37b      	cbz	r3, 80158f8 <uxr_flash_output_streams+0xd0>
 8015898:	f04f 0900 	mov.w	r9, #0
 801589c:	f104 0520 	add.w	r5, r4, #32
 80158a0:	f10d 0802 	add.w	r8, sp, #2
 80158a4:	af03      	add	r7, sp, #12
 80158a6:	ae02      	add	r6, sp, #8
 80158a8:	4648      	mov	r0, r9
 80158aa:	2201      	movs	r2, #1
 80158ac:	2102      	movs	r1, #2
 80158ae:	f001 fb7d 	bl	8016fac <uxr_stream_id>
 80158b2:	9001      	str	r0, [sp, #4]
 80158b4:	e00e      	b.n	80158d4 <uxr_flash_output_streams+0xac>
 80158b6:	9b02      	ldr	r3, [sp, #8]
 80158b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80158bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80158c0:	4620      	mov	r0, r4
 80158c2:	f000 fe83 	bl	80165cc <uxr_stamp_session_header>
 80158c6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80158c8:	9a03      	ldr	r2, [sp, #12]
 80158ca:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80158ce:	9902      	ldr	r1, [sp, #8]
 80158d0:	6818      	ldr	r0, [r3, #0]
 80158d2:	47d0      	blx	sl
 80158d4:	4643      	mov	r3, r8
 80158d6:	463a      	mov	r2, r7
 80158d8:	4631      	mov	r1, r6
 80158da:	4628      	mov	r0, r5
 80158dc:	f004 fafc 	bl	8019ed8 <uxr_prepare_next_reliable_buffer_to_send>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	d1e8      	bne.n	80158b6 <uxr_flash_output_streams+0x8e>
 80158e4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80158e8:	f109 0901 	add.w	r9, r9, #1
 80158ec:	fa5f f089 	uxtb.w	r0, r9
 80158f0:	4283      	cmp	r3, r0
 80158f2:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 80158f6:	d8d8      	bhi.n	80158aa <uxr_flash_output_streams+0x82>
 80158f8:	b004      	add	sp, #16
 80158fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158fe:	bf00      	nop

08015900 <read_submessage_info>:
 8015900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015904:	460d      	mov	r5, r1
 8015906:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801590a:	4669      	mov	r1, sp
 801590c:	4607      	mov	r7, r0
 801590e:	4628      	mov	r0, r5
 8015910:	f002 fc2c 	bl	801816c <uxr_deserialize_BaseObjectReply>
 8015914:	a902      	add	r1, sp, #8
 8015916:	4604      	mov	r4, r0
 8015918:	4628      	mov	r0, r5
 801591a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801591e:	f7f7 ffd5 	bl	800d8cc <ucdr_deserialize_bool>
 8015922:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8015926:	4004      	ands	r4, r0
 8015928:	b2e4      	uxtb	r4, r4
 801592a:	b95b      	cbnz	r3, 8015944 <read_submessage_info+0x44>
 801592c:	a987      	add	r1, sp, #540	@ 0x21c
 801592e:	4628      	mov	r0, r5
 8015930:	f7f7 ffcc 	bl	800d8cc <ucdr_deserialize_bool>
 8015934:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8015938:	4606      	mov	r6, r0
 801593a:	b94b      	cbnz	r3, 8015950 <read_submessage_info+0x50>
 801593c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015944:	a903      	add	r1, sp, #12
 8015946:	4628      	mov	r0, r5
 8015948:	f002 fad2 	bl	8017ef0 <uxr_deserialize_ObjectVariant>
 801594c:	4004      	ands	r4, r0
 801594e:	e7ed      	b.n	801592c <read_submessage_info+0x2c>
 8015950:	a988      	add	r1, sp, #544	@ 0x220
 8015952:	4628      	mov	r0, r5
 8015954:	f7f7 ffe8 	bl	800d928 <ucdr_deserialize_uint8_t>
 8015958:	4234      	tst	r4, r6
 801595a:	d0ef      	beq.n	801593c <read_submessage_info+0x3c>
 801595c:	2800      	cmp	r0, #0
 801595e:	d0ed      	beq.n	801593c <read_submessage_info+0x3c>
 8015960:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8015964:	2b0d      	cmp	r3, #13
 8015966:	d1e9      	bne.n	801593c <read_submessage_info+0x3c>
 8015968:	a98a      	add	r1, sp, #552	@ 0x228
 801596a:	4628      	mov	r0, r5
 801596c:	f7f8 fd78 	bl	800e460 <ucdr_deserialize_int16_t>
 8015970:	b140      	cbz	r0, 8015984 <read_submessage_info+0x84>
 8015972:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8015976:	2b00      	cmp	r3, #0
 8015978:	dd07      	ble.n	801598a <read_submessage_info+0x8a>
 801597a:	f1b8 0f00 	cmp.w	r8, #0
 801597e:	bf0c      	ite	eq
 8015980:	2002      	moveq	r0, #2
 8015982:	2001      	movne	r0, #1
 8015984:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8015988:	e7d8      	b.n	801593c <read_submessage_info+0x3c>
 801598a:	2000      	movs	r0, #0
 801598c:	e7fa      	b.n	8015984 <read_submessage_info+0x84>
 801598e:	bf00      	nop

08015990 <read_submessage_list>:
 8015990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015994:	b097      	sub	sp, #92	@ 0x5c
 8015996:	4604      	mov	r4, r0
 8015998:	460d      	mov	r5, r1
 801599a:	9209      	str	r2, [sp, #36]	@ 0x24
 801599c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80159a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80159a2:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80159a6:	4628      	mov	r0, r5
 80159a8:	f001 fc36 	bl	8017218 <uxr_read_submessage_header>
 80159ac:	2800      	cmp	r0, #0
 80159ae:	f000 812c 	beq.w	8015c0a <read_submessage_list+0x27a>
 80159b2:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 80159b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80159b8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 80159bc:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 80159c0:	3902      	subs	r1, #2
 80159c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80159c6:	290d      	cmp	r1, #13
 80159c8:	d8e8      	bhi.n	801599c <read_submessage_list+0xc>
 80159ca:	a201      	add	r2, pc, #4	@ (adr r2, 80159d0 <read_submessage_list+0x40>)
 80159cc:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80159d0:	08015c01 	.word	0x08015c01
 80159d4:	0801599d 	.word	0x0801599d
 80159d8:	08015bf1 	.word	0x08015bf1
 80159dc:	08015b93 	.word	0x08015b93
 80159e0:	08015b89 	.word	0x08015b89
 80159e4:	0801599d 	.word	0x0801599d
 80159e8:	0801599d 	.word	0x0801599d
 80159ec:	08015b0d 	.word	0x08015b0d
 80159f0:	08015aa5 	.word	0x08015aa5
 80159f4:	08015a65 	.word	0x08015a65
 80159f8:	0801599d 	.word	0x0801599d
 80159fc:	0801599d 	.word	0x0801599d
 8015a00:	0801599d 	.word	0x0801599d
 8015a04:	08015a09 	.word	0x08015a09
 8015a08:	a910      	add	r1, sp, #64	@ 0x40
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	f002 fdd0 	bl	80185b0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8015a10:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8015a14:	2e00      	cmp	r6, #0
 8015a16:	f000 8100 	beq.w	8015c1a <read_submessage_list+0x28a>
 8015a1a:	f001 fc43 	bl	80172a4 <uxr_nanos>
 8015a1e:	f04f 0800 	mov.w	r8, #0
 8015a22:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8015a24:	4602      	mov	r2, r0
 8015a26:	460b      	mov	r3, r1
 8015a28:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8015a2a:	4990      	ldr	r1, [pc, #576]	@ (8015c6c <read_submessage_list+0x2dc>)
 8015a2c:	46c4      	mov	ip, r8
 8015a2e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8015a32:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8015a36:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015a38:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8015a3a:	46c6      	mov	lr, r8
 8015a3c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8015a40:	46bc      	mov	ip, r7
 8015a42:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8015a46:	fbc0 7801 	smlal	r7, r8, r0, r1
 8015a4a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8015a4e:	e9cd 7800 	strd	r7, r8, [sp]
 8015a52:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8015a56:	9106      	str	r1, [sp, #24]
 8015a58:	4620      	mov	r0, r4
 8015a5a:	47b0      	blx	r6
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8015a62:	e79b      	b.n	801599c <read_submessage_list+0xc>
 8015a64:	a910      	add	r1, sp, #64	@ 0x40
 8015a66:	4628      	mov	r0, r5
 8015a68:	f002 fd90 	bl	801858c <uxr_deserialize_HEARTBEAT_Payload>
 8015a6c:	2100      	movs	r1, #0
 8015a6e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8015a72:	f001 fab7 	bl	8016fe4 <uxr_stream_id_from_raw>
 8015a76:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8015a7a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015a7c:	4631      	mov	r1, r6
 8015a7e:	f104 0008 	add.w	r0, r4, #8
 8015a82:	f001 fb8f 	bl	80171a4 <uxr_get_input_reliable_stream>
 8015a86:	2800      	cmp	r0, #0
 8015a88:	d088      	beq.n	801599c <read_submessage_list+0xc>
 8015a8a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8015a8e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8015a92:	f003 ff7d 	bl	8019990 <uxr_process_heartbeat>
 8015a96:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8015a9a:	4632      	mov	r2, r6
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f7ff fe1d 	bl	80156dc <write_submessage_acknack.isra.0>
 8015aa2:	e77b      	b.n	801599c <read_submessage_list+0xc>
 8015aa4:	a910      	add	r1, sp, #64	@ 0x40
 8015aa6:	4628      	mov	r0, r5
 8015aa8:	f002 fd48 	bl	801853c <uxr_deserialize_ACKNACK_Payload>
 8015aac:	2100      	movs	r1, #0
 8015aae:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8015ab2:	f001 fa97 	bl	8016fe4 <uxr_stream_id_from_raw>
 8015ab6:	900d      	str	r0, [sp, #52]	@ 0x34
 8015ab8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8015abc:	f104 0008 	add.w	r0, r4, #8
 8015ac0:	f001 fb5c 	bl	801717c <uxr_get_output_reliable_stream>
 8015ac4:	4606      	mov	r6, r0
 8015ac6:	2800      	cmp	r0, #0
 8015ac8:	f43f af68 	beq.w	801599c <read_submessage_list+0xc>
 8015acc:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8015ad0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015ad4:	ba49      	rev16	r1, r1
 8015ad6:	b289      	uxth	r1, r1
 8015ad8:	f004 faa8 	bl	801a02c <uxr_process_acknack>
 8015adc:	4630      	mov	r0, r6
 8015ade:	f004 fa69 	bl	8019fb4 <uxr_begin_output_nack_buffer_it>
 8015ae2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015ae6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8015aea:	e005      	b.n	8015af8 <read_submessage_list+0x168>
 8015aec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015aee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015af0:	685f      	ldr	r7, [r3, #4]
 8015af2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015af4:	6818      	ldr	r0, [r3, #0]
 8015af6:	47b8      	blx	r7
 8015af8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8015afc:	aa0f      	add	r2, sp, #60	@ 0x3c
 8015afe:	4641      	mov	r1, r8
 8015b00:	4630      	mov	r0, r6
 8015b02:	f004 fa59 	bl	8019fb8 <uxr_next_reliable_nack_buffer_to_send>
 8015b06:	2800      	cmp	r0, #0
 8015b08:	d1f0      	bne.n	8015aec <read_submessage_list+0x15c>
 8015b0a:	e747      	b.n	801599c <read_submessage_list+0xc>
 8015b0c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015b10:	4641      	mov	r1, r8
 8015b12:	900d      	str	r0, [sp, #52]	@ 0x34
 8015b14:	4628      	mov	r0, r5
 8015b16:	f002 fa8b 	bl	8018030 <uxr_deserialize_BaseObjectRequest>
 8015b1a:	3e04      	subs	r6, #4
 8015b1c:	4640      	mov	r0, r8
 8015b1e:	a90f      	add	r1, sp, #60	@ 0x3c
 8015b20:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8015b24:	f000 fdcc 	bl	80166c0 <uxr_parse_base_object_request>
 8015b28:	fa1f f886 	uxth.w	r8, r6
 8015b2c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8015b30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015b32:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8015b36:	9110      	str	r1, [sp, #64]	@ 0x40
 8015b38:	f007 070e 	and.w	r7, r7, #14
 8015b3c:	b136      	cbz	r6, 8015b4c <read_submessage_list+0x1bc>
 8015b3e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8015b42:	9300      	str	r3, [sp, #0]
 8015b44:	464a      	mov	r2, r9
 8015b46:	2300      	movs	r3, #0
 8015b48:	4620      	mov	r0, r4
 8015b4a:	47b0      	blx	r6
 8015b4c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8015b4e:	b16b      	cbz	r3, 8015b6c <read_submessage_list+0x1dc>
 8015b50:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015b52:	2100      	movs	r1, #0
 8015b54:	3802      	subs	r0, #2
 8015b56:	e002      	b.n	8015b5e <read_submessage_list+0x1ce>
 8015b58:	3101      	adds	r1, #1
 8015b5a:	428b      	cmp	r3, r1
 8015b5c:	d006      	beq.n	8015b6c <read_submessage_list+0x1dc>
 8015b5e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8015b62:	454e      	cmp	r6, r9
 8015b64:	d1f8      	bne.n	8015b58 <read_submessage_list+0x1c8>
 8015b66:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8015b68:	2200      	movs	r2, #0
 8015b6a:	545a      	strb	r2, [r3, r1]
 8015b6c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8015b70:	9102      	str	r1, [sp, #8]
 8015b72:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015b74:	9101      	str	r1, [sp, #4]
 8015b76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015b78:	9100      	str	r1, [sp, #0]
 8015b7a:	463b      	mov	r3, r7
 8015b7c:	4642      	mov	r2, r8
 8015b7e:	4629      	mov	r1, r5
 8015b80:	4620      	mov	r0, r4
 8015b82:	f7ff fc7f 	bl	8015484 <read_submessage_format>
 8015b86:	e709      	b.n	801599c <read_submessage_list+0xc>
 8015b88:	4629      	mov	r1, r5
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	f7ff feb8 	bl	8015900 <read_submessage_info>
 8015b90:	e704      	b.n	801599c <read_submessage_list+0xc>
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d03c      	beq.n	8015c10 <read_submessage_list+0x280>
 8015b96:	a910      	add	r1, sp, #64	@ 0x40
 8015b98:	4628      	mov	r0, r5
 8015b9a:	f002 fc2b 	bl	80183f4 <uxr_deserialize_STATUS_Payload>
 8015b9e:	a90e      	add	r1, sp, #56	@ 0x38
 8015ba0:	a810      	add	r0, sp, #64	@ 0x40
 8015ba2:	aa0d      	add	r2, sp, #52	@ 0x34
 8015ba4:	f000 fd8c 	bl	80166c0 <uxr_parse_base_object_request>
 8015ba8:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8015bac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015bae:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8015bb2:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8015bb6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015bb8:	b136      	cbz	r6, 8015bc8 <read_submessage_list+0x238>
 8015bba:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8015bbe:	9300      	str	r3, [sp, #0]
 8015bc0:	463a      	mov	r2, r7
 8015bc2:	4643      	mov	r3, r8
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	47b0      	blx	r6
 8015bc8:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8015bca:	2a00      	cmp	r2, #0
 8015bcc:	f43f aee6 	beq.w	801599c <read_submessage_list+0xc>
 8015bd0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015bd2:	2100      	movs	r1, #0
 8015bd4:	3802      	subs	r0, #2
 8015bd6:	e003      	b.n	8015be0 <read_submessage_list+0x250>
 8015bd8:	3101      	adds	r1, #1
 8015bda:	4291      	cmp	r1, r2
 8015bdc:	f43f aede 	beq.w	801599c <read_submessage_list+0xc>
 8015be0:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8015be4:	42be      	cmp	r6, r7
 8015be6:	d1f7      	bne.n	8015bd8 <read_submessage_list+0x248>
 8015be8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8015bea:	f803 8001 	strb.w	r8, [r3, r1]
 8015bee:	e6d5      	b.n	801599c <read_submessage_list+0xc>
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	f47f aed3 	bne.w	801599c <read_submessage_list+0xc>
 8015bf6:	4629      	mov	r1, r5
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f000 fca9 	bl	8016550 <uxr_read_create_session_status>
 8015bfe:	e6cd      	b.n	801599c <read_submessage_list+0xc>
 8015c00:	4629      	mov	r1, r5
 8015c02:	4620      	mov	r0, r4
 8015c04:	f7ff fd34 	bl	8015670 <read_submessage_get_info>
 8015c08:	e6c8      	b.n	801599c <read_submessage_list+0xc>
 8015c0a:	b017      	add	sp, #92	@ 0x5c
 8015c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c10:	4629      	mov	r1, r5
 8015c12:	4620      	mov	r0, r4
 8015c14:	f000 fcaa 	bl	801656c <uxr_read_delete_session_status>
 8015c18:	e6c0      	b.n	801599c <read_submessage_list+0xc>
 8015c1a:	f001 fb43 	bl	80172a4 <uxr_nanos>
 8015c1e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8015c22:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8015c6c <read_submessage_list+0x2dc>
 8015c26:	4633      	mov	r3, r6
 8015c28:	fbc7 230c 	smlal	r2, r3, r7, ip
 8015c2c:	1810      	adds	r0, r2, r0
 8015c2e:	eb43 0301 	adc.w	r3, r3, r1
 8015c32:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8015c36:	46b6      	mov	lr, r6
 8015c38:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 8015c3c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8015c40:	fbc1 760c 	smlal	r7, r6, r1, ip
 8015c44:	19d2      	adds	r2, r2, r7
 8015c46:	eb4e 0106 	adc.w	r1, lr, r6
 8015c4a:	1a80      	subs	r0, r0, r2
 8015c4c:	eb63 0301 	sbc.w	r3, r3, r1
 8015c50:	0fda      	lsrs	r2, r3, #31
 8015c52:	1812      	adds	r2, r2, r0
 8015c54:	f143 0300 	adc.w	r3, r3, #0
 8015c58:	0852      	lsrs	r2, r2, #1
 8015c5a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8015c5e:	105b      	asrs	r3, r3, #1
 8015c60:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8015c64:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8015c68:	e6f8      	b.n	8015a5c <read_submessage_list+0xcc>
 8015c6a:	bf00      	nop
 8015c6c:	3b9aca00 	.word	0x3b9aca00

08015c70 <listen_message_reliably>:
 8015c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c74:	f1b1 0b00 	subs.w	fp, r1, #0
 8015c78:	b09f      	sub	sp, #124	@ 0x7c
 8015c7a:	4606      	mov	r6, r0
 8015c7c:	bfb8      	it	lt
 8015c7e:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 8015c82:	f001 faf5 	bl	8017270 <uxr_millis>
 8015c86:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015c8a:	9003      	str	r0, [sp, #12]
 8015c8c:	9104      	str	r1, [sp, #16]
 8015c8e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8015c92:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	f000 80a4 	beq.w	8015de4 <listen_message_reliably+0x174>
 8015c9c:	2500      	movs	r5, #0
 8015c9e:	e9cd b806 	strd	fp, r8, [sp, #24]
 8015ca2:	f106 0420 	add.w	r4, r6, #32
 8015ca6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015caa:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8015cae:	4628      	mov	r0, r5
 8015cb0:	e011      	b.n	8015cd6 <listen_message_reliably+0x66>
 8015cb2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015cb6:	42ba      	cmp	r2, r7
 8015cb8:	eb73 0109 	sbcs.w	r1, r3, r9
 8015cbc:	bfb8      	it	lt
 8015cbe:	4699      	movlt	r9, r3
 8015cc0:	f105 0501 	add.w	r5, r5, #1
 8015cc4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015cc8:	b2e8      	uxtb	r0, r5
 8015cca:	bfb8      	it	lt
 8015ccc:	4617      	movlt	r7, r2
 8015cce:	4283      	cmp	r3, r0
 8015cd0:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8015cd4:	d94a      	bls.n	8015d6c <listen_message_reliably+0xfc>
 8015cd6:	2201      	movs	r2, #1
 8015cd8:	2102      	movs	r1, #2
 8015cda:	f001 f967 	bl	8016fac <uxr_stream_id>
 8015cde:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015ce2:	4601      	mov	r1, r0
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015ce8:	f004 f934 	bl	8019f54 <uxr_update_output_stream_heartbeat_timestamp>
 8015cec:	2800      	cmp	r0, #0
 8015cee:	d0e0      	beq.n	8015cb2 <listen_message_reliably+0x42>
 8015cf0:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8015cf4:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8015cf8:	9305      	str	r3, [sp, #20]
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	f000 fcba 	bl	8016674 <uxr_session_header_offset>
 8015d00:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8015d04:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8015d08:	9000      	str	r0, [sp, #0]
 8015d0a:	a90e      	add	r1, sp, #56	@ 0x38
 8015d0c:	4640      	mov	r0, r8
 8015d0e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8015d12:	2300      	movs	r3, #0
 8015d14:	2211      	movs	r2, #17
 8015d16:	f7f8 ffcf 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	2205      	movs	r2, #5
 8015d1e:	210b      	movs	r1, #11
 8015d20:	4640      	mov	r0, r8
 8015d22:	f001 fa5f 	bl	80171e4 <uxr_buffer_submessage_header>
 8015d26:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 8015d2a:	2101      	movs	r1, #1
 8015d2c:	f004 f9d4 	bl	801a0d8 <uxr_seq_num_add>
 8015d30:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8015d34:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015d38:	4602      	mov	r2, r0
 8015d3a:	9b05      	ldr	r3, [sp, #20]
 8015d3c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8015d40:	a90c      	add	r1, sp, #48	@ 0x30
 8015d42:	4640      	mov	r0, r8
 8015d44:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8015d48:	f002 fc0c 	bl	8018564 <uxr_serialize_HEARTBEAT_Payload>
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015d50:	4611      	mov	r1, r2
 8015d52:	4630      	mov	r0, r6
 8015d54:	f000 fc3a 	bl	80165cc <uxr_stamp_session_header>
 8015d58:	4640      	mov	r0, r8
 8015d5a:	f7f8 ffeb 	bl	800ed34 <ucdr_buffer_length>
 8015d5e:	4602      	mov	r2, r0
 8015d60:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8015d62:	a90e      	add	r1, sp, #56	@ 0x38
 8015d64:	e9d0 0300 	ldrd	r0, r3, [r0]
 8015d68:	4798      	blx	r3
 8015d6a:	e7a2      	b.n	8015cb2 <listen_message_reliably+0x42>
 8015d6c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015d70:	4599      	cmp	r9, r3
 8015d72:	bf08      	it	eq
 8015d74:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 8015d78:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 8015d7c:	d032      	beq.n	8015de4 <listen_message_reliably+0x174>
 8015d7e:	9b03      	ldr	r3, [sp, #12]
 8015d80:	1aff      	subs	r7, r7, r3
 8015d82:	2f00      	cmp	r7, #0
 8015d84:	bf08      	it	eq
 8015d86:	2701      	moveq	r7, #1
 8015d88:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8015d8a:	455f      	cmp	r7, fp
 8015d8c:	bfa8      	it	ge
 8015d8e:	465f      	movge	r7, fp
 8015d90:	689c      	ldr	r4, [r3, #8]
 8015d92:	6818      	ldr	r0, [r3, #0]
 8015d94:	4642      	mov	r2, r8
 8015d96:	463b      	mov	r3, r7
 8015d98:	4651      	mov	r1, sl
 8015d9a:	47a0      	blx	r4
 8015d9c:	ebab 0b07 	sub.w	fp, fp, r7
 8015da0:	b958      	cbnz	r0, 8015dba <listen_message_reliably+0x14a>
 8015da2:	f1bb 0f00 	cmp.w	fp, #0
 8015da6:	dd44      	ble.n	8015e32 <listen_message_reliably+0x1c2>
 8015da8:	f001 fa62 	bl	8017270 <uxr_millis>
 8015dac:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d03c      	beq.n	8015e2e <listen_message_reliably+0x1be>
 8015db4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015db8:	e770      	b.n	8015c9c <listen_message_reliably+0x2c>
 8015dba:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 8015dbe:	4604      	mov	r4, r0
 8015dc0:	a80e      	add	r0, sp, #56	@ 0x38
 8015dc2:	f7f8 ff8b 	bl	800ecdc <ucdr_init_buffer>
 8015dc6:	2500      	movs	r5, #0
 8015dc8:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8015dcc:	aa08      	add	r2, sp, #32
 8015dce:	a90e      	add	r1, sp, #56	@ 0x38
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f88d 5020 	strb.w	r5, [sp, #32]
 8015dd6:	f000 fc0f 	bl	80165f8 <uxr_read_session_header>
 8015dda:	b928      	cbnz	r0, 8015de8 <listen_message_reliably+0x178>
 8015ddc:	4620      	mov	r0, r4
 8015dde:	b01f      	add	sp, #124	@ 0x7c
 8015de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de4:	465f      	mov	r7, fp
 8015de6:	e7cc      	b.n	8015d82 <listen_message_reliably+0x112>
 8015de8:	4629      	mov	r1, r5
 8015dea:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8015dee:	f001 f8f9 	bl	8016fe4 <uxr_stream_id_from_raw>
 8015df2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015df6:	2f01      	cmp	r7, #1
 8015df8:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8015dfc:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8015e00:	fa5f f880 	uxtb.w	r8, r0
 8015e04:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8015e08:	d050      	beq.n	8015eac <listen_message_reliably+0x23c>
 8015e0a:	2f02      	cmp	r7, #2
 8015e0c:	d016      	beq.n	8015e3c <listen_message_reliably+0x1cc>
 8015e0e:	2f00      	cmp	r7, #0
 8015e10:	d1e4      	bne.n	8015ddc <listen_message_reliably+0x16c>
 8015e12:	4639      	mov	r1, r7
 8015e14:	4638      	mov	r0, r7
 8015e16:	f001 f8e5 	bl	8016fe4 <uxr_stream_id_from_raw>
 8015e1a:	a90e      	add	r1, sp, #56	@ 0x38
 8015e1c:	4602      	mov	r2, r0
 8015e1e:	4630      	mov	r0, r6
 8015e20:	920c      	str	r2, [sp, #48]	@ 0x30
 8015e22:	f7ff fdb5 	bl	8015990 <read_submessage_list>
 8015e26:	4620      	mov	r0, r4
 8015e28:	b01f      	add	sp, #124	@ 0x7c
 8015e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2e:	465f      	mov	r7, fp
 8015e30:	e7aa      	b.n	8015d88 <listen_message_reliably+0x118>
 8015e32:	4604      	mov	r4, r0
 8015e34:	4620      	mov	r0, r4
 8015e36:	b01f      	add	sp, #124	@ 0x7c
 8015e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e3c:	4629      	mov	r1, r5
 8015e3e:	f106 0008 	add.w	r0, r6, #8
 8015e42:	f001 f9af 	bl	80171a4 <uxr_get_input_reliable_stream>
 8015e46:	4681      	mov	r9, r0
 8015e48:	b338      	cbz	r0, 8015e9a <listen_message_reliably+0x22a>
 8015e4a:	a80e      	add	r0, sp, #56	@ 0x38
 8015e4c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8015e50:	f7f8 ff74 	bl	800ed3c <ucdr_buffer_remaining>
 8015e54:	4603      	mov	r3, r0
 8015e56:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8015e5a:	9000      	str	r0, [sp, #0]
 8015e5c:	465a      	mov	r2, fp
 8015e5e:	4651      	mov	r1, sl
 8015e60:	4648      	mov	r0, r9
 8015e62:	f003 fca3 	bl	80197ac <uxr_receive_reliable_message>
 8015e66:	b1c0      	cbz	r0, 8015e9a <listen_message_reliably+0x22a>
 8015e68:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8015e6c:	b393      	cbz	r3, 8015ed4 <listen_message_reliably+0x264>
 8015e6e:	af16      	add	r7, sp, #88	@ 0x58
 8015e70:	f04f 0a02 	mov.w	sl, #2
 8015e74:	e00a      	b.n	8015e8c <listen_message_reliably+0x21c>
 8015e76:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8015e7a:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 8015e7e:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 8015e82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015e84:	4639      	mov	r1, r7
 8015e86:	4630      	mov	r0, r6
 8015e88:	f7ff fd82 	bl	8015990 <read_submessage_list>
 8015e8c:	2204      	movs	r2, #4
 8015e8e:	4639      	mov	r1, r7
 8015e90:	4648      	mov	r0, r9
 8015e92:	f003 fd05 	bl	80198a0 <uxr_next_input_reliable_buffer_available>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d1ed      	bne.n	8015e76 <listen_message_reliably+0x206>
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	462a      	mov	r2, r5
 8015e9e:	4641      	mov	r1, r8
 8015ea0:	f7ff fc1c 	bl	80156dc <write_submessage_acknack.isra.0>
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	b01f      	add	sp, #124	@ 0x7c
 8015ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eac:	4629      	mov	r1, r5
 8015eae:	f106 0008 	add.w	r0, r6, #8
 8015eb2:	f001 f96d 	bl	8017190 <uxr_get_input_best_effort_stream>
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	d090      	beq.n	8015ddc <listen_message_reliably+0x16c>
 8015eba:	4651      	mov	r1, sl
 8015ebc:	f003 fbe6 	bl	801968c <uxr_receive_best_effort_message>
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	d08b      	beq.n	8015ddc <listen_message_reliably+0x16c>
 8015ec4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8015ec8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015eca:	a90e      	add	r1, sp, #56	@ 0x38
 8015ecc:	4630      	mov	r0, r6
 8015ece:	f7ff fd5f 	bl	8015990 <read_submessage_list>
 8015ed2:	e783      	b.n	8015ddc <listen_message_reliably+0x16c>
 8015ed4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8015ed8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015eda:	a90e      	add	r1, sp, #56	@ 0x38
 8015edc:	4630      	mov	r0, r6
 8015ede:	f7ff fd57 	bl	8015990 <read_submessage_list>
 8015ee2:	e7c4      	b.n	8015e6e <listen_message_reliably+0x1fe>

08015ee4 <uxr_run_session_timeout>:
 8015ee4:	b570      	push	{r4, r5, r6, lr}
 8015ee6:	4604      	mov	r4, r0
 8015ee8:	460d      	mov	r5, r1
 8015eea:	f001 f9c1 	bl	8017270 <uxr_millis>
 8015eee:	4606      	mov	r6, r0
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	f7ff fc99 	bl	8015828 <uxr_flash_output_streams>
 8015ef6:	4629      	mov	r1, r5
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f7ff feb9 	bl	8015c70 <listen_message_reliably>
 8015efe:	f001 f9b7 	bl	8017270 <uxr_millis>
 8015f02:	1b81      	subs	r1, r0, r6
 8015f04:	1a69      	subs	r1, r5, r1
 8015f06:	2900      	cmp	r1, #0
 8015f08:	dcf6      	bgt.n	8015ef8 <uxr_run_session_timeout+0x14>
 8015f0a:	f104 0008 	add.w	r0, r4, #8
 8015f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f12:	f001 b951 	b.w	80171b8 <uxr_output_streams_confirmed>
 8015f16:	bf00      	nop

08015f18 <uxr_run_session_until_data>:
 8015f18:	b570      	push	{r4, r5, r6, lr}
 8015f1a:	4604      	mov	r4, r0
 8015f1c:	460d      	mov	r5, r1
 8015f1e:	f001 f9a7 	bl	8017270 <uxr_millis>
 8015f22:	4606      	mov	r6, r0
 8015f24:	4620      	mov	r0, r4
 8015f26:	f7ff fc7f 	bl	8015828 <uxr_flash_output_streams>
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8015f30:	4629      	mov	r1, r5
 8015f32:	e005      	b.n	8015f40 <uxr_run_session_until_data+0x28>
 8015f34:	f001 f99c 	bl	8017270 <uxr_millis>
 8015f38:	1b81      	subs	r1, r0, r6
 8015f3a:	1a69      	subs	r1, r5, r1
 8015f3c:	2900      	cmp	r1, #0
 8015f3e:	dd07      	ble.n	8015f50 <uxr_run_session_until_data+0x38>
 8015f40:	4620      	mov	r0, r4
 8015f42:	f7ff fe95 	bl	8015c70 <listen_message_reliably>
 8015f46:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	d0f2      	beq.n	8015f34 <uxr_run_session_until_data+0x1c>
 8015f4e:	bd70      	pop	{r4, r5, r6, pc}
 8015f50:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8015f54:	bd70      	pop	{r4, r5, r6, pc}
 8015f56:	bf00      	nop

08015f58 <uxr_run_session_until_confirm_delivery>:
 8015f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f5c:	4606      	mov	r6, r0
 8015f5e:	460d      	mov	r5, r1
 8015f60:	f001 f986 	bl	8017270 <uxr_millis>
 8015f64:	4607      	mov	r7, r0
 8015f66:	4630      	mov	r0, r6
 8015f68:	f7ff fc5e 	bl	8015828 <uxr_flash_output_streams>
 8015f6c:	2d00      	cmp	r5, #0
 8015f6e:	db16      	blt.n	8015f9e <uxr_run_session_until_confirm_delivery+0x46>
 8015f70:	462c      	mov	r4, r5
 8015f72:	f106 0808 	add.w	r8, r6, #8
 8015f76:	e008      	b.n	8015f8a <uxr_run_session_until_confirm_delivery+0x32>
 8015f78:	4621      	mov	r1, r4
 8015f7a:	4630      	mov	r0, r6
 8015f7c:	f7ff fe78 	bl	8015c70 <listen_message_reliably>
 8015f80:	f001 f976 	bl	8017270 <uxr_millis>
 8015f84:	1bc1      	subs	r1, r0, r7
 8015f86:	1a6c      	subs	r4, r5, r1
 8015f88:	d404      	bmi.n	8015f94 <uxr_run_session_until_confirm_delivery+0x3c>
 8015f8a:	4640      	mov	r0, r8
 8015f8c:	f001 f914 	bl	80171b8 <uxr_output_streams_confirmed>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d0f1      	beq.n	8015f78 <uxr_run_session_until_confirm_delivery+0x20>
 8015f94:	4640      	mov	r0, r8
 8015f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f9a:	f001 b90d 	b.w	80171b8 <uxr_output_streams_confirmed>
 8015f9e:	f106 0808 	add.w	r8, r6, #8
 8015fa2:	e7f7      	b.n	8015f94 <uxr_run_session_until_confirm_delivery+0x3c>

08015fa4 <uxr_run_session_until_all_status>:
 8015fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fa8:	9c08      	ldr	r4, [sp, #32]
 8015faa:	4605      	mov	r5, r0
 8015fac:	460f      	mov	r7, r1
 8015fae:	4690      	mov	r8, r2
 8015fb0:	461e      	mov	r6, r3
 8015fb2:	f7ff fc39 	bl	8015828 <uxr_flash_output_streams>
 8015fb6:	b124      	cbz	r4, 8015fc2 <uxr_run_session_until_all_status+0x1e>
 8015fb8:	4622      	mov	r2, r4
 8015fba:	21ff      	movs	r1, #255	@ 0xff
 8015fbc:	4630      	mov	r0, r6
 8015fbe:	f005 fc7d 	bl	801b8bc <memset>
 8015fc2:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8015fc6:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8015fc8:	f001 f952 	bl	8017270 <uxr_millis>
 8015fcc:	4639      	mov	r1, r7
 8015fce:	4681      	mov	r9, r0
 8015fd0:	4628      	mov	r0, r5
 8015fd2:	f7ff fe4d 	bl	8015c70 <listen_message_reliably>
 8015fd6:	f001 f94b 	bl	8017270 <uxr_millis>
 8015fda:	eba0 0109 	sub.w	r1, r0, r9
 8015fde:	1a79      	subs	r1, r7, r1
 8015fe0:	b36c      	cbz	r4, 801603e <uxr_run_session_until_all_status+0x9a>
 8015fe2:	1e70      	subs	r0, r6, #1
 8015fe4:	46c6      	mov	lr, r8
 8015fe6:	1902      	adds	r2, r0, r4
 8015fe8:	4684      	mov	ip, r0
 8015fea:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015fee:	2bff      	cmp	r3, #255	@ 0xff
 8015ff0:	d007      	beq.n	8016002 <uxr_run_session_until_all_status+0x5e>
 8015ff2:	4594      	cmp	ip, r2
 8015ff4:	d00f      	beq.n	8016016 <uxr_run_session_until_all_status+0x72>
 8015ff6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015ffa:	2bff      	cmp	r3, #255	@ 0xff
 8015ffc:	f10e 0e02 	add.w	lr, lr, #2
 8016000:	d1f7      	bne.n	8015ff2 <uxr_run_session_until_all_status+0x4e>
 8016002:	4594      	cmp	ip, r2
 8016004:	f8be 3000 	ldrh.w	r3, [lr]
 8016008:	d014      	beq.n	8016034 <uxr_run_session_until_all_status+0x90>
 801600a:	f10e 0e02 	add.w	lr, lr, #2
 801600e:	2b00      	cmp	r3, #0
 8016010:	d0eb      	beq.n	8015fea <uxr_run_session_until_all_status+0x46>
 8016012:	2900      	cmp	r1, #0
 8016014:	dcdc      	bgt.n	8015fd0 <uxr_run_session_until_all_status+0x2c>
 8016016:	2300      	movs	r3, #0
 8016018:	67eb      	str	r3, [r5, #124]	@ 0x7c
 801601a:	e001      	b.n	8016020 <uxr_run_session_until_all_status+0x7c>
 801601c:	2b01      	cmp	r3, #1
 801601e:	d812      	bhi.n	8016046 <uxr_run_session_until_all_status+0xa2>
 8016020:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8016024:	4290      	cmp	r0, r2
 8016026:	d1f9      	bne.n	801601c <uxr_run_session_until_all_status+0x78>
 8016028:	2b01      	cmp	r3, #1
 801602a:	bf8c      	ite	hi
 801602c:	2000      	movhi	r0, #0
 801602e:	2001      	movls	r0, #1
 8016030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016034:	2900      	cmp	r1, #0
 8016036:	ddee      	ble.n	8016016 <uxr_run_session_until_all_status+0x72>
 8016038:	2b00      	cmp	r3, #0
 801603a:	d1c9      	bne.n	8015fd0 <uxr_run_session_until_all_status+0x2c>
 801603c:	e7eb      	b.n	8016016 <uxr_run_session_until_all_status+0x72>
 801603e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8016040:	2001      	movs	r0, #1
 8016042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016046:	2000      	movs	r0, #0
 8016048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801604c <wait_session_status>:
 801604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016050:	4604      	mov	r4, r0
 8016052:	20ff      	movs	r0, #255	@ 0xff
 8016054:	b09f      	sub	sp, #124	@ 0x7c
 8016056:	7160      	strb	r0, [r4, #5]
 8016058:	2b00      	cmp	r3, #0
 801605a:	f000 80bb 	beq.w	80161d4 <wait_session_status+0x188>
 801605e:	4692      	mov	sl, r2
 8016060:	469b      	mov	fp, r3
 8016062:	f04f 0800 	mov.w	r8, #0
 8016066:	9105      	str	r1, [sp, #20]
 8016068:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801606a:	9905      	ldr	r1, [sp, #20]
 801606c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016070:	4652      	mov	r2, sl
 8016072:	47a8      	blx	r5
 8016074:	f001 f8fc 	bl	8017270 <uxr_millis>
 8016078:	2700      	movs	r7, #0
 801607a:	4605      	mov	r5, r0
 801607c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016080:	e009      	b.n	8016096 <wait_session_status+0x4a>
 8016082:	f001 f8f5 	bl	8017270 <uxr_millis>
 8016086:	1b43      	subs	r3, r0, r5
 8016088:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801608c:	2b00      	cmp	r3, #0
 801608e:	7962      	ldrb	r2, [r4, #5]
 8016090:	dd3d      	ble.n	801610e <wait_session_status+0xc2>
 8016092:	2aff      	cmp	r2, #255	@ 0xff
 8016094:	d13b      	bne.n	801610e <wait_session_status+0xc2>
 8016096:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016098:	a90a      	add	r1, sp, #40	@ 0x28
 801609a:	6896      	ldr	r6, [r2, #8]
 801609c:	6810      	ldr	r0, [r2, #0]
 801609e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80160a0:	47b0      	blx	r6
 80160a2:	2800      	cmp	r0, #0
 80160a4:	d0ed      	beq.n	8016082 <wait_session_status+0x36>
 80160a6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 80160aa:	a80e      	add	r0, sp, #56	@ 0x38
 80160ac:	f7f8 fe16 	bl	800ecdc <ucdr_init_buffer>
 80160b0:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 80160b4:	aa09      	add	r2, sp, #36	@ 0x24
 80160b6:	a90e      	add	r1, sp, #56	@ 0x38
 80160b8:	4620      	mov	r0, r4
 80160ba:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 80160be:	f000 fa9b 	bl	80165f8 <uxr_read_session_header>
 80160c2:	2800      	cmp	r0, #0
 80160c4:	d0dd      	beq.n	8016082 <wait_session_status+0x36>
 80160c6:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80160ca:	2100      	movs	r1, #0
 80160cc:	f000 ff8a 	bl	8016fe4 <uxr_stream_id_from_raw>
 80160d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80160d4:	9304      	str	r3, [sp, #16]
 80160d6:	f3c0 4907 	ubfx	r9, r0, #16, #8
 80160da:	b2c3      	uxtb	r3, r0
 80160dc:	f1b9 0f01 	cmp.w	r9, #1
 80160e0:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 80160e4:	9303      	str	r3, [sp, #12]
 80160e6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80160ea:	d05d      	beq.n	80161a8 <wait_session_status+0x15c>
 80160ec:	f1b9 0f02 	cmp.w	r9, #2
 80160f0:	d01a      	beq.n	8016128 <wait_session_status+0xdc>
 80160f2:	f1b9 0f00 	cmp.w	r9, #0
 80160f6:	d1c4      	bne.n	8016082 <wait_session_status+0x36>
 80160f8:	4649      	mov	r1, r9
 80160fa:	4648      	mov	r0, r9
 80160fc:	f000 ff72 	bl	8016fe4 <uxr_stream_id_from_raw>
 8016100:	a90e      	add	r1, sp, #56	@ 0x38
 8016102:	4602      	mov	r2, r0
 8016104:	900d      	str	r0, [sp, #52]	@ 0x34
 8016106:	4620      	mov	r0, r4
 8016108:	f7ff fc42 	bl	8015990 <read_submessage_list>
 801610c:	e7b9      	b.n	8016082 <wait_session_status+0x36>
 801610e:	f108 0801 	add.w	r8, r8, #1
 8016112:	45c3      	cmp	fp, r8
 8016114:	d001      	beq.n	801611a <wait_session_status+0xce>
 8016116:	2aff      	cmp	r2, #255	@ 0xff
 8016118:	d0a6      	beq.n	8016068 <wait_session_status+0x1c>
 801611a:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 801611e:	bf18      	it	ne
 8016120:	2001      	movne	r0, #1
 8016122:	b01f      	add	sp, #124	@ 0x7c
 8016124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016128:	4631      	mov	r1, r6
 801612a:	f104 0008 	add.w	r0, r4, #8
 801612e:	f001 f839 	bl	80171a4 <uxr_get_input_reliable_stream>
 8016132:	9006      	str	r0, [sp, #24]
 8016134:	2800      	cmp	r0, #0
 8016136:	d031      	beq.n	801619c <wait_session_status+0x150>
 8016138:	aa0e      	add	r2, sp, #56	@ 0x38
 801613a:	4610      	mov	r0, r2
 801613c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801613e:	9207      	str	r2, [sp, #28]
 8016140:	f7f8 fdfc 	bl	800ed3c <ucdr_buffer_remaining>
 8016144:	4603      	mov	r3, r0
 8016146:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 801614a:	9000      	str	r0, [sp, #0]
 801614c:	9a07      	ldr	r2, [sp, #28]
 801614e:	9904      	ldr	r1, [sp, #16]
 8016150:	9806      	ldr	r0, [sp, #24]
 8016152:	f003 fb2b 	bl	80197ac <uxr_receive_reliable_message>
 8016156:	b308      	cbz	r0, 801619c <wait_session_status+0x150>
 8016158:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801615c:	2b00      	cmp	r3, #0
 801615e:	d041      	beq.n	80161e4 <wait_session_status+0x198>
 8016160:	f8cd 8010 	str.w	r8, [sp, #16]
 8016164:	9507      	str	r5, [sp, #28]
 8016166:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801616a:	9d06      	ldr	r5, [sp, #24]
 801616c:	f04f 0902 	mov.w	r9, #2
 8016170:	e00a      	b.n	8016188 <wait_session_status+0x13c>
 8016172:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8016176:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 801617a:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 801617e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016180:	a916      	add	r1, sp, #88	@ 0x58
 8016182:	4620      	mov	r0, r4
 8016184:	f7ff fc04 	bl	8015990 <read_submessage_list>
 8016188:	2204      	movs	r2, #4
 801618a:	a916      	add	r1, sp, #88	@ 0x58
 801618c:	4628      	mov	r0, r5
 801618e:	f003 fb87 	bl	80198a0 <uxr_next_input_reliable_buffer_available>
 8016192:	2800      	cmp	r0, #0
 8016194:	d1ed      	bne.n	8016172 <wait_session_status+0x126>
 8016196:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801619a:	9d07      	ldr	r5, [sp, #28]
 801619c:	9903      	ldr	r1, [sp, #12]
 801619e:	4632      	mov	r2, r6
 80161a0:	4620      	mov	r0, r4
 80161a2:	f7ff fa9b 	bl	80156dc <write_submessage_acknack.isra.0>
 80161a6:	e76c      	b.n	8016082 <wait_session_status+0x36>
 80161a8:	4631      	mov	r1, r6
 80161aa:	f104 0008 	add.w	r0, r4, #8
 80161ae:	f000 ffef 	bl	8017190 <uxr_get_input_best_effort_stream>
 80161b2:	2800      	cmp	r0, #0
 80161b4:	f43f af65 	beq.w	8016082 <wait_session_status+0x36>
 80161b8:	9904      	ldr	r1, [sp, #16]
 80161ba:	f003 fa67 	bl	801968c <uxr_receive_best_effort_message>
 80161be:	2800      	cmp	r0, #0
 80161c0:	f43f af5f 	beq.w	8016082 <wait_session_status+0x36>
 80161c4:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 80161c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80161ca:	a90e      	add	r1, sp, #56	@ 0x38
 80161cc:	4620      	mov	r0, r4
 80161ce:	f7ff fbdf 	bl	8015990 <read_submessage_list>
 80161d2:	e756      	b.n	8016082 <wait_session_status+0x36>
 80161d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80161d6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80161da:	47a0      	blx	r4
 80161dc:	2001      	movs	r0, #1
 80161de:	b01f      	add	sp, #124	@ 0x7c
 80161e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e4:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 80161e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80161ea:	a90e      	add	r1, sp, #56	@ 0x38
 80161ec:	4620      	mov	r0, r4
 80161ee:	f7ff fbcf 	bl	8015990 <read_submessage_list>
 80161f2:	e7b5      	b.n	8016160 <wait_session_status+0x114>

080161f4 <uxr_delete_session_retries>:
 80161f4:	b530      	push	{r4, r5, lr}
 80161f6:	b08f      	sub	sp, #60	@ 0x3c
 80161f8:	4604      	mov	r4, r0
 80161fa:	460d      	mov	r5, r1
 80161fc:	f000 fa3a 	bl	8016674 <uxr_session_header_offset>
 8016200:	2300      	movs	r3, #0
 8016202:	2210      	movs	r2, #16
 8016204:	9000      	str	r0, [sp, #0]
 8016206:	a902      	add	r1, sp, #8
 8016208:	a806      	add	r0, sp, #24
 801620a:	f7f8 fd55 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 801620e:	a906      	add	r1, sp, #24
 8016210:	4620      	mov	r0, r4
 8016212:	f000 f981 	bl	8016518 <uxr_buffer_delete_session>
 8016216:	2200      	movs	r2, #0
 8016218:	4611      	mov	r1, r2
 801621a:	9b06      	ldr	r3, [sp, #24]
 801621c:	4620      	mov	r0, r4
 801621e:	f000 f9d5 	bl	80165cc <uxr_stamp_session_header>
 8016222:	a806      	add	r0, sp, #24
 8016224:	f7f8 fd86 	bl	800ed34 <ucdr_buffer_length>
 8016228:	462b      	mov	r3, r5
 801622a:	4602      	mov	r2, r0
 801622c:	a902      	add	r1, sp, #8
 801622e:	4620      	mov	r0, r4
 8016230:	f7ff ff0c 	bl	801604c <wait_session_status>
 8016234:	b118      	cbz	r0, 801623e <uxr_delete_session_retries+0x4a>
 8016236:	7960      	ldrb	r0, [r4, #5]
 8016238:	fab0 f080 	clz	r0, r0
 801623c:	0940      	lsrs	r0, r0, #5
 801623e:	b00f      	add	sp, #60	@ 0x3c
 8016240:	bd30      	pop	{r4, r5, pc}
 8016242:	bf00      	nop

08016244 <uxr_create_session>:
 8016244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016248:	f100 0308 	add.w	r3, r0, #8
 801624c:	b0ab      	sub	sp, #172	@ 0xac
 801624e:	4604      	mov	r4, r0
 8016250:	4618      	mov	r0, r3
 8016252:	9303      	str	r3, [sp, #12]
 8016254:	f000 feec 	bl	8017030 <uxr_reset_stream_storage>
 8016258:	4620      	mov	r0, r4
 801625a:	f000 fa0b 	bl	8016674 <uxr_session_header_offset>
 801625e:	2300      	movs	r3, #0
 8016260:	9000      	str	r0, [sp, #0]
 8016262:	221c      	movs	r2, #28
 8016264:	a90b      	add	r1, sp, #44	@ 0x2c
 8016266:	a812      	add	r0, sp, #72	@ 0x48
 8016268:	f7f8 fd26 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 801626c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801626e:	8a1a      	ldrh	r2, [r3, #16]
 8016270:	3a04      	subs	r2, #4
 8016272:	b292      	uxth	r2, r2
 8016274:	a912      	add	r1, sp, #72	@ 0x48
 8016276:	4620      	mov	r0, r4
 8016278:	f000 f924 	bl	80164c4 <uxr_buffer_create_session>
 801627c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801627e:	4620      	mov	r0, r4
 8016280:	f000 f990 	bl	80165a4 <uxr_stamp_create_session_header>
 8016284:	a812      	add	r0, sp, #72	@ 0x48
 8016286:	f7f8 fd55 	bl	800ed34 <ucdr_buffer_length>
 801628a:	23ff      	movs	r3, #255	@ 0xff
 801628c:	4683      	mov	fp, r0
 801628e:	7163      	strb	r3, [r4, #5]
 8016290:	f04f 080a 	mov.w	r8, #10
 8016294:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016296:	465a      	mov	r2, fp
 8016298:	e9d3 0500 	ldrd	r0, r5, [r3]
 801629c:	a90b      	add	r1, sp, #44	@ 0x2c
 801629e:	47a8      	blx	r5
 80162a0:	f000 ffe6 	bl	8017270 <uxr_millis>
 80162a4:	2700      	movs	r7, #0
 80162a6:	4605      	mov	r5, r0
 80162a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80162ac:	e009      	b.n	80162c2 <uxr_create_session+0x7e>
 80162ae:	f000 ffdf 	bl	8017270 <uxr_millis>
 80162b2:	1b43      	subs	r3, r0, r5
 80162b4:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	7962      	ldrb	r2, [r4, #5]
 80162bc:	dd3d      	ble.n	801633a <uxr_create_session+0xf6>
 80162be:	2aff      	cmp	r2, #255	@ 0xff
 80162c0:	d13b      	bne.n	801633a <uxr_create_session+0xf6>
 80162c2:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80162c4:	a907      	add	r1, sp, #28
 80162c6:	6896      	ldr	r6, [r2, #8]
 80162c8:	6810      	ldr	r0, [r2, #0]
 80162ca:	aa08      	add	r2, sp, #32
 80162cc:	47b0      	blx	r6
 80162ce:	2800      	cmp	r0, #0
 80162d0:	d0ed      	beq.n	80162ae <uxr_create_session+0x6a>
 80162d2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80162d6:	a81a      	add	r0, sp, #104	@ 0x68
 80162d8:	f7f8 fd00 	bl	800ecdc <ucdr_init_buffer>
 80162dc:	f10d 031a 	add.w	r3, sp, #26
 80162e0:	aa06      	add	r2, sp, #24
 80162e2:	a91a      	add	r1, sp, #104	@ 0x68
 80162e4:	4620      	mov	r0, r4
 80162e6:	f88d 7018 	strb.w	r7, [sp, #24]
 80162ea:	f000 f985 	bl	80165f8 <uxr_read_session_header>
 80162ee:	2800      	cmp	r0, #0
 80162f0:	d0dd      	beq.n	80162ae <uxr_create_session+0x6a>
 80162f2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80162f6:	2100      	movs	r1, #0
 80162f8:	f000 fe74 	bl	8016fe4 <uxr_stream_id_from_raw>
 80162fc:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8016300:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8016304:	9302      	str	r3, [sp, #8]
 8016306:	f1b9 0f01 	cmp.w	r9, #1
 801630a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801630e:	fa5f fa80 	uxtb.w	sl, r0
 8016312:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016316:	d056      	beq.n	80163c6 <uxr_create_session+0x182>
 8016318:	f1b9 0f02 	cmp.w	r9, #2
 801631c:	d018      	beq.n	8016350 <uxr_create_session+0x10c>
 801631e:	f1b9 0f00 	cmp.w	r9, #0
 8016322:	d1c4      	bne.n	80162ae <uxr_create_session+0x6a>
 8016324:	4649      	mov	r1, r9
 8016326:	4648      	mov	r0, r9
 8016328:	f000 fe5c 	bl	8016fe4 <uxr_stream_id_from_raw>
 801632c:	a91a      	add	r1, sp, #104	@ 0x68
 801632e:	4602      	mov	r2, r0
 8016330:	900a      	str	r0, [sp, #40]	@ 0x28
 8016332:	4620      	mov	r0, r4
 8016334:	f7ff fb2c 	bl	8015990 <read_submessage_list>
 8016338:	e7b9      	b.n	80162ae <uxr_create_session+0x6a>
 801633a:	f1b8 0801 	subs.w	r8, r8, #1
 801633e:	d001      	beq.n	8016344 <uxr_create_session+0x100>
 8016340:	2aff      	cmp	r2, #255	@ 0xff
 8016342:	d0a7      	beq.n	8016294 <uxr_create_session+0x50>
 8016344:	2a00      	cmp	r2, #0
 8016346:	d05b      	beq.n	8016400 <uxr_create_session+0x1bc>
 8016348:	2000      	movs	r0, #0
 801634a:	b02b      	add	sp, #172	@ 0xac
 801634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016350:	9803      	ldr	r0, [sp, #12]
 8016352:	4631      	mov	r1, r6
 8016354:	f000 ff26 	bl	80171a4 <uxr_get_input_reliable_stream>
 8016358:	9004      	str	r0, [sp, #16]
 801635a:	b370      	cbz	r0, 80163ba <uxr_create_session+0x176>
 801635c:	aa1a      	add	r2, sp, #104	@ 0x68
 801635e:	4610      	mov	r0, r2
 8016360:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016362:	9205      	str	r2, [sp, #20]
 8016364:	f7f8 fcea 	bl	800ed3c <ucdr_buffer_remaining>
 8016368:	4603      	mov	r3, r0
 801636a:	f10d 0019 	add.w	r0, sp, #25
 801636e:	9000      	str	r0, [sp, #0]
 8016370:	9a05      	ldr	r2, [sp, #20]
 8016372:	9902      	ldr	r1, [sp, #8]
 8016374:	9804      	ldr	r0, [sp, #16]
 8016376:	f003 fa19 	bl	80197ac <uxr_receive_reliable_message>
 801637a:	b1f0      	cbz	r0, 80163ba <uxr_create_session+0x176>
 801637c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d035      	beq.n	80163f0 <uxr_create_session+0x1ac>
 8016384:	f8cd b008 	str.w	fp, [sp, #8]
 8016388:	f04f 0902 	mov.w	r9, #2
 801638c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8016390:	e00a      	b.n	80163a8 <uxr_create_session+0x164>
 8016392:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8016396:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801639a:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801639e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80163a0:	a922      	add	r1, sp, #136	@ 0x88
 80163a2:	4620      	mov	r0, r4
 80163a4:	f7ff faf4 	bl	8015990 <read_submessage_list>
 80163a8:	2204      	movs	r2, #4
 80163aa:	a922      	add	r1, sp, #136	@ 0x88
 80163ac:	4658      	mov	r0, fp
 80163ae:	f003 fa77 	bl	80198a0 <uxr_next_input_reliable_buffer_available>
 80163b2:	2800      	cmp	r0, #0
 80163b4:	d1ed      	bne.n	8016392 <uxr_create_session+0x14e>
 80163b6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80163ba:	4632      	mov	r2, r6
 80163bc:	4651      	mov	r1, sl
 80163be:	4620      	mov	r0, r4
 80163c0:	f7ff f98c 	bl	80156dc <write_submessage_acknack.isra.0>
 80163c4:	e773      	b.n	80162ae <uxr_create_session+0x6a>
 80163c6:	9803      	ldr	r0, [sp, #12]
 80163c8:	4631      	mov	r1, r6
 80163ca:	f000 fee1 	bl	8017190 <uxr_get_input_best_effort_stream>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	f43f af6d 	beq.w	80162ae <uxr_create_session+0x6a>
 80163d4:	9902      	ldr	r1, [sp, #8]
 80163d6:	f003 f959 	bl	801968c <uxr_receive_best_effort_message>
 80163da:	2800      	cmp	r0, #0
 80163dc:	f43f af67 	beq.w	80162ae <uxr_create_session+0x6a>
 80163e0:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80163e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80163e6:	a91a      	add	r1, sp, #104	@ 0x68
 80163e8:	4620      	mov	r0, r4
 80163ea:	f7ff fad1 	bl	8015990 <read_submessage_list>
 80163ee:	e75e      	b.n	80162ae <uxr_create_session+0x6a>
 80163f0:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80163f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80163f6:	a91a      	add	r1, sp, #104	@ 0x68
 80163f8:	4620      	mov	r0, r4
 80163fa:	f7ff fac9 	bl	8015990 <read_submessage_list>
 80163fe:	e7c1      	b.n	8016384 <uxr_create_session+0x140>
 8016400:	9803      	ldr	r0, [sp, #12]
 8016402:	f000 fe15 	bl	8017030 <uxr_reset_stream_storage>
 8016406:	2001      	movs	r0, #1
 8016408:	b02b      	add	sp, #172	@ 0xac
 801640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801640e:	bf00      	nop

08016410 <uxr_prepare_stream_to_write_submessage>:
 8016410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016414:	b082      	sub	sp, #8
 8016416:	4606      	mov	r6, r0
 8016418:	4610      	mov	r0, r2
 801641a:	4614      	mov	r4, r2
 801641c:	9101      	str	r1, [sp, #4]
 801641e:	461f      	mov	r7, r3
 8016420:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8016424:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8016428:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801642c:	f000 ff1a 	bl	8017264 <uxr_submessage_padding>
 8016430:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8016434:	1d21      	adds	r1, r4, #4
 8016436:	2b01      	cmp	r3, #1
 8016438:	eb01 0a00 	add.w	sl, r1, r0
 801643c:	d012      	beq.n	8016464 <uxr_prepare_stream_to_write_submessage+0x54>
 801643e:	2b02      	cmp	r3, #2
 8016440:	d003      	beq.n	801644a <uxr_prepare_stream_to_write_submessage+0x3a>
 8016442:	2000      	movs	r0, #0
 8016444:	b002      	add	sp, #8
 8016446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801644a:	4629      	mov	r1, r5
 801644c:	f106 0008 	add.w	r0, r6, #8
 8016450:	f000 fe94 	bl	801717c <uxr_get_output_reliable_stream>
 8016454:	2800      	cmp	r0, #0
 8016456:	d0f4      	beq.n	8016442 <uxr_prepare_stream_to_write_submessage+0x32>
 8016458:	4651      	mov	r1, sl
 801645a:	463a      	mov	r2, r7
 801645c:	f003 fbd6 	bl	8019c0c <uxr_prepare_reliable_buffer_to_write>
 8016460:	b968      	cbnz	r0, 801647e <uxr_prepare_stream_to_write_submessage+0x6e>
 8016462:	e7ee      	b.n	8016442 <uxr_prepare_stream_to_write_submessage+0x32>
 8016464:	4629      	mov	r1, r5
 8016466:	f106 0008 	add.w	r0, r6, #8
 801646a:	f000 fe7f 	bl	801716c <uxr_get_output_best_effort_stream>
 801646e:	2800      	cmp	r0, #0
 8016470:	d0e7      	beq.n	8016442 <uxr_prepare_stream_to_write_submessage+0x32>
 8016472:	4651      	mov	r1, sl
 8016474:	463a      	mov	r2, r7
 8016476:	f003 fafb 	bl	8019a70 <uxr_prepare_best_effort_buffer_to_write>
 801647a:	2800      	cmp	r0, #0
 801647c:	d0e1      	beq.n	8016442 <uxr_prepare_stream_to_write_submessage+0x32>
 801647e:	464b      	mov	r3, r9
 8016480:	b2a2      	uxth	r2, r4
 8016482:	4641      	mov	r1, r8
 8016484:	4638      	mov	r0, r7
 8016486:	f000 fead 	bl	80171e4 <uxr_buffer_submessage_header>
 801648a:	2001      	movs	r0, #1
 801648c:	b002      	add	sp, #8
 801648e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016492:	bf00      	nop

08016494 <uxr_init_session_info>:
 8016494:	2300      	movs	r3, #0
 8016496:	f361 0307 	bfi	r3, r1, #0, #8
 801649a:	0e11      	lsrs	r1, r2, #24
 801649c:	f361 230f 	bfi	r3, r1, #8, #8
 80164a0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80164a4:	f361 4317 	bfi	r3, r1, #16, #8
 80164a8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80164ac:	f361 631f 	bfi	r3, r1, #24, #8
 80164b0:	f04f 0c09 	mov.w	ip, #9
 80164b4:	21ff      	movs	r1, #255	@ 0xff
 80164b6:	6003      	str	r3, [r0, #0]
 80164b8:	7102      	strb	r2, [r0, #4]
 80164ba:	f8a0 c006 	strh.w	ip, [r0, #6]
 80164be:	7141      	strb	r1, [r0, #5]
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop

080164c4 <uxr_buffer_create_session>:
 80164c4:	b530      	push	{r4, r5, lr}
 80164c6:	4d13      	ldr	r5, [pc, #76]	@ (8016514 <uxr_buffer_create_session+0x50>)
 80164c8:	b089      	sub	sp, #36	@ 0x24
 80164ca:	2300      	movs	r3, #0
 80164cc:	9307      	str	r3, [sp, #28]
 80164ce:	f8ad 201c 	strh.w	r2, [sp, #28]
 80164d2:	682a      	ldr	r2, [r5, #0]
 80164d4:	9200      	str	r2, [sp, #0]
 80164d6:	460c      	mov	r4, r1
 80164d8:	2201      	movs	r2, #1
 80164da:	88a9      	ldrh	r1, [r5, #4]
 80164dc:	9301      	str	r3, [sp, #4]
 80164de:	80c2      	strh	r2, [r0, #6]
 80164e0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80164e4:	f8d0 1001 	ldr.w	r1, [r0, #1]
 80164e8:	7800      	ldrb	r0, [r0, #0]
 80164ea:	9303      	str	r3, [sp, #12]
 80164ec:	f88d 2004 	strb.w	r2, [sp, #4]
 80164f0:	9102      	str	r1, [sp, #8]
 80164f2:	2210      	movs	r2, #16
 80164f4:	4619      	mov	r1, r3
 80164f6:	f88d 000c 	strb.w	r0, [sp, #12]
 80164fa:	4620      	mov	r0, r4
 80164fc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8016500:	9306      	str	r3, [sp, #24]
 8016502:	f000 fe6f 	bl	80171e4 <uxr_buffer_submessage_header>
 8016506:	4669      	mov	r1, sp
 8016508:	4620      	mov	r0, r4
 801650a:	f001 fe8f 	bl	801822c <uxr_serialize_CREATE_CLIENT_Payload>
 801650e:	b009      	add	sp, #36	@ 0x24
 8016510:	bd30      	pop	{r4, r5, pc}
 8016512:	bf00      	nop
 8016514:	0801eff0 	.word	0x0801eff0

08016518 <uxr_buffer_delete_session>:
 8016518:	b510      	push	{r4, lr}
 801651a:	4a0c      	ldr	r2, [pc, #48]	@ (801654c <uxr_buffer_delete_session+0x34>)
 801651c:	b082      	sub	sp, #8
 801651e:	460c      	mov	r4, r1
 8016520:	2302      	movs	r3, #2
 8016522:	8911      	ldrh	r1, [r2, #8]
 8016524:	80c3      	strh	r3, [r0, #6]
 8016526:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801652a:	2300      	movs	r3, #0
 801652c:	2204      	movs	r2, #4
 801652e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8016532:	4620      	mov	r0, r4
 8016534:	2103      	movs	r1, #3
 8016536:	f8ad c004 	strh.w	ip, [sp, #4]
 801653a:	f000 fe53 	bl	80171e4 <uxr_buffer_submessage_header>
 801653e:	a901      	add	r1, sp, #4
 8016540:	4620      	mov	r0, r4
 8016542:	f001 ff17 	bl	8018374 <uxr_serialize_DELETE_Payload>
 8016546:	b002      	add	sp, #8
 8016548:	bd10      	pop	{r4, pc}
 801654a:	bf00      	nop
 801654c:	0801eff0 	.word	0x0801eff0

08016550 <uxr_read_create_session_status>:
 8016550:	b510      	push	{r4, lr}
 8016552:	460b      	mov	r3, r1
 8016554:	b088      	sub	sp, #32
 8016556:	4604      	mov	r4, r0
 8016558:	a901      	add	r1, sp, #4
 801655a:	4618      	mov	r0, r3
 801655c:	f001 ff1a 	bl	8018394 <uxr_deserialize_STATUS_AGENT_Payload>
 8016560:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016564:	7163      	strb	r3, [r4, #5]
 8016566:	b008      	add	sp, #32
 8016568:	bd10      	pop	{r4, pc}
 801656a:	bf00      	nop

0801656c <uxr_read_delete_session_status>:
 801656c:	b510      	push	{r4, lr}
 801656e:	460b      	mov	r3, r1
 8016570:	b082      	sub	sp, #8
 8016572:	4604      	mov	r4, r0
 8016574:	4669      	mov	r1, sp
 8016576:	4618      	mov	r0, r3
 8016578:	f001 ff3c 	bl	80183f4 <uxr_deserialize_STATUS_Payload>
 801657c:	88e3      	ldrh	r3, [r4, #6]
 801657e:	2b02      	cmp	r3, #2
 8016580:	d001      	beq.n	8016586 <uxr_read_delete_session_status+0x1a>
 8016582:	b002      	add	sp, #8
 8016584:	bd10      	pop	{r4, pc}
 8016586:	f10d 0002 	add.w	r0, sp, #2
 801658a:	f7fe fef9 	bl	8015380 <uxr_object_id_from_raw>
 801658e:	f8bd 3000 	ldrh.w	r3, [sp]
 8016592:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8016596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801659a:	bf08      	it	eq
 801659c:	7162      	strbeq	r2, [r4, #5]
 801659e:	b002      	add	sp, #8
 80165a0:	bd10      	pop	{r4, pc}
 80165a2:	bf00      	nop

080165a4 <uxr_stamp_create_session_header>:
 80165a4:	b510      	push	{r4, lr}
 80165a6:	2208      	movs	r2, #8
 80165a8:	b08a      	sub	sp, #40	@ 0x28
 80165aa:	4604      	mov	r4, r0
 80165ac:	eb0d 0002 	add.w	r0, sp, r2
 80165b0:	f7f8 fb94 	bl	800ecdc <ucdr_init_buffer>
 80165b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165b8:	9400      	str	r4, [sp, #0]
 80165ba:	2300      	movs	r3, #0
 80165bc:	461a      	mov	r2, r3
 80165be:	a802      	add	r0, sp, #8
 80165c0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80165c4:	f001 f80c 	bl	80175e0 <uxr_serialize_message_header>
 80165c8:	b00a      	add	sp, #40	@ 0x28
 80165ca:	bd10      	pop	{r4, pc}

080165cc <uxr_stamp_session_header>:
 80165cc:	b570      	push	{r4, r5, r6, lr}
 80165ce:	4604      	mov	r4, r0
 80165d0:	b08a      	sub	sp, #40	@ 0x28
 80165d2:	4616      	mov	r6, r2
 80165d4:	2208      	movs	r2, #8
 80165d6:	eb0d 0002 	add.w	r0, sp, r2
 80165da:	460d      	mov	r5, r1
 80165dc:	4619      	mov	r1, r3
 80165de:	f7f8 fb7d 	bl	800ecdc <ucdr_init_buffer>
 80165e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165e6:	9400      	str	r4, [sp, #0]
 80165e8:	4633      	mov	r3, r6
 80165ea:	462a      	mov	r2, r5
 80165ec:	a802      	add	r0, sp, #8
 80165ee:	f000 fff7 	bl	80175e0 <uxr_serialize_message_header>
 80165f2:	b00a      	add	sp, #40	@ 0x28
 80165f4:	bd70      	pop	{r4, r5, r6, pc}
 80165f6:	bf00      	nop

080165f8 <uxr_read_session_header>:
 80165f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165fa:	4607      	mov	r7, r0
 80165fc:	b085      	sub	sp, #20
 80165fe:	4608      	mov	r0, r1
 8016600:	460c      	mov	r4, r1
 8016602:	4615      	mov	r5, r2
 8016604:	461e      	mov	r6, r3
 8016606:	f7f8 fb99 	bl	800ed3c <ucdr_buffer_remaining>
 801660a:	2808      	cmp	r0, #8
 801660c:	d802      	bhi.n	8016614 <uxr_read_session_header+0x1c>
 801660e:	2000      	movs	r0, #0
 8016610:	b005      	add	sp, #20
 8016612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016614:	ab03      	add	r3, sp, #12
 8016616:	9300      	str	r3, [sp, #0]
 8016618:	462a      	mov	r2, r5
 801661a:	4633      	mov	r3, r6
 801661c:	f10d 010b 	add.w	r1, sp, #11
 8016620:	4620      	mov	r0, r4
 8016622:	f000 fffb 	bl	801761c <uxr_deserialize_message_header>
 8016626:	783a      	ldrb	r2, [r7, #0]
 8016628:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801662c:	4293      	cmp	r3, r2
 801662e:	d1ee      	bne.n	801660e <uxr_read_session_header+0x16>
 8016630:	061b      	lsls	r3, r3, #24
 8016632:	d41c      	bmi.n	801666e <uxr_read_session_header+0x76>
 8016634:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016638:	787b      	ldrb	r3, [r7, #1]
 801663a:	429a      	cmp	r2, r3
 801663c:	d003      	beq.n	8016646 <uxr_read_session_header+0x4e>
 801663e:	2001      	movs	r0, #1
 8016640:	f080 0001 	eor.w	r0, r0, #1
 8016644:	e7e4      	b.n	8016610 <uxr_read_session_header+0x18>
 8016646:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801664a:	78bb      	ldrb	r3, [r7, #2]
 801664c:	429a      	cmp	r2, r3
 801664e:	f107 0102 	add.w	r1, r7, #2
 8016652:	d1f4      	bne.n	801663e <uxr_read_session_header+0x46>
 8016654:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8016658:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801665c:	429a      	cmp	r2, r3
 801665e:	d1ee      	bne.n	801663e <uxr_read_session_header+0x46>
 8016660:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8016664:	784b      	ldrb	r3, [r1, #1]
 8016666:	429a      	cmp	r2, r3
 8016668:	d1e9      	bne.n	801663e <uxr_read_session_header+0x46>
 801666a:	2000      	movs	r0, #0
 801666c:	e7e8      	b.n	8016640 <uxr_read_session_header+0x48>
 801666e:	2001      	movs	r0, #1
 8016670:	e7ce      	b.n	8016610 <uxr_read_session_header+0x18>
 8016672:	bf00      	nop

08016674 <uxr_session_header_offset>:
 8016674:	f990 3000 	ldrsb.w	r3, [r0]
 8016678:	2b00      	cmp	r3, #0
 801667a:	bfb4      	ite	lt
 801667c:	2004      	movlt	r0, #4
 801667e:	2008      	movge	r0, #8
 8016680:	4770      	bx	lr
 8016682:	bf00      	nop

08016684 <uxr_init_base_object_request>:
 8016684:	b510      	push	{r4, lr}
 8016686:	88c3      	ldrh	r3, [r0, #6]
 8016688:	b082      	sub	sp, #8
 801668a:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801668e:	9101      	str	r1, [sp, #4]
 8016690:	f1a3 010a 	sub.w	r1, r3, #10
 8016694:	b289      	uxth	r1, r1
 8016696:	42a1      	cmp	r1, r4
 8016698:	d80e      	bhi.n	80166b8 <uxr_init_base_object_request+0x34>
 801669a:	3301      	adds	r3, #1
 801669c:	b29c      	uxth	r4, r3
 801669e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	80c4      	strh	r4, [r0, #6]
 80166a6:	9801      	ldr	r0, [sp, #4]
 80166a8:	7011      	strb	r1, [r2, #0]
 80166aa:	7053      	strb	r3, [r2, #1]
 80166ac:	1c91      	adds	r1, r2, #2
 80166ae:	f7fe fe7b 	bl	80153a8 <uxr_object_id_to_raw>
 80166b2:	4620      	mov	r0, r4
 80166b4:	b002      	add	sp, #8
 80166b6:	bd10      	pop	{r4, pc}
 80166b8:	230a      	movs	r3, #10
 80166ba:	2100      	movs	r1, #0
 80166bc:	461c      	mov	r4, r3
 80166be:	e7f1      	b.n	80166a4 <uxr_init_base_object_request+0x20>

080166c0 <uxr_parse_base_object_request>:
 80166c0:	b570      	push	{r4, r5, r6, lr}
 80166c2:	4604      	mov	r4, r0
 80166c4:	3002      	adds	r0, #2
 80166c6:	460d      	mov	r5, r1
 80166c8:	4616      	mov	r6, r2
 80166ca:	f7fe fe59 	bl	8015380 <uxr_object_id_from_raw>
 80166ce:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80166d2:	8028      	strh	r0, [r5, #0]
 80166d4:	806b      	strh	r3, [r5, #2]
 80166d6:	8823      	ldrh	r3, [r4, #0]
 80166d8:	ba5b      	rev16	r3, r3
 80166da:	8033      	strh	r3, [r6, #0]
 80166dc:	bd70      	pop	{r4, r5, r6, pc}
 80166de:	bf00      	nop

080166e0 <uxr_init_framing_io>:
 80166e0:	2300      	movs	r3, #0
 80166e2:	7041      	strb	r1, [r0, #1]
 80166e4:	7003      	strb	r3, [r0, #0]
 80166e6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80166e8:	4770      	bx	lr
 80166ea:	bf00      	nop

080166ec <uxr_write_framed_msg>:
 80166ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f0:	f890 c001 	ldrb.w	ip, [r0, #1]
 80166f4:	4617      	mov	r7, r2
 80166f6:	227e      	movs	r2, #126	@ 0x7e
 80166f8:	b085      	sub	sp, #20
 80166fa:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 80166fe:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 8016702:	2a01      	cmp	r2, #1
 8016704:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8016708:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 801670c:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016710:	4604      	mov	r4, r0
 8016712:	460e      	mov	r6, r1
 8016714:	469a      	mov	sl, r3
 8016716:	f240 812e 	bls.w	8016976 <uxr_write_framed_msg+0x28a>
 801671a:	2003      	movs	r0, #3
 801671c:	2102      	movs	r1, #2
 801671e:	f04f 0905 	mov.w	r9, #5
 8016722:	2204      	movs	r2, #4
 8016724:	4686      	mov	lr, r0
 8016726:	460b      	mov	r3, r1
 8016728:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 801672c:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8016730:	f1bc 0f01 	cmp.w	ip, #1
 8016734:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016738:	4421      	add	r1, r4
 801673a:	f240 8110 	bls.w	801695e <uxr_write_framed_msg+0x272>
 801673e:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8016742:	fa5f fc8b 	uxtb.w	ip, fp
 8016746:	f3cb 2107 	ubfx	r1, fp, #8, #8
 801674a:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 801674e:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 8016752:	f1be 0f01 	cmp.w	lr, #1
 8016756:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 801675a:	b2ed      	uxtb	r5, r5
 801675c:	d94c      	bls.n	80167f8 <uxr_write_framed_msg+0x10c>
 801675e:	4420      	add	r0, r4
 8016760:	2d01      	cmp	r5, #1
 8016762:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8016766:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801676a:	d95d      	bls.n	8016828 <uxr_write_framed_msg+0x13c>
 801676c:	18a0      	adds	r0, r4, r2
 801676e:	3201      	adds	r2, #1
 8016770:	b2d2      	uxtb	r2, r2
 8016772:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016776:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801677a:	f1bb 0f00 	cmp.w	fp, #0
 801677e:	f000 8108 	beq.w	8016992 <uxr_write_framed_msg+0x2a6>
 8016782:	f04f 0c00 	mov.w	ip, #0
 8016786:	4661      	mov	r1, ip
 8016788:	46de      	mov	lr, fp
 801678a:	46e3      	mov	fp, ip
 801678c:	46d4      	mov	ip, sl
 801678e:	468a      	mov	sl, r1
 8016790:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 801699c <uxr_write_framed_msg+0x2b0>
 8016794:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8016798:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801679c:	2901      	cmp	r1, #1
 801679e:	d91b      	bls.n	80167d8 <uxr_write_framed_msg+0xec>
 80167a0:	2a29      	cmp	r2, #41	@ 0x29
 80167a2:	d84e      	bhi.n	8016842 <uxr_write_framed_msg+0x156>
 80167a4:	18a1      	adds	r1, r4, r2
 80167a6:	3201      	adds	r2, #1
 80167a8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80167ac:	b2d2      	uxtb	r2, r2
 80167ae:	ea8b 0303 	eor.w	r3, fp, r3
 80167b2:	b2db      	uxtb	r3, r3
 80167b4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80167b8:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80167bc:	f10a 0a01 	add.w	sl, sl, #1
 80167c0:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 80167c4:	45d6      	cmp	lr, sl
 80167c6:	d95a      	bls.n	801687e <uxr_write_framed_msg+0x192>
 80167c8:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80167cc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80167d0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80167d4:	2901      	cmp	r1, #1
 80167d6:	d8e3      	bhi.n	80167a0 <uxr_write_framed_msg+0xb4>
 80167d8:	1c51      	adds	r1, r2, #1
 80167da:	b2c9      	uxtb	r1, r1
 80167dc:	2929      	cmp	r1, #41	@ 0x29
 80167de:	d830      	bhi.n	8016842 <uxr_write_framed_msg+0x156>
 80167e0:	18a1      	adds	r1, r4, r2
 80167e2:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 80167e6:	3202      	adds	r2, #2
 80167e8:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80167ec:	f083 0020 	eor.w	r0, r3, #32
 80167f0:	b2d2      	uxtb	r2, r2
 80167f2:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 80167f6:	e7da      	b.n	80167ae <uxr_write_framed_msg+0xc2>
 80167f8:	eb04 0e00 	add.w	lr, r4, r0
 80167fc:	f08c 0c20 	eor.w	ip, ip, #32
 8016800:	1c82      	adds	r2, r0, #2
 8016802:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 8016806:	b2d2      	uxtb	r2, r2
 8016808:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801680c:	2d01      	cmp	r5, #1
 801680e:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 8016812:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016816:	d907      	bls.n	8016828 <uxr_write_framed_msg+0x13c>
 8016818:	4422      	add	r2, r4
 801681a:	3003      	adds	r0, #3
 801681c:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 8016820:	b2c2      	uxtb	r2, r0
 8016822:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016826:	e7ac      	b.n	8016782 <uxr_write_framed_msg+0x96>
 8016828:	18a0      	adds	r0, r4, r2
 801682a:	f081 0120 	eor.w	r1, r1, #32
 801682e:	3202      	adds	r2, #2
 8016830:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8016834:	b2d2      	uxtb	r2, r2
 8016836:	217d      	movs	r1, #125	@ 0x7d
 8016838:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801683c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016840:	e79f      	b.n	8016782 <uxr_write_framed_msg+0x96>
 8016842:	e9cd ba00 	strd	fp, sl, [sp]
 8016846:	2500      	movs	r5, #0
 8016848:	46e2      	mov	sl, ip
 801684a:	46f3      	mov	fp, lr
 801684c:	e000      	b.n	8016850 <uxr_write_framed_msg+0x164>
 801684e:	b190      	cbz	r0, 8016876 <uxr_write_framed_msg+0x18a>
 8016850:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016854:	1b52      	subs	r2, r2, r5
 8016856:	4643      	mov	r3, r8
 8016858:	4421      	add	r1, r4
 801685a:	4638      	mov	r0, r7
 801685c:	47b0      	blx	r6
 801685e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016862:	4405      	add	r5, r0
 8016864:	4295      	cmp	r5, r2
 8016866:	d3f2      	bcc.n	801684e <uxr_write_framed_msg+0x162>
 8016868:	46d4      	mov	ip, sl
 801686a:	46de      	mov	lr, fp
 801686c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8016870:	f8dd b000 	ldr.w	fp, [sp]
 8016874:	d06f      	beq.n	8016956 <uxr_write_framed_msg+0x26a>
 8016876:	2000      	movs	r0, #0
 8016878:	b005      	add	sp, #20
 801687a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801687e:	46dc      	mov	ip, fp
 8016880:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016884:	f8ad c00c 	strh.w	ip, [sp, #12]
 8016888:	46f3      	mov	fp, lr
 801688a:	fa5f fc8c 	uxtb.w	ip, ip
 801688e:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8016892:	2b01      	cmp	r3, #1
 8016894:	f04f 0900 	mov.w	r9, #0
 8016898:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 801689c:	d930      	bls.n	8016900 <uxr_write_framed_msg+0x214>
 801689e:	2a29      	cmp	r2, #41	@ 0x29
 80168a0:	d91c      	bls.n	80168dc <uxr_write_framed_msg+0x1f0>
 80168a2:	2500      	movs	r5, #0
 80168a4:	e001      	b.n	80168aa <uxr_write_framed_msg+0x1be>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	d0e5      	beq.n	8016876 <uxr_write_framed_msg+0x18a>
 80168aa:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80168ae:	1b52      	subs	r2, r2, r5
 80168b0:	4643      	mov	r3, r8
 80168b2:	4421      	add	r1, r4
 80168b4:	4638      	mov	r0, r7
 80168b6:	47b0      	blx	r6
 80168b8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80168bc:	4405      	add	r5, r0
 80168be:	4295      	cmp	r5, r2
 80168c0:	d3f1      	bcc.n	80168a6 <uxr_write_framed_msg+0x1ba>
 80168c2:	d1d8      	bne.n	8016876 <uxr_write_framed_msg+0x18a>
 80168c4:	f109 0310 	add.w	r3, r9, #16
 80168c8:	446b      	add	r3, sp
 80168ca:	2200      	movs	r2, #0
 80168cc:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 80168d0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80168d4:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80168d8:	2b01      	cmp	r3, #1
 80168da:	d911      	bls.n	8016900 <uxr_write_framed_msg+0x214>
 80168dc:	18a3      	adds	r3, r4, r2
 80168de:	3201      	adds	r2, #1
 80168e0:	b2d2      	uxtb	r2, r2
 80168e2:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 80168e6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80168ea:	f1b9 0f00 	cmp.w	r9, #0
 80168ee:	d119      	bne.n	8016924 <uxr_write_framed_msg+0x238>
 80168f0:	f89d c00d 	ldrb.w	ip, [sp, #13]
 80168f4:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80168f8:	2b01      	cmp	r3, #1
 80168fa:	f04f 0901 	mov.w	r9, #1
 80168fe:	d8ce      	bhi.n	801689e <uxr_write_framed_msg+0x1b2>
 8016900:	1c53      	adds	r3, r2, #1
 8016902:	b2db      	uxtb	r3, r3
 8016904:	2b29      	cmp	r3, #41	@ 0x29
 8016906:	d8cc      	bhi.n	80168a2 <uxr_write_framed_msg+0x1b6>
 8016908:	18a3      	adds	r3, r4, r2
 801690a:	3202      	adds	r2, #2
 801690c:	f08c 0c20 	eor.w	ip, ip, #32
 8016910:	b2d2      	uxtb	r2, r2
 8016912:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 8016916:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 801691a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801691e:	f1b9 0f00 	cmp.w	r9, #0
 8016922:	d0e5      	beq.n	80168f0 <uxr_write_framed_msg+0x204>
 8016924:	2500      	movs	r5, #0
 8016926:	e001      	b.n	801692c <uxr_write_framed_msg+0x240>
 8016928:	2800      	cmp	r0, #0
 801692a:	d0a4      	beq.n	8016876 <uxr_write_framed_msg+0x18a>
 801692c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016930:	1b52      	subs	r2, r2, r5
 8016932:	4643      	mov	r3, r8
 8016934:	4421      	add	r1, r4
 8016936:	4638      	mov	r0, r7
 8016938:	47b0      	blx	r6
 801693a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801693e:	4405      	add	r5, r0
 8016940:	4295      	cmp	r5, r2
 8016942:	d3f1      	bcc.n	8016928 <uxr_write_framed_msg+0x23c>
 8016944:	d197      	bne.n	8016876 <uxr_write_framed_msg+0x18a>
 8016946:	2300      	movs	r3, #0
 8016948:	fa1f f08b 	uxth.w	r0, fp
 801694c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016950:	b005      	add	sp, #20
 8016952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016956:	2300      	movs	r3, #0
 8016958:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801695c:	e732      	b.n	80167c4 <uxr_write_framed_msg+0xd8>
 801695e:	44a6      	add	lr, r4
 8016960:	f085 0520 	eor.w	r5, r5, #32
 8016964:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016968:	4610      	mov	r0, r2
 801696a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801696e:	464a      	mov	r2, r9
 8016970:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 8016974:	e6e5      	b.n	8016742 <uxr_write_framed_msg+0x56>
 8016976:	f08c 0c20 	eor.w	ip, ip, #32
 801697a:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 801697e:	2103      	movs	r1, #3
 8016980:	2004      	movs	r0, #4
 8016982:	f04f 0906 	mov.w	r9, #6
 8016986:	2205      	movs	r2, #5
 8016988:	4686      	mov	lr, r0
 801698a:	460b      	mov	r3, r1
 801698c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016990:	e6ca      	b.n	8016728 <uxr_write_framed_msg+0x3c>
 8016992:	f8ad b00c 	strh.w	fp, [sp, #12]
 8016996:	46dc      	mov	ip, fp
 8016998:	e779      	b.n	801688e <uxr_write_framed_msg+0x1a2>
 801699a:	bf00      	nop
 801699c:	0801fde0 	.word	0x0801fde0

080169a0 <uxr_framing_read_transport>:
 80169a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a4:	4604      	mov	r4, r0
 80169a6:	b083      	sub	sp, #12
 80169a8:	461f      	mov	r7, r3
 80169aa:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80169ae:	4689      	mov	r9, r1
 80169b0:	4692      	mov	sl, r2
 80169b2:	f000 fc5d 	bl	8017270 <uxr_millis>
 80169b6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80169ba:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80169be:	42b3      	cmp	r3, r6
 80169c0:	4680      	mov	r8, r0
 80169c2:	d062      	beq.n	8016a8a <uxr_framing_read_transport+0xea>
 80169c4:	d81c      	bhi.n	8016a00 <uxr_framing_read_transport+0x60>
 80169c6:	1e75      	subs	r5, r6, #1
 80169c8:	1aed      	subs	r5, r5, r3
 80169ca:	b2ed      	uxtb	r5, r5
 80169cc:	2600      	movs	r6, #0
 80169ce:	455d      	cmp	r5, fp
 80169d0:	d81f      	bhi.n	8016a12 <uxr_framing_read_transport+0x72>
 80169d2:	19ab      	adds	r3, r5, r6
 80169d4:	455b      	cmp	r3, fp
 80169d6:	bf84      	itt	hi
 80169d8:	ebab 0b05 	subhi.w	fp, fp, r5
 80169dc:	fa5f f68b 	uxtbhi.w	r6, fp
 80169e0:	b9e5      	cbnz	r5, 8016a1c <uxr_framing_read_transport+0x7c>
 80169e2:	f04f 0b00 	mov.w	fp, #0
 80169e6:	f000 fc43 	bl	8017270 <uxr_millis>
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	eba0 0108 	sub.w	r1, r0, r8
 80169f0:	1a5b      	subs	r3, r3, r1
 80169f2:	4658      	mov	r0, fp
 80169f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80169f8:	603b      	str	r3, [r7, #0]
 80169fa:	b003      	add	sp, #12
 80169fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a00:	2e00      	cmp	r6, #0
 8016a02:	d04a      	beq.n	8016a9a <uxr_framing_read_transport+0xfa>
 8016a04:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8016a08:	b2dd      	uxtb	r5, r3
 8016a0a:	3e01      	subs	r6, #1
 8016a0c:	455d      	cmp	r5, fp
 8016a0e:	b2f6      	uxtb	r6, r6
 8016a10:	d9df      	bls.n	80169d2 <uxr_framing_read_transport+0x32>
 8016a12:	fa5f f58b 	uxtb.w	r5, fp
 8016a16:	2600      	movs	r6, #0
 8016a18:	2d00      	cmp	r5, #0
 8016a1a:	d0e2      	beq.n	80169e2 <uxr_framing_read_transport+0x42>
 8016a1c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016a20:	3102      	adds	r1, #2
 8016a22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a24:	9300      	str	r3, [sp, #0]
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	4421      	add	r1, r4
 8016a2a:	462a      	mov	r2, r5
 8016a2c:	4650      	mov	r0, sl
 8016a2e:	47c8      	blx	r9
 8016a30:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016a34:	4a1b      	ldr	r2, [pc, #108]	@ (8016aa4 <uxr_framing_read_transport+0x104>)
 8016a36:	4403      	add	r3, r0
 8016a38:	0859      	lsrs	r1, r3, #1
 8016a3a:	4683      	mov	fp, r0
 8016a3c:	fba2 0101 	umull	r0, r1, r2, r1
 8016a40:	0889      	lsrs	r1, r1, #2
 8016a42:	222a      	movs	r2, #42	@ 0x2a
 8016a44:	fb02 3111 	mls	r1, r2, r1, r3
 8016a48:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8016a4c:	f1bb 0f00 	cmp.w	fp, #0
 8016a50:	d0c7      	beq.n	80169e2 <uxr_framing_read_transport+0x42>
 8016a52:	45ab      	cmp	fp, r5
 8016a54:	d1c7      	bne.n	80169e6 <uxr_framing_read_transport+0x46>
 8016a56:	2e00      	cmp	r6, #0
 8016a58:	d0c5      	beq.n	80169e6 <uxr_framing_read_transport+0x46>
 8016a5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a5c:	9300      	str	r3, [sp, #0]
 8016a5e:	3102      	adds	r1, #2
 8016a60:	4632      	mov	r2, r6
 8016a62:	4421      	add	r1, r4
 8016a64:	2300      	movs	r3, #0
 8016a66:	4650      	mov	r0, sl
 8016a68:	47c8      	blx	r9
 8016a6a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8016aa4 <uxr_framing_read_transport+0x104>)
 8016a70:	4403      	add	r3, r0
 8016a72:	0859      	lsrs	r1, r3, #1
 8016a74:	fba2 2101 	umull	r2, r1, r2, r1
 8016a78:	0889      	lsrs	r1, r1, #2
 8016a7a:	222a      	movs	r2, #42	@ 0x2a
 8016a7c:	fb02 3311 	mls	r3, r2, r1, r3
 8016a80:	eb00 0b05 	add.w	fp, r0, r5
 8016a84:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016a88:	e7ad      	b.n	80169e6 <uxr_framing_read_transport+0x46>
 8016a8a:	2600      	movs	r6, #0
 8016a8c:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8016a90:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8016a92:	d9be      	bls.n	8016a12 <uxr_framing_read_transport+0x72>
 8016a94:	2529      	movs	r5, #41	@ 0x29
 8016a96:	2102      	movs	r1, #2
 8016a98:	e7c3      	b.n	8016a22 <uxr_framing_read_transport+0x82>
 8016a9a:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 8016a9e:	b2dd      	uxtb	r5, r3
 8016aa0:	e795      	b.n	80169ce <uxr_framing_read_transport+0x2e>
 8016aa2:	bf00      	nop
 8016aa4:	30c30c31 	.word	0x30c30c31

08016aa8 <uxr_read_framed_msg>:
 8016aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aac:	461d      	mov	r5, r3
 8016aae:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 8016ab2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8016ab6:	b085      	sub	sp, #20
 8016ab8:	459c      	cmp	ip, r3
 8016aba:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 8016abe:	4604      	mov	r4, r0
 8016ac0:	460f      	mov	r7, r1
 8016ac2:	4616      	mov	r6, r2
 8016ac4:	f000 81ae 	beq.w	8016e24 <uxr_read_framed_msg+0x37c>
 8016ac8:	2000      	movs	r0, #0
 8016aca:	4639      	mov	r1, r7
 8016acc:	2800      	cmp	r0, #0
 8016ace:	d138      	bne.n	8016b42 <uxr_read_framed_msg+0x9a>
 8016ad0:	468a      	mov	sl, r1
 8016ad2:	7823      	ldrb	r3, [r4, #0]
 8016ad4:	2b07      	cmp	r3, #7
 8016ad6:	d8fd      	bhi.n	8016ad4 <uxr_read_framed_msg+0x2c>
 8016ad8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016adc:	0116013b 	.word	0x0116013b
 8016ae0:	00cd00f0 	.word	0x00cd00f0
 8016ae4:	005a00a0 	.word	0x005a00a0
 8016ae8:	00080037 	.word	0x00080037
 8016aec:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016af0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016af4:	4290      	cmp	r0, r2
 8016af6:	f000 8167 	beq.w	8016dc8 <uxr_read_framed_msg+0x320>
 8016afa:	18a3      	adds	r3, r4, r2
 8016afc:	1c57      	adds	r7, r2, #1
 8016afe:	49c7      	ldr	r1, [pc, #796]	@ (8016e1c <uxr_read_framed_msg+0x374>)
 8016b00:	f893 c002 	ldrb.w	ip, [r3, #2]
 8016b04:	087b      	lsrs	r3, r7, #1
 8016b06:	fba1 8303 	umull	r8, r3, r1, r3
 8016b0a:	089b      	lsrs	r3, r3, #2
 8016b0c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016b10:	fb08 7313 	mls	r3, r8, r3, r7
 8016b14:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8016b18:	b2df      	uxtb	r7, r3
 8016b1a:	f000 81b2 	beq.w	8016e82 <uxr_read_framed_msg+0x3da>
 8016b1e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016b22:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 8016b26:	f000 8220 	beq.w	8016f6a <uxr_read_framed_msg+0x4c2>
 8016b2a:	4661      	mov	r1, ip
 8016b2c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016b2e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016b30:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	2100      	movs	r1, #0
 8016b38:	429a      	cmp	r2, r3
 8016b3a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016b3c:	7021      	strb	r1, [r4, #0]
 8016b3e:	f000 8198 	beq.w	8016e72 <uxr_read_framed_msg+0x3ca>
 8016b42:	2000      	movs	r0, #0
 8016b44:	b005      	add	sp, #20
 8016b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b4a:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016b4e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016b52:	4297      	cmp	r7, r2
 8016b54:	f000 8148 	beq.w	8016de8 <uxr_read_framed_msg+0x340>
 8016b58:	18a3      	adds	r3, r4, r2
 8016b5a:	f102 0c01 	add.w	ip, r2, #1
 8016b5e:	49af      	ldr	r1, [pc, #700]	@ (8016e1c <uxr_read_framed_msg+0x374>)
 8016b60:	7898      	ldrb	r0, [r3, #2]
 8016b62:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016b66:	fba1 8303 	umull	r8, r3, r1, r3
 8016b6a:	089b      	lsrs	r3, r3, #2
 8016b6c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016b70:	fb08 c313 	mls	r3, r8, r3, ip
 8016b74:	287d      	cmp	r0, #125	@ 0x7d
 8016b76:	fa5f fc83 	uxtb.w	ip, r3
 8016b7a:	f000 8194 	beq.w	8016ea6 <uxr_read_framed_msg+0x3fe>
 8016b7e:	287e      	cmp	r0, #126	@ 0x7e
 8016b80:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016b84:	f000 8200 	beq.w	8016f88 <uxr_read_framed_msg+0x4e0>
 8016b88:	2307      	movs	r3, #7
 8016b8a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016b8c:	7023      	strb	r3, [r4, #0]
 8016b8e:	e7a0      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016b90:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016b92:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8016b94:	429f      	cmp	r7, r3
 8016b96:	f240 8164 	bls.w	8016e62 <uxr_read_framed_msg+0x3ba>
 8016b9a:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8016e1c <uxr_read_framed_msg+0x374>
 8016b9e:	f8cd a00c 	str.w	sl, [sp, #12]
 8016ba2:	212a      	movs	r1, #42	@ 0x2a
 8016ba4:	e01f      	b.n	8016be6 <uxr_read_framed_msg+0x13e>
 8016ba6:	f89a e002 	ldrb.w	lr, [sl, #2]
 8016baa:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8016bae:	f000 80ea 	beq.w	8016d86 <uxr_read_framed_msg+0x2de>
 8016bb2:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016bb6:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016bba:	f000 8142 	beq.w	8016e42 <uxr_read_framed_msg+0x39a>
 8016bbe:	f805 e003 	strb.w	lr, [r5, r3]
 8016bc2:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8016bc4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016bc6:	4f96      	ldr	r7, [pc, #600]	@ (8016e20 <uxr_read_framed_msg+0x378>)
 8016bc8:	ea80 020e 	eor.w	r2, r0, lr
 8016bcc:	b2d2      	uxtb	r2, r2
 8016bce:	3301      	adds	r3, #1
 8016bd0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8016bd4:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8016bdc:	42bb      	cmp	r3, r7
 8016bde:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016be0:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016be2:	f080 80e7 	bcs.w	8016db4 <uxr_read_framed_msg+0x30c>
 8016be6:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8016bea:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8016bee:	f100 0c01 	add.w	ip, r0, #1
 8016bf2:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 8016bf6:	fba9 e20e 	umull	lr, r2, r9, lr
 8016bfa:	0892      	lsrs	r2, r2, #2
 8016bfc:	fb01 c212 	mls	r2, r1, r2, ip
 8016c00:	4580      	cmp	r8, r0
 8016c02:	eb04 0a00 	add.w	sl, r4, r0
 8016c06:	fa5f fc82 	uxtb.w	ip, r2
 8016c0a:	d1cc      	bne.n	8016ba6 <uxr_read_framed_msg+0xfe>
 8016c0c:	42bb      	cmp	r3, r7
 8016c0e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016c12:	f040 8128 	bne.w	8016e66 <uxr_read_framed_msg+0x3be>
 8016c16:	2306      	movs	r3, #6
 8016c18:	7023      	strb	r3, [r4, #0]
 8016c1a:	e75a      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016c1c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016c20:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016c24:	4297      	cmp	r7, r2
 8016c26:	f000 80cf 	beq.w	8016dc8 <uxr_read_framed_msg+0x320>
 8016c2a:	18a3      	adds	r3, r4, r2
 8016c2c:	f102 0c01 	add.w	ip, r2, #1
 8016c30:	497a      	ldr	r1, [pc, #488]	@ (8016e1c <uxr_read_framed_msg+0x374>)
 8016c32:	7898      	ldrb	r0, [r3, #2]
 8016c34:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016c38:	fba1 8303 	umull	r8, r3, r1, r3
 8016c3c:	089b      	lsrs	r3, r3, #2
 8016c3e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016c42:	fb08 c313 	mls	r3, r8, r3, ip
 8016c46:	287d      	cmp	r0, #125	@ 0x7d
 8016c48:	fa5f fc83 	uxtb.w	ip, r3
 8016c4c:	f000 813d 	beq.w	8016eca <uxr_read_framed_msg+0x422>
 8016c50:	287e      	cmp	r0, #126	@ 0x7e
 8016c52:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016c56:	f000 8188 	beq.w	8016f6a <uxr_read_framed_msg+0x4c2>
 8016c5a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016c5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016c5e:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	2200      	movs	r2, #0
 8016c66:	428b      	cmp	r3, r1
 8016c68:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016c6a:	8662      	strh	r2, [r4, #50]	@ 0x32
 8016c6c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016c6e:	f240 80f5 	bls.w	8016e5c <uxr_read_framed_msg+0x3b4>
 8016c72:	7022      	strb	r2, [r4, #0]
 8016c74:	e765      	b.n	8016b42 <uxr_read_framed_msg+0x9a>
 8016c76:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016c7a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016c7e:	4297      	cmp	r7, r2
 8016c80:	f000 80b2 	beq.w	8016de8 <uxr_read_framed_msg+0x340>
 8016c84:	18a3      	adds	r3, r4, r2
 8016c86:	f102 0c01 	add.w	ip, r2, #1
 8016c8a:	4964      	ldr	r1, [pc, #400]	@ (8016e1c <uxr_read_framed_msg+0x374>)
 8016c8c:	7898      	ldrb	r0, [r3, #2]
 8016c8e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016c92:	fba1 8303 	umull	r8, r3, r1, r3
 8016c96:	089b      	lsrs	r3, r3, #2
 8016c98:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016c9c:	fb08 c313 	mls	r3, r8, r3, ip
 8016ca0:	287d      	cmp	r0, #125	@ 0x7d
 8016ca2:	fa5f fc83 	uxtb.w	ip, r3
 8016ca6:	f000 813b 	beq.w	8016f20 <uxr_read_framed_msg+0x478>
 8016caa:	287e      	cmp	r0, #126	@ 0x7e
 8016cac:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016cb0:	f000 816a 	beq.w	8016f88 <uxr_read_framed_msg+0x4e0>
 8016cb4:	2304      	movs	r3, #4
 8016cb6:	8620      	strh	r0, [r4, #48]	@ 0x30
 8016cb8:	7023      	strb	r3, [r4, #0]
 8016cba:	e70a      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016cbc:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016cc0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016cc4:	4297      	cmp	r7, r2
 8016cc6:	f000 80c4 	beq.w	8016e52 <uxr_read_framed_msg+0x3aa>
 8016cca:	18a3      	adds	r3, r4, r2
 8016ccc:	f102 0c01 	add.w	ip, r2, #1
 8016cd0:	4952      	ldr	r1, [pc, #328]	@ (8016e1c <uxr_read_framed_msg+0x374>)
 8016cd2:	7898      	ldrb	r0, [r3, #2]
 8016cd4:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016cd8:	fba1 8303 	umull	r8, r3, r1, r3
 8016cdc:	089b      	lsrs	r3, r3, #2
 8016cde:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016ce2:	fb08 c313 	mls	r3, r8, r3, ip
 8016ce6:	287d      	cmp	r0, #125	@ 0x7d
 8016ce8:	fa5f fc83 	uxtb.w	ip, r3
 8016cec:	f000 812b 	beq.w	8016f46 <uxr_read_framed_msg+0x49e>
 8016cf0:	287e      	cmp	r0, #126	@ 0x7e
 8016cf2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016cf6:	f000 8155 	beq.w	8016fa4 <uxr_read_framed_msg+0x4fc>
 8016cfa:	7863      	ldrb	r3, [r4, #1]
 8016cfc:	4283      	cmp	r3, r0
 8016cfe:	bf0c      	ite	eq
 8016d00:	2303      	moveq	r3, #3
 8016d02:	2300      	movne	r3, #0
 8016d04:	7023      	strb	r3, [r4, #0]
 8016d06:	e6e4      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016d08:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016d0c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016d10:	2300      	movs	r3, #0
 8016d12:	4290      	cmp	r0, r2
 8016d14:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8016d18:	d06b      	beq.n	8016df2 <uxr_read_framed_msg+0x34a>
 8016d1a:	18a3      	adds	r3, r4, r2
 8016d1c:	f102 0c01 	add.w	ip, r2, #1
 8016d20:	493e      	ldr	r1, [pc, #248]	@ (8016e1c <uxr_read_framed_msg+0x374>)
 8016d22:	789f      	ldrb	r7, [r3, #2]
 8016d24:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016d28:	fba1 8303 	umull	r8, r3, r1, r3
 8016d2c:	089b      	lsrs	r3, r3, #2
 8016d2e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016d32:	fb08 c313 	mls	r3, r8, r3, ip
 8016d36:	2f7d      	cmp	r7, #125	@ 0x7d
 8016d38:	fa5f fc83 	uxtb.w	ip, r3
 8016d3c:	f000 80d8 	beq.w	8016ef0 <uxr_read_framed_msg+0x448>
 8016d40:	2f7e      	cmp	r7, #126	@ 0x7e
 8016d42:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016d46:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 8016d4a:	d052      	beq.n	8016df2 <uxr_read_framed_msg+0x34a>
 8016d4c:	2302      	movs	r3, #2
 8016d4e:	7023      	strb	r3, [r4, #0]
 8016d50:	e6bf      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016d52:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8016d56:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016d5a:	4930      	ldr	r1, [pc, #192]	@ (8016e1c <uxr_read_framed_msg+0x374>)
 8016d5c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016d60:	e004      	b.n	8016d6c <uxr_read_framed_msg+0x2c4>
 8016d62:	78bb      	ldrb	r3, [r7, #2]
 8016d64:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016d68:	2b7e      	cmp	r3, #126	@ 0x7e
 8016d6a:	d02a      	beq.n	8016dc2 <uxr_read_framed_msg+0x31a>
 8016d6c:	1c50      	adds	r0, r2, #1
 8016d6e:	0843      	lsrs	r3, r0, #1
 8016d70:	fba1 e303 	umull	lr, r3, r1, r3
 8016d74:	089b      	lsrs	r3, r3, #2
 8016d76:	fb0c 0013 	mls	r0, ip, r3, r0
 8016d7a:	4590      	cmp	r8, r2
 8016d7c:	eb04 0702 	add.w	r7, r4, r2
 8016d80:	b2c2      	uxtb	r2, r0
 8016d82:	d1ee      	bne.n	8016d62 <uxr_read_framed_msg+0x2ba>
 8016d84:	e6dd      	b.n	8016b42 <uxr_read_framed_msg+0x9a>
 8016d86:	3002      	adds	r0, #2
 8016d88:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8016d8c:	eb04 0a02 	add.w	sl, r4, r2
 8016d90:	fba9 e20e 	umull	lr, r2, r9, lr
 8016d94:	0892      	lsrs	r2, r2, #2
 8016d96:	45e0      	cmp	r8, ip
 8016d98:	fb01 0012 	mls	r0, r1, r2, r0
 8016d9c:	f43f af36 	beq.w	8016c0c <uxr_read_framed_msg+0x164>
 8016da0:	f89a e002 	ldrb.w	lr, [sl, #2]
 8016da4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016da8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016dac:	d049      	beq.n	8016e42 <uxr_read_framed_msg+0x39a>
 8016dae:	f08e 0e20 	eor.w	lr, lr, #32
 8016db2:	e704      	b.n	8016bbe <uxr_read_framed_msg+0x116>
 8016db4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016db8:	f43f af2d 	beq.w	8016c16 <uxr_read_framed_msg+0x16e>
 8016dbc:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016dc0:	d151      	bne.n	8016e66 <uxr_read_framed_msg+0x3be>
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	7023      	strb	r3, [r4, #0]
 8016dc6:	e684      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016dc8:	4651      	mov	r1, sl
 8016dca:	f8cd b000 	str.w	fp, [sp]
 8016dce:	2301      	movs	r3, #1
 8016dd0:	9301      	str	r3, [sp, #4]
 8016dd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016dd4:	9103      	str	r1, [sp, #12]
 8016dd6:	4632      	mov	r2, r6
 8016dd8:	4620      	mov	r0, r4
 8016dda:	f7ff fde1 	bl	80169a0 <uxr_framing_read_transport>
 8016dde:	fab0 f080 	clz	r0, r0
 8016de2:	9903      	ldr	r1, [sp, #12]
 8016de4:	0940      	lsrs	r0, r0, #5
 8016de6:	e671      	b.n	8016acc <uxr_read_framed_msg+0x24>
 8016de8:	4651      	mov	r1, sl
 8016dea:	f8cd b000 	str.w	fp, [sp]
 8016dee:	2302      	movs	r3, #2
 8016df0:	e7ee      	b.n	8016dd0 <uxr_read_framed_msg+0x328>
 8016df2:	2304      	movs	r3, #4
 8016df4:	9301      	str	r3, [sp, #4]
 8016df6:	f8cd b000 	str.w	fp, [sp]
 8016dfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016dfc:	4632      	mov	r2, r6
 8016dfe:	4651      	mov	r1, sl
 8016e00:	4620      	mov	r0, r4
 8016e02:	f7ff fdcd 	bl	80169a0 <uxr_framing_read_transport>
 8016e06:	2800      	cmp	r0, #0
 8016e08:	f47f ae63 	bne.w	8016ad2 <uxr_read_framed_msg+0x2a>
 8016e0c:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8016e10:	387e      	subs	r0, #126	@ 0x7e
 8016e12:	4651      	mov	r1, sl
 8016e14:	bf18      	it	ne
 8016e16:	2001      	movne	r0, #1
 8016e18:	e658      	b.n	8016acc <uxr_read_framed_msg+0x24>
 8016e1a:	bf00      	nop
 8016e1c:	30c30c31 	.word	0x30c30c31
 8016e20:	0801fde0 	.word	0x0801fde0
 8016e24:	2305      	movs	r3, #5
 8016e26:	9301      	str	r3, [sp, #4]
 8016e28:	f8cd b000 	str.w	fp, [sp]
 8016e2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e2e:	f7ff fdb7 	bl	80169a0 <uxr_framing_read_transport>
 8016e32:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016e36:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	f43f ae81 	beq.w	8016b42 <uxr_read_framed_msg+0x9a>
 8016e40:	e642      	b.n	8016ac8 <uxr_read_framed_msg+0x20>
 8016e42:	42bb      	cmp	r3, r7
 8016e44:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016e48:	f43f aee5 	beq.w	8016c16 <uxr_read_framed_msg+0x16e>
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	7023      	strb	r3, [r4, #0]
 8016e50:	e63f      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016e52:	4651      	mov	r1, sl
 8016e54:	f8cd b000 	str.w	fp, [sp]
 8016e58:	2303      	movs	r3, #3
 8016e5a:	e7b9      	b.n	8016dd0 <uxr_read_framed_msg+0x328>
 8016e5c:	2305      	movs	r3, #5
 8016e5e:	7023      	strb	r3, [r4, #0]
 8016e60:	e637      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016e62:	f43f aed8 	beq.w	8016c16 <uxr_read_framed_msg+0x16e>
 8016e66:	1afb      	subs	r3, r7, r3
 8016e68:	3302      	adds	r3, #2
 8016e6a:	e9cd b300 	strd	fp, r3, [sp]
 8016e6e:	4651      	mov	r1, sl
 8016e70:	e7af      	b.n	8016dd2 <uxr_read_framed_msg+0x32a>
 8016e72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016e74:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016e78:	7013      	strb	r3, [r2, #0]
 8016e7a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016e7c:	b005      	add	sp, #20
 8016e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e82:	4287      	cmp	r7, r0
 8016e84:	d0a0      	beq.n	8016dc8 <uxr_read_framed_msg+0x320>
 8016e86:	4423      	add	r3, r4
 8016e88:	3202      	adds	r2, #2
 8016e8a:	7898      	ldrb	r0, [r3, #2]
 8016e8c:	0853      	lsrs	r3, r2, #1
 8016e8e:	fba1 e303 	umull	lr, r3, r1, r3
 8016e92:	089b      	lsrs	r3, r3, #2
 8016e94:	fb08 2213 	mls	r2, r8, r3, r2
 8016e98:	287e      	cmp	r0, #126	@ 0x7e
 8016e9a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016e9e:	d064      	beq.n	8016f6a <uxr_read_framed_msg+0x4c2>
 8016ea0:	f080 0120 	eor.w	r1, r0, #32
 8016ea4:	e642      	b.n	8016b2c <uxr_read_framed_msg+0x84>
 8016ea6:	45bc      	cmp	ip, r7
 8016ea8:	d09e      	beq.n	8016de8 <uxr_read_framed_msg+0x340>
 8016eaa:	4423      	add	r3, r4
 8016eac:	3202      	adds	r2, #2
 8016eae:	7898      	ldrb	r0, [r3, #2]
 8016eb0:	0853      	lsrs	r3, r2, #1
 8016eb2:	fba1 e303 	umull	lr, r3, r1, r3
 8016eb6:	089b      	lsrs	r3, r3, #2
 8016eb8:	fb08 2213 	mls	r2, r8, r3, r2
 8016ebc:	287e      	cmp	r0, #126	@ 0x7e
 8016ebe:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016ec2:	d061      	beq.n	8016f88 <uxr_read_framed_msg+0x4e0>
 8016ec4:	f080 0020 	eor.w	r0, r0, #32
 8016ec8:	e65e      	b.n	8016b88 <uxr_read_framed_msg+0xe0>
 8016eca:	4567      	cmp	r7, ip
 8016ecc:	f43f af7c 	beq.w	8016dc8 <uxr_read_framed_msg+0x320>
 8016ed0:	4423      	add	r3, r4
 8016ed2:	3202      	adds	r2, #2
 8016ed4:	7898      	ldrb	r0, [r3, #2]
 8016ed6:	0853      	lsrs	r3, r2, #1
 8016ed8:	fba1 e303 	umull	lr, r3, r1, r3
 8016edc:	089b      	lsrs	r3, r3, #2
 8016ede:	fb08 2213 	mls	r2, r8, r3, r2
 8016ee2:	287e      	cmp	r0, #126	@ 0x7e
 8016ee4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016ee8:	d03f      	beq.n	8016f6a <uxr_read_framed_msg+0x4c2>
 8016eea:	f080 0020 	eor.w	r0, r0, #32
 8016eee:	e6b4      	b.n	8016c5a <uxr_read_framed_msg+0x1b2>
 8016ef0:	4560      	cmp	r0, ip
 8016ef2:	f43f af7e 	beq.w	8016df2 <uxr_read_framed_msg+0x34a>
 8016ef6:	4423      	add	r3, r4
 8016ef8:	3202      	adds	r2, #2
 8016efa:	7898      	ldrb	r0, [r3, #2]
 8016efc:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016f00:	0853      	lsrs	r3, r2, #1
 8016f02:	fba1 e303 	umull	lr, r3, r1, r3
 8016f06:	089b      	lsrs	r3, r3, #2
 8016f08:	fb08 2213 	mls	r2, r8, r3, r2
 8016f0c:	287e      	cmp	r0, #126	@ 0x7e
 8016f0e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f12:	f43f af6e 	beq.w	8016df2 <uxr_read_framed_msg+0x34a>
 8016f16:	f080 0020 	eor.w	r0, r0, #32
 8016f1a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016f1e:	e715      	b.n	8016d4c <uxr_read_framed_msg+0x2a4>
 8016f20:	4567      	cmp	r7, ip
 8016f22:	f43f af61 	beq.w	8016de8 <uxr_read_framed_msg+0x340>
 8016f26:	4423      	add	r3, r4
 8016f28:	3202      	adds	r2, #2
 8016f2a:	7898      	ldrb	r0, [r3, #2]
 8016f2c:	0853      	lsrs	r3, r2, #1
 8016f2e:	fba1 e303 	umull	lr, r3, r1, r3
 8016f32:	089b      	lsrs	r3, r3, #2
 8016f34:	fb08 2213 	mls	r2, r8, r3, r2
 8016f38:	287e      	cmp	r0, #126	@ 0x7e
 8016f3a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f3e:	d023      	beq.n	8016f88 <uxr_read_framed_msg+0x4e0>
 8016f40:	f080 0020 	eor.w	r0, r0, #32
 8016f44:	e6b6      	b.n	8016cb4 <uxr_read_framed_msg+0x20c>
 8016f46:	45bc      	cmp	ip, r7
 8016f48:	d083      	beq.n	8016e52 <uxr_read_framed_msg+0x3aa>
 8016f4a:	4423      	add	r3, r4
 8016f4c:	3202      	adds	r2, #2
 8016f4e:	7898      	ldrb	r0, [r3, #2]
 8016f50:	0853      	lsrs	r3, r2, #1
 8016f52:	fba1 e303 	umull	lr, r3, r1, r3
 8016f56:	089b      	lsrs	r3, r3, #2
 8016f58:	fb08 2213 	mls	r2, r8, r3, r2
 8016f5c:	287e      	cmp	r0, #126	@ 0x7e
 8016f5e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f62:	d01f      	beq.n	8016fa4 <uxr_read_framed_msg+0x4fc>
 8016f64:	f080 0020 	eor.w	r0, r0, #32
 8016f68:	e6c7      	b.n	8016cfa <uxr_read_framed_msg+0x252>
 8016f6a:	2701      	movs	r7, #1
 8016f6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f6e:	f8cd b000 	str.w	fp, [sp]
 8016f72:	9701      	str	r7, [sp, #4]
 8016f74:	4632      	mov	r2, r6
 8016f76:	4651      	mov	r1, sl
 8016f78:	4620      	mov	r0, r4
 8016f7a:	f7ff fd11 	bl	80169a0 <uxr_framing_read_transport>
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	f47f ada7 	bne.w	8016ad2 <uxr_read_framed_msg+0x2a>
 8016f84:	7027      	strb	r7, [r4, #0]
 8016f86:	e5a4      	b.n	8016ad2 <uxr_read_framed_msg+0x2a>
 8016f88:	f8cd b000 	str.w	fp, [sp]
 8016f8c:	2302      	movs	r3, #2
 8016f8e:	9301      	str	r3, [sp, #4]
 8016f90:	4632      	mov	r2, r6
 8016f92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f94:	4651      	mov	r1, sl
 8016f96:	4620      	mov	r0, r4
 8016f98:	f7ff fd02 	bl	80169a0 <uxr_framing_read_transport>
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	f47f ad98 	bne.w	8016ad2 <uxr_read_framed_msg+0x2a>
 8016fa2:	e70e      	b.n	8016dc2 <uxr_read_framed_msg+0x31a>
 8016fa4:	f8cd b000 	str.w	fp, [sp]
 8016fa8:	2303      	movs	r3, #3
 8016faa:	e7f0      	b.n	8016f8e <uxr_read_framed_msg+0x4e6>

08016fac <uxr_stream_id>:
 8016fac:	2901      	cmp	r1, #1
 8016fae:	b082      	sub	sp, #8
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	d011      	beq.n	8016fd8 <uxr_stream_id+0x2c>
 8016fb4:	2902      	cmp	r1, #2
 8016fb6:	f04f 0c00 	mov.w	ip, #0
 8016fba:	d00a      	beq.n	8016fd2 <uxr_stream_id+0x26>
 8016fbc:	2000      	movs	r0, #0
 8016fbe:	f36c 0007 	bfi	r0, ip, #0, #8
 8016fc2:	f363 200f 	bfi	r0, r3, #8, #8
 8016fc6:	f361 4017 	bfi	r0, r1, #16, #8
 8016fca:	f362 601f 	bfi	r0, r2, #24, #8
 8016fce:	b002      	add	sp, #8
 8016fd0:	4770      	bx	lr
 8016fd2:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8016fd6:	e7f1      	b.n	8016fbc <uxr_stream_id+0x10>
 8016fd8:	f100 0c01 	add.w	ip, r0, #1
 8016fdc:	fa5f fc8c 	uxtb.w	ip, ip
 8016fe0:	e7ec      	b.n	8016fbc <uxr_stream_id+0x10>
 8016fe2:	bf00      	nop

08016fe4 <uxr_stream_id_from_raw>:
 8016fe4:	b082      	sub	sp, #8
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	b130      	cbz	r0, 8016ff8 <uxr_stream_id_from_raw+0x14>
 8016fea:	0602      	lsls	r2, r0, #24
 8016fec:	d411      	bmi.n	8017012 <uxr_stream_id_from_raw+0x2e>
 8016fee:	1e42      	subs	r2, r0, #1
 8016ff0:	b2d2      	uxtb	r2, r2
 8016ff2:	f04f 0c01 	mov.w	ip, #1
 8016ff6:	e001      	b.n	8016ffc <uxr_stream_id_from_raw+0x18>
 8016ff8:	4684      	mov	ip, r0
 8016ffa:	4602      	mov	r2, r0
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	f363 0007 	bfi	r0, r3, #0, #8
 8017002:	f362 200f 	bfi	r0, r2, #8, #8
 8017006:	f36c 4017 	bfi	r0, ip, #16, #8
 801700a:	f361 601f 	bfi	r0, r1, #24, #8
 801700e:	b002      	add	sp, #8
 8017010:	4770      	bx	lr
 8017012:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8017016:	f04f 0c02 	mov.w	ip, #2
 801701a:	e7ef      	b.n	8016ffc <uxr_stream_id_from_raw+0x18>

0801701c <uxr_init_stream_storage>:
 801701c:	2300      	movs	r3, #0
 801701e:	7403      	strb	r3, [r0, #16]
 8017020:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8017024:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8017028:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801702c:	4770      	bx	lr
 801702e:	bf00      	nop

08017030 <uxr_reset_stream_storage>:
 8017030:	b570      	push	{r4, r5, r6, lr}
 8017032:	7c03      	ldrb	r3, [r0, #16]
 8017034:	4604      	mov	r4, r0
 8017036:	b153      	cbz	r3, 801704e <uxr_reset_stream_storage+0x1e>
 8017038:	4606      	mov	r6, r0
 801703a:	2500      	movs	r5, #0
 801703c:	4630      	mov	r0, r6
 801703e:	f002 fd11 	bl	8019a64 <uxr_reset_output_best_effort_stream>
 8017042:	7c23      	ldrb	r3, [r4, #16]
 8017044:	3501      	adds	r5, #1
 8017046:	42ab      	cmp	r3, r5
 8017048:	f106 0610 	add.w	r6, r6, #16
 801704c:	d8f6      	bhi.n	801703c <uxr_reset_stream_storage+0xc>
 801704e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017052:	b163      	cbz	r3, 801706e <uxr_reset_stream_storage+0x3e>
 8017054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017058:	2500      	movs	r5, #0
 801705a:	4630      	mov	r0, r6
 801705c:	f002 fb12 	bl	8019684 <uxr_reset_input_best_effort_stream>
 8017060:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017064:	3501      	adds	r5, #1
 8017066:	42ab      	cmp	r3, r5
 8017068:	f106 0602 	add.w	r6, r6, #2
 801706c:	d8f5      	bhi.n	801705a <uxr_reset_stream_storage+0x2a>
 801706e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017072:	b163      	cbz	r3, 801708e <uxr_reset_stream_storage+0x5e>
 8017074:	f104 0618 	add.w	r6, r4, #24
 8017078:	2500      	movs	r5, #0
 801707a:	4630      	mov	r0, r6
 801707c:	f002 fd9c 	bl	8019bb8 <uxr_reset_output_reliable_stream>
 8017080:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017084:	3501      	adds	r5, #1
 8017086:	42ab      	cmp	r3, r5
 8017088:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 801708c:	d8f5      	bhi.n	801707a <uxr_reset_stream_storage+0x4a>
 801708e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017092:	b163      	cbz	r3, 80170ae <uxr_reset_stream_storage+0x7e>
 8017094:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8017098:	2500      	movs	r5, #0
 801709a:	4630      	mov	r0, r6
 801709c:	f002 fb62 	bl	8019764 <uxr_reset_input_reliable_stream>
 80170a0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80170a4:	3501      	adds	r5, #1
 80170a6:	42ab      	cmp	r3, r5
 80170a8:	f106 0618 	add.w	r6, r6, #24
 80170ac:	d8f5      	bhi.n	801709a <uxr_reset_stream_storage+0x6a>
 80170ae:	bd70      	pop	{r4, r5, r6, pc}

080170b0 <uxr_add_output_best_effort_buffer>:
 80170b0:	b510      	push	{r4, lr}
 80170b2:	7c04      	ldrb	r4, [r0, #16]
 80170b4:	f104 0c01 	add.w	ip, r4, #1
 80170b8:	b082      	sub	sp, #8
 80170ba:	f880 c010 	strb.w	ip, [r0, #16]
 80170be:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80170c2:	f002 fcc5 	bl	8019a50 <uxr_init_output_best_effort_stream>
 80170c6:	2201      	movs	r2, #1
 80170c8:	4611      	mov	r1, r2
 80170ca:	4620      	mov	r0, r4
 80170cc:	b002      	add	sp, #8
 80170ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170d2:	f7ff bf6b 	b.w	8016fac <uxr_stream_id>
 80170d6:	bf00      	nop

080170d8 <uxr_add_output_reliable_buffer>:
 80170d8:	b510      	push	{r4, lr}
 80170da:	b084      	sub	sp, #16
 80170dc:	4684      	mov	ip, r0
 80170de:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80170e2:	9000      	str	r0, [sp, #0]
 80170e4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80170e8:	2028      	movs	r0, #40	@ 0x28
 80170ea:	fb00 c004 	mla	r0, r0, r4, ip
 80170ee:	f104 0e01 	add.w	lr, r4, #1
 80170f2:	3018      	adds	r0, #24
 80170f4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80170f8:	f002 fd26 	bl	8019b48 <uxr_init_output_reliable_stream>
 80170fc:	2201      	movs	r2, #1
 80170fe:	2102      	movs	r1, #2
 8017100:	4620      	mov	r0, r4
 8017102:	b004      	add	sp, #16
 8017104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017108:	f7ff bf50 	b.w	8016fac <uxr_stream_id>

0801710c <uxr_add_input_best_effort_buffer>:
 801710c:	b510      	push	{r4, lr}
 801710e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8017112:	1c62      	adds	r2, r4, #1
 8017114:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8017118:	b082      	sub	sp, #8
 801711a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801711e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017122:	f002 faab 	bl	801967c <uxr_init_input_best_effort_stream>
 8017126:	2200      	movs	r2, #0
 8017128:	2101      	movs	r1, #1
 801712a:	4620      	mov	r0, r4
 801712c:	b002      	add	sp, #8
 801712e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017132:	f7ff bf3b 	b.w	8016fac <uxr_stream_id>
 8017136:	bf00      	nop

08017138 <uxr_add_input_reliable_buffer>:
 8017138:	b510      	push	{r4, lr}
 801713a:	b084      	sub	sp, #16
 801713c:	4684      	mov	ip, r0
 801713e:	9806      	ldr	r0, [sp, #24]
 8017140:	9000      	str	r0, [sp, #0]
 8017142:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8017146:	2018      	movs	r0, #24
 8017148:	fb00 c004 	mla	r0, r0, r4, ip
 801714c:	f104 0e01 	add.w	lr, r4, #1
 8017150:	3048      	adds	r0, #72	@ 0x48
 8017152:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8017156:	f002 fad9 	bl	801970c <uxr_init_input_reliable_stream>
 801715a:	2200      	movs	r2, #0
 801715c:	2102      	movs	r1, #2
 801715e:	4620      	mov	r0, r4
 8017160:	b004      	add	sp, #16
 8017162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017166:	f7ff bf21 	b.w	8016fac <uxr_stream_id>
 801716a:	bf00      	nop

0801716c <uxr_get_output_best_effort_stream>:
 801716c:	7c03      	ldrb	r3, [r0, #16]
 801716e:	428b      	cmp	r3, r1
 8017170:	bf8c      	ite	hi
 8017172:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8017176:	2000      	movls	r0, #0
 8017178:	4770      	bx	lr
 801717a:	bf00      	nop

0801717c <uxr_get_output_reliable_stream>:
 801717c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8017180:	428b      	cmp	r3, r1
 8017182:	bf83      	ittte	hi
 8017184:	2328      	movhi	r3, #40	@ 0x28
 8017186:	fb03 0001 	mlahi	r0, r3, r1, r0
 801718a:	3018      	addhi	r0, #24
 801718c:	2000      	movls	r0, #0
 801718e:	4770      	bx	lr

08017190 <uxr_get_input_best_effort_stream>:
 8017190:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8017194:	428b      	cmp	r3, r1
 8017196:	bf86      	itte	hi
 8017198:	3121      	addhi	r1, #33	@ 0x21
 801719a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801719e:	2000      	movls	r0, #0
 80171a0:	4770      	bx	lr
 80171a2:	bf00      	nop

080171a4 <uxr_get_input_reliable_stream>:
 80171a4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80171a8:	428b      	cmp	r3, r1
 80171aa:	bf83      	ittte	hi
 80171ac:	2318      	movhi	r3, #24
 80171ae:	fb03 0001 	mlahi	r0, r3, r1, r0
 80171b2:	3048      	addhi	r0, #72	@ 0x48
 80171b4:	2000      	movls	r0, #0
 80171b6:	4770      	bx	lr

080171b8 <uxr_output_streams_confirmed>:
 80171b8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80171bc:	b183      	cbz	r3, 80171e0 <uxr_output_streams_confirmed+0x28>
 80171be:	b570      	push	{r4, r5, r6, lr}
 80171c0:	4606      	mov	r6, r0
 80171c2:	f100 0518 	add.w	r5, r0, #24
 80171c6:	2400      	movs	r4, #0
 80171c8:	e001      	b.n	80171ce <uxr_output_streams_confirmed+0x16>
 80171ca:	3528      	adds	r5, #40	@ 0x28
 80171cc:	b138      	cbz	r0, 80171de <uxr_output_streams_confirmed+0x26>
 80171ce:	4628      	mov	r0, r5
 80171d0:	f002 ff5a 	bl	801a088 <uxr_is_output_up_to_date>
 80171d4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80171d8:	3401      	adds	r4, #1
 80171da:	42a3      	cmp	r3, r4
 80171dc:	d8f5      	bhi.n	80171ca <uxr_output_streams_confirmed+0x12>
 80171de:	bd70      	pop	{r4, r5, r6, pc}
 80171e0:	2001      	movs	r0, #1
 80171e2:	4770      	bx	lr

080171e4 <uxr_buffer_submessage_header>:
 80171e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171e6:	4604      	mov	r4, r0
 80171e8:	460e      	mov	r6, r1
 80171ea:	2104      	movs	r1, #4
 80171ec:	4615      	mov	r5, r2
 80171ee:	461f      	mov	r7, r3
 80171f0:	f7f7 fd8e 	bl	800ed10 <ucdr_align_to>
 80171f4:	2301      	movs	r3, #1
 80171f6:	7523      	strb	r3, [r4, #20]
 80171f8:	f047 0201 	orr.w	r2, r7, #1
 80171fc:	462b      	mov	r3, r5
 80171fe:	4631      	mov	r1, r6
 8017200:	4620      	mov	r0, r4
 8017202:	f000 fa2b 	bl	801765c <uxr_serialize_submessage_header>
 8017206:	4620      	mov	r0, r4
 8017208:	f7f7 fd98 	bl	800ed3c <ucdr_buffer_remaining>
 801720c:	42a8      	cmp	r0, r5
 801720e:	bf34      	ite	cc
 8017210:	2000      	movcc	r0, #0
 8017212:	2001      	movcs	r0, #1
 8017214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017216:	bf00      	nop

08017218 <uxr_read_submessage_header>:
 8017218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801721c:	4604      	mov	r4, r0
 801721e:	460d      	mov	r5, r1
 8017220:	2104      	movs	r1, #4
 8017222:	4616      	mov	r6, r2
 8017224:	4698      	mov	r8, r3
 8017226:	f7f7 fd73 	bl	800ed10 <ucdr_align_to>
 801722a:	4620      	mov	r0, r4
 801722c:	f7f7 fd86 	bl	800ed3c <ucdr_buffer_remaining>
 8017230:	2803      	cmp	r0, #3
 8017232:	bf8c      	ite	hi
 8017234:	2701      	movhi	r7, #1
 8017236:	2700      	movls	r7, #0
 8017238:	d802      	bhi.n	8017240 <uxr_read_submessage_header+0x28>
 801723a:	4638      	mov	r0, r7
 801723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017240:	4633      	mov	r3, r6
 8017242:	4642      	mov	r2, r8
 8017244:	4620      	mov	r0, r4
 8017246:	4629      	mov	r1, r5
 8017248:	f000 fa1a 	bl	8017680 <uxr_deserialize_submessage_header>
 801724c:	f898 3000 	ldrb.w	r3, [r8]
 8017250:	f003 0201 	and.w	r2, r3, #1
 8017254:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8017258:	f888 3000 	strb.w	r3, [r8]
 801725c:	7522      	strb	r2, [r4, #20]
 801725e:	4638      	mov	r0, r7
 8017260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017264 <uxr_submessage_padding>:
 8017264:	f010 0003 	ands.w	r0, r0, #3
 8017268:	bf18      	it	ne
 801726a:	f1c0 0004 	rsbne	r0, r0, #4
 801726e:	4770      	bx	lr

08017270 <uxr_millis>:
 8017270:	b510      	push	{r4, lr}
 8017272:	b084      	sub	sp, #16
 8017274:	4669      	mov	r1, sp
 8017276:	2001      	movs	r0, #1
 8017278:	f7ec f83e 	bl	80032f8 <clock_gettime>
 801727c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8017280:	4b06      	ldr	r3, [pc, #24]	@ (801729c <uxr_millis+0x2c>)
 8017282:	fba0 0103 	umull	r0, r1, r0, r3
 8017286:	1900      	adds	r0, r0, r4
 8017288:	fb03 1102 	mla	r1, r3, r2, r1
 801728c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8017290:	4a03      	ldr	r2, [pc, #12]	@ (80172a0 <uxr_millis+0x30>)
 8017292:	2300      	movs	r3, #0
 8017294:	f7e9 fe36 	bl	8000f04 <__aeabi_ldivmod>
 8017298:	b004      	add	sp, #16
 801729a:	bd10      	pop	{r4, pc}
 801729c:	3b9aca00 	.word	0x3b9aca00
 80172a0:	000f4240 	.word	0x000f4240

080172a4 <uxr_nanos>:
 80172a4:	b510      	push	{r4, lr}
 80172a6:	b084      	sub	sp, #16
 80172a8:	4669      	mov	r1, sp
 80172aa:	2001      	movs	r0, #1
 80172ac:	f7ec f824 	bl	80032f8 <clock_gettime>
 80172b0:	4a06      	ldr	r2, [pc, #24]	@ (80172cc <uxr_nanos+0x28>)
 80172b2:	9800      	ldr	r0, [sp, #0]
 80172b4:	9902      	ldr	r1, [sp, #8]
 80172b6:	9c01      	ldr	r4, [sp, #4]
 80172b8:	fba0 0302 	umull	r0, r3, r0, r2
 80172bc:	1840      	adds	r0, r0, r1
 80172be:	fb02 3304 	mla	r3, r2, r4, r3
 80172c2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80172c6:	b004      	add	sp, #16
 80172c8:	bd10      	pop	{r4, pc}
 80172ca:	bf00      	nop
 80172cc:	3b9aca00 	.word	0x3b9aca00

080172d0 <on_full_output_buffer_fragmented>:
 80172d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d4:	460c      	mov	r4, r1
 80172d6:	b08a      	sub	sp, #40	@ 0x28
 80172d8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80172dc:	4606      	mov	r6, r0
 80172de:	f104 0008 	add.w	r0, r4, #8
 80172e2:	f7ff ff4b 	bl	801717c <uxr_get_output_reliable_stream>
 80172e6:	4605      	mov	r5, r0
 80172e8:	f002 fed8 	bl	801a09c <get_available_free_slots>
 80172ec:	b968      	cbnz	r0, 801730a <on_full_output_buffer_fragmented+0x3a>
 80172ee:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80172f2:	4620      	mov	r0, r4
 80172f4:	4798      	blx	r3
 80172f6:	b918      	cbnz	r0, 8017300 <on_full_output_buffer_fragmented+0x30>
 80172f8:	2001      	movs	r0, #1
 80172fa:	b00a      	add	sp, #40	@ 0x28
 80172fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017300:	4628      	mov	r0, r5
 8017302:	f002 fecb 	bl	801a09c <get_available_free_slots>
 8017306:	2800      	cmp	r0, #0
 8017308:	d0f6      	beq.n	80172f8 <on_full_output_buffer_fragmented+0x28>
 801730a:	892a      	ldrh	r2, [r5, #8]
 801730c:	686b      	ldr	r3, [r5, #4]
 801730e:	fbb3 f8f2 	udiv	r8, r3, r2
 8017312:	89eb      	ldrh	r3, [r5, #14]
 8017314:	7b29      	ldrb	r1, [r5, #12]
 8017316:	fbb3 f0f2 	udiv	r0, r3, r2
 801731a:	fb02 3310 	mls	r3, r2, r0, r3
 801731e:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8017322:	b29b      	uxth	r3, r3
 8017324:	fb08 f303 	mul.w	r3, r8, r3
 8017328:	31fc      	adds	r1, #252	@ 0xfc
 801732a:	f1a8 0804 	sub.w	r8, r8, #4
 801732e:	4441      	add	r1, r8
 8017330:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8017334:	b28f      	uxth	r7, r1
 8017336:	6829      	ldr	r1, [r5, #0]
 8017338:	3304      	adds	r3, #4
 801733a:	1bd2      	subs	r2, r2, r7
 801733c:	4419      	add	r1, r3
 801733e:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8017342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017346:	9300      	str	r3, [sp, #0]
 8017348:	4642      	mov	r2, r8
 801734a:	2300      	movs	r3, #0
 801734c:	a802      	add	r0, sp, #8
 801734e:	f7f7 fcb3 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 8017352:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8017356:	f102 0308 	add.w	r3, r2, #8
 801735a:	4543      	cmp	r3, r8
 801735c:	d928      	bls.n	80173b0 <on_full_output_buffer_fragmented+0xe0>
 801735e:	463a      	mov	r2, r7
 8017360:	2300      	movs	r3, #0
 8017362:	210d      	movs	r1, #13
 8017364:	a802      	add	r0, sp, #8
 8017366:	f7ff ff3d 	bl	80171e4 <uxr_buffer_submessage_header>
 801736a:	8929      	ldrh	r1, [r5, #8]
 801736c:	89eb      	ldrh	r3, [r5, #14]
 801736e:	fbb3 f2f1 	udiv	r2, r3, r1
 8017372:	fb01 3312 	mls	r3, r1, r2, r3
 8017376:	b29b      	uxth	r3, r3
 8017378:	686a      	ldr	r2, [r5, #4]
 801737a:	fbb2 f2f1 	udiv	r2, r2, r1
 801737e:	fb02 f303 	mul.w	r3, r2, r3
 8017382:	682a      	ldr	r2, [r5, #0]
 8017384:	f842 8003 	str.w	r8, [r2, r3]
 8017388:	89e8      	ldrh	r0, [r5, #14]
 801738a:	2101      	movs	r1, #1
 801738c:	f002 fea4 	bl	801a0d8 <uxr_seq_num_add>
 8017390:	9904      	ldr	r1, [sp, #16]
 8017392:	9a03      	ldr	r2, [sp, #12]
 8017394:	81e8      	strh	r0, [r5, #14]
 8017396:	1a52      	subs	r2, r2, r1
 8017398:	4630      	mov	r0, r6
 801739a:	f7f7 fc9f 	bl	800ecdc <ucdr_init_buffer>
 801739e:	4630      	mov	r0, r6
 80173a0:	4910      	ldr	r1, [pc, #64]	@ (80173e4 <on_full_output_buffer_fragmented+0x114>)
 80173a2:	4622      	mov	r2, r4
 80173a4:	f7f7 fc6e 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 80173a8:	2000      	movs	r0, #0
 80173aa:	b00a      	add	sp, #40	@ 0x28
 80173ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173b0:	b292      	uxth	r2, r2
 80173b2:	2302      	movs	r3, #2
 80173b4:	210d      	movs	r1, #13
 80173b6:	a802      	add	r0, sp, #8
 80173b8:	f7ff ff14 	bl	80171e4 <uxr_buffer_submessage_header>
 80173bc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80173c0:	8928      	ldrh	r0, [r5, #8]
 80173c2:	f103 0208 	add.w	r2, r3, #8
 80173c6:	89eb      	ldrh	r3, [r5, #14]
 80173c8:	fbb3 f1f0 	udiv	r1, r3, r0
 80173cc:	fb00 3311 	mls	r3, r0, r1, r3
 80173d0:	b29b      	uxth	r3, r3
 80173d2:	6869      	ldr	r1, [r5, #4]
 80173d4:	fbb1 f1f0 	udiv	r1, r1, r0
 80173d8:	fb01 f303 	mul.w	r3, r1, r3
 80173dc:	6829      	ldr	r1, [r5, #0]
 80173de:	50ca      	str	r2, [r1, r3]
 80173e0:	e7d2      	b.n	8017388 <on_full_output_buffer_fragmented+0xb8>
 80173e2:	bf00      	nop
 80173e4:	080172d1 	.word	0x080172d1

080173e8 <uxr_prepare_output_stream>:
 80173e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173ea:	b087      	sub	sp, #28
 80173ec:	2707      	movs	r7, #7
 80173ee:	9202      	str	r2, [sp, #8]
 80173f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80173f2:	2500      	movs	r5, #0
 80173f4:	3204      	adds	r2, #4
 80173f6:	e9cd 7500 	strd	r7, r5, [sp]
 80173fa:	461c      	mov	r4, r3
 80173fc:	4606      	mov	r6, r0
 80173fe:	f7ff f807 	bl	8016410 <uxr_prepare_stream_to_write_submessage>
 8017402:	f080 0201 	eor.w	r2, r0, #1
 8017406:	b2d2      	uxtb	r2, r2
 8017408:	75a2      	strb	r2, [r4, #22]
 801740a:	b112      	cbz	r2, 8017412 <uxr_prepare_output_stream+0x2a>
 801740c:	4628      	mov	r0, r5
 801740e:	b007      	add	sp, #28
 8017410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017412:	aa05      	add	r2, sp, #20
 8017414:	9902      	ldr	r1, [sp, #8]
 8017416:	4630      	mov	r0, r6
 8017418:	f7ff f934 	bl	8016684 <uxr_init_base_object_request>
 801741c:	a905      	add	r1, sp, #20
 801741e:	4605      	mov	r5, r0
 8017420:	4620      	mov	r0, r4
 8017422:	f001 f865 	bl	80184f0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8017426:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801742a:	69a6      	ldr	r6, [r4, #24]
 801742c:	69e7      	ldr	r7, [r4, #28]
 801742e:	1a52      	subs	r2, r2, r1
 8017430:	4620      	mov	r0, r4
 8017432:	f7f7 fc53 	bl	800ecdc <ucdr_init_buffer>
 8017436:	4620      	mov	r0, r4
 8017438:	463a      	mov	r2, r7
 801743a:	4631      	mov	r1, r6
 801743c:	f7f7 fc22 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 8017440:	4628      	mov	r0, r5
 8017442:	b007      	add	sp, #28
 8017444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017446:	bf00      	nop

08017448 <uxr_prepare_output_stream_fragmented>:
 8017448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801744c:	b093      	sub	sp, #76	@ 0x4c
 801744e:	4605      	mov	r5, r0
 8017450:	9107      	str	r1, [sp, #28]
 8017452:	3008      	adds	r0, #8
 8017454:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017458:	9303      	str	r3, [sp, #12]
 801745a:	9206      	str	r2, [sp, #24]
 801745c:	f7ff fe8e 	bl	801717c <uxr_get_output_reliable_stream>
 8017460:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017464:	2b01      	cmp	r3, #1
 8017466:	f000 8095 	beq.w	8017594 <uxr_prepare_output_stream_fragmented+0x14c>
 801746a:	4604      	mov	r4, r0
 801746c:	2800      	cmp	r0, #0
 801746e:	f000 8091 	beq.w	8017594 <uxr_prepare_output_stream_fragmented+0x14c>
 8017472:	f002 fe13 	bl	801a09c <get_available_free_slots>
 8017476:	2800      	cmp	r0, #0
 8017478:	f000 8087 	beq.w	801758a <uxr_prepare_output_stream_fragmented+0x142>
 801747c:	8922      	ldrh	r2, [r4, #8]
 801747e:	89e7      	ldrh	r7, [r4, #14]
 8017480:	fbb7 f3f2 	udiv	r3, r7, r2
 8017484:	fb02 7313 	mls	r3, r2, r3, r7
 8017488:	b29b      	uxth	r3, r3
 801748a:	6861      	ldr	r1, [r4, #4]
 801748c:	fbb1 f1f2 	udiv	r1, r1, r2
 8017490:	6822      	ldr	r2, [r4, #0]
 8017492:	9105      	str	r1, [sp, #20]
 8017494:	fb01 f303 	mul.w	r3, r1, r3
 8017498:	3304      	adds	r3, #4
 801749a:	eb02 0903 	add.w	r9, r2, r3
 801749e:	7b23      	ldrb	r3, [r4, #12]
 80174a0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80174a4:	4543      	cmp	r3, r8
 80174a6:	f1a1 0b04 	sub.w	fp, r1, #4
 80174aa:	d37f      	bcc.n	80175ac <uxr_prepare_output_stream_fragmented+0x164>
 80174ac:	f1ab 0a04 	sub.w	sl, fp, #4
 80174b0:	ebaa 0a03 	sub.w	sl, sl, r3
 80174b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80174b6:	f8cd 8000 	str.w	r8, [sp]
 80174ba:	fa1f f38a 	uxth.w	r3, sl
 80174be:	9304      	str	r3, [sp, #16]
 80174c0:	465a      	mov	r2, fp
 80174c2:	2300      	movs	r3, #0
 80174c4:	4649      	mov	r1, r9
 80174c6:	a80a      	add	r0, sp, #40	@ 0x28
 80174c8:	f7f7 fbf6 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 80174cc:	f106 0a08 	add.w	sl, r6, #8
 80174d0:	45da      	cmp	sl, fp
 80174d2:	bf2c      	ite	cs
 80174d4:	2300      	movcs	r3, #0
 80174d6:	2301      	movcc	r3, #1
 80174d8:	9a04      	ldr	r2, [sp, #16]
 80174da:	005b      	lsls	r3, r3, #1
 80174dc:	210d      	movs	r1, #13
 80174de:	a80a      	add	r0, sp, #40	@ 0x28
 80174e0:	f7ff fe80 	bl	80171e4 <uxr_buffer_submessage_header>
 80174e4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80174e8:	fbb7 f2fc 	udiv	r2, r7, ip
 80174ec:	fb0c 7212 	mls	r2, ip, r2, r7
 80174f0:	b292      	uxth	r2, r2
 80174f2:	6863      	ldr	r3, [r4, #4]
 80174f4:	fbb3 f3fc 	udiv	r3, r3, ip
 80174f8:	fb02 f303 	mul.w	r3, r2, r3
 80174fc:	6822      	ldr	r2, [r4, #0]
 80174fe:	2101      	movs	r1, #1
 8017500:	f842 b003 	str.w	fp, [r2, r3]
 8017504:	4638      	mov	r0, r7
 8017506:	f002 fde7 	bl	801a0d8 <uxr_seq_num_add>
 801750a:	9b05      	ldr	r3, [sp, #20]
 801750c:	9e03      	ldr	r6, [sp, #12]
 801750e:	f1a3 0208 	sub.w	r2, r3, #8
 8017512:	f108 0104 	add.w	r1, r8, #4
 8017516:	4607      	mov	r7, r0
 8017518:	eba2 0208 	sub.w	r2, r2, r8
 801751c:	4449      	add	r1, r9
 801751e:	4630      	mov	r0, r6
 8017520:	f7f7 fbdc 	bl	800ecdc <ucdr_init_buffer>
 8017524:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017526:	81e7      	strh	r7, [r4, #14]
 8017528:	1d1a      	adds	r2, r3, #4
 801752a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801752e:	bf28      	it	cs
 8017530:	2200      	movcs	r2, #0
 8017532:	2300      	movs	r3, #0
 8017534:	b292      	uxth	r2, r2
 8017536:	2107      	movs	r1, #7
 8017538:	4630      	mov	r0, r6
 801753a:	f7ff fe53 	bl	80171e4 <uxr_buffer_submessage_header>
 801753e:	9906      	ldr	r1, [sp, #24]
 8017540:	aa09      	add	r2, sp, #36	@ 0x24
 8017542:	4628      	mov	r0, r5
 8017544:	f7ff f89e 	bl	8016684 <uxr_init_base_object_request>
 8017548:	4604      	mov	r4, r0
 801754a:	b320      	cbz	r0, 8017596 <uxr_prepare_output_stream_fragmented+0x14e>
 801754c:	9e03      	ldr	r6, [sp, #12]
 801754e:	a909      	add	r1, sp, #36	@ 0x24
 8017550:	4630      	mov	r0, r6
 8017552:	f000 ffcd 	bl	80184f0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8017556:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801755a:	4630      	mov	r0, r6
 801755c:	1a52      	subs	r2, r2, r1
 801755e:	f7f7 fbbd 	bl	800ecdc <ucdr_init_buffer>
 8017562:	9b07      	ldr	r3, [sp, #28]
 8017564:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8017568:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801756a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801756e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017570:	491a      	ldr	r1, [pc, #104]	@ (80175dc <uxr_prepare_output_stream_fragmented+0x194>)
 8017572:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8017576:	4630      	mov	r0, r6
 8017578:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801757c:	462a      	mov	r2, r5
 801757e:	f7f7 fb81 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 8017582:	4620      	mov	r0, r4
 8017584:	b013      	add	sp, #76	@ 0x4c
 8017586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801758a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801758c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801758e:	4628      	mov	r0, r5
 8017590:	4798      	blx	r3
 8017592:	b920      	cbnz	r0, 801759e <uxr_prepare_output_stream_fragmented+0x156>
 8017594:	2400      	movs	r4, #0
 8017596:	4620      	mov	r0, r4
 8017598:	b013      	add	sp, #76	@ 0x4c
 801759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801759e:	4620      	mov	r0, r4
 80175a0:	f002 fd7c 	bl	801a09c <get_available_free_slots>
 80175a4:	2800      	cmp	r0, #0
 80175a6:	f47f af69 	bne.w	801747c <uxr_prepare_output_stream_fragmented+0x34>
 80175aa:	e7f3      	b.n	8017594 <uxr_prepare_output_stream_fragmented+0x14c>
 80175ac:	4638      	mov	r0, r7
 80175ae:	2101      	movs	r1, #1
 80175b0:	f002 fd92 	bl	801a0d8 <uxr_seq_num_add>
 80175b4:	8921      	ldrh	r1, [r4, #8]
 80175b6:	fbb0 f2f1 	udiv	r2, r0, r1
 80175ba:	fb01 0212 	mls	r2, r1, r2, r0
 80175be:	b292      	uxth	r2, r2
 80175c0:	6863      	ldr	r3, [r4, #4]
 80175c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80175c6:	fb02 f303 	mul.w	r3, r2, r3
 80175ca:	6822      	ldr	r2, [r4, #0]
 80175cc:	3304      	adds	r3, #4
 80175ce:	eb02 0903 	add.w	r9, r2, r3
 80175d2:	4607      	mov	r7, r0
 80175d4:	7b23      	ldrb	r3, [r4, #12]
 80175d6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80175da:	e767      	b.n	80174ac <uxr_prepare_output_stream_fragmented+0x64>
 80175dc:	080172d1 	.word	0x080172d1

080175e0 <uxr_serialize_message_header>:
 80175e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e4:	4617      	mov	r7, r2
 80175e6:	4604      	mov	r4, r0
 80175e8:	461e      	mov	r6, r3
 80175ea:	460d      	mov	r5, r1
 80175ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80175f0:	f7f6 f984 	bl	800d8fc <ucdr_serialize_uint8_t>
 80175f4:	4639      	mov	r1, r7
 80175f6:	4620      	mov	r0, r4
 80175f8:	f7f6 f980 	bl	800d8fc <ucdr_serialize_uint8_t>
 80175fc:	4632      	mov	r2, r6
 80175fe:	2101      	movs	r1, #1
 8017600:	4620      	mov	r0, r4
 8017602:	f7f6 fa31 	bl	800da68 <ucdr_serialize_endian_uint16_t>
 8017606:	062b      	lsls	r3, r5, #24
 8017608:	d501      	bpl.n	801760e <uxr_serialize_message_header+0x2e>
 801760a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801760e:	4641      	mov	r1, r8
 8017610:	4620      	mov	r0, r4
 8017612:	2204      	movs	r2, #4
 8017614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017618:	f7fd ba98 	b.w	8014b4c <ucdr_serialize_array_uint8_t>

0801761c <uxr_deserialize_message_header>:
 801761c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017620:	4617      	mov	r7, r2
 8017622:	4604      	mov	r4, r0
 8017624:	461e      	mov	r6, r3
 8017626:	460d      	mov	r5, r1
 8017628:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801762c:	f7f6 f97c 	bl	800d928 <ucdr_deserialize_uint8_t>
 8017630:	4639      	mov	r1, r7
 8017632:	4620      	mov	r0, r4
 8017634:	f7f6 f978 	bl	800d928 <ucdr_deserialize_uint8_t>
 8017638:	4632      	mov	r2, r6
 801763a:	2101      	movs	r1, #1
 801763c:	4620      	mov	r0, r4
 801763e:	f7f6 fb09 	bl	800dc54 <ucdr_deserialize_endian_uint16_t>
 8017642:	f995 3000 	ldrsb.w	r3, [r5]
 8017646:	2b00      	cmp	r3, #0
 8017648:	da01      	bge.n	801764e <uxr_deserialize_message_header+0x32>
 801764a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801764e:	4641      	mov	r1, r8
 8017650:	4620      	mov	r0, r4
 8017652:	2204      	movs	r2, #4
 8017654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017658:	f7fd badc 	b.w	8014c14 <ucdr_deserialize_array_uint8_t>

0801765c <uxr_serialize_submessage_header>:
 801765c:	b570      	push	{r4, r5, r6, lr}
 801765e:	4616      	mov	r6, r2
 8017660:	4604      	mov	r4, r0
 8017662:	461d      	mov	r5, r3
 8017664:	f7f6 f94a 	bl	800d8fc <ucdr_serialize_uint8_t>
 8017668:	4631      	mov	r1, r6
 801766a:	4620      	mov	r0, r4
 801766c:	f7f6 f946 	bl	800d8fc <ucdr_serialize_uint8_t>
 8017670:	462a      	mov	r2, r5
 8017672:	4620      	mov	r0, r4
 8017674:	2101      	movs	r1, #1
 8017676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801767a:	f7f6 b9f5 	b.w	800da68 <ucdr_serialize_endian_uint16_t>
 801767e:	bf00      	nop

08017680 <uxr_deserialize_submessage_header>:
 8017680:	b570      	push	{r4, r5, r6, lr}
 8017682:	4616      	mov	r6, r2
 8017684:	4604      	mov	r4, r0
 8017686:	461d      	mov	r5, r3
 8017688:	f7f6 f94e 	bl	800d928 <ucdr_deserialize_uint8_t>
 801768c:	4631      	mov	r1, r6
 801768e:	4620      	mov	r0, r4
 8017690:	f7f6 f94a 	bl	800d928 <ucdr_deserialize_uint8_t>
 8017694:	462a      	mov	r2, r5
 8017696:	4620      	mov	r0, r4
 8017698:	2101      	movs	r1, #1
 801769a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801769e:	f7f6 bad9 	b.w	800dc54 <ucdr_deserialize_endian_uint16_t>
 80176a2:	bf00      	nop

080176a4 <uxr_serialize_CLIENT_Representation>:
 80176a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176a8:	2204      	movs	r2, #4
 80176aa:	460e      	mov	r6, r1
 80176ac:	4605      	mov	r5, r0
 80176ae:	f7fd fa4d 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80176b2:	2202      	movs	r2, #2
 80176b4:	1d31      	adds	r1, r6, #4
 80176b6:	4604      	mov	r4, r0
 80176b8:	4628      	mov	r0, r5
 80176ba:	f7fd fa47 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80176be:	2202      	movs	r2, #2
 80176c0:	4004      	ands	r4, r0
 80176c2:	1db1      	adds	r1, r6, #6
 80176c4:	4628      	mov	r0, r5
 80176c6:	f7fd fa41 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80176ca:	b2e4      	uxtb	r4, r4
 80176cc:	2204      	movs	r2, #4
 80176ce:	4004      	ands	r4, r0
 80176d0:	f106 0108 	add.w	r1, r6, #8
 80176d4:	4628      	mov	r0, r5
 80176d6:	f7fd fa39 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80176da:	7b31      	ldrb	r1, [r6, #12]
 80176dc:	ea00 0804 	and.w	r8, r0, r4
 80176e0:	4628      	mov	r0, r5
 80176e2:	f7f6 f90b 	bl	800d8fc <ucdr_serialize_uint8_t>
 80176e6:	7b71      	ldrb	r1, [r6, #13]
 80176e8:	ea08 0800 	and.w	r8, r8, r0
 80176ec:	4628      	mov	r0, r5
 80176ee:	f7f6 f8d7 	bl	800d8a0 <ucdr_serialize_bool>
 80176f2:	7b73      	ldrb	r3, [r6, #13]
 80176f4:	ea08 0800 	and.w	r8, r8, r0
 80176f8:	b93b      	cbnz	r3, 801770a <uxr_serialize_CLIENT_Representation+0x66>
 80176fa:	8bb1      	ldrh	r1, [r6, #28]
 80176fc:	4628      	mov	r0, r5
 80176fe:	f7f6 f929 	bl	800d954 <ucdr_serialize_uint16_t>
 8017702:	ea08 0000 	and.w	r0, r8, r0
 8017706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801770a:	6931      	ldr	r1, [r6, #16]
 801770c:	4628      	mov	r0, r5
 801770e:	f7f6 fb11 	bl	800dd34 <ucdr_serialize_uint32_t>
 8017712:	6933      	ldr	r3, [r6, #16]
 8017714:	b1e3      	cbz	r3, 8017750 <uxr_serialize_CLIENT_Representation+0xac>
 8017716:	b1c0      	cbz	r0, 801774a <uxr_serialize_CLIENT_Representation+0xa6>
 8017718:	4637      	mov	r7, r6
 801771a:	f04f 0900 	mov.w	r9, #0
 801771e:	e001      	b.n	8017724 <uxr_serialize_CLIENT_Representation+0x80>
 8017720:	3708      	adds	r7, #8
 8017722:	b194      	cbz	r4, 801774a <uxr_serialize_CLIENT_Representation+0xa6>
 8017724:	6979      	ldr	r1, [r7, #20]
 8017726:	4628      	mov	r0, r5
 8017728:	f001 ff92 	bl	8019650 <ucdr_serialize_string>
 801772c:	69b9      	ldr	r1, [r7, #24]
 801772e:	4604      	mov	r4, r0
 8017730:	4628      	mov	r0, r5
 8017732:	f001 ff8d 	bl	8019650 <ucdr_serialize_string>
 8017736:	6933      	ldr	r3, [r6, #16]
 8017738:	f109 0901 	add.w	r9, r9, #1
 801773c:	4004      	ands	r4, r0
 801773e:	4599      	cmp	r9, r3
 8017740:	b2e4      	uxtb	r4, r4
 8017742:	d3ed      	bcc.n	8017720 <uxr_serialize_CLIENT_Representation+0x7c>
 8017744:	ea08 0804 	and.w	r8, r8, r4
 8017748:	e7d7      	b.n	80176fa <uxr_serialize_CLIENT_Representation+0x56>
 801774a:	f04f 0800 	mov.w	r8, #0
 801774e:	e7d4      	b.n	80176fa <uxr_serialize_CLIENT_Representation+0x56>
 8017750:	ea08 0800 	and.w	r8, r8, r0
 8017754:	e7d1      	b.n	80176fa <uxr_serialize_CLIENT_Representation+0x56>
 8017756:	bf00      	nop

08017758 <uxr_deserialize_CLIENT_Representation>:
 8017758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801775c:	2204      	movs	r2, #4
 801775e:	460c      	mov	r4, r1
 8017760:	4605      	mov	r5, r0
 8017762:	f7fd fa57 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8017766:	2202      	movs	r2, #2
 8017768:	1d21      	adds	r1, r4, #4
 801776a:	4606      	mov	r6, r0
 801776c:	4628      	mov	r0, r5
 801776e:	f7fd fa51 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8017772:	2202      	movs	r2, #2
 8017774:	4006      	ands	r6, r0
 8017776:	1da1      	adds	r1, r4, #6
 8017778:	4628      	mov	r0, r5
 801777a:	f7fd fa4b 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 801777e:	b2f6      	uxtb	r6, r6
 8017780:	2204      	movs	r2, #4
 8017782:	4006      	ands	r6, r0
 8017784:	f104 0108 	add.w	r1, r4, #8
 8017788:	4628      	mov	r0, r5
 801778a:	f7fd fa43 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 801778e:	f104 010c 	add.w	r1, r4, #12
 8017792:	ea00 0706 	and.w	r7, r0, r6
 8017796:	4628      	mov	r0, r5
 8017798:	f7f6 f8c6 	bl	800d928 <ucdr_deserialize_uint8_t>
 801779c:	f104 010d 	add.w	r1, r4, #13
 80177a0:	4007      	ands	r7, r0
 80177a2:	4628      	mov	r0, r5
 80177a4:	f7f6 f892 	bl	800d8cc <ucdr_deserialize_bool>
 80177a8:	7b63      	ldrb	r3, [r4, #13]
 80177aa:	4007      	ands	r7, r0
 80177ac:	b93b      	cbnz	r3, 80177be <uxr_deserialize_CLIENT_Representation+0x66>
 80177ae:	f104 011c 	add.w	r1, r4, #28
 80177b2:	4628      	mov	r0, r5
 80177b4:	f7f6 f9d2 	bl	800db5c <ucdr_deserialize_uint16_t>
 80177b8:	4038      	ands	r0, r7
 80177ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177be:	f104 0110 	add.w	r1, r4, #16
 80177c2:	4628      	mov	r0, r5
 80177c4:	f7f6 fbe0 	bl	800df88 <ucdr_deserialize_uint32_t>
 80177c8:	6923      	ldr	r3, [r4, #16]
 80177ca:	2b01      	cmp	r3, #1
 80177cc:	d903      	bls.n	80177d6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80177ce:	2301      	movs	r3, #1
 80177d0:	75ab      	strb	r3, [r5, #22]
 80177d2:	2700      	movs	r7, #0
 80177d4:	e7eb      	b.n	80177ae <uxr_deserialize_CLIENT_Representation+0x56>
 80177d6:	b30b      	cbz	r3, 801781c <uxr_deserialize_CLIENT_Representation+0xc4>
 80177d8:	2800      	cmp	r0, #0
 80177da:	d0fa      	beq.n	80177d2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80177dc:	46a0      	mov	r8, r4
 80177de:	f04f 0900 	mov.w	r9, #0
 80177e2:	e003      	b.n	80177ec <uxr_deserialize_CLIENT_Representation+0x94>
 80177e4:	f108 0808 	add.w	r8, r8, #8
 80177e8:	2e00      	cmp	r6, #0
 80177ea:	d0f2      	beq.n	80177d2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80177ec:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80177f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80177f4:	4628      	mov	r0, r5
 80177f6:	f001 ff39 	bl	801966c <ucdr_deserialize_string>
 80177fa:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80177fe:	4606      	mov	r6, r0
 8017800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017804:	4628      	mov	r0, r5
 8017806:	f001 ff31 	bl	801966c <ucdr_deserialize_string>
 801780a:	6923      	ldr	r3, [r4, #16]
 801780c:	f109 0901 	add.w	r9, r9, #1
 8017810:	4006      	ands	r6, r0
 8017812:	4599      	cmp	r9, r3
 8017814:	b2f6      	uxtb	r6, r6
 8017816:	d3e5      	bcc.n	80177e4 <uxr_deserialize_CLIENT_Representation+0x8c>
 8017818:	4037      	ands	r7, r6
 801781a:	e7c8      	b.n	80177ae <uxr_deserialize_CLIENT_Representation+0x56>
 801781c:	4007      	ands	r7, r0
 801781e:	e7c6      	b.n	80177ae <uxr_deserialize_CLIENT_Representation+0x56>

08017820 <uxr_serialize_AGENT_Representation>:
 8017820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017824:	2204      	movs	r2, #4
 8017826:	460f      	mov	r7, r1
 8017828:	4605      	mov	r5, r0
 801782a:	f7fd f98f 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 801782e:	2202      	movs	r2, #2
 8017830:	4604      	mov	r4, r0
 8017832:	1d39      	adds	r1, r7, #4
 8017834:	4628      	mov	r0, r5
 8017836:	f7fd f989 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 801783a:	4020      	ands	r0, r4
 801783c:	2202      	movs	r2, #2
 801783e:	b2c4      	uxtb	r4, r0
 8017840:	1db9      	adds	r1, r7, #6
 8017842:	4628      	mov	r0, r5
 8017844:	f7fd f982 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8017848:	7a39      	ldrb	r1, [r7, #8]
 801784a:	4004      	ands	r4, r0
 801784c:	4628      	mov	r0, r5
 801784e:	f7f6 f827 	bl	800d8a0 <ucdr_serialize_bool>
 8017852:	7a3b      	ldrb	r3, [r7, #8]
 8017854:	ea00 0804 	and.w	r8, r0, r4
 8017858:	b913      	cbnz	r3, 8017860 <uxr_serialize_AGENT_Representation+0x40>
 801785a:	4640      	mov	r0, r8
 801785c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017860:	68f9      	ldr	r1, [r7, #12]
 8017862:	4628      	mov	r0, r5
 8017864:	f7f6 fa66 	bl	800dd34 <ucdr_serialize_uint32_t>
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	b303      	cbz	r3, 80178ae <uxr_serialize_AGENT_Representation+0x8e>
 801786c:	b1d0      	cbz	r0, 80178a4 <uxr_serialize_AGENT_Representation+0x84>
 801786e:	463e      	mov	r6, r7
 8017870:	f04f 0900 	mov.w	r9, #0
 8017874:	e001      	b.n	801787a <uxr_serialize_AGENT_Representation+0x5a>
 8017876:	3608      	adds	r6, #8
 8017878:	b1a4      	cbz	r4, 80178a4 <uxr_serialize_AGENT_Representation+0x84>
 801787a:	6931      	ldr	r1, [r6, #16]
 801787c:	4628      	mov	r0, r5
 801787e:	f001 fee7 	bl	8019650 <ucdr_serialize_string>
 8017882:	6971      	ldr	r1, [r6, #20]
 8017884:	4604      	mov	r4, r0
 8017886:	4628      	mov	r0, r5
 8017888:	f001 fee2 	bl	8019650 <ucdr_serialize_string>
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	f109 0901 	add.w	r9, r9, #1
 8017892:	4004      	ands	r4, r0
 8017894:	4599      	cmp	r9, r3
 8017896:	b2e4      	uxtb	r4, r4
 8017898:	d3ed      	bcc.n	8017876 <uxr_serialize_AGENT_Representation+0x56>
 801789a:	ea08 0804 	and.w	r8, r8, r4
 801789e:	4640      	mov	r0, r8
 80178a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178a4:	f04f 0800 	mov.w	r8, #0
 80178a8:	4640      	mov	r0, r8
 80178aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178ae:	ea08 0800 	and.w	r8, r8, r0
 80178b2:	e7d2      	b.n	801785a <uxr_serialize_AGENT_Representation+0x3a>

080178b4 <uxr_serialize_DATAWRITER_Representation>:
 80178b4:	b570      	push	{r4, r5, r6, lr}
 80178b6:	460d      	mov	r5, r1
 80178b8:	7809      	ldrb	r1, [r1, #0]
 80178ba:	4606      	mov	r6, r0
 80178bc:	f7f6 f81e 	bl	800d8fc <ucdr_serialize_uint8_t>
 80178c0:	4604      	mov	r4, r0
 80178c2:	b130      	cbz	r0, 80178d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80178c4:	782b      	ldrb	r3, [r5, #0]
 80178c6:	2b02      	cmp	r3, #2
 80178c8:	d00c      	beq.n	80178e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80178ca:	2b03      	cmp	r3, #3
 80178cc:	d010      	beq.n	80178f0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80178ce:	2b01      	cmp	r3, #1
 80178d0:	d008      	beq.n	80178e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80178d2:	2202      	movs	r2, #2
 80178d4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80178d8:	4630      	mov	r0, r6
 80178da:	f7fd f937 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80178de:	4020      	ands	r0, r4
 80178e0:	b2c0      	uxtb	r0, r0
 80178e2:	bd70      	pop	{r4, r5, r6, pc}
 80178e4:	6869      	ldr	r1, [r5, #4]
 80178e6:	4630      	mov	r0, r6
 80178e8:	f001 feb2 	bl	8019650 <ucdr_serialize_string>
 80178ec:	4604      	mov	r4, r0
 80178ee:	e7f0      	b.n	80178d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80178f0:	4629      	mov	r1, r5
 80178f2:	4630      	mov	r0, r6
 80178f4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80178f8:	3104      	adds	r1, #4
 80178fa:	f7f7 fa8d 	bl	800ee18 <ucdr_serialize_sequence_uint8_t>
 80178fe:	4604      	mov	r4, r0
 8017900:	e7e7      	b.n	80178d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8017902:	bf00      	nop

08017904 <uxr_serialize_ObjectVariant.part.0>:
 8017904:	b570      	push	{r4, r5, r6, lr}
 8017906:	780b      	ldrb	r3, [r1, #0]
 8017908:	3b01      	subs	r3, #1
 801790a:	460c      	mov	r4, r1
 801790c:	4605      	mov	r5, r0
 801790e:	2b0d      	cmp	r3, #13
 8017910:	d816      	bhi.n	8017940 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8017912:	e8df f003 	tbb	[pc, r3]
 8017916:	0733      	.short	0x0733
 8017918:	07071717 	.word	0x07071717
 801791c:	0c150707 	.word	0x0c150707
 8017920:	4c510c0c 	.word	0x4c510c0c
 8017924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017928:	3104      	adds	r1, #4
 801792a:	f7ff bfc3 	b.w	80178b4 <uxr_serialize_DATAWRITER_Representation>
 801792e:	7909      	ldrb	r1, [r1, #4]
 8017930:	f7f5 ffe4 	bl	800d8fc <ucdr_serialize_uint8_t>
 8017934:	b300      	cbz	r0, 8017978 <uxr_serialize_ObjectVariant.part.0+0x74>
 8017936:	7923      	ldrb	r3, [r4, #4]
 8017938:	2b01      	cmp	r3, #1
 801793a:	d042      	beq.n	80179c2 <uxr_serialize_ObjectVariant.part.0+0xbe>
 801793c:	2b02      	cmp	r3, #2
 801793e:	d040      	beq.n	80179c2 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8017940:	2001      	movs	r0, #1
 8017942:	bd70      	pop	{r4, r5, r6, pc}
 8017944:	7909      	ldrb	r1, [r1, #4]
 8017946:	f7f5 ffd9 	bl	800d8fc <ucdr_serialize_uint8_t>
 801794a:	4606      	mov	r6, r0
 801794c:	b158      	cbz	r0, 8017966 <uxr_serialize_ObjectVariant.part.0+0x62>
 801794e:	7923      	ldrb	r3, [r4, #4]
 8017950:	2b02      	cmp	r3, #2
 8017952:	d03c      	beq.n	80179ce <uxr_serialize_ObjectVariant.part.0+0xca>
 8017954:	2b03      	cmp	r3, #3
 8017956:	d106      	bne.n	8017966 <uxr_serialize_ObjectVariant.part.0+0x62>
 8017958:	68a2      	ldr	r2, [r4, #8]
 801795a:	f104 010c 	add.w	r1, r4, #12
 801795e:	4628      	mov	r0, r5
 8017960:	f7f7 fa5a 	bl	800ee18 <ucdr_serialize_sequence_uint8_t>
 8017964:	4606      	mov	r6, r0
 8017966:	2202      	movs	r2, #2
 8017968:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801796c:	4628      	mov	r0, r5
 801796e:	f7fd f8ed 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8017972:	4030      	ands	r0, r6
 8017974:	b2c0      	uxtb	r0, r0
 8017976:	bd70      	pop	{r4, r5, r6, pc}
 8017978:	2000      	movs	r0, #0
 801797a:	bd70      	pop	{r4, r5, r6, pc}
 801797c:	7909      	ldrb	r1, [r1, #4]
 801797e:	f7f5 ffbd 	bl	800d8fc <ucdr_serialize_uint8_t>
 8017982:	4606      	mov	r6, r0
 8017984:	b158      	cbz	r0, 801799e <uxr_serialize_ObjectVariant.part.0+0x9a>
 8017986:	7923      	ldrb	r3, [r4, #4]
 8017988:	2b02      	cmp	r3, #2
 801798a:	d003      	beq.n	8017994 <uxr_serialize_ObjectVariant.part.0+0x90>
 801798c:	2b03      	cmp	r3, #3
 801798e:	d024      	beq.n	80179da <uxr_serialize_ObjectVariant.part.0+0xd6>
 8017990:	2b01      	cmp	r3, #1
 8017992:	d104      	bne.n	801799e <uxr_serialize_ObjectVariant.part.0+0x9a>
 8017994:	68a1      	ldr	r1, [r4, #8]
 8017996:	4628      	mov	r0, r5
 8017998:	f001 fe5a 	bl	8019650 <ucdr_serialize_string>
 801799c:	4606      	mov	r6, r0
 801799e:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80179a2:	4628      	mov	r0, r5
 80179a4:	f7f6 fcd2 	bl	800e34c <ucdr_serialize_int16_t>
 80179a8:	4030      	ands	r0, r6
 80179aa:	b2c0      	uxtb	r0, r0
 80179ac:	bd70      	pop	{r4, r5, r6, pc}
 80179ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179b2:	3104      	adds	r1, #4
 80179b4:	f7ff be76 	b.w	80176a4 <uxr_serialize_CLIENT_Representation>
 80179b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179bc:	3104      	adds	r1, #4
 80179be:	f7ff bf2f 	b.w	8017820 <uxr_serialize_AGENT_Representation>
 80179c2:	68a1      	ldr	r1, [r4, #8]
 80179c4:	4628      	mov	r0, r5
 80179c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179ca:	f001 be41 	b.w	8019650 <ucdr_serialize_string>
 80179ce:	68a1      	ldr	r1, [r4, #8]
 80179d0:	4628      	mov	r0, r5
 80179d2:	f001 fe3d 	bl	8019650 <ucdr_serialize_string>
 80179d6:	4606      	mov	r6, r0
 80179d8:	e7c5      	b.n	8017966 <uxr_serialize_ObjectVariant.part.0+0x62>
 80179da:	68a2      	ldr	r2, [r4, #8]
 80179dc:	f104 010c 	add.w	r1, r4, #12
 80179e0:	4628      	mov	r0, r5
 80179e2:	f7f7 fa19 	bl	800ee18 <ucdr_serialize_sequence_uint8_t>
 80179e6:	4606      	mov	r6, r0
 80179e8:	e7d9      	b.n	801799e <uxr_serialize_ObjectVariant.part.0+0x9a>
 80179ea:	bf00      	nop

080179ec <uxr_deserialize_DATAWRITER_Representation>:
 80179ec:	b570      	push	{r4, r5, r6, lr}
 80179ee:	4606      	mov	r6, r0
 80179f0:	460d      	mov	r5, r1
 80179f2:	f7f5 ff99 	bl	800d928 <ucdr_deserialize_uint8_t>
 80179f6:	4604      	mov	r4, r0
 80179f8:	b130      	cbz	r0, 8017a08 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80179fa:	782b      	ldrb	r3, [r5, #0]
 80179fc:	2b02      	cmp	r3, #2
 80179fe:	d00c      	beq.n	8017a1a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017a00:	2b03      	cmp	r3, #3
 8017a02:	d012      	beq.n	8017a2a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8017a04:	2b01      	cmp	r3, #1
 8017a06:	d008      	beq.n	8017a1a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017a08:	2202      	movs	r2, #2
 8017a0a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8017a0e:	4630      	mov	r0, r6
 8017a10:	f7fd f900 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8017a14:	4020      	ands	r0, r4
 8017a16:	b2c0      	uxtb	r0, r0
 8017a18:	bd70      	pop	{r4, r5, r6, pc}
 8017a1a:	6869      	ldr	r1, [r5, #4]
 8017a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a20:	4630      	mov	r0, r6
 8017a22:	f001 fe23 	bl	801966c <ucdr_deserialize_string>
 8017a26:	4604      	mov	r4, r0
 8017a28:	e7ee      	b.n	8017a08 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017a2a:	1d2b      	adds	r3, r5, #4
 8017a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a30:	f105 0108 	add.w	r1, r5, #8
 8017a34:	4630      	mov	r0, r6
 8017a36:	f7f7 fa01 	bl	800ee3c <ucdr_deserialize_sequence_uint8_t>
 8017a3a:	4604      	mov	r4, r0
 8017a3c:	e7e4      	b.n	8017a08 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017a3e:	bf00      	nop

08017a40 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8017a40:	b570      	push	{r4, r5, r6, lr}
 8017a42:	460d      	mov	r5, r1
 8017a44:	7809      	ldrb	r1, [r1, #0]
 8017a46:	4606      	mov	r6, r0
 8017a48:	f7f5 ff2a 	bl	800d8a0 <ucdr_serialize_bool>
 8017a4c:	782b      	ldrb	r3, [r5, #0]
 8017a4e:	4604      	mov	r4, r0
 8017a50:	b94b      	cbnz	r3, 8017a66 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8017a52:	7a29      	ldrb	r1, [r5, #8]
 8017a54:	4630      	mov	r0, r6
 8017a56:	f7f5 ff23 	bl	800d8a0 <ucdr_serialize_bool>
 8017a5a:	7a2b      	ldrb	r3, [r5, #8]
 8017a5c:	4004      	ands	r4, r0
 8017a5e:	b2e4      	uxtb	r4, r4
 8017a60:	b943      	cbnz	r3, 8017a74 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8017a62:	4620      	mov	r0, r4
 8017a64:	bd70      	pop	{r4, r5, r6, pc}
 8017a66:	6869      	ldr	r1, [r5, #4]
 8017a68:	4630      	mov	r0, r6
 8017a6a:	f001 fdf1 	bl	8019650 <ucdr_serialize_string>
 8017a6e:	4004      	ands	r4, r0
 8017a70:	b2e4      	uxtb	r4, r4
 8017a72:	e7ee      	b.n	8017a52 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8017a74:	68e9      	ldr	r1, [r5, #12]
 8017a76:	4630      	mov	r0, r6
 8017a78:	f001 fdea 	bl	8019650 <ucdr_serialize_string>
 8017a7c:	4004      	ands	r4, r0
 8017a7e:	4620      	mov	r0, r4
 8017a80:	bd70      	pop	{r4, r5, r6, pc}
 8017a82:	bf00      	nop

08017a84 <uxr_serialize_OBJK_Topic_Binary>:
 8017a84:	b570      	push	{r4, r5, r6, lr}
 8017a86:	460d      	mov	r5, r1
 8017a88:	6809      	ldr	r1, [r1, #0]
 8017a8a:	4606      	mov	r6, r0
 8017a8c:	f001 fde0 	bl	8019650 <ucdr_serialize_string>
 8017a90:	7929      	ldrb	r1, [r5, #4]
 8017a92:	4604      	mov	r4, r0
 8017a94:	4630      	mov	r0, r6
 8017a96:	f7f5 ff03 	bl	800d8a0 <ucdr_serialize_bool>
 8017a9a:	792b      	ldrb	r3, [r5, #4]
 8017a9c:	4004      	ands	r4, r0
 8017a9e:	b2e4      	uxtb	r4, r4
 8017aa0:	b943      	cbnz	r3, 8017ab4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8017aa2:	7b29      	ldrb	r1, [r5, #12]
 8017aa4:	4630      	mov	r0, r6
 8017aa6:	f7f5 fefb 	bl	800d8a0 <ucdr_serialize_bool>
 8017aaa:	7b2b      	ldrb	r3, [r5, #12]
 8017aac:	4004      	ands	r4, r0
 8017aae:	b93b      	cbnz	r3, 8017ac0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8017ab0:	4620      	mov	r0, r4
 8017ab2:	bd70      	pop	{r4, r5, r6, pc}
 8017ab4:	68a9      	ldr	r1, [r5, #8]
 8017ab6:	4630      	mov	r0, r6
 8017ab8:	f001 fdca 	bl	8019650 <ucdr_serialize_string>
 8017abc:	4004      	ands	r4, r0
 8017abe:	e7f0      	b.n	8017aa2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8017ac0:	6929      	ldr	r1, [r5, #16]
 8017ac2:	4630      	mov	r0, r6
 8017ac4:	f001 fdc4 	bl	8019650 <ucdr_serialize_string>
 8017ac8:	4004      	ands	r4, r0
 8017aca:	b2e4      	uxtb	r4, r4
 8017acc:	4620      	mov	r0, r4
 8017ace:	bd70      	pop	{r4, r5, r6, pc}

08017ad0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8017ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ad4:	460c      	mov	r4, r1
 8017ad6:	7809      	ldrb	r1, [r1, #0]
 8017ad8:	4606      	mov	r6, r0
 8017ada:	f7f5 fee1 	bl	800d8a0 <ucdr_serialize_bool>
 8017ade:	7823      	ldrb	r3, [r4, #0]
 8017ae0:	4605      	mov	r5, r0
 8017ae2:	b96b      	cbnz	r3, 8017b00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8017ae4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017ae8:	4630      	mov	r0, r6
 8017aea:	f7f5 fed9 	bl	800d8a0 <ucdr_serialize_bool>
 8017aee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017af2:	4005      	ands	r5, r0
 8017af4:	b2ed      	uxtb	r5, r5
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d16a      	bne.n	8017bd0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 8017afa:	4628      	mov	r0, r5
 8017afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b00:	6861      	ldr	r1, [r4, #4]
 8017b02:	4630      	mov	r0, r6
 8017b04:	f7f6 f916 	bl	800dd34 <ucdr_serialize_uint32_t>
 8017b08:	6863      	ldr	r3, [r4, #4]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d06c      	beq.n	8017be8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 8017b0e:	2800      	cmp	r0, #0
 8017b10:	d068      	beq.n	8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b12:	68a1      	ldr	r1, [r4, #8]
 8017b14:	4630      	mov	r0, r6
 8017b16:	f001 fd9b 	bl	8019650 <ucdr_serialize_string>
 8017b1a:	6862      	ldr	r2, [r4, #4]
 8017b1c:	2a01      	cmp	r2, #1
 8017b1e:	d953      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b20:	2800      	cmp	r0, #0
 8017b22:	d05f      	beq.n	8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b24:	68e1      	ldr	r1, [r4, #12]
 8017b26:	4630      	mov	r0, r6
 8017b28:	f001 fd92 	bl	8019650 <ucdr_serialize_string>
 8017b2c:	6862      	ldr	r2, [r4, #4]
 8017b2e:	2a02      	cmp	r2, #2
 8017b30:	d94a      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b32:	2800      	cmp	r0, #0
 8017b34:	d056      	beq.n	8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b36:	6921      	ldr	r1, [r4, #16]
 8017b38:	4630      	mov	r0, r6
 8017b3a:	f001 fd89 	bl	8019650 <ucdr_serialize_string>
 8017b3e:	6862      	ldr	r2, [r4, #4]
 8017b40:	2a03      	cmp	r2, #3
 8017b42:	d941      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b44:	2800      	cmp	r0, #0
 8017b46:	d04d      	beq.n	8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b48:	6961      	ldr	r1, [r4, #20]
 8017b4a:	4630      	mov	r0, r6
 8017b4c:	f001 fd80 	bl	8019650 <ucdr_serialize_string>
 8017b50:	6862      	ldr	r2, [r4, #4]
 8017b52:	2a04      	cmp	r2, #4
 8017b54:	d938      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b56:	2800      	cmp	r0, #0
 8017b58:	d044      	beq.n	8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b5a:	69a1      	ldr	r1, [r4, #24]
 8017b5c:	4630      	mov	r0, r6
 8017b5e:	f001 fd77 	bl	8019650 <ucdr_serialize_string>
 8017b62:	6862      	ldr	r2, [r4, #4]
 8017b64:	2a05      	cmp	r2, #5
 8017b66:	d92f      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b68:	2800      	cmp	r0, #0
 8017b6a:	d03b      	beq.n	8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b6c:	69e1      	ldr	r1, [r4, #28]
 8017b6e:	4630      	mov	r0, r6
 8017b70:	f001 fd6e 	bl	8019650 <ucdr_serialize_string>
 8017b74:	6862      	ldr	r2, [r4, #4]
 8017b76:	2a06      	cmp	r2, #6
 8017b78:	d926      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b7a:	b398      	cbz	r0, 8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b7c:	6a21      	ldr	r1, [r4, #32]
 8017b7e:	4630      	mov	r0, r6
 8017b80:	f001 fd66 	bl	8019650 <ucdr_serialize_string>
 8017b84:	6862      	ldr	r2, [r4, #4]
 8017b86:	2a07      	cmp	r2, #7
 8017b88:	d91e      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b8a:	b358      	cbz	r0, 8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017b8e:	4630      	mov	r0, r6
 8017b90:	f001 fd5e 	bl	8019650 <ucdr_serialize_string>
 8017b94:	6862      	ldr	r2, [r4, #4]
 8017b96:	2a08      	cmp	r2, #8
 8017b98:	d916      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b9a:	b318      	cbz	r0, 8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b9c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8017b9e:	4630      	mov	r0, r6
 8017ba0:	f001 fd56 	bl	8019650 <ucdr_serialize_string>
 8017ba4:	6862      	ldr	r2, [r4, #4]
 8017ba6:	2a09      	cmp	r2, #9
 8017ba8:	d90e      	bls.n	8017bc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017baa:	b1d8      	cbz	r0, 8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017bac:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8017bb0:	2709      	movs	r7, #9
 8017bb2:	e000      	b.n	8017bb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8017bb4:	b1b0      	cbz	r0, 8017be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017bb6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8017bba:	4630      	mov	r0, r6
 8017bbc:	f001 fd48 	bl	8019650 <ucdr_serialize_string>
 8017bc0:	6862      	ldr	r2, [r4, #4]
 8017bc2:	3701      	adds	r7, #1
 8017bc4:	4297      	cmp	r7, r2
 8017bc6:	d3f5      	bcc.n	8017bb4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8017bc8:	ea05 0300 	and.w	r3, r5, r0
 8017bcc:	b2dd      	uxtb	r5, r3
 8017bce:	e789      	b.n	8017ae4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017bd0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017bd2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017bd6:	4630      	mov	r0, r6
 8017bd8:	f7f7 f91e 	bl	800ee18 <ucdr_serialize_sequence_uint8_t>
 8017bdc:	4005      	ands	r5, r0
 8017bde:	4628      	mov	r0, r5
 8017be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017be4:	2500      	movs	r5, #0
 8017be6:	e77d      	b.n	8017ae4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017be8:	4028      	ands	r0, r5
 8017bea:	b2c5      	uxtb	r5, r0
 8017bec:	e77a      	b.n	8017ae4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017bee:	bf00      	nop

08017bf0 <uxr_serialize_OBJK_Publisher_Binary>:
 8017bf0:	b570      	push	{r4, r5, r6, lr}
 8017bf2:	460d      	mov	r5, r1
 8017bf4:	7809      	ldrb	r1, [r1, #0]
 8017bf6:	4606      	mov	r6, r0
 8017bf8:	f7f5 fe52 	bl	800d8a0 <ucdr_serialize_bool>
 8017bfc:	782b      	ldrb	r3, [r5, #0]
 8017bfe:	4604      	mov	r4, r0
 8017c00:	b94b      	cbnz	r3, 8017c16 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8017c02:	7a29      	ldrb	r1, [r5, #8]
 8017c04:	4630      	mov	r0, r6
 8017c06:	f7f5 fe4b 	bl	800d8a0 <ucdr_serialize_bool>
 8017c0a:	7a2b      	ldrb	r3, [r5, #8]
 8017c0c:	4004      	ands	r4, r0
 8017c0e:	b2e4      	uxtb	r4, r4
 8017c10:	b943      	cbnz	r3, 8017c24 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8017c12:	4620      	mov	r0, r4
 8017c14:	bd70      	pop	{r4, r5, r6, pc}
 8017c16:	6869      	ldr	r1, [r5, #4]
 8017c18:	4630      	mov	r0, r6
 8017c1a:	f001 fd19 	bl	8019650 <ucdr_serialize_string>
 8017c1e:	4004      	ands	r4, r0
 8017c20:	b2e4      	uxtb	r4, r4
 8017c22:	e7ee      	b.n	8017c02 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8017c24:	f105 010c 	add.w	r1, r5, #12
 8017c28:	4630      	mov	r0, r6
 8017c2a:	f7ff ff51 	bl	8017ad0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8017c2e:	4004      	ands	r4, r0
 8017c30:	4620      	mov	r0, r4
 8017c32:	bd70      	pop	{r4, r5, r6, pc}

08017c34 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8017c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c38:	460c      	mov	r4, r1
 8017c3a:	7809      	ldrb	r1, [r1, #0]
 8017c3c:	4606      	mov	r6, r0
 8017c3e:	f7f5 fe2f 	bl	800d8a0 <ucdr_serialize_bool>
 8017c42:	7823      	ldrb	r3, [r4, #0]
 8017c44:	4605      	mov	r5, r0
 8017c46:	b96b      	cbnz	r3, 8017c64 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8017c48:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	f7f5 fe27 	bl	800d8a0 <ucdr_serialize_bool>
 8017c52:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017c56:	4005      	ands	r5, r0
 8017c58:	b2ed      	uxtb	r5, r5
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d16a      	bne.n	8017d34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 8017c5e:	4628      	mov	r0, r5
 8017c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c64:	6861      	ldr	r1, [r4, #4]
 8017c66:	4630      	mov	r0, r6
 8017c68:	f7f6 f864 	bl	800dd34 <ucdr_serialize_uint32_t>
 8017c6c:	6863      	ldr	r3, [r4, #4]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d06c      	beq.n	8017d4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 8017c72:	2800      	cmp	r0, #0
 8017c74:	d068      	beq.n	8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017c76:	68a1      	ldr	r1, [r4, #8]
 8017c78:	4630      	mov	r0, r6
 8017c7a:	f001 fce9 	bl	8019650 <ucdr_serialize_string>
 8017c7e:	6862      	ldr	r2, [r4, #4]
 8017c80:	2a01      	cmp	r2, #1
 8017c82:	d953      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017c84:	2800      	cmp	r0, #0
 8017c86:	d05f      	beq.n	8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017c88:	68e1      	ldr	r1, [r4, #12]
 8017c8a:	4630      	mov	r0, r6
 8017c8c:	f001 fce0 	bl	8019650 <ucdr_serialize_string>
 8017c90:	6862      	ldr	r2, [r4, #4]
 8017c92:	2a02      	cmp	r2, #2
 8017c94:	d94a      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017c96:	2800      	cmp	r0, #0
 8017c98:	d056      	beq.n	8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017c9a:	6921      	ldr	r1, [r4, #16]
 8017c9c:	4630      	mov	r0, r6
 8017c9e:	f001 fcd7 	bl	8019650 <ucdr_serialize_string>
 8017ca2:	6862      	ldr	r2, [r4, #4]
 8017ca4:	2a03      	cmp	r2, #3
 8017ca6:	d941      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	d04d      	beq.n	8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017cac:	6961      	ldr	r1, [r4, #20]
 8017cae:	4630      	mov	r0, r6
 8017cb0:	f001 fcce 	bl	8019650 <ucdr_serialize_string>
 8017cb4:	6862      	ldr	r2, [r4, #4]
 8017cb6:	2a04      	cmp	r2, #4
 8017cb8:	d938      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017cba:	2800      	cmp	r0, #0
 8017cbc:	d044      	beq.n	8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017cbe:	69a1      	ldr	r1, [r4, #24]
 8017cc0:	4630      	mov	r0, r6
 8017cc2:	f001 fcc5 	bl	8019650 <ucdr_serialize_string>
 8017cc6:	6862      	ldr	r2, [r4, #4]
 8017cc8:	2a05      	cmp	r2, #5
 8017cca:	d92f      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017ccc:	2800      	cmp	r0, #0
 8017cce:	d03b      	beq.n	8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017cd0:	69e1      	ldr	r1, [r4, #28]
 8017cd2:	4630      	mov	r0, r6
 8017cd4:	f001 fcbc 	bl	8019650 <ucdr_serialize_string>
 8017cd8:	6862      	ldr	r2, [r4, #4]
 8017cda:	2a06      	cmp	r2, #6
 8017cdc:	d926      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017cde:	b398      	cbz	r0, 8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017ce0:	6a21      	ldr	r1, [r4, #32]
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	f001 fcb4 	bl	8019650 <ucdr_serialize_string>
 8017ce8:	6862      	ldr	r2, [r4, #4]
 8017cea:	2a07      	cmp	r2, #7
 8017cec:	d91e      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017cee:	b358      	cbz	r0, 8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017cf0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017cf2:	4630      	mov	r0, r6
 8017cf4:	f001 fcac 	bl	8019650 <ucdr_serialize_string>
 8017cf8:	6862      	ldr	r2, [r4, #4]
 8017cfa:	2a08      	cmp	r2, #8
 8017cfc:	d916      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017cfe:	b318      	cbz	r0, 8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d00:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8017d02:	4630      	mov	r0, r6
 8017d04:	f001 fca4 	bl	8019650 <ucdr_serialize_string>
 8017d08:	6862      	ldr	r2, [r4, #4]
 8017d0a:	2a09      	cmp	r2, #9
 8017d0c:	d90e      	bls.n	8017d2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d0e:	b1d8      	cbz	r0, 8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d10:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8017d14:	2709      	movs	r7, #9
 8017d16:	e000      	b.n	8017d1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8017d18:	b1b0      	cbz	r0, 8017d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d1a:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8017d1e:	4630      	mov	r0, r6
 8017d20:	f001 fc96 	bl	8019650 <ucdr_serialize_string>
 8017d24:	6862      	ldr	r2, [r4, #4]
 8017d26:	3701      	adds	r7, #1
 8017d28:	4297      	cmp	r7, r2
 8017d2a:	d3f5      	bcc.n	8017d18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8017d2c:	ea05 0300 	and.w	r3, r5, r0
 8017d30:	b2dd      	uxtb	r5, r3
 8017d32:	e789      	b.n	8017c48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017d34:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017d36:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017d3a:	4630      	mov	r0, r6
 8017d3c:	f7f7 f86c 	bl	800ee18 <ucdr_serialize_sequence_uint8_t>
 8017d40:	4005      	ands	r5, r0
 8017d42:	4628      	mov	r0, r5
 8017d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d48:	2500      	movs	r5, #0
 8017d4a:	e77d      	b.n	8017c48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017d4c:	4028      	ands	r0, r5
 8017d4e:	b2c5      	uxtb	r5, r0
 8017d50:	e77a      	b.n	8017c48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017d52:	bf00      	nop

08017d54 <uxr_serialize_OBJK_Subscriber_Binary>:
 8017d54:	b570      	push	{r4, r5, r6, lr}
 8017d56:	460d      	mov	r5, r1
 8017d58:	7809      	ldrb	r1, [r1, #0]
 8017d5a:	4606      	mov	r6, r0
 8017d5c:	f7f5 fda0 	bl	800d8a0 <ucdr_serialize_bool>
 8017d60:	782b      	ldrb	r3, [r5, #0]
 8017d62:	4604      	mov	r4, r0
 8017d64:	b94b      	cbnz	r3, 8017d7a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8017d66:	7a29      	ldrb	r1, [r5, #8]
 8017d68:	4630      	mov	r0, r6
 8017d6a:	f7f5 fd99 	bl	800d8a0 <ucdr_serialize_bool>
 8017d6e:	7a2b      	ldrb	r3, [r5, #8]
 8017d70:	4004      	ands	r4, r0
 8017d72:	b2e4      	uxtb	r4, r4
 8017d74:	b943      	cbnz	r3, 8017d88 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8017d76:	4620      	mov	r0, r4
 8017d78:	bd70      	pop	{r4, r5, r6, pc}
 8017d7a:	6869      	ldr	r1, [r5, #4]
 8017d7c:	4630      	mov	r0, r6
 8017d7e:	f001 fc67 	bl	8019650 <ucdr_serialize_string>
 8017d82:	4004      	ands	r4, r0
 8017d84:	b2e4      	uxtb	r4, r4
 8017d86:	e7ee      	b.n	8017d66 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8017d88:	f105 010c 	add.w	r1, r5, #12
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	f7ff ff51 	bl	8017c34 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8017d92:	4004      	ands	r4, r0
 8017d94:	4620      	mov	r0, r4
 8017d96:	bd70      	pop	{r4, r5, r6, pc}

08017d98 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8017d98:	b570      	push	{r4, r5, r6, lr}
 8017d9a:	460d      	mov	r5, r1
 8017d9c:	8809      	ldrh	r1, [r1, #0]
 8017d9e:	4606      	mov	r6, r0
 8017da0:	f7f5 fdd8 	bl	800d954 <ucdr_serialize_uint16_t>
 8017da4:	78a9      	ldrb	r1, [r5, #2]
 8017da6:	4604      	mov	r4, r0
 8017da8:	4630      	mov	r0, r6
 8017daa:	f7f5 fd79 	bl	800d8a0 <ucdr_serialize_bool>
 8017dae:	78ab      	ldrb	r3, [r5, #2]
 8017db0:	4004      	ands	r4, r0
 8017db2:	b2e4      	uxtb	r4, r4
 8017db4:	b9b3      	cbnz	r3, 8017de4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8017db6:	79a9      	ldrb	r1, [r5, #6]
 8017db8:	4630      	mov	r0, r6
 8017dba:	f7f5 fd71 	bl	800d8a0 <ucdr_serialize_bool>
 8017dbe:	79ab      	ldrb	r3, [r5, #6]
 8017dc0:	4004      	ands	r4, r0
 8017dc2:	bb33      	cbnz	r3, 8017e12 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8017dc4:	7b29      	ldrb	r1, [r5, #12]
 8017dc6:	4630      	mov	r0, r6
 8017dc8:	f7f5 fd6a 	bl	800d8a0 <ucdr_serialize_bool>
 8017dcc:	7b2b      	ldrb	r3, [r5, #12]
 8017dce:	4004      	ands	r4, r0
 8017dd0:	b9c3      	cbnz	r3, 8017e04 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8017dd2:	7d29      	ldrb	r1, [r5, #20]
 8017dd4:	4630      	mov	r0, r6
 8017dd6:	f7f5 fd63 	bl	800d8a0 <ucdr_serialize_bool>
 8017dda:	7d2b      	ldrb	r3, [r5, #20]
 8017ddc:	4004      	ands	r4, r0
 8017dde:	b93b      	cbnz	r3, 8017df0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8017de0:	4620      	mov	r0, r4
 8017de2:	bd70      	pop	{r4, r5, r6, pc}
 8017de4:	88a9      	ldrh	r1, [r5, #4]
 8017de6:	4630      	mov	r0, r6
 8017de8:	f7f5 fdb4 	bl	800d954 <ucdr_serialize_uint16_t>
 8017dec:	4004      	ands	r4, r0
 8017dee:	e7e2      	b.n	8017db6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8017df0:	69aa      	ldr	r2, [r5, #24]
 8017df2:	f105 011c 	add.w	r1, r5, #28
 8017df6:	4630      	mov	r0, r6
 8017df8:	f7f7 f80e 	bl	800ee18 <ucdr_serialize_sequence_uint8_t>
 8017dfc:	4004      	ands	r4, r0
 8017dfe:	b2e4      	uxtb	r4, r4
 8017e00:	4620      	mov	r0, r4
 8017e02:	bd70      	pop	{r4, r5, r6, pc}
 8017e04:	6929      	ldr	r1, [r5, #16]
 8017e06:	4630      	mov	r0, r6
 8017e08:	f7f5 ff94 	bl	800dd34 <ucdr_serialize_uint32_t>
 8017e0c:	4004      	ands	r4, r0
 8017e0e:	b2e4      	uxtb	r4, r4
 8017e10:	e7df      	b.n	8017dd2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8017e12:	68a9      	ldr	r1, [r5, #8]
 8017e14:	4630      	mov	r0, r6
 8017e16:	f7f5 ff8d 	bl	800dd34 <ucdr_serialize_uint32_t>
 8017e1a:	4004      	ands	r4, r0
 8017e1c:	b2e4      	uxtb	r4, r4
 8017e1e:	e7d1      	b.n	8017dc4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08017e20 <uxr_serialize_OBJK_DataReader_Binary>:
 8017e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e22:	2202      	movs	r2, #2
 8017e24:	460c      	mov	r4, r1
 8017e26:	4606      	mov	r6, r0
 8017e28:	f7fc fe90 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8017e2c:	78a1      	ldrb	r1, [r4, #2]
 8017e2e:	4605      	mov	r5, r0
 8017e30:	4630      	mov	r0, r6
 8017e32:	f7f5 fd35 	bl	800d8a0 <ucdr_serialize_bool>
 8017e36:	78a3      	ldrb	r3, [r4, #2]
 8017e38:	4005      	ands	r5, r0
 8017e3a:	b2ed      	uxtb	r5, r5
 8017e3c:	b90b      	cbnz	r3, 8017e42 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8017e3e:	4628      	mov	r0, r5
 8017e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e42:	f104 0108 	add.w	r1, r4, #8
 8017e46:	4630      	mov	r0, r6
 8017e48:	f7ff ffa6 	bl	8017d98 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017e4c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017e50:	4607      	mov	r7, r0
 8017e52:	4630      	mov	r0, r6
 8017e54:	f7f5 fd24 	bl	800d8a0 <ucdr_serialize_bool>
 8017e58:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017e5c:	4007      	ands	r7, r0
 8017e5e:	b2ff      	uxtb	r7, r7
 8017e60:	b95b      	cbnz	r3, 8017e7a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8017e62:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8017e66:	4630      	mov	r0, r6
 8017e68:	f7f5 fd1a 	bl	800d8a0 <ucdr_serialize_bool>
 8017e6c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017e70:	4007      	ands	r7, r0
 8017e72:	b94b      	cbnz	r3, 8017e88 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8017e74:	403d      	ands	r5, r7
 8017e76:	4628      	mov	r0, r5
 8017e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e7a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8017e7e:	4630      	mov	r0, r6
 8017e80:	f7f6 f99c 	bl	800e1bc <ucdr_serialize_uint64_t>
 8017e84:	4007      	ands	r7, r0
 8017e86:	e7ec      	b.n	8017e62 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8017e88:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8017e8a:	4630      	mov	r0, r6
 8017e8c:	f001 fbe0 	bl	8019650 <ucdr_serialize_string>
 8017e90:	4007      	ands	r7, r0
 8017e92:	b2ff      	uxtb	r7, r7
 8017e94:	e7ee      	b.n	8017e74 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8017e96:	bf00      	nop

08017e98 <uxr_serialize_OBJK_DataWriter_Binary>:
 8017e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e9a:	2202      	movs	r2, #2
 8017e9c:	460d      	mov	r5, r1
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	f7fc fe54 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8017ea4:	78a9      	ldrb	r1, [r5, #2]
 8017ea6:	4604      	mov	r4, r0
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	f7f5 fcf9 	bl	800d8a0 <ucdr_serialize_bool>
 8017eae:	78ab      	ldrb	r3, [r5, #2]
 8017eb0:	4004      	ands	r4, r0
 8017eb2:	b2e4      	uxtb	r4, r4
 8017eb4:	b90b      	cbnz	r3, 8017eba <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017eba:	f105 0108 	add.w	r1, r5, #8
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f7ff ff6a 	bl	8017d98 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017ec4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8017ec8:	4607      	mov	r7, r0
 8017eca:	4630      	mov	r0, r6
 8017ecc:	f7f5 fce8 	bl	800d8a0 <ucdr_serialize_bool>
 8017ed0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017ed4:	4007      	ands	r7, r0
 8017ed6:	b2ff      	uxtb	r7, r7
 8017ed8:	b913      	cbnz	r3, 8017ee0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8017eda:	403c      	ands	r4, r7
 8017edc:	4620      	mov	r0, r4
 8017ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ee0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	f7f6 f969 	bl	800e1bc <ucdr_serialize_uint64_t>
 8017eea:	4007      	ands	r7, r0
 8017eec:	e7f5      	b.n	8017eda <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8017eee:	bf00      	nop

08017ef0 <uxr_deserialize_ObjectVariant>:
 8017ef0:	b570      	push	{r4, r5, r6, lr}
 8017ef2:	4605      	mov	r5, r0
 8017ef4:	460e      	mov	r6, r1
 8017ef6:	f7f5 fd17 	bl	800d928 <ucdr_deserialize_uint8_t>
 8017efa:	b168      	cbz	r0, 8017f18 <uxr_deserialize_ObjectVariant+0x28>
 8017efc:	7833      	ldrb	r3, [r6, #0]
 8017efe:	3b01      	subs	r3, #1
 8017f00:	4604      	mov	r4, r0
 8017f02:	2b0d      	cmp	r3, #13
 8017f04:	d809      	bhi.n	8017f1a <uxr_deserialize_ObjectVariant+0x2a>
 8017f06:	e8df f003 	tbb	[pc, r3]
 8017f0a:	0a64      	.short	0x0a64
 8017f0c:	0a0a2323 	.word	0x0a0a2323
 8017f10:	10080a0a 	.word	0x10080a0a
 8017f14:	5e411010 	.word	0x5e411010
 8017f18:	2400      	movs	r4, #0
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	bd70      	pop	{r4, r5, r6, pc}
 8017f1e:	1d31      	adds	r1, r6, #4
 8017f20:	4628      	mov	r0, r5
 8017f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f26:	f7ff bd61 	b.w	80179ec <uxr_deserialize_DATAWRITER_Representation>
 8017f2a:	1d31      	adds	r1, r6, #4
 8017f2c:	4628      	mov	r0, r5
 8017f2e:	f7f5 fcfb 	bl	800d928 <ucdr_deserialize_uint8_t>
 8017f32:	2800      	cmp	r0, #0
 8017f34:	d0f0      	beq.n	8017f18 <uxr_deserialize_ObjectVariant+0x28>
 8017f36:	7933      	ldrb	r3, [r6, #4]
 8017f38:	2b01      	cmp	r3, #1
 8017f3a:	d001      	beq.n	8017f40 <uxr_deserialize_ObjectVariant+0x50>
 8017f3c:	2b02      	cmp	r3, #2
 8017f3e:	d1ec      	bne.n	8017f1a <uxr_deserialize_ObjectVariant+0x2a>
 8017f40:	68b1      	ldr	r1, [r6, #8]
 8017f42:	4628      	mov	r0, r5
 8017f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f4c:	f001 bb8e 	b.w	801966c <ucdr_deserialize_string>
 8017f50:	1d31      	adds	r1, r6, #4
 8017f52:	4628      	mov	r0, r5
 8017f54:	f7f5 fce8 	bl	800d928 <ucdr_deserialize_uint8_t>
 8017f58:	4604      	mov	r4, r0
 8017f5a:	b170      	cbz	r0, 8017f7a <uxr_deserialize_ObjectVariant+0x8a>
 8017f5c:	7933      	ldrb	r3, [r6, #4]
 8017f5e:	2b02      	cmp	r3, #2
 8017f60:	d053      	beq.n	801800a <uxr_deserialize_ObjectVariant+0x11a>
 8017f62:	2b03      	cmp	r3, #3
 8017f64:	d109      	bne.n	8017f7a <uxr_deserialize_ObjectVariant+0x8a>
 8017f66:	f106 0308 	add.w	r3, r6, #8
 8017f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017f6e:	f106 010c 	add.w	r1, r6, #12
 8017f72:	4628      	mov	r0, r5
 8017f74:	f7f6 ff62 	bl	800ee3c <ucdr_deserialize_sequence_uint8_t>
 8017f78:	4604      	mov	r4, r0
 8017f7a:	2202      	movs	r2, #2
 8017f7c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8017f80:	4628      	mov	r0, r5
 8017f82:	f7fc fe47 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8017f86:	4004      	ands	r4, r0
 8017f88:	b2e4      	uxtb	r4, r4
 8017f8a:	e7c6      	b.n	8017f1a <uxr_deserialize_ObjectVariant+0x2a>
 8017f8c:	2204      	movs	r2, #4
 8017f8e:	18b1      	adds	r1, r6, r2
 8017f90:	4628      	mov	r0, r5
 8017f92:	f7fc fe3f 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8017f96:	2202      	movs	r2, #2
 8017f98:	f106 0108 	add.w	r1, r6, #8
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	4628      	mov	r0, r5
 8017fa0:	f7fc fe38 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8017fa4:	2202      	movs	r2, #2
 8017fa6:	4004      	ands	r4, r0
 8017fa8:	f106 010a 	add.w	r1, r6, #10
 8017fac:	4628      	mov	r0, r5
 8017fae:	f7fc fe31 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8017fb2:	b2e4      	uxtb	r4, r4
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	f106 010c 	add.w	r1, r6, #12
 8017fba:	4628      	mov	r0, r5
 8017fbc:	401c      	ands	r4, r3
 8017fbe:	f7f5 fc85 	bl	800d8cc <ucdr_deserialize_bool>
 8017fc2:	4004      	ands	r4, r0
 8017fc4:	e7a9      	b.n	8017f1a <uxr_deserialize_ObjectVariant+0x2a>
 8017fc6:	1d31      	adds	r1, r6, #4
 8017fc8:	4628      	mov	r0, r5
 8017fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fce:	f7ff bbc3 	b.w	8017758 <uxr_deserialize_CLIENT_Representation>
 8017fd2:	1d31      	adds	r1, r6, #4
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	f7f5 fca7 	bl	800d928 <ucdr_deserialize_uint8_t>
 8017fda:	4604      	mov	r4, r0
 8017fdc:	b168      	cbz	r0, 8017ffa <uxr_deserialize_ObjectVariant+0x10a>
 8017fde:	7933      	ldrb	r3, [r6, #4]
 8017fe0:	2b02      	cmp	r3, #2
 8017fe2:	d003      	beq.n	8017fec <uxr_deserialize_ObjectVariant+0xfc>
 8017fe4:	2b03      	cmp	r3, #3
 8017fe6:	d018      	beq.n	801801a <uxr_deserialize_ObjectVariant+0x12a>
 8017fe8:	2b01      	cmp	r3, #1
 8017fea:	d106      	bne.n	8017ffa <uxr_deserialize_ObjectVariant+0x10a>
 8017fec:	68b1      	ldr	r1, [r6, #8]
 8017fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	f001 fb3a 	bl	801966c <ucdr_deserialize_string>
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8017ffe:	4628      	mov	r0, r5
 8018000:	f7f6 fa2e 	bl	800e460 <ucdr_deserialize_int16_t>
 8018004:	4004      	ands	r4, r0
 8018006:	b2e4      	uxtb	r4, r4
 8018008:	e787      	b.n	8017f1a <uxr_deserialize_ObjectVariant+0x2a>
 801800a:	68b1      	ldr	r1, [r6, #8]
 801800c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018010:	4628      	mov	r0, r5
 8018012:	f001 fb2b 	bl	801966c <ucdr_deserialize_string>
 8018016:	4604      	mov	r4, r0
 8018018:	e7af      	b.n	8017f7a <uxr_deserialize_ObjectVariant+0x8a>
 801801a:	f106 0308 	add.w	r3, r6, #8
 801801e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018022:	f106 010c 	add.w	r1, r6, #12
 8018026:	4628      	mov	r0, r5
 8018028:	f7f6 ff08 	bl	800ee3c <ucdr_deserialize_sequence_uint8_t>
 801802c:	4604      	mov	r4, r0
 801802e:	e7e4      	b.n	8017ffa <uxr_deserialize_ObjectVariant+0x10a>

08018030 <uxr_deserialize_BaseObjectRequest>:
 8018030:	b570      	push	{r4, r5, r6, lr}
 8018032:	2202      	movs	r2, #2
 8018034:	4605      	mov	r5, r0
 8018036:	460e      	mov	r6, r1
 8018038:	f7fc fdec 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 801803c:	2202      	movs	r2, #2
 801803e:	4604      	mov	r4, r0
 8018040:	18b1      	adds	r1, r6, r2
 8018042:	4628      	mov	r0, r5
 8018044:	f7fc fde6 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8018048:	4020      	ands	r0, r4
 801804a:	b2c0      	uxtb	r0, r0
 801804c:	bd70      	pop	{r4, r5, r6, pc}
 801804e:	bf00      	nop

08018050 <uxr_serialize_ActivityInfoVariant>:
 8018050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018054:	460d      	mov	r5, r1
 8018056:	7809      	ldrb	r1, [r1, #0]
 8018058:	4606      	mov	r6, r0
 801805a:	f7f5 fc4f 	bl	800d8fc <ucdr_serialize_uint8_t>
 801805e:	b130      	cbz	r0, 801806e <uxr_serialize_ActivityInfoVariant+0x1e>
 8018060:	782b      	ldrb	r3, [r5, #0]
 8018062:	2b06      	cmp	r3, #6
 8018064:	d014      	beq.n	8018090 <uxr_serialize_ActivityInfoVariant+0x40>
 8018066:	2b0d      	cmp	r3, #13
 8018068:	d019      	beq.n	801809e <uxr_serialize_ActivityInfoVariant+0x4e>
 801806a:	2b05      	cmp	r3, #5
 801806c:	d001      	beq.n	8018072 <uxr_serialize_ActivityInfoVariant+0x22>
 801806e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018072:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018076:	4630      	mov	r0, r6
 8018078:	f7f6 f968 	bl	800e34c <ucdr_serialize_int16_t>
 801807c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8018080:	4604      	mov	r4, r0
 8018082:	4630      	mov	r0, r6
 8018084:	f7f6 f89a 	bl	800e1bc <ucdr_serialize_uint64_t>
 8018088:	4020      	ands	r0, r4
 801808a:	b2c0      	uxtb	r0, r0
 801808c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018090:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018094:	4630      	mov	r0, r6
 8018096:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801809a:	f7f6 b957 	b.w	800e34c <ucdr_serialize_int16_t>
 801809e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80180a2:	4630      	mov	r0, r6
 80180a4:	f7f6 f952 	bl	800e34c <ucdr_serialize_int16_t>
 80180a8:	68e9      	ldr	r1, [r5, #12]
 80180aa:	4681      	mov	r9, r0
 80180ac:	4630      	mov	r0, r6
 80180ae:	f7f5 fe41 	bl	800dd34 <ucdr_serialize_uint32_t>
 80180b2:	68eb      	ldr	r3, [r5, #12]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d051      	beq.n	801815c <uxr_serialize_ActivityInfoVariant+0x10c>
 80180b8:	b1e8      	cbz	r0, 80180f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 80180ba:	f105 0714 	add.w	r7, r5, #20
 80180be:	f04f 0800 	mov.w	r8, #0
 80180c2:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 80180c6:	4630      	mov	r0, r6
 80180c8:	f7f5 fc18 	bl	800d8fc <ucdr_serialize_uint8_t>
 80180cc:	b198      	cbz	r0, 80180f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 80180ce:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80180d2:	2b03      	cmp	r3, #3
 80180d4:	d839      	bhi.n	801814a <uxr_serialize_ActivityInfoVariant+0xfa>
 80180d6:	e8df f003 	tbb	[pc, r3]
 80180da:	1e2b      	.short	0x1e2b
 80180dc:	0211      	.short	0x0211
 80180de:	6839      	ldr	r1, [r7, #0]
 80180e0:	4630      	mov	r0, r6
 80180e2:	f001 fab5 	bl	8019650 <ucdr_serialize_string>
 80180e6:	68eb      	ldr	r3, [r5, #12]
 80180e8:	f108 0801 	add.w	r8, r8, #1
 80180ec:	4598      	cmp	r8, r3
 80180ee:	d231      	bcs.n	8018154 <uxr_serialize_ActivityInfoVariant+0x104>
 80180f0:	3718      	adds	r7, #24
 80180f2:	2800      	cmp	r0, #0
 80180f4:	d1e5      	bne.n	80180c2 <uxr_serialize_ActivityInfoVariant+0x72>
 80180f6:	2000      	movs	r0, #0
 80180f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180fc:	2210      	movs	r2, #16
 80180fe:	4639      	mov	r1, r7
 8018100:	4630      	mov	r0, r6
 8018102:	f7fc fd23 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8018106:	6939      	ldr	r1, [r7, #16]
 8018108:	4604      	mov	r4, r0
 801810a:	4630      	mov	r0, r6
 801810c:	f7f5 fe12 	bl	800dd34 <ucdr_serialize_uint32_t>
 8018110:	4020      	ands	r0, r4
 8018112:	b2c0      	uxtb	r0, r0
 8018114:	e7e7      	b.n	80180e6 <uxr_serialize_ActivityInfoVariant+0x96>
 8018116:	2204      	movs	r2, #4
 8018118:	4639      	mov	r1, r7
 801811a:	4630      	mov	r0, r6
 801811c:	f7fc fd16 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8018120:	88b9      	ldrh	r1, [r7, #4]
 8018122:	4604      	mov	r4, r0
 8018124:	4630      	mov	r0, r6
 8018126:	f7f5 fc15 	bl	800d954 <ucdr_serialize_uint16_t>
 801812a:	4020      	ands	r0, r4
 801812c:	b2c0      	uxtb	r0, r0
 801812e:	e7da      	b.n	80180e6 <uxr_serialize_ActivityInfoVariant+0x96>
 8018130:	2202      	movs	r2, #2
 8018132:	4639      	mov	r1, r7
 8018134:	4630      	mov	r0, r6
 8018136:	f7fc fd09 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 801813a:	78b9      	ldrb	r1, [r7, #2]
 801813c:	4604      	mov	r4, r0
 801813e:	4630      	mov	r0, r6
 8018140:	f7f5 fbdc 	bl	800d8fc <ucdr_serialize_uint8_t>
 8018144:	4020      	ands	r0, r4
 8018146:	b2c0      	uxtb	r0, r0
 8018148:	e7cd      	b.n	80180e6 <uxr_serialize_ActivityInfoVariant+0x96>
 801814a:	68eb      	ldr	r3, [r5, #12]
 801814c:	f108 0801 	add.w	r8, r8, #1
 8018150:	4598      	cmp	r8, r3
 8018152:	d308      	bcc.n	8018166 <uxr_serialize_ActivityInfoVariant+0x116>
 8018154:	ea09 0000 	and.w	r0, r9, r0
 8018158:	b2c0      	uxtb	r0, r0
 801815a:	e788      	b.n	801806e <uxr_serialize_ActivityInfoVariant+0x1e>
 801815c:	ea09 0900 	and.w	r9, r9, r0
 8018160:	fa5f f089 	uxtb.w	r0, r9
 8018164:	e783      	b.n	801806e <uxr_serialize_ActivityInfoVariant+0x1e>
 8018166:	3718      	adds	r7, #24
 8018168:	e7ab      	b.n	80180c2 <uxr_serialize_ActivityInfoVariant+0x72>
 801816a:	bf00      	nop

0801816c <uxr_deserialize_BaseObjectReply>:
 801816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018170:	2202      	movs	r2, #2
 8018172:	4606      	mov	r6, r0
 8018174:	460f      	mov	r7, r1
 8018176:	f7fc fd4d 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 801817a:	2202      	movs	r2, #2
 801817c:	18b9      	adds	r1, r7, r2
 801817e:	4605      	mov	r5, r0
 8018180:	4630      	mov	r0, r6
 8018182:	f7fc fd47 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8018186:	1d39      	adds	r1, r7, #4
 8018188:	4680      	mov	r8, r0
 801818a:	4630      	mov	r0, r6
 801818c:	f7f5 fbcc 	bl	800d928 <ucdr_deserialize_uint8_t>
 8018190:	1d79      	adds	r1, r7, #5
 8018192:	4604      	mov	r4, r0
 8018194:	4630      	mov	r0, r6
 8018196:	f7f5 fbc7 	bl	800d928 <ucdr_deserialize_uint8_t>
 801819a:	ea05 0508 	and.w	r5, r5, r8
 801819e:	402c      	ands	r4, r5
 80181a0:	4020      	ands	r0, r4
 80181a2:	b2c0      	uxtb	r0, r0
 80181a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080181a8 <uxr_serialize_ReadSpecification>:
 80181a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181ac:	460d      	mov	r5, r1
 80181ae:	7809      	ldrb	r1, [r1, #0]
 80181b0:	4606      	mov	r6, r0
 80181b2:	f7f5 fba3 	bl	800d8fc <ucdr_serialize_uint8_t>
 80181b6:	7869      	ldrb	r1, [r5, #1]
 80181b8:	4604      	mov	r4, r0
 80181ba:	4630      	mov	r0, r6
 80181bc:	f7f5 fb9e 	bl	800d8fc <ucdr_serialize_uint8_t>
 80181c0:	78a9      	ldrb	r1, [r5, #2]
 80181c2:	4004      	ands	r4, r0
 80181c4:	4630      	mov	r0, r6
 80181c6:	f7f5 fb6b 	bl	800d8a0 <ucdr_serialize_bool>
 80181ca:	78ab      	ldrb	r3, [r5, #2]
 80181cc:	b2e4      	uxtb	r4, r4
 80181ce:	4004      	ands	r4, r0
 80181d0:	b94b      	cbnz	r3, 80181e6 <uxr_serialize_ReadSpecification+0x3e>
 80181d2:	7a29      	ldrb	r1, [r5, #8]
 80181d4:	4630      	mov	r0, r6
 80181d6:	f7f5 fb63 	bl	800d8a0 <ucdr_serialize_bool>
 80181da:	7a2b      	ldrb	r3, [r5, #8]
 80181dc:	4004      	ands	r4, r0
 80181de:	b943      	cbnz	r3, 80181f2 <uxr_serialize_ReadSpecification+0x4a>
 80181e0:	4620      	mov	r0, r4
 80181e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e6:	6869      	ldr	r1, [r5, #4]
 80181e8:	4630      	mov	r0, r6
 80181ea:	f001 fa31 	bl	8019650 <ucdr_serialize_string>
 80181ee:	4004      	ands	r4, r0
 80181f0:	e7ef      	b.n	80181d2 <uxr_serialize_ReadSpecification+0x2a>
 80181f2:	8969      	ldrh	r1, [r5, #10]
 80181f4:	4630      	mov	r0, r6
 80181f6:	f7f5 fbad 	bl	800d954 <ucdr_serialize_uint16_t>
 80181fa:	89a9      	ldrh	r1, [r5, #12]
 80181fc:	4607      	mov	r7, r0
 80181fe:	4630      	mov	r0, r6
 8018200:	f7f5 fba8 	bl	800d954 <ucdr_serialize_uint16_t>
 8018204:	89e9      	ldrh	r1, [r5, #14]
 8018206:	4007      	ands	r7, r0
 8018208:	4630      	mov	r0, r6
 801820a:	f7f5 fba3 	bl	800d954 <ucdr_serialize_uint16_t>
 801820e:	8a29      	ldrh	r1, [r5, #16]
 8018210:	4680      	mov	r8, r0
 8018212:	4630      	mov	r0, r6
 8018214:	f7f5 fb9e 	bl	800d954 <ucdr_serialize_uint16_t>
 8018218:	b2ff      	uxtb	r7, r7
 801821a:	ea04 0507 	and.w	r5, r4, r7
 801821e:	ea05 0508 	and.w	r5, r5, r8
 8018222:	ea00 0405 	and.w	r4, r0, r5
 8018226:	4620      	mov	r0, r4
 8018228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801822c <uxr_serialize_CREATE_CLIENT_Payload>:
 801822c:	f7ff ba3a 	b.w	80176a4 <uxr_serialize_CLIENT_Representation>

08018230 <uxr_serialize_CREATE_Payload>:
 8018230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018232:	2202      	movs	r2, #2
 8018234:	4606      	mov	r6, r0
 8018236:	460d      	mov	r5, r1
 8018238:	f7fc fc88 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 801823c:	2202      	movs	r2, #2
 801823e:	18a9      	adds	r1, r5, r2
 8018240:	4604      	mov	r4, r0
 8018242:	4630      	mov	r0, r6
 8018244:	f7fc fc82 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8018248:	7929      	ldrb	r1, [r5, #4]
 801824a:	4607      	mov	r7, r0
 801824c:	4630      	mov	r0, r6
 801824e:	f7f5 fb55 	bl	800d8fc <ucdr_serialize_uint8_t>
 8018252:	b170      	cbz	r0, 8018272 <uxr_serialize_CREATE_Payload+0x42>
 8018254:	792b      	ldrb	r3, [r5, #4]
 8018256:	403c      	ands	r4, r7
 8018258:	3b01      	subs	r3, #1
 801825a:	b2e4      	uxtb	r4, r4
 801825c:	2b0d      	cmp	r3, #13
 801825e:	d809      	bhi.n	8018274 <uxr_serialize_CREATE_Payload+0x44>
 8018260:	e8df f003 	tbb	[pc, r3]
 8018264:	23230a3e 	.word	0x23230a3e
 8018268:	0a0a0a0a 	.word	0x0a0a0a0a
 801826c:	12121208 	.word	0x12121208
 8018270:	5f58      	.short	0x5f58
 8018272:	2400      	movs	r4, #0
 8018274:	4620      	mov	r0, r4
 8018276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018278:	f105 0108 	add.w	r1, r5, #8
 801827c:	4630      	mov	r0, r6
 801827e:	f7ff fb19 	bl	80178b4 <uxr_serialize_DATAWRITER_Representation>
 8018282:	4004      	ands	r4, r0
 8018284:	4620      	mov	r0, r4
 8018286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018288:	7a29      	ldrb	r1, [r5, #8]
 801828a:	4630      	mov	r0, r6
 801828c:	f7f5 fb36 	bl	800d8fc <ucdr_serialize_uint8_t>
 8018290:	2800      	cmp	r0, #0
 8018292:	d0ee      	beq.n	8018272 <uxr_serialize_CREATE_Payload+0x42>
 8018294:	7a2b      	ldrb	r3, [r5, #8]
 8018296:	2b01      	cmp	r3, #1
 8018298:	d001      	beq.n	801829e <uxr_serialize_CREATE_Payload+0x6e>
 801829a:	2b02      	cmp	r3, #2
 801829c:	d1ea      	bne.n	8018274 <uxr_serialize_CREATE_Payload+0x44>
 801829e:	68e9      	ldr	r1, [r5, #12]
 80182a0:	4630      	mov	r0, r6
 80182a2:	f001 f9d5 	bl	8019650 <ucdr_serialize_string>
 80182a6:	4004      	ands	r4, r0
 80182a8:	e7e4      	b.n	8018274 <uxr_serialize_CREATE_Payload+0x44>
 80182aa:	7a29      	ldrb	r1, [r5, #8]
 80182ac:	4630      	mov	r0, r6
 80182ae:	f7f5 fb25 	bl	800d8fc <ucdr_serialize_uint8_t>
 80182b2:	4607      	mov	r7, r0
 80182b4:	b158      	cbz	r0, 80182ce <uxr_serialize_CREATE_Payload+0x9e>
 80182b6:	7a2b      	ldrb	r3, [r5, #8]
 80182b8:	2b02      	cmp	r3, #2
 80182ba:	d039      	beq.n	8018330 <uxr_serialize_CREATE_Payload+0x100>
 80182bc:	2b03      	cmp	r3, #3
 80182be:	d106      	bne.n	80182ce <uxr_serialize_CREATE_Payload+0x9e>
 80182c0:	68ea      	ldr	r2, [r5, #12]
 80182c2:	f105 0110 	add.w	r1, r5, #16
 80182c6:	4630      	mov	r0, r6
 80182c8:	f7f6 fda6 	bl	800ee18 <ucdr_serialize_sequence_uint8_t>
 80182cc:	4607      	mov	r7, r0
 80182ce:	2202      	movs	r2, #2
 80182d0:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 80182d4:	4630      	mov	r0, r6
 80182d6:	f7fc fc39 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80182da:	4038      	ands	r0, r7
 80182dc:	4004      	ands	r4, r0
 80182de:	e7c9      	b.n	8018274 <uxr_serialize_CREATE_Payload+0x44>
 80182e0:	7a29      	ldrb	r1, [r5, #8]
 80182e2:	4630      	mov	r0, r6
 80182e4:	f7f5 fb0a 	bl	800d8fc <ucdr_serialize_uint8_t>
 80182e8:	4607      	mov	r7, r0
 80182ea:	b158      	cbz	r0, 8018304 <uxr_serialize_CREATE_Payload+0xd4>
 80182ec:	7a2b      	ldrb	r3, [r5, #8]
 80182ee:	2b02      	cmp	r3, #2
 80182f0:	d003      	beq.n	80182fa <uxr_serialize_CREATE_Payload+0xca>
 80182f2:	2b03      	cmp	r3, #3
 80182f4:	d022      	beq.n	801833c <uxr_serialize_CREATE_Payload+0x10c>
 80182f6:	2b01      	cmp	r3, #1
 80182f8:	d104      	bne.n	8018304 <uxr_serialize_CREATE_Payload+0xd4>
 80182fa:	68e9      	ldr	r1, [r5, #12]
 80182fc:	4630      	mov	r0, r6
 80182fe:	f001 f9a7 	bl	8019650 <ucdr_serialize_string>
 8018302:	4607      	mov	r7, r0
 8018304:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8018308:	4630      	mov	r0, r6
 801830a:	f7f6 f81f 	bl	800e34c <ucdr_serialize_int16_t>
 801830e:	4038      	ands	r0, r7
 8018310:	4004      	ands	r4, r0
 8018312:	e7af      	b.n	8018274 <uxr_serialize_CREATE_Payload+0x44>
 8018314:	f105 0108 	add.w	r1, r5, #8
 8018318:	4630      	mov	r0, r6
 801831a:	f7ff fa81 	bl	8017820 <uxr_serialize_AGENT_Representation>
 801831e:	4004      	ands	r4, r0
 8018320:	e7a8      	b.n	8018274 <uxr_serialize_CREATE_Payload+0x44>
 8018322:	f105 0108 	add.w	r1, r5, #8
 8018326:	4630      	mov	r0, r6
 8018328:	f7ff f9bc 	bl	80176a4 <uxr_serialize_CLIENT_Representation>
 801832c:	4004      	ands	r4, r0
 801832e:	e7a1      	b.n	8018274 <uxr_serialize_CREATE_Payload+0x44>
 8018330:	68e9      	ldr	r1, [r5, #12]
 8018332:	4630      	mov	r0, r6
 8018334:	f001 f98c 	bl	8019650 <ucdr_serialize_string>
 8018338:	4607      	mov	r7, r0
 801833a:	e7c8      	b.n	80182ce <uxr_serialize_CREATE_Payload+0x9e>
 801833c:	68ea      	ldr	r2, [r5, #12]
 801833e:	f105 0110 	add.w	r1, r5, #16
 8018342:	4630      	mov	r0, r6
 8018344:	f7f6 fd68 	bl	800ee18 <ucdr_serialize_sequence_uint8_t>
 8018348:	4607      	mov	r7, r0
 801834a:	e7db      	b.n	8018304 <uxr_serialize_CREATE_Payload+0xd4>

0801834c <uxr_deserialize_GET_INFO_Payload>:
 801834c:	b570      	push	{r4, r5, r6, lr}
 801834e:	2202      	movs	r2, #2
 8018350:	4605      	mov	r5, r0
 8018352:	460e      	mov	r6, r1
 8018354:	f7fc fc5e 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8018358:	2202      	movs	r2, #2
 801835a:	18b1      	adds	r1, r6, r2
 801835c:	4604      	mov	r4, r0
 801835e:	4628      	mov	r0, r5
 8018360:	f7fc fc58 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8018364:	1d31      	adds	r1, r6, #4
 8018366:	4004      	ands	r4, r0
 8018368:	4628      	mov	r0, r5
 801836a:	f7f5 fe0d 	bl	800df88 <ucdr_deserialize_uint32_t>
 801836e:	b2e4      	uxtb	r4, r4
 8018370:	4020      	ands	r0, r4
 8018372:	bd70      	pop	{r4, r5, r6, pc}

08018374 <uxr_serialize_DELETE_Payload>:
 8018374:	b570      	push	{r4, r5, r6, lr}
 8018376:	2202      	movs	r2, #2
 8018378:	4605      	mov	r5, r0
 801837a:	460e      	mov	r6, r1
 801837c:	f7fc fbe6 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8018380:	2202      	movs	r2, #2
 8018382:	4604      	mov	r4, r0
 8018384:	18b1      	adds	r1, r6, r2
 8018386:	4628      	mov	r0, r5
 8018388:	f7fc fbe0 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 801838c:	4020      	ands	r0, r4
 801838e:	b2c0      	uxtb	r0, r0
 8018390:	bd70      	pop	{r4, r5, r6, pc}
 8018392:	bf00      	nop

08018394 <uxr_deserialize_STATUS_AGENT_Payload>:
 8018394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018398:	4605      	mov	r5, r0
 801839a:	460e      	mov	r6, r1
 801839c:	f7f5 fac4 	bl	800d928 <ucdr_deserialize_uint8_t>
 80183a0:	1c71      	adds	r1, r6, #1
 80183a2:	4604      	mov	r4, r0
 80183a4:	4628      	mov	r0, r5
 80183a6:	f7f5 fabf 	bl	800d928 <ucdr_deserialize_uint8_t>
 80183aa:	2204      	movs	r2, #4
 80183ac:	18b1      	adds	r1, r6, r2
 80183ae:	4681      	mov	r9, r0
 80183b0:	4628      	mov	r0, r5
 80183b2:	f7fc fc2f 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 80183b6:	f106 0108 	add.w	r1, r6, #8
 80183ba:	4680      	mov	r8, r0
 80183bc:	2202      	movs	r2, #2
 80183be:	4628      	mov	r0, r5
 80183c0:	f7fc fc28 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 80183c4:	2202      	movs	r2, #2
 80183c6:	f106 010a 	add.w	r1, r6, #10
 80183ca:	4607      	mov	r7, r0
 80183cc:	4628      	mov	r0, r5
 80183ce:	f7fc fc21 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 80183d2:	ea04 0409 	and.w	r4, r4, r9
 80183d6:	4603      	mov	r3, r0
 80183d8:	f106 010c 	add.w	r1, r6, #12
 80183dc:	4628      	mov	r0, r5
 80183de:	b2e4      	uxtb	r4, r4
 80183e0:	461d      	mov	r5, r3
 80183e2:	ea04 0408 	and.w	r4, r4, r8
 80183e6:	f7f5 fa71 	bl	800d8cc <ucdr_deserialize_bool>
 80183ea:	4027      	ands	r7, r4
 80183ec:	403d      	ands	r5, r7
 80183ee:	4028      	ands	r0, r5
 80183f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080183f4 <uxr_deserialize_STATUS_Payload>:
 80183f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f8:	2202      	movs	r2, #2
 80183fa:	4606      	mov	r6, r0
 80183fc:	460f      	mov	r7, r1
 80183fe:	f7fc fc09 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8018402:	2202      	movs	r2, #2
 8018404:	18b9      	adds	r1, r7, r2
 8018406:	4605      	mov	r5, r0
 8018408:	4630      	mov	r0, r6
 801840a:	f7fc fc03 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 801840e:	1d39      	adds	r1, r7, #4
 8018410:	4680      	mov	r8, r0
 8018412:	4630      	mov	r0, r6
 8018414:	f7f5 fa88 	bl	800d928 <ucdr_deserialize_uint8_t>
 8018418:	1d79      	adds	r1, r7, #5
 801841a:	4604      	mov	r4, r0
 801841c:	4630      	mov	r0, r6
 801841e:	f7f5 fa83 	bl	800d928 <ucdr_deserialize_uint8_t>
 8018422:	ea05 0508 	and.w	r5, r5, r8
 8018426:	402c      	ands	r4, r5
 8018428:	4020      	ands	r0, r4
 801842a:	b2c0      	uxtb	r0, r0
 801842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018430 <uxr_serialize_INFO_Payload>:
 8018430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018434:	2202      	movs	r2, #2
 8018436:	460c      	mov	r4, r1
 8018438:	4605      	mov	r5, r0
 801843a:	f7fc fb87 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 801843e:	2202      	movs	r2, #2
 8018440:	18a1      	adds	r1, r4, r2
 8018442:	4680      	mov	r8, r0
 8018444:	4628      	mov	r0, r5
 8018446:	f7fc fb81 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 801844a:	7921      	ldrb	r1, [r4, #4]
 801844c:	4607      	mov	r7, r0
 801844e:	4628      	mov	r0, r5
 8018450:	f7f5 fa54 	bl	800d8fc <ucdr_serialize_uint8_t>
 8018454:	7961      	ldrb	r1, [r4, #5]
 8018456:	4606      	mov	r6, r0
 8018458:	4628      	mov	r0, r5
 801845a:	f7f5 fa4f 	bl	800d8fc <ucdr_serialize_uint8_t>
 801845e:	ea08 0807 	and.w	r8, r8, r7
 8018462:	ea06 0608 	and.w	r6, r6, r8
 8018466:	ea00 0706 	and.w	r7, r0, r6
 801846a:	7a21      	ldrb	r1, [r4, #8]
 801846c:	4628      	mov	r0, r5
 801846e:	f7f5 fa17 	bl	800d8a0 <ucdr_serialize_bool>
 8018472:	7a23      	ldrb	r3, [r4, #8]
 8018474:	b2ff      	uxtb	r7, r7
 8018476:	4606      	mov	r6, r0
 8018478:	b96b      	cbnz	r3, 8018496 <uxr_serialize_INFO_Payload+0x66>
 801847a:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801847e:	4628      	mov	r0, r5
 8018480:	f7f5 fa0e 	bl	800d8a0 <ucdr_serialize_bool>
 8018484:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8018488:	4030      	ands	r0, r6
 801848a:	b2c6      	uxtb	r6, r0
 801848c:	b983      	cbnz	r3, 80184b0 <uxr_serialize_INFO_Payload+0x80>
 801848e:	ea06 0007 	and.w	r0, r6, r7
 8018492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018496:	7b21      	ldrb	r1, [r4, #12]
 8018498:	4628      	mov	r0, r5
 801849a:	f7f5 fa2f 	bl	800d8fc <ucdr_serialize_uint8_t>
 801849e:	b188      	cbz	r0, 80184c4 <uxr_serialize_INFO_Payload+0x94>
 80184a0:	f104 010c 	add.w	r1, r4, #12
 80184a4:	4628      	mov	r0, r5
 80184a6:	f7ff fa2d 	bl	8017904 <uxr_serialize_ObjectVariant.part.0>
 80184aa:	4030      	ands	r0, r6
 80184ac:	b2c6      	uxtb	r6, r0
 80184ae:	e7e4      	b.n	801847a <uxr_serialize_INFO_Payload+0x4a>
 80184b0:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80184b4:	4628      	mov	r0, r5
 80184b6:	f7ff fdcb 	bl	8018050 <uxr_serialize_ActivityInfoVariant>
 80184ba:	4006      	ands	r6, r0
 80184bc:	ea06 0007 	and.w	r0, r6, r7
 80184c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184c4:	4606      	mov	r6, r0
 80184c6:	e7d8      	b.n	801847a <uxr_serialize_INFO_Payload+0x4a>

080184c8 <uxr_serialize_READ_DATA_Payload>:
 80184c8:	b570      	push	{r4, r5, r6, lr}
 80184ca:	2202      	movs	r2, #2
 80184cc:	4605      	mov	r5, r0
 80184ce:	460e      	mov	r6, r1
 80184d0:	f7fc fb3c 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80184d4:	2202      	movs	r2, #2
 80184d6:	18b1      	adds	r1, r6, r2
 80184d8:	4604      	mov	r4, r0
 80184da:	4628      	mov	r0, r5
 80184dc:	f7fc fb36 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80184e0:	1d31      	adds	r1, r6, #4
 80184e2:	4004      	ands	r4, r0
 80184e4:	4628      	mov	r0, r5
 80184e6:	f7ff fe5f 	bl	80181a8 <uxr_serialize_ReadSpecification>
 80184ea:	b2e4      	uxtb	r4, r4
 80184ec:	4020      	ands	r0, r4
 80184ee:	bd70      	pop	{r4, r5, r6, pc}

080184f0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80184f0:	b570      	push	{r4, r5, r6, lr}
 80184f2:	2202      	movs	r2, #2
 80184f4:	4605      	mov	r5, r0
 80184f6:	460e      	mov	r6, r1
 80184f8:	f7fc fb28 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 80184fc:	2202      	movs	r2, #2
 80184fe:	4604      	mov	r4, r0
 8018500:	18b1      	adds	r1, r6, r2
 8018502:	4628      	mov	r0, r5
 8018504:	f7fc fb22 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8018508:	4020      	ands	r0, r4
 801850a:	b2c0      	uxtb	r0, r0
 801850c:	bd70      	pop	{r4, r5, r6, pc}
 801850e:	bf00      	nop

08018510 <uxr_serialize_ACKNACK_Payload>:
 8018510:	b570      	push	{r4, r5, r6, lr}
 8018512:	460c      	mov	r4, r1
 8018514:	460e      	mov	r6, r1
 8018516:	f834 1b02 	ldrh.w	r1, [r4], #2
 801851a:	4605      	mov	r5, r0
 801851c:	f7f5 fa1a 	bl	800d954 <ucdr_serialize_uint16_t>
 8018520:	2202      	movs	r2, #2
 8018522:	4621      	mov	r1, r4
 8018524:	4604      	mov	r4, r0
 8018526:	4628      	mov	r0, r5
 8018528:	f7fc fb10 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 801852c:	7931      	ldrb	r1, [r6, #4]
 801852e:	4004      	ands	r4, r0
 8018530:	4628      	mov	r0, r5
 8018532:	f7f5 f9e3 	bl	800d8fc <ucdr_serialize_uint8_t>
 8018536:	b2e4      	uxtb	r4, r4
 8018538:	4020      	ands	r0, r4
 801853a:	bd70      	pop	{r4, r5, r6, pc}

0801853c <uxr_deserialize_ACKNACK_Payload>:
 801853c:	b570      	push	{r4, r5, r6, lr}
 801853e:	4605      	mov	r5, r0
 8018540:	460e      	mov	r6, r1
 8018542:	f7f5 fb0b 	bl	800db5c <ucdr_deserialize_uint16_t>
 8018546:	2202      	movs	r2, #2
 8018548:	18b1      	adds	r1, r6, r2
 801854a:	4604      	mov	r4, r0
 801854c:	4628      	mov	r0, r5
 801854e:	f7fc fb61 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8018552:	1d31      	adds	r1, r6, #4
 8018554:	4004      	ands	r4, r0
 8018556:	4628      	mov	r0, r5
 8018558:	f7f5 f9e6 	bl	800d928 <ucdr_deserialize_uint8_t>
 801855c:	b2e4      	uxtb	r4, r4
 801855e:	4020      	ands	r0, r4
 8018560:	bd70      	pop	{r4, r5, r6, pc}
 8018562:	bf00      	nop

08018564 <uxr_serialize_HEARTBEAT_Payload>:
 8018564:	b570      	push	{r4, r5, r6, lr}
 8018566:	460d      	mov	r5, r1
 8018568:	8809      	ldrh	r1, [r1, #0]
 801856a:	4606      	mov	r6, r0
 801856c:	f7f5 f9f2 	bl	800d954 <ucdr_serialize_uint16_t>
 8018570:	8869      	ldrh	r1, [r5, #2]
 8018572:	4604      	mov	r4, r0
 8018574:	4630      	mov	r0, r6
 8018576:	f7f5 f9ed 	bl	800d954 <ucdr_serialize_uint16_t>
 801857a:	7929      	ldrb	r1, [r5, #4]
 801857c:	4004      	ands	r4, r0
 801857e:	4630      	mov	r0, r6
 8018580:	f7f5 f9bc 	bl	800d8fc <ucdr_serialize_uint8_t>
 8018584:	b2e4      	uxtb	r4, r4
 8018586:	4020      	ands	r0, r4
 8018588:	bd70      	pop	{r4, r5, r6, pc}
 801858a:	bf00      	nop

0801858c <uxr_deserialize_HEARTBEAT_Payload>:
 801858c:	b570      	push	{r4, r5, r6, lr}
 801858e:	4605      	mov	r5, r0
 8018590:	460e      	mov	r6, r1
 8018592:	f7f5 fae3 	bl	800db5c <ucdr_deserialize_uint16_t>
 8018596:	1cb1      	adds	r1, r6, #2
 8018598:	4604      	mov	r4, r0
 801859a:	4628      	mov	r0, r5
 801859c:	f7f5 fade 	bl	800db5c <ucdr_deserialize_uint16_t>
 80185a0:	1d31      	adds	r1, r6, #4
 80185a2:	4004      	ands	r4, r0
 80185a4:	4628      	mov	r0, r5
 80185a6:	f7f5 f9bf 	bl	800d928 <ucdr_deserialize_uint8_t>
 80185aa:	b2e4      	uxtb	r4, r4
 80185ac:	4020      	ands	r0, r4
 80185ae:	bd70      	pop	{r4, r5, r6, pc}

080185b0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80185b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185b4:	4605      	mov	r5, r0
 80185b6:	460e      	mov	r6, r1
 80185b8:	f7f6 f868 	bl	800e68c <ucdr_deserialize_int32_t>
 80185bc:	1d31      	adds	r1, r6, #4
 80185be:	4607      	mov	r7, r0
 80185c0:	4628      	mov	r0, r5
 80185c2:	f7f5 fce1 	bl	800df88 <ucdr_deserialize_uint32_t>
 80185c6:	f106 0108 	add.w	r1, r6, #8
 80185ca:	4680      	mov	r8, r0
 80185cc:	4628      	mov	r0, r5
 80185ce:	f7f6 f85d 	bl	800e68c <ucdr_deserialize_int32_t>
 80185d2:	f106 010c 	add.w	r1, r6, #12
 80185d6:	4604      	mov	r4, r0
 80185d8:	4628      	mov	r0, r5
 80185da:	f7f5 fcd5 	bl	800df88 <ucdr_deserialize_uint32_t>
 80185de:	ea07 0708 	and.w	r7, r7, r8
 80185e2:	403c      	ands	r4, r7
 80185e4:	f106 0110 	add.w	r1, r6, #16
 80185e8:	4004      	ands	r4, r0
 80185ea:	4628      	mov	r0, r5
 80185ec:	f7f6 f84e 	bl	800e68c <ucdr_deserialize_int32_t>
 80185f0:	f106 0114 	add.w	r1, r6, #20
 80185f4:	4607      	mov	r7, r0
 80185f6:	4628      	mov	r0, r5
 80185f8:	f7f5 fcc6 	bl	800df88 <ucdr_deserialize_uint32_t>
 80185fc:	b2e4      	uxtb	r4, r4
 80185fe:	403c      	ands	r4, r7
 8018600:	4020      	ands	r0, r4
 8018602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018606:	bf00      	nop

08018608 <uxr_serialize_SampleIdentity>:
 8018608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801860c:	220c      	movs	r2, #12
 801860e:	4604      	mov	r4, r0
 8018610:	460d      	mov	r5, r1
 8018612:	f7fc fa9b 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8018616:	2203      	movs	r2, #3
 8018618:	f105 010c 	add.w	r1, r5, #12
 801861c:	4680      	mov	r8, r0
 801861e:	4620      	mov	r0, r4
 8018620:	f7fc fa94 	bl	8014b4c <ucdr_serialize_array_uint8_t>
 8018624:	7be9      	ldrb	r1, [r5, #15]
 8018626:	4681      	mov	r9, r0
 8018628:	4620      	mov	r0, r4
 801862a:	f7f5 f967 	bl	800d8fc <ucdr_serialize_uint8_t>
 801862e:	6929      	ldr	r1, [r5, #16]
 8018630:	4607      	mov	r7, r0
 8018632:	4620      	mov	r0, r4
 8018634:	f7f5 ff90 	bl	800e558 <ucdr_serialize_int32_t>
 8018638:	6969      	ldr	r1, [r5, #20]
 801863a:	4606      	mov	r6, r0
 801863c:	4620      	mov	r0, r4
 801863e:	f7f5 fb79 	bl	800dd34 <ucdr_serialize_uint32_t>
 8018642:	ea08 0809 	and.w	r8, r8, r9
 8018646:	ea07 0708 	and.w	r7, r7, r8
 801864a:	403e      	ands	r6, r7
 801864c:	4030      	ands	r0, r6
 801864e:	b2c0      	uxtb	r0, r0
 8018650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018654 <uxr_deserialize_SampleIdentity>:
 8018654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018658:	220c      	movs	r2, #12
 801865a:	4604      	mov	r4, r0
 801865c:	460d      	mov	r5, r1
 801865e:	f7fc fad9 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8018662:	2203      	movs	r2, #3
 8018664:	f105 010c 	add.w	r1, r5, #12
 8018668:	4680      	mov	r8, r0
 801866a:	4620      	mov	r0, r4
 801866c:	f7fc fad2 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8018670:	f105 010f 	add.w	r1, r5, #15
 8018674:	4681      	mov	r9, r0
 8018676:	4620      	mov	r0, r4
 8018678:	f7f5 f956 	bl	800d928 <ucdr_deserialize_uint8_t>
 801867c:	f105 0110 	add.w	r1, r5, #16
 8018680:	4607      	mov	r7, r0
 8018682:	4620      	mov	r0, r4
 8018684:	f7f6 f802 	bl	800e68c <ucdr_deserialize_int32_t>
 8018688:	f105 0114 	add.w	r1, r5, #20
 801868c:	4606      	mov	r6, r0
 801868e:	4620      	mov	r0, r4
 8018690:	f7f5 fc7a 	bl	800df88 <ucdr_deserialize_uint32_t>
 8018694:	ea08 0809 	and.w	r8, r8, r9
 8018698:	ea07 0708 	and.w	r7, r7, r8
 801869c:	403e      	ands	r6, r7
 801869e:	4030      	ands	r0, r6
 80186a0:	b2c0      	uxtb	r0, r0
 80186a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186a6:	bf00      	nop

080186a8 <rcl_get_automatic_discovery_range>:
 80186a8:	b530      	push	{r4, r5, lr}
 80186aa:	b083      	sub	sp, #12
 80186ac:	2300      	movs	r3, #0
 80186ae:	9301      	str	r3, [sp, #4]
 80186b0:	b1c0      	cbz	r0, 80186e4 <rcl_get_automatic_discovery_range+0x3c>
 80186b2:	4604      	mov	r4, r0
 80186b4:	a901      	add	r1, sp, #4
 80186b6:	4818      	ldr	r0, [pc, #96]	@ (8018718 <rcl_get_automatic_discovery_range+0x70>)
 80186b8:	f7f9 fd04 	bl	80120c4 <rcutils_get_env>
 80186bc:	b110      	cbz	r0, 80186c4 <rcl_get_automatic_discovery_range+0x1c>
 80186be:	2001      	movs	r0, #1
 80186c0:	b003      	add	sp, #12
 80186c2:	bd30      	pop	{r4, r5, pc}
 80186c4:	9d01      	ldr	r5, [sp, #4]
 80186c6:	782b      	ldrb	r3, [r5, #0]
 80186c8:	b923      	cbnz	r3, 80186d4 <rcl_get_automatic_discovery_range+0x2c>
 80186ca:	2303      	movs	r3, #3
 80186cc:	7023      	strb	r3, [r4, #0]
 80186ce:	2000      	movs	r0, #0
 80186d0:	b003      	add	sp, #12
 80186d2:	bd30      	pop	{r4, r5, pc}
 80186d4:	4911      	ldr	r1, [pc, #68]	@ (801871c <rcl_get_automatic_discovery_range+0x74>)
 80186d6:	4628      	mov	r0, r5
 80186d8:	f7e7 fd9a 	bl	8000210 <strcmp>
 80186dc:	b928      	cbnz	r0, 80186ea <rcl_get_automatic_discovery_range+0x42>
 80186de:	2301      	movs	r3, #1
 80186e0:	7023      	strb	r3, [r4, #0]
 80186e2:	e7f4      	b.n	80186ce <rcl_get_automatic_discovery_range+0x26>
 80186e4:	200b      	movs	r0, #11
 80186e6:	b003      	add	sp, #12
 80186e8:	bd30      	pop	{r4, r5, pc}
 80186ea:	490d      	ldr	r1, [pc, #52]	@ (8018720 <rcl_get_automatic_discovery_range+0x78>)
 80186ec:	4628      	mov	r0, r5
 80186ee:	f7e7 fd8f 	bl	8000210 <strcmp>
 80186f2:	b168      	cbz	r0, 8018710 <rcl_get_automatic_discovery_range+0x68>
 80186f4:	490b      	ldr	r1, [pc, #44]	@ (8018724 <rcl_get_automatic_discovery_range+0x7c>)
 80186f6:	4628      	mov	r0, r5
 80186f8:	f7e7 fd8a 	bl	8000210 <strcmp>
 80186fc:	2800      	cmp	r0, #0
 80186fe:	d0e4      	beq.n	80186ca <rcl_get_automatic_discovery_range+0x22>
 8018700:	4909      	ldr	r1, [pc, #36]	@ (8018728 <rcl_get_automatic_discovery_range+0x80>)
 8018702:	4628      	mov	r0, r5
 8018704:	f7e7 fd84 	bl	8000210 <strcmp>
 8018708:	b910      	cbnz	r0, 8018710 <rcl_get_automatic_discovery_range+0x68>
 801870a:	2304      	movs	r3, #4
 801870c:	7023      	strb	r3, [r4, #0]
 801870e:	e7de      	b.n	80186ce <rcl_get_automatic_discovery_range+0x26>
 8018710:	2302      	movs	r3, #2
 8018712:	7023      	strb	r3, [r4, #0]
 8018714:	e7db      	b.n	80186ce <rcl_get_automatic_discovery_range+0x26>
 8018716:	bf00      	nop
 8018718:	0801ffe0 	.word	0x0801ffe0
 801871c:	08020000 	.word	0x08020000
 8018720:	08020004 	.word	0x08020004
 8018724:	08020010 	.word	0x08020010
 8018728:	08020018 	.word	0x08020018

0801872c <rcl_automatic_discovery_range_to_string>:
 801872c:	2804      	cmp	r0, #4
 801872e:	bf9a      	itte	ls
 8018730:	4b02      	ldrls	r3, [pc, #8]	@ (801873c <rcl_automatic_discovery_range_to_string+0x10>)
 8018732:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8018736:	2000      	movhi	r0, #0
 8018738:	4770      	bx	lr
 801873a:	bf00      	nop
 801873c:	08020108 	.word	0x08020108

08018740 <rcl_get_discovery_static_peers>:
 8018740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018744:	b08c      	sub	sp, #48	@ 0x30
 8018746:	2300      	movs	r3, #0
 8018748:	9304      	str	r3, [sp, #16]
 801874a:	2800      	cmp	r0, #0
 801874c:	d04e      	beq.n	80187ec <rcl_get_discovery_static_peers+0xac>
 801874e:	460d      	mov	r5, r1
 8018750:	2900      	cmp	r1, #0
 8018752:	d04b      	beq.n	80187ec <rcl_get_discovery_static_peers+0xac>
 8018754:	4604      	mov	r4, r0
 8018756:	a904      	add	r1, sp, #16
 8018758:	482d      	ldr	r0, [pc, #180]	@ (8018810 <rcl_get_discovery_static_peers+0xd0>)
 801875a:	f7f9 fcb3 	bl	80120c4 <rcutils_get_env>
 801875e:	b118      	cbz	r0, 8018768 <rcl_get_discovery_static_peers+0x28>
 8018760:	2001      	movs	r0, #1
 8018762:	b00c      	add	sp, #48	@ 0x30
 8018764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018768:	9b04      	ldr	r3, [sp, #16]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d0f8      	beq.n	8018760 <rcl_get_discovery_static_peers+0x20>
 801876e:	af05      	add	r7, sp, #20
 8018770:	4638      	mov	r0, r7
 8018772:	f000 fc33 	bl	8018fdc <rcutils_get_zero_initialized_string_array>
 8018776:	f105 0308 	add.w	r3, r5, #8
 801877a:	9703      	str	r7, [sp, #12]
 801877c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018780:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018784:	9804      	ldr	r0, [sp, #16]
 8018786:	e895 000c 	ldmia.w	r5, {r2, r3}
 801878a:	213b      	movs	r1, #59	@ 0x3b
 801878c:	f000 fb74 	bl	8018e78 <rcutils_split>
 8018790:	2800      	cmp	r0, #0
 8018792:	d1e5      	bne.n	8018760 <rcl_get_discovery_static_peers+0x20>
 8018794:	9905      	ldr	r1, [sp, #20]
 8018796:	462a      	mov	r2, r5
 8018798:	4620      	mov	r0, r4
 801879a:	f000 fc8d 	bl	80190b8 <rmw_discovery_options_init>
 801879e:	4606      	mov	r6, r0
 80187a0:	bb90      	cbnz	r0, 8018808 <rcl_get_discovery_static_peers+0xc8>
 80187a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80187a6:	f1b9 0f00 	cmp.w	r9, #0
 80187aa:	d026      	beq.n	80187fa <rcl_get_discovery_static_peers+0xba>
 80187ac:	f8dd a018 	ldr.w	sl, [sp, #24]
 80187b0:	4680      	mov	r8, r0
 80187b2:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 80187b6:	4628      	mov	r0, r5
 80187b8:	f7e7 fd8a 	bl	80002d0 <strlen>
 80187bc:	28ff      	cmp	r0, #255	@ 0xff
 80187be:	4629      	mov	r1, r5
 80187c0:	ea4f 2506 	mov.w	r5, r6, lsl #8
 80187c4:	d816      	bhi.n	80187f4 <rcl_get_discovery_static_peers+0xb4>
 80187c6:	6860      	ldr	r0, [r4, #4]
 80187c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80187cc:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 80187d0:	f003 f89b 	bl	801b90a <strncpy>
 80187d4:	6863      	ldr	r3, [r4, #4]
 80187d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80187da:	3601      	adds	r6, #1
 80187dc:	442b      	add	r3, r5
 80187de:	454e      	cmp	r6, r9
 80187e0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 80187e4:	d209      	bcs.n	80187fa <rcl_get_discovery_static_peers+0xba>
 80187e6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80187ea:	e7e2      	b.n	80187b2 <rcl_get_discovery_static_peers+0x72>
 80187ec:	200b      	movs	r0, #11
 80187ee:	b00c      	add	sp, #48	@ 0x30
 80187f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187f4:	3601      	adds	r6, #1
 80187f6:	454e      	cmp	r6, r9
 80187f8:	d3db      	bcc.n	80187b2 <rcl_get_discovery_static_peers+0x72>
 80187fa:	4638      	mov	r0, r7
 80187fc:	f000 fc2e 	bl	801905c <rcutils_string_array_fini>
 8018800:	3800      	subs	r0, #0
 8018802:	bf18      	it	ne
 8018804:	2001      	movne	r0, #1
 8018806:	e7ac      	b.n	8018762 <rcl_get_discovery_static_peers+0x22>
 8018808:	f7f6 fc30 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 801880c:	e7a9      	b.n	8018762 <rcl_get_discovery_static_peers+0x22>
 801880e:	bf00      	nop
 8018810:	08020028 	.word	0x08020028

08018814 <rcl_get_default_domain_id>:
 8018814:	b530      	push	{r4, r5, lr}
 8018816:	b083      	sub	sp, #12
 8018818:	2300      	movs	r3, #0
 801881a:	9300      	str	r3, [sp, #0]
 801881c:	b1f0      	cbz	r0, 801885c <rcl_get_default_domain_id+0x48>
 801881e:	4604      	mov	r4, r0
 8018820:	4669      	mov	r1, sp
 8018822:	4812      	ldr	r0, [pc, #72]	@ (801886c <rcl_get_default_domain_id+0x58>)
 8018824:	f7f9 fc4e 	bl	80120c4 <rcutils_get_env>
 8018828:	4602      	mov	r2, r0
 801882a:	b108      	cbz	r0, 8018830 <rcl_get_default_domain_id+0x1c>
 801882c:	2001      	movs	r0, #1
 801882e:	e004      	b.n	801883a <rcl_get_default_domain_id+0x26>
 8018830:	9800      	ldr	r0, [sp, #0]
 8018832:	b108      	cbz	r0, 8018838 <rcl_get_default_domain_id+0x24>
 8018834:	7803      	ldrb	r3, [r0, #0]
 8018836:	b913      	cbnz	r3, 801883e <rcl_get_default_domain_id+0x2a>
 8018838:	2000      	movs	r0, #0
 801883a:	b003      	add	sp, #12
 801883c:	bd30      	pop	{r4, r5, pc}
 801883e:	a901      	add	r1, sp, #4
 8018840:	9201      	str	r2, [sp, #4]
 8018842:	f001 feab 	bl	801a59c <strtoul>
 8018846:	4605      	mov	r5, r0
 8018848:	b158      	cbz	r0, 8018862 <rcl_get_default_domain_id+0x4e>
 801884a:	1c43      	adds	r3, r0, #1
 801884c:	d104      	bne.n	8018858 <rcl_get_default_domain_id+0x44>
 801884e:	f003 f935 	bl	801babc <__errno>
 8018852:	6803      	ldr	r3, [r0, #0]
 8018854:	2b22      	cmp	r3, #34	@ 0x22
 8018856:	d0e9      	beq.n	801882c <rcl_get_default_domain_id+0x18>
 8018858:	6025      	str	r5, [r4, #0]
 801885a:	e7ed      	b.n	8018838 <rcl_get_default_domain_id+0x24>
 801885c:	200b      	movs	r0, #11
 801885e:	b003      	add	sp, #12
 8018860:	bd30      	pop	{r4, r5, pc}
 8018862:	9b01      	ldr	r3, [sp, #4]
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d0f6      	beq.n	8018858 <rcl_get_default_domain_id+0x44>
 801886a:	e7df      	b.n	801882c <rcl_get_default_domain_id+0x18>
 801886c:	0802011c 	.word	0x0802011c

08018870 <rcl_expand_topic_name>:
 8018870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018874:	b08b      	sub	sp, #44	@ 0x2c
 8018876:	9306      	str	r3, [sp, #24]
 8018878:	2800      	cmp	r0, #0
 801887a:	f000 80ad 	beq.w	80189d8 <rcl_expand_topic_name+0x168>
 801887e:	460e      	mov	r6, r1
 8018880:	2900      	cmp	r1, #0
 8018882:	f000 80a9 	beq.w	80189d8 <rcl_expand_topic_name+0x168>
 8018886:	4617      	mov	r7, r2
 8018888:	2a00      	cmp	r2, #0
 801888a:	f000 80a5 	beq.w	80189d8 <rcl_expand_topic_name+0x168>
 801888e:	2b00      	cmp	r3, #0
 8018890:	f000 80a2 	beq.w	80189d8 <rcl_expand_topic_name+0x168>
 8018894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018896:	2b00      	cmp	r3, #0
 8018898:	f000 809e 	beq.w	80189d8 <rcl_expand_topic_name+0x168>
 801889c:	2200      	movs	r2, #0
 801889e:	a909      	add	r1, sp, #36	@ 0x24
 80188a0:	4680      	mov	r8, r0
 80188a2:	f000 f9f7 	bl	8018c94 <rcl_validate_topic_name>
 80188a6:	4605      	mov	r5, r0
 80188a8:	2800      	cmp	r0, #0
 80188aa:	f040 8096 	bne.w	80189da <rcl_expand_topic_name+0x16a>
 80188ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	f040 809a 	bne.w	80189ea <rcl_expand_topic_name+0x17a>
 80188b6:	4602      	mov	r2, r0
 80188b8:	a909      	add	r1, sp, #36	@ 0x24
 80188ba:	4630      	mov	r0, r6
 80188bc:	f7fa f80a 	bl	80128d4 <rmw_validate_node_name>
 80188c0:	2800      	cmp	r0, #0
 80188c2:	f040 808e 	bne.w	80189e2 <rcl_expand_topic_name+0x172>
 80188c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80188c8:	2a00      	cmp	r2, #0
 80188ca:	f040 8093 	bne.w	80189f4 <rcl_expand_topic_name+0x184>
 80188ce:	a909      	add	r1, sp, #36	@ 0x24
 80188d0:	4638      	mov	r0, r7
 80188d2:	f7f9 ffe1 	bl	8012898 <rmw_validate_namespace>
 80188d6:	2800      	cmp	r0, #0
 80188d8:	f040 8083 	bne.w	80189e2 <rcl_expand_topic_name+0x172>
 80188dc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80188de:	2d00      	cmp	r5, #0
 80188e0:	f040 80f4 	bne.w	8018acc <rcl_expand_topic_name+0x25c>
 80188e4:	217b      	movs	r1, #123	@ 0x7b
 80188e6:	4640      	mov	r0, r8
 80188e8:	f002 fff0 	bl	801b8cc <strchr>
 80188ec:	f898 3000 	ldrb.w	r3, [r8]
 80188f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80188f2:	4604      	mov	r4, r0
 80188f4:	f000 809f 	beq.w	8018a36 <rcl_expand_topic_name+0x1c6>
 80188f8:	2b7e      	cmp	r3, #126	@ 0x7e
 80188fa:	f040 80e9 	bne.w	8018ad0 <rcl_expand_topic_name+0x260>
 80188fe:	4638      	mov	r0, r7
 8018900:	f7e7 fce6 	bl	80002d0 <strlen>
 8018904:	4a82      	ldr	r2, [pc, #520]	@ (8018b10 <rcl_expand_topic_name+0x2a0>)
 8018906:	4b83      	ldr	r3, [pc, #524]	@ (8018b14 <rcl_expand_topic_name+0x2a4>)
 8018908:	2801      	cmp	r0, #1
 801890a:	bf08      	it	eq
 801890c:	4613      	moveq	r3, r2
 801890e:	9302      	str	r3, [sp, #8]
 8018910:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018912:	9300      	str	r3, [sp, #0]
 8018914:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018918:	f108 0301 	add.w	r3, r8, #1
 801891c:	9305      	str	r3, [sp, #20]
 801891e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018922:	9301      	str	r3, [sp, #4]
 8018924:	ab14      	add	r3, sp, #80	@ 0x50
 8018926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018928:	f7f9 fbf4 	bl	8012114 <rcutils_format_string_limit>
 801892c:	4682      	mov	sl, r0
 801892e:	2800      	cmp	r0, #0
 8018930:	f000 80d1 	beq.w	8018ad6 <rcl_expand_topic_name+0x266>
 8018934:	2c00      	cmp	r4, #0
 8018936:	f000 8085 	beq.w	8018a44 <rcl_expand_topic_name+0x1d4>
 801893a:	217b      	movs	r1, #123	@ 0x7b
 801893c:	f002 ffc6 	bl	801b8cc <strchr>
 8018940:	46d1      	mov	r9, sl
 8018942:	4604      	mov	r4, r0
 8018944:	9507      	str	r5, [sp, #28]
 8018946:	464d      	mov	r5, r9
 8018948:	2c00      	cmp	r4, #0
 801894a:	f000 80a0 	beq.w	8018a8e <rcl_expand_topic_name+0x21e>
 801894e:	217d      	movs	r1, #125	@ 0x7d
 8018950:	4628      	mov	r0, r5
 8018952:	f002 ffbb 	bl	801b8cc <strchr>
 8018956:	eba0 0904 	sub.w	r9, r0, r4
 801895a:	f109 0b01 	add.w	fp, r9, #1
 801895e:	486e      	ldr	r0, [pc, #440]	@ (8018b18 <rcl_expand_topic_name+0x2a8>)
 8018960:	465a      	mov	r2, fp
 8018962:	4621      	mov	r1, r4
 8018964:	f002 ffbf 	bl	801b8e6 <strncmp>
 8018968:	2800      	cmp	r0, #0
 801896a:	d069      	beq.n	8018a40 <rcl_expand_topic_name+0x1d0>
 801896c:	486b      	ldr	r0, [pc, #428]	@ (8018b1c <rcl_expand_topic_name+0x2ac>)
 801896e:	465a      	mov	r2, fp
 8018970:	4621      	mov	r1, r4
 8018972:	f002 ffb8 	bl	801b8e6 <strncmp>
 8018976:	b130      	cbz	r0, 8018986 <rcl_expand_topic_name+0x116>
 8018978:	4869      	ldr	r0, [pc, #420]	@ (8018b20 <rcl_expand_topic_name+0x2b0>)
 801897a:	465a      	mov	r2, fp
 801897c:	4621      	mov	r1, r4
 801897e:	f002 ffb2 	bl	801b8e6 <strncmp>
 8018982:	2800      	cmp	r0, #0
 8018984:	d138      	bne.n	80189f8 <rcl_expand_topic_name+0x188>
 8018986:	46b9      	mov	r9, r7
 8018988:	ab16      	add	r3, sp, #88	@ 0x58
 801898a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801898e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018992:	ab14      	add	r3, sp, #80	@ 0x50
 8018994:	4620      	mov	r0, r4
 8018996:	cb0c      	ldmia	r3, {r2, r3}
 8018998:	4659      	mov	r1, fp
 801899a:	f7f9 fd0f 	bl	80123bc <rcutils_strndup>
 801899e:	4604      	mov	r4, r0
 80189a0:	2800      	cmp	r0, #0
 80189a2:	f000 809d 	beq.w	8018ae0 <rcl_expand_topic_name+0x270>
 80189a6:	464a      	mov	r2, r9
 80189a8:	4628      	mov	r0, r5
 80189aa:	ab14      	add	r3, sp, #80	@ 0x50
 80189ac:	4621      	mov	r1, r4
 80189ae:	f7f9 fbeb 	bl	8012188 <rcutils_repl_str>
 80189b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189b4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80189b6:	4605      	mov	r5, r0
 80189b8:	4620      	mov	r0, r4
 80189ba:	4798      	blx	r3
 80189bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80189c0:	4650      	mov	r0, sl
 80189c2:	4798      	blx	r3
 80189c4:	2d00      	cmp	r5, #0
 80189c6:	f000 8086 	beq.w	8018ad6 <rcl_expand_topic_name+0x266>
 80189ca:	217b      	movs	r1, #123	@ 0x7b
 80189cc:	4628      	mov	r0, r5
 80189ce:	f002 ff7d 	bl	801b8cc <strchr>
 80189d2:	46aa      	mov	sl, r5
 80189d4:	4604      	mov	r4, r0
 80189d6:	e7b7      	b.n	8018948 <rcl_expand_topic_name+0xd8>
 80189d8:	250b      	movs	r5, #11
 80189da:	4628      	mov	r0, r5
 80189dc:	b00b      	add	sp, #44	@ 0x2c
 80189de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e2:	f7f6 fb43 	bl	800f06c <rcl_convert_rmw_ret_to_rcl_ret>
 80189e6:	4605      	mov	r5, r0
 80189e8:	e7f7      	b.n	80189da <rcl_expand_topic_name+0x16a>
 80189ea:	2567      	movs	r5, #103	@ 0x67
 80189ec:	4628      	mov	r0, r5
 80189ee:	b00b      	add	sp, #44	@ 0x2c
 80189f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189f4:	25c9      	movs	r5, #201	@ 0xc9
 80189f6:	e7f0      	b.n	80189da <rcl_expand_topic_name+0x16a>
 80189f8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80189fc:	9806      	ldr	r0, [sp, #24]
 80189fe:	1c61      	adds	r1, r4, #1
 8018a00:	f7f9 fdf8 	bl	80125f4 <rcutils_string_map_getn>
 8018a04:	4681      	mov	r9, r0
 8018a06:	2800      	cmp	r0, #0
 8018a08:	d1be      	bne.n	8018988 <rcl_expand_topic_name+0x118>
 8018a0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018a0c:	ab16      	add	r3, sp, #88	@ 0x58
 8018a0e:	6010      	str	r0, [r2, #0]
 8018a10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018a14:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018a18:	ab14      	add	r3, sp, #80	@ 0x50
 8018a1a:	cb0c      	ldmia	r3, {r2, r3}
 8018a1c:	4659      	mov	r1, fp
 8018a1e:	4620      	mov	r0, r4
 8018a20:	f7f9 fccc 	bl	80123bc <rcutils_strndup>
 8018a24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018a26:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a28:	4798      	blx	r3
 8018a2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018a2c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a2e:	4650      	mov	r0, sl
 8018a30:	4798      	blx	r3
 8018a32:	2569      	movs	r5, #105	@ 0x69
 8018a34:	e7d1      	b.n	80189da <rcl_expand_topic_name+0x16a>
 8018a36:	2800      	cmp	r0, #0
 8018a38:	d059      	beq.n	8018aee <rcl_expand_topic_name+0x27e>
 8018a3a:	46c1      	mov	r9, r8
 8018a3c:	46aa      	mov	sl, r5
 8018a3e:	e781      	b.n	8018944 <rcl_expand_topic_name+0xd4>
 8018a40:	46b1      	mov	r9, r6
 8018a42:	e7a1      	b.n	8018988 <rcl_expand_topic_name+0x118>
 8018a44:	f89a 3000 	ldrb.w	r3, [sl]
 8018a48:	2b2f      	cmp	r3, #47	@ 0x2f
 8018a4a:	d01c      	beq.n	8018a86 <rcl_expand_topic_name+0x216>
 8018a4c:	4638      	mov	r0, r7
 8018a4e:	f7e7 fc3f 	bl	80002d0 <strlen>
 8018a52:	4a34      	ldr	r2, [pc, #208]	@ (8018b24 <rcl_expand_topic_name+0x2b4>)
 8018a54:	4b34      	ldr	r3, [pc, #208]	@ (8018b28 <rcl_expand_topic_name+0x2b8>)
 8018a56:	f8cd a010 	str.w	sl, [sp, #16]
 8018a5a:	2801      	cmp	r0, #1
 8018a5c:	bf18      	it	ne
 8018a5e:	4613      	movne	r3, r2
 8018a60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018a64:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018a68:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018a6a:	9703      	str	r7, [sp, #12]
 8018a6c:	9200      	str	r2, [sp, #0]
 8018a6e:	ab14      	add	r3, sp, #80	@ 0x50
 8018a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018a72:	f7f9 fb4f 	bl	8012114 <rcutils_format_string_limit>
 8018a76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018a78:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	4650      	mov	r0, sl
 8018a7e:	4798      	blx	r3
 8018a80:	46a2      	mov	sl, r4
 8018a82:	4653      	mov	r3, sl
 8018a84:	b33b      	cbz	r3, 8018ad6 <rcl_expand_topic_name+0x266>
 8018a86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a88:	f8c3 a000 	str.w	sl, [r3]
 8018a8c:	e7a5      	b.n	80189da <rcl_expand_topic_name+0x16a>
 8018a8e:	4653      	mov	r3, sl
 8018a90:	9d07      	ldr	r5, [sp, #28]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d1d6      	bne.n	8018a44 <rcl_expand_topic_name+0x1d4>
 8018a96:	f898 3000 	ldrb.w	r3, [r8]
 8018a9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8018a9c:	d0f3      	beq.n	8018a86 <rcl_expand_topic_name+0x216>
 8018a9e:	4638      	mov	r0, r7
 8018aa0:	f7e7 fc16 	bl	80002d0 <strlen>
 8018aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8018b24 <rcl_expand_topic_name+0x2b4>)
 8018aa6:	4b20      	ldr	r3, [pc, #128]	@ (8018b28 <rcl_expand_topic_name+0x2b8>)
 8018aa8:	f8cd 8010 	str.w	r8, [sp, #16]
 8018aac:	2801      	cmp	r0, #1
 8018aae:	bf18      	it	ne
 8018ab0:	4613      	movne	r3, r2
 8018ab2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018ab6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018aba:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018abc:	9703      	str	r7, [sp, #12]
 8018abe:	9200      	str	r2, [sp, #0]
 8018ac0:	ab14      	add	r3, sp, #80	@ 0x50
 8018ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018ac4:	f7f9 fb26 	bl	8012114 <rcutils_format_string_limit>
 8018ac8:	4682      	mov	sl, r0
 8018aca:	e7da      	b.n	8018a82 <rcl_expand_topic_name+0x212>
 8018acc:	25ca      	movs	r5, #202	@ 0xca
 8018ace:	e784      	b.n	80189da <rcl_expand_topic_name+0x16a>
 8018ad0:	2800      	cmp	r0, #0
 8018ad2:	d1b2      	bne.n	8018a3a <rcl_expand_topic_name+0x1ca>
 8018ad4:	e7e3      	b.n	8018a9e <rcl_expand_topic_name+0x22e>
 8018ad6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018ad8:	2300      	movs	r3, #0
 8018ada:	6013      	str	r3, [r2, #0]
 8018adc:	250a      	movs	r5, #10
 8018ade:	e77c      	b.n	80189da <rcl_expand_topic_name+0x16a>
 8018ae0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018ae4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018ae6:	6014      	str	r4, [r2, #0]
 8018ae8:	4650      	mov	r0, sl
 8018aea:	4798      	blx	r3
 8018aec:	e7f6      	b.n	8018adc <rcl_expand_topic_name+0x26c>
 8018aee:	ab17      	add	r3, sp, #92	@ 0x5c
 8018af0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018af4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018af8:	ab14      	add	r3, sp, #80	@ 0x50
 8018afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018afc:	4640      	mov	r0, r8
 8018afe:	f7f9 fc27 	bl	8012350 <rcutils_strdup>
 8018b02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018b04:	6018      	str	r0, [r3, #0]
 8018b06:	2800      	cmp	r0, #0
 8018b08:	f47f af67 	bne.w	80189da <rcl_expand_topic_name+0x16a>
 8018b0c:	e7e6      	b.n	8018adc <rcl_expand_topic_name+0x26c>
 8018b0e:	bf00      	nop
 8018b10:	0801fc18 	.word	0x0801fc18
 8018b14:	0802012c 	.word	0x0802012c
 8018b18:	08020134 	.word	0x08020134
 8018b1c:	0802013c 	.word	0x0802013c
 8018b20:	08020144 	.word	0x08020144
 8018b24:	0801f620 	.word	0x0801f620
 8018b28:	0801f618 	.word	0x0801f618

08018b2c <rcl_get_default_topic_name_substitutions>:
 8018b2c:	2800      	cmp	r0, #0
 8018b2e:	bf0c      	ite	eq
 8018b30:	200b      	moveq	r0, #11
 8018b32:	2000      	movne	r0, #0
 8018b34:	4770      	bx	lr
 8018b36:	bf00      	nop

08018b38 <rcl_get_zero_initialized_guard_condition>:
 8018b38:	4a03      	ldr	r2, [pc, #12]	@ (8018b48 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b40:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b44:	4618      	mov	r0, r3
 8018b46:	4770      	bx	lr
 8018b48:	08020150 	.word	0x08020150

08018b4c <rcl_guard_condition_init_from_rmw>:
 8018b4c:	b082      	sub	sp, #8
 8018b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b52:	b086      	sub	sp, #24
 8018b54:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018b58:	4604      	mov	r4, r0
 8018b5a:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018b5e:	460e      	mov	r6, r1
 8018b60:	4617      	mov	r7, r2
 8018b62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018b66:	f10d 0e04 	add.w	lr, sp, #4
 8018b6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018b6e:	f8dc 3000 	ldr.w	r3, [ip]
 8018b72:	f8ce 3000 	str.w	r3, [lr]
 8018b76:	a801      	add	r0, sp, #4
 8018b78:	f7f4 fbb2 	bl	800d2e0 <rcutils_allocator_is_valid>
 8018b7c:	b350      	cbz	r0, 8018bd4 <rcl_guard_condition_init_from_rmw+0x88>
 8018b7e:	b34c      	cbz	r4, 8018bd4 <rcl_guard_condition_init_from_rmw+0x88>
 8018b80:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018b84:	f1b8 0f00 	cmp.w	r8, #0
 8018b88:	d11e      	bne.n	8018bc8 <rcl_guard_condition_init_from_rmw+0x7c>
 8018b8a:	b31f      	cbz	r7, 8018bd4 <rcl_guard_condition_init_from_rmw+0x88>
 8018b8c:	4638      	mov	r0, r7
 8018b8e:	f7f6 fa8d 	bl	800f0ac <rcl_context_is_valid>
 8018b92:	b328      	cbz	r0, 8018be0 <rcl_guard_condition_init_from_rmw+0x94>
 8018b94:	9b01      	ldr	r3, [sp, #4]
 8018b96:	9905      	ldr	r1, [sp, #20]
 8018b98:	201c      	movs	r0, #28
 8018b9a:	4798      	blx	r3
 8018b9c:	4605      	mov	r5, r0
 8018b9e:	6060      	str	r0, [r4, #4]
 8018ba0:	b358      	cbz	r0, 8018bfa <rcl_guard_condition_init_from_rmw+0xae>
 8018ba2:	b1fe      	cbz	r6, 8018be4 <rcl_guard_condition_init_from_rmw+0x98>
 8018ba4:	6006      	str	r6, [r0, #0]
 8018ba6:	f880 8004 	strb.w	r8, [r0, #4]
 8018baa:	ac01      	add	r4, sp, #4
 8018bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018bae:	f105 0c08 	add.w	ip, r5, #8
 8018bb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018bb6:	6823      	ldr	r3, [r4, #0]
 8018bb8:	f8cc 3000 	str.w	r3, [ip]
 8018bbc:	2000      	movs	r0, #0
 8018bbe:	b006      	add	sp, #24
 8018bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bc4:	b002      	add	sp, #8
 8018bc6:	4770      	bx	lr
 8018bc8:	2064      	movs	r0, #100	@ 0x64
 8018bca:	b006      	add	sp, #24
 8018bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bd0:	b002      	add	sp, #8
 8018bd2:	4770      	bx	lr
 8018bd4:	200b      	movs	r0, #11
 8018bd6:	b006      	add	sp, #24
 8018bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bdc:	b002      	add	sp, #8
 8018bde:	4770      	bx	lr
 8018be0:	2065      	movs	r0, #101	@ 0x65
 8018be2:	e7f2      	b.n	8018bca <rcl_guard_condition_init_from_rmw+0x7e>
 8018be4:	6838      	ldr	r0, [r7, #0]
 8018be6:	3028      	adds	r0, #40	@ 0x28
 8018be8:	f000 fc24 	bl	8019434 <rmw_create_guard_condition>
 8018bec:	6028      	str	r0, [r5, #0]
 8018bee:	6865      	ldr	r5, [r4, #4]
 8018bf0:	682e      	ldr	r6, [r5, #0]
 8018bf2:	b126      	cbz	r6, 8018bfe <rcl_guard_condition_init_from_rmw+0xb2>
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	712b      	strb	r3, [r5, #4]
 8018bf8:	e7d7      	b.n	8018baa <rcl_guard_condition_init_from_rmw+0x5e>
 8018bfa:	200a      	movs	r0, #10
 8018bfc:	e7e5      	b.n	8018bca <rcl_guard_condition_init_from_rmw+0x7e>
 8018bfe:	4628      	mov	r0, r5
 8018c00:	9b02      	ldr	r3, [sp, #8]
 8018c02:	9905      	ldr	r1, [sp, #20]
 8018c04:	4798      	blx	r3
 8018c06:	2001      	movs	r0, #1
 8018c08:	6066      	str	r6, [r4, #4]
 8018c0a:	e7de      	b.n	8018bca <rcl_guard_condition_init_from_rmw+0x7e>

08018c0c <rcl_guard_condition_fini>:
 8018c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c0e:	b1d8      	cbz	r0, 8018c48 <rcl_guard_condition_fini+0x3c>
 8018c10:	4604      	mov	r4, r0
 8018c12:	6840      	ldr	r0, [r0, #4]
 8018c14:	b158      	cbz	r0, 8018c2e <rcl_guard_condition_fini+0x22>
 8018c16:	6803      	ldr	r3, [r0, #0]
 8018c18:	68c6      	ldr	r6, [r0, #12]
 8018c1a:	6987      	ldr	r7, [r0, #24]
 8018c1c:	b153      	cbz	r3, 8018c34 <rcl_guard_condition_fini+0x28>
 8018c1e:	7905      	ldrb	r5, [r0, #4]
 8018c20:	b955      	cbnz	r5, 8018c38 <rcl_guard_condition_fini+0x2c>
 8018c22:	4639      	mov	r1, r7
 8018c24:	47b0      	blx	r6
 8018c26:	2300      	movs	r3, #0
 8018c28:	6063      	str	r3, [r4, #4]
 8018c2a:	4628      	mov	r0, r5
 8018c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c2e:	4605      	mov	r5, r0
 8018c30:	4628      	mov	r0, r5
 8018c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c34:	461d      	mov	r5, r3
 8018c36:	e7f4      	b.n	8018c22 <rcl_guard_condition_fini+0x16>
 8018c38:	4618      	mov	r0, r3
 8018c3a:	f000 fc0f 	bl	801945c <rmw_destroy_guard_condition>
 8018c3e:	1e05      	subs	r5, r0, #0
 8018c40:	bf18      	it	ne
 8018c42:	2501      	movne	r5, #1
 8018c44:	6860      	ldr	r0, [r4, #4]
 8018c46:	e7ec      	b.n	8018c22 <rcl_guard_condition_fini+0x16>
 8018c48:	250b      	movs	r5, #11
 8018c4a:	4628      	mov	r0, r5
 8018c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c4e:	bf00      	nop

08018c50 <rcl_guard_condition_get_default_options>:
 8018c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c52:	b087      	sub	sp, #28
 8018c54:	4606      	mov	r6, r0
 8018c56:	4668      	mov	r0, sp
 8018c58:	f7f4 fb16 	bl	800d288 <rcutils_get_default_allocator>
 8018c5c:	46ee      	mov	lr, sp
 8018c5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018c62:	4c08      	ldr	r4, [pc, #32]	@ (8018c84 <rcl_guard_condition_get_default_options+0x34>)
 8018c64:	46a4      	mov	ip, r4
 8018c66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018c6a:	4625      	mov	r5, r4
 8018c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c6e:	4634      	mov	r4, r6
 8018c70:	f8de 7000 	ldr.w	r7, [lr]
 8018c74:	f8cc 7000 	str.w	r7, [ip]
 8018c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018c7a:	4630      	mov	r0, r6
 8018c7c:	6027      	str	r7, [r4, #0]
 8018c7e:	b007      	add	sp, #28
 8018c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c82:	bf00      	nop
 8018c84:	2001785c 	.word	0x2001785c

08018c88 <rcl_guard_condition_get_rmw_handle>:
 8018c88:	b110      	cbz	r0, 8018c90 <rcl_guard_condition_get_rmw_handle+0x8>
 8018c8a:	6840      	ldr	r0, [r0, #4]
 8018c8c:	b100      	cbz	r0, 8018c90 <rcl_guard_condition_get_rmw_handle+0x8>
 8018c8e:	6800      	ldr	r0, [r0, #0]
 8018c90:	4770      	bx	lr
 8018c92:	bf00      	nop

08018c94 <rcl_validate_topic_name>:
 8018c94:	2800      	cmp	r0, #0
 8018c96:	d06b      	beq.n	8018d70 <rcl_validate_topic_name+0xdc>
 8018c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c9c:	460d      	mov	r5, r1
 8018c9e:	2900      	cmp	r1, #0
 8018ca0:	d06d      	beq.n	8018d7e <rcl_validate_topic_name+0xea>
 8018ca2:	4616      	mov	r6, r2
 8018ca4:	4604      	mov	r4, r0
 8018ca6:	f7e7 fb13 	bl	80002d0 <strlen>
 8018caa:	b190      	cbz	r0, 8018cd2 <rcl_validate_topic_name+0x3e>
 8018cac:	7821      	ldrb	r1, [r4, #0]
 8018cae:	4a71      	ldr	r2, [pc, #452]	@ (8018e74 <rcl_validate_topic_name+0x1e0>)
 8018cb0:	5c53      	ldrb	r3, [r2, r1]
 8018cb2:	f013 0304 	ands.w	r3, r3, #4
 8018cb6:	d15d      	bne.n	8018d74 <rcl_validate_topic_name+0xe0>
 8018cb8:	1e47      	subs	r7, r0, #1
 8018cba:	f814 c007 	ldrb.w	ip, [r4, r7]
 8018cbe:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8018cc2:	d10d      	bne.n	8018ce0 <rcl_validate_topic_name+0x4c>
 8018cc4:	2302      	movs	r3, #2
 8018cc6:	602b      	str	r3, [r5, #0]
 8018cc8:	b146      	cbz	r6, 8018cdc <rcl_validate_topic_name+0x48>
 8018cca:	6037      	str	r7, [r6, #0]
 8018ccc:	2000      	movs	r0, #0
 8018cce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cd2:	2301      	movs	r3, #1
 8018cd4:	602b      	str	r3, [r5, #0]
 8018cd6:	b10e      	cbz	r6, 8018cdc <rcl_validate_topic_name+0x48>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	6033      	str	r3, [r6, #0]
 8018cdc:	2000      	movs	r0, #0
 8018cde:	e7f6      	b.n	8018cce <rcl_validate_topic_name+0x3a>
 8018ce0:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8018ce4:	469a      	mov	sl, r3
 8018ce6:	469e      	mov	lr, r3
 8018ce8:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8018cec:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 8018cf0:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8018cf4:	d85b      	bhi.n	8018dae <rcl_validate_topic_name+0x11a>
 8018cf6:	e8df f00c 	tbb	[pc, ip]
 8018cfa:	4463      	.short	0x4463
 8018cfc:	44444444 	.word	0x44444444
 8018d00:	44444444 	.word	0x44444444
 8018d04:	5a5a5a44 	.word	0x5a5a5a44
 8018d08:	5a5a5a5a 	.word	0x5a5a5a5a
 8018d0c:	44444444 	.word	0x44444444
 8018d10:	44444444 	.word	0x44444444
 8018d14:	44444444 	.word	0x44444444
 8018d18:	44444444 	.word	0x44444444
 8018d1c:	44444444 	.word	0x44444444
 8018d20:	44444444 	.word	0x44444444
 8018d24:	5a5a4444 	.word	0x5a5a4444
 8018d28:	5a2e5a5a 	.word	0x5a2e5a5a
 8018d2c:	44444444 	.word	0x44444444
 8018d30:	44444444 	.word	0x44444444
 8018d34:	44444444 	.word	0x44444444
 8018d38:	44444444 	.word	0x44444444
 8018d3c:	44444444 	.word	0x44444444
 8018d40:	44444444 	.word	0x44444444
 8018d44:	5a284444 	.word	0x5a284444
 8018d48:	6b73      	.short	0x6b73
 8018d4a:	f1ba 0f00 	cmp.w	sl, #0
 8018d4e:	d13a      	bne.n	8018dc6 <rcl_validate_topic_name+0x132>
 8018d50:	4673      	mov	r3, lr
 8018d52:	f04f 0a01 	mov.w	sl, #1
 8018d56:	f10e 0e01 	add.w	lr, lr, #1
 8018d5a:	4570      	cmp	r0, lr
 8018d5c:	d1c4      	bne.n	8018ce8 <rcl_validate_topic_name+0x54>
 8018d5e:	f1ba 0f00 	cmp.w	sl, #0
 8018d62:	d048      	beq.n	8018df6 <rcl_validate_topic_name+0x162>
 8018d64:	2205      	movs	r2, #5
 8018d66:	602a      	str	r2, [r5, #0]
 8018d68:	2e00      	cmp	r6, #0
 8018d6a:	d0b7      	beq.n	8018cdc <rcl_validate_topic_name+0x48>
 8018d6c:	6033      	str	r3, [r6, #0]
 8018d6e:	e7b5      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018d70:	200b      	movs	r0, #11
 8018d72:	4770      	bx	lr
 8018d74:	2304      	movs	r3, #4
 8018d76:	602b      	str	r3, [r5, #0]
 8018d78:	2e00      	cmp	r6, #0
 8018d7a:	d1ad      	bne.n	8018cd8 <rcl_validate_topic_name+0x44>
 8018d7c:	e7ae      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018d7e:	200b      	movs	r0, #11
 8018d80:	e7a5      	b.n	8018cce <rcl_validate_topic_name+0x3a>
 8018d82:	f812 c009 	ldrb.w	ip, [r2, r9]
 8018d86:	f01c 0f04 	tst.w	ip, #4
 8018d8a:	d0e4      	beq.n	8018d56 <rcl_validate_topic_name+0xc2>
 8018d8c:	f1ba 0f00 	cmp.w	sl, #0
 8018d90:	d0e1      	beq.n	8018d56 <rcl_validate_topic_name+0xc2>
 8018d92:	f1be 0f00 	cmp.w	lr, #0
 8018d96:	d0de      	beq.n	8018d56 <rcl_validate_topic_name+0xc2>
 8018d98:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 8018d9c:	4563      	cmp	r3, ip
 8018d9e:	d1da      	bne.n	8018d56 <rcl_validate_topic_name+0xc2>
 8018da0:	2309      	movs	r3, #9
 8018da2:	602b      	str	r3, [r5, #0]
 8018da4:	2e00      	cmp	r6, #0
 8018da6:	d099      	beq.n	8018cdc <rcl_validate_topic_name+0x48>
 8018da8:	f8c6 e000 	str.w	lr, [r6]
 8018dac:	e796      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018dae:	f1ba 0f00 	cmp.w	sl, #0
 8018db2:	bf0c      	ite	eq
 8018db4:	2303      	moveq	r3, #3
 8018db6:	2308      	movne	r3, #8
 8018db8:	602b      	str	r3, [r5, #0]
 8018dba:	2e00      	cmp	r6, #0
 8018dbc:	d1f4      	bne.n	8018da8 <rcl_validate_topic_name+0x114>
 8018dbe:	e78d      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018dc0:	f1ba 0f00 	cmp.w	sl, #0
 8018dc4:	d0c7      	beq.n	8018d56 <rcl_validate_topic_name+0xc2>
 8018dc6:	2308      	movs	r3, #8
 8018dc8:	602b      	str	r3, [r5, #0]
 8018dca:	2e00      	cmp	r6, #0
 8018dcc:	d1ec      	bne.n	8018da8 <rcl_validate_topic_name+0x114>
 8018dce:	e785      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018dd0:	f1be 0f00 	cmp.w	lr, #0
 8018dd4:	d0bf      	beq.n	8018d56 <rcl_validate_topic_name+0xc2>
 8018dd6:	2306      	movs	r3, #6
 8018dd8:	602b      	str	r3, [r5, #0]
 8018dda:	2e00      	cmp	r6, #0
 8018ddc:	d1e4      	bne.n	8018da8 <rcl_validate_topic_name+0x114>
 8018dde:	e77d      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018de0:	f1ba 0f00 	cmp.w	sl, #0
 8018de4:	d104      	bne.n	8018df0 <rcl_validate_topic_name+0x15c>
 8018de6:	2305      	movs	r3, #5
 8018de8:	602b      	str	r3, [r5, #0]
 8018dea:	2e00      	cmp	r6, #0
 8018dec:	d1dc      	bne.n	8018da8 <rcl_validate_topic_name+0x114>
 8018dee:	e775      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018df0:	f04f 0a00 	mov.w	sl, #0
 8018df4:	e7af      	b.n	8018d56 <rcl_validate_topic_name+0xc2>
 8018df6:	297e      	cmp	r1, #126	@ 0x7e
 8018df8:	d01d      	beq.n	8018e36 <rcl_validate_topic_name+0x1a2>
 8018dfa:	2101      	movs	r1, #1
 8018dfc:	e006      	b.n	8018e0c <rcl_validate_topic_name+0x178>
 8018dfe:	458e      	cmp	lr, r1
 8018e00:	f104 0401 	add.w	r4, r4, #1
 8018e04:	f101 0301 	add.w	r3, r1, #1
 8018e08:	d912      	bls.n	8018e30 <rcl_validate_topic_name+0x19c>
 8018e0a:	4619      	mov	r1, r3
 8018e0c:	4557      	cmp	r7, sl
 8018e0e:	f10a 0a01 	add.w	sl, sl, #1
 8018e12:	d0f4      	beq.n	8018dfe <rcl_validate_topic_name+0x16a>
 8018e14:	7823      	ldrb	r3, [r4, #0]
 8018e16:	2b2f      	cmp	r3, #47	@ 0x2f
 8018e18:	d1f1      	bne.n	8018dfe <rcl_validate_topic_name+0x16a>
 8018e1a:	7863      	ldrb	r3, [r4, #1]
 8018e1c:	5cd3      	ldrb	r3, [r2, r3]
 8018e1e:	075b      	lsls	r3, r3, #29
 8018e20:	d5ed      	bpl.n	8018dfe <rcl_validate_topic_name+0x16a>
 8018e22:	2304      	movs	r3, #4
 8018e24:	602b      	str	r3, [r5, #0]
 8018e26:	2e00      	cmp	r6, #0
 8018e28:	f43f af58 	beq.w	8018cdc <rcl_validate_topic_name+0x48>
 8018e2c:	6031      	str	r1, [r6, #0]
 8018e2e:	e755      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018e30:	2300      	movs	r3, #0
 8018e32:	602b      	str	r3, [r5, #0]
 8018e34:	e752      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018e36:	4653      	mov	r3, sl
 8018e38:	2101      	movs	r1, #1
 8018e3a:	e00a      	b.n	8018e52 <rcl_validate_topic_name+0x1be>
 8018e3c:	2b01      	cmp	r3, #1
 8018e3e:	d012      	beq.n	8018e66 <rcl_validate_topic_name+0x1d2>
 8018e40:	458e      	cmp	lr, r1
 8018e42:	f103 0301 	add.w	r3, r3, #1
 8018e46:	f104 0401 	add.w	r4, r4, #1
 8018e4a:	f101 0001 	add.w	r0, r1, #1
 8018e4e:	d9ef      	bls.n	8018e30 <rcl_validate_topic_name+0x19c>
 8018e50:	4601      	mov	r1, r0
 8018e52:	429f      	cmp	r7, r3
 8018e54:	d0f4      	beq.n	8018e40 <rcl_validate_topic_name+0x1ac>
 8018e56:	7820      	ldrb	r0, [r4, #0]
 8018e58:	282f      	cmp	r0, #47	@ 0x2f
 8018e5a:	d1ef      	bne.n	8018e3c <rcl_validate_topic_name+0x1a8>
 8018e5c:	7860      	ldrb	r0, [r4, #1]
 8018e5e:	5c10      	ldrb	r0, [r2, r0]
 8018e60:	0740      	lsls	r0, r0, #29
 8018e62:	d5ed      	bpl.n	8018e40 <rcl_validate_topic_name+0x1ac>
 8018e64:	e7dd      	b.n	8018e22 <rcl_validate_topic_name+0x18e>
 8018e66:	2207      	movs	r2, #7
 8018e68:	602a      	str	r2, [r5, #0]
 8018e6a:	2e00      	cmp	r6, #0
 8018e6c:	f47f af7e 	bne.w	8018d6c <rcl_validate_topic_name+0xd8>
 8018e70:	e734      	b.n	8018cdc <rcl_validate_topic_name+0x48>
 8018e72:	bf00      	nop
 8018e74:	080202d6 	.word	0x080202d6

08018e78 <rcutils_split>:
 8018e78:	b082      	sub	sp, #8
 8018e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e7e:	b08b      	sub	sp, #44	@ 0x2c
 8018e80:	ac14      	add	r4, sp, #80	@ 0x50
 8018e82:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8018e84:	e884 000c 	stmia.w	r4, {r2, r3}
 8018e88:	2f00      	cmp	r7, #0
 8018e8a:	f000 809f 	beq.w	8018fcc <rcutils_split+0x154>
 8018e8e:	4606      	mov	r6, r0
 8018e90:	2800      	cmp	r0, #0
 8018e92:	d071      	beq.n	8018f78 <rcutils_split+0x100>
 8018e94:	7804      	ldrb	r4, [r0, #0]
 8018e96:	2c00      	cmp	r4, #0
 8018e98:	d06e      	beq.n	8018f78 <rcutils_split+0x100>
 8018e9a:	460d      	mov	r5, r1
 8018e9c:	f7e7 fa18 	bl	80002d0 <strlen>
 8018ea0:	1833      	adds	r3, r6, r0
 8018ea2:	1b64      	subs	r4, r4, r5
 8018ea4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018ea8:	4680      	mov	r8, r0
 8018eaa:	fab4 f484 	clz	r4, r4
 8018eae:	0964      	lsrs	r4, r4, #5
 8018eb0:	42ab      	cmp	r3, r5
 8018eb2:	bf08      	it	eq
 8018eb4:	f1a8 0801 	subeq.w	r8, r8, #1
 8018eb8:	4544      	cmp	r4, r8
 8018eba:	d278      	bcs.n	8018fae <rcutils_split+0x136>
 8018ebc:	1933      	adds	r3, r6, r4
 8018ebe:	eb06 0008 	add.w	r0, r6, r8
 8018ec2:	2101      	movs	r1, #1
 8018ec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ec8:	42aa      	cmp	r2, r5
 8018eca:	bf08      	it	eq
 8018ecc:	3101      	addeq	r1, #1
 8018ece:	4283      	cmp	r3, r0
 8018ed0:	d1f8      	bne.n	8018ec4 <rcutils_split+0x4c>
 8018ed2:	aa14      	add	r2, sp, #80	@ 0x50
 8018ed4:	4638      	mov	r0, r7
 8018ed6:	f000 f89f 	bl	8019018 <rcutils_string_array_init>
 8018eda:	4681      	mov	r9, r0
 8018edc:	2800      	cmp	r0, #0
 8018ede:	d159      	bne.n	8018f94 <rcutils_split+0x11c>
 8018ee0:	687a      	ldr	r2, [r7, #4]
 8018ee2:	46a2      	mov	sl, r4
 8018ee4:	e002      	b.n	8018eec <rcutils_split+0x74>
 8018ee6:	3401      	adds	r4, #1
 8018ee8:	4544      	cmp	r4, r8
 8018eea:	d222      	bcs.n	8018f32 <rcutils_split+0xba>
 8018eec:	5d33      	ldrb	r3, [r6, r4]
 8018eee:	42ab      	cmp	r3, r5
 8018ef0:	d1f9      	bne.n	8018ee6 <rcutils_split+0x6e>
 8018ef2:	4554      	cmp	r4, sl
 8018ef4:	eba4 0b0a 	sub.w	fp, r4, sl
 8018ef8:	d037      	beq.n	8018f6a <rcutils_split+0xf2>
 8018efa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018efc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018efe:	9201      	str	r2, [sp, #4]
 8018f00:	f10b 0002 	add.w	r0, fp, #2
 8018f04:	4798      	blx	r3
 8018f06:	9a01      	ldr	r2, [sp, #4]
 8018f08:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 8018f0c:	687a      	ldr	r2, [r7, #4]
 8018f0e:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8018f12:	eb06 030a 	add.w	r3, r6, sl
 8018f16:	f10b 0101 	add.w	r1, fp, #1
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	d038      	beq.n	8018f90 <rcutils_split+0x118>
 8018f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8018fd8 <rcutils_split+0x160>)
 8018f20:	f002 fb3e 	bl	801b5a0 <sniprintf>
 8018f24:	687a      	ldr	r2, [r7, #4]
 8018f26:	f109 0901 	add.w	r9, r9, #1
 8018f2a:	3401      	adds	r4, #1
 8018f2c:	4544      	cmp	r4, r8
 8018f2e:	46a2      	mov	sl, r4
 8018f30:	d3dc      	bcc.n	8018eec <rcutils_split+0x74>
 8018f32:	4554      	cmp	r4, sl
 8018f34:	d043      	beq.n	8018fbe <rcutils_split+0x146>
 8018f36:	eba4 040a 	sub.w	r4, r4, sl
 8018f3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018f3c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018f3e:	9201      	str	r2, [sp, #4]
 8018f40:	1ca0      	adds	r0, r4, #2
 8018f42:	4798      	blx	r3
 8018f44:	9a01      	ldr	r2, [sp, #4]
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 8018f4c:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8018f50:	b300      	cbz	r0, 8018f94 <rcutils_split+0x11c>
 8018f52:	4a21      	ldr	r2, [pc, #132]	@ (8018fd8 <rcutils_split+0x160>)
 8018f54:	eb06 030a 	add.w	r3, r6, sl
 8018f58:	1c61      	adds	r1, r4, #1
 8018f5a:	f002 fb21 	bl	801b5a0 <sniprintf>
 8018f5e:	2000      	movs	r0, #0
 8018f60:	b00b      	add	sp, #44	@ 0x2c
 8018f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f66:	b002      	add	sp, #8
 8018f68:	4770      	bx	lr
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	3b01      	subs	r3, #1
 8018f6e:	2100      	movs	r1, #0
 8018f70:	603b      	str	r3, [r7, #0]
 8018f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018f76:	e7d8      	b.n	8018f2a <rcutils_split+0xb2>
 8018f78:	a802      	add	r0, sp, #8
 8018f7a:	ac02      	add	r4, sp, #8
 8018f7c:	f000 f82e 	bl	8018fdc <rcutils_get_zero_initialized_string_array>
 8018f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018f84:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018f88:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	e7e7      	b.n	8018f60 <rcutils_split+0xe8>
 8018f90:	f8c7 9000 	str.w	r9, [r7]
 8018f94:	4638      	mov	r0, r7
 8018f96:	f000 f861 	bl	801905c <rcutils_string_array_fini>
 8018f9a:	b928      	cbnz	r0, 8018fa8 <rcutils_split+0x130>
 8018f9c:	200a      	movs	r0, #10
 8018f9e:	b00b      	add	sp, #44	@ 0x2c
 8018fa0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa4:	b002      	add	sp, #8
 8018fa6:	4770      	bx	lr
 8018fa8:	f7f4 f9be 	bl	800d328 <rcutils_reset_error>
 8018fac:	e7f6      	b.n	8018f9c <rcutils_split+0x124>
 8018fae:	aa14      	add	r2, sp, #80	@ 0x50
 8018fb0:	2101      	movs	r1, #1
 8018fb2:	4638      	mov	r0, r7
 8018fb4:	f000 f830 	bl	8019018 <rcutils_string_array_init>
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	d1eb      	bne.n	8018f94 <rcutils_split+0x11c>
 8018fbc:	687a      	ldr	r2, [r7, #4]
 8018fbe:	683b      	ldr	r3, [r7, #0]
 8018fc0:	3b01      	subs	r3, #1
 8018fc2:	2100      	movs	r1, #0
 8018fc4:	603b      	str	r3, [r7, #0]
 8018fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018fca:	e7df      	b.n	8018f8c <rcutils_split+0x114>
 8018fcc:	200b      	movs	r0, #11
 8018fce:	b00b      	add	sp, #44	@ 0x2c
 8018fd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd4:	b002      	add	sp, #8
 8018fd6:	4770      	bx	lr
 8018fd8:	0801fc1c 	.word	0x0801fc1c

08018fdc <rcutils_get_zero_initialized_string_array>:
 8018fdc:	b570      	push	{r4, r5, r6, lr}
 8018fde:	b086      	sub	sp, #24
 8018fe0:	4606      	mov	r6, r0
 8018fe2:	4668      	mov	r0, sp
 8018fe4:	f7f4 f942 	bl	800d26c <rcutils_get_zero_initialized_allocator>
 8018fe8:	46ee      	mov	lr, sp
 8018fea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018fee:	4c09      	ldr	r4, [pc, #36]	@ (8019014 <rcutils_get_zero_initialized_string_array+0x38>)
 8018ff0:	f104 0508 	add.w	r5, r4, #8
 8018ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018ff6:	46a4      	mov	ip, r4
 8018ff8:	f8de 3000 	ldr.w	r3, [lr]
 8018ffc:	602b      	str	r3, [r5, #0]
 8018ffe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019002:	4634      	mov	r4, r6
 8019004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019006:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801900a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801900e:	4630      	mov	r0, r6
 8019010:	b006      	add	sp, #24
 8019012:	bd70      	pop	{r4, r5, r6, pc}
 8019014:	20017870 	.word	0x20017870

08019018 <rcutils_string_array_init>:
 8019018:	b1da      	cbz	r2, 8019052 <rcutils_string_array_init+0x3a>
 801901a:	b570      	push	{r4, r5, r6, lr}
 801901c:	4605      	mov	r5, r0
 801901e:	b1d0      	cbz	r0, 8019056 <rcutils_string_array_init+0x3e>
 8019020:	460e      	mov	r6, r1
 8019022:	4614      	mov	r4, r2
 8019024:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8019028:	6001      	str	r1, [r0, #0]
 801902a:	2104      	movs	r1, #4
 801902c:	4630      	mov	r0, r6
 801902e:	4798      	blx	r3
 8019030:	6068      	str	r0, [r5, #4]
 8019032:	b150      	cbz	r0, 801904a <rcutils_string_array_init+0x32>
 8019034:	46a4      	mov	ip, r4
 8019036:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801903a:	f105 0408 	add.w	r4, r5, #8
 801903e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019040:	f8dc 3000 	ldr.w	r3, [ip]
 8019044:	6023      	str	r3, [r4, #0]
 8019046:	2000      	movs	r0, #0
 8019048:	bd70      	pop	{r4, r5, r6, pc}
 801904a:	2e00      	cmp	r6, #0
 801904c:	d0f2      	beq.n	8019034 <rcutils_string_array_init+0x1c>
 801904e:	200a      	movs	r0, #10
 8019050:	bd70      	pop	{r4, r5, r6, pc}
 8019052:	200b      	movs	r0, #11
 8019054:	4770      	bx	lr
 8019056:	200b      	movs	r0, #11
 8019058:	bd70      	pop	{r4, r5, r6, pc}
 801905a:	bf00      	nop

0801905c <rcutils_string_array_fini>:
 801905c:	b310      	cbz	r0, 80190a4 <rcutils_string_array_fini+0x48>
 801905e:	6843      	ldr	r3, [r0, #4]
 8019060:	b570      	push	{r4, r5, r6, lr}
 8019062:	4604      	mov	r4, r0
 8019064:	b1d3      	cbz	r3, 801909c <rcutils_string_array_fini+0x40>
 8019066:	3008      	adds	r0, #8
 8019068:	f7f4 f93a 	bl	800d2e0 <rcutils_allocator_is_valid>
 801906c:	b1c0      	cbz	r0, 80190a0 <rcutils_string_array_fini+0x44>
 801906e:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019072:	b16b      	cbz	r3, 8019090 <rcutils_string_array_fini+0x34>
 8019074:	2500      	movs	r5, #0
 8019076:	462e      	mov	r6, r5
 8019078:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801907c:	68e3      	ldr	r3, [r4, #12]
 801907e:	69a1      	ldr	r1, [r4, #24]
 8019080:	4798      	blx	r3
 8019082:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019086:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801908a:	3501      	adds	r5, #1
 801908c:	42ab      	cmp	r3, r5
 801908e:	d8f3      	bhi.n	8019078 <rcutils_string_array_fini+0x1c>
 8019090:	68e3      	ldr	r3, [r4, #12]
 8019092:	69a1      	ldr	r1, [r4, #24]
 8019094:	4798      	blx	r3
 8019096:	2300      	movs	r3, #0
 8019098:	e9c4 3300 	strd	r3, r3, [r4]
 801909c:	2000      	movs	r0, #0
 801909e:	bd70      	pop	{r4, r5, r6, pc}
 80190a0:	200b      	movs	r0, #11
 80190a2:	bd70      	pop	{r4, r5, r6, pc}
 80190a4:	200b      	movs	r0, #11
 80190a6:	4770      	bx	lr

080190a8 <rmw_get_zero_initialized_discovery_options>:
 80190a8:	b510      	push	{r4, lr}
 80190aa:	2220      	movs	r2, #32
 80190ac:	4604      	mov	r4, r0
 80190ae:	2100      	movs	r1, #0
 80190b0:	f002 fc04 	bl	801b8bc <memset>
 80190b4:	4620      	mov	r0, r4
 80190b6:	bd10      	pop	{r4, pc}

080190b8 <rmw_discovery_options_init>:
 80190b8:	b328      	cbz	r0, 8019106 <rmw_discovery_options_init+0x4e>
 80190ba:	b570      	push	{r4, r5, r6, lr}
 80190bc:	4604      	mov	r4, r0
 80190be:	4610      	mov	r0, r2
 80190c0:	460e      	mov	r6, r1
 80190c2:	4615      	mov	r5, r2
 80190c4:	f7f4 f90c 	bl	800d2e0 <rcutils_allocator_is_valid>
 80190c8:	b1d8      	cbz	r0, 8019102 <rmw_discovery_options_init+0x4a>
 80190ca:	68a3      	ldr	r3, [r4, #8]
 80190cc:	b9cb      	cbnz	r3, 8019102 <rmw_discovery_options_init+0x4a>
 80190ce:	6863      	ldr	r3, [r4, #4]
 80190d0:	b9bb      	cbnz	r3, 8019102 <rmw_discovery_options_init+0x4a>
 80190d2:	7823      	ldrb	r3, [r4, #0]
 80190d4:	b90b      	cbnz	r3, 80190da <rmw_discovery_options_init+0x22>
 80190d6:	2302      	movs	r3, #2
 80190d8:	7023      	strb	r3, [r4, #0]
 80190da:	b186      	cbz	r6, 80190fe <rmw_discovery_options_init+0x46>
 80190dc:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80190e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80190e4:	4630      	mov	r0, r6
 80190e6:	4798      	blx	r3
 80190e8:	6060      	str	r0, [r4, #4]
 80190ea:	b170      	cbz	r0, 801910a <rmw_discovery_options_init+0x52>
 80190ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190ee:	f104 0c0c 	add.w	ip, r4, #12
 80190f2:	60a6      	str	r6, [r4, #8]
 80190f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80190f8:	682b      	ldr	r3, [r5, #0]
 80190fa:	f8cc 3000 	str.w	r3, [ip]
 80190fe:	2000      	movs	r0, #0
 8019100:	bd70      	pop	{r4, r5, r6, pc}
 8019102:	200b      	movs	r0, #11
 8019104:	bd70      	pop	{r4, r5, r6, pc}
 8019106:	200b      	movs	r0, #11
 8019108:	4770      	bx	lr
 801910a:	200a      	movs	r0, #10
 801910c:	bd70      	pop	{r4, r5, r6, pc}
 801910e:	bf00      	nop

08019110 <rmw_time_equal>:
 8019110:	b570      	push	{r4, r5, r6, lr}
 8019112:	b084      	sub	sp, #16
 8019114:	ac04      	add	r4, sp, #16
 8019116:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801911a:	4925      	ldr	r1, [pc, #148]	@ (80191b0 <rmw_time_equal+0xa0>)
 801911c:	9c01      	ldr	r4, [sp, #4]
 801911e:	2202      	movs	r2, #2
 8019120:	4281      	cmp	r1, r0
 8019122:	41a2      	sbcs	r2, r4
 8019124:	d333      	bcc.n	801918e <rmw_time_equal+0x7e>
 8019126:	4603      	mov	r3, r0
 8019128:	4822      	ldr	r0, [pc, #136]	@ (80191b4 <rmw_time_equal+0xa4>)
 801912a:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 801912e:	fba3 3200 	umull	r3, r2, r3, r0
 8019132:	fb00 2204 	mla	r2, r0, r4, r2
 8019136:	43de      	mvns	r6, r3
 8019138:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801913c:	1a84      	subs	r4, r0, r2
 801913e:	428e      	cmp	r6, r1
 8019140:	41ac      	sbcs	r4, r5
 8019142:	d332      	bcc.n	80191aa <rmw_time_equal+0x9a>
 8019144:	eb11 0e03 	adds.w	lr, r1, r3
 8019148:	eb42 0005 	adc.w	r0, r2, r5
 801914c:	9b08      	ldr	r3, [sp, #32]
 801914e:	4918      	ldr	r1, [pc, #96]	@ (80191b0 <rmw_time_equal+0xa0>)
 8019150:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8019152:	2202      	movs	r2, #2
 8019154:	4299      	cmp	r1, r3
 8019156:	41aa      	sbcs	r2, r5
 8019158:	d31e      	bcc.n	8019198 <rmw_time_equal+0x88>
 801915a:	4c16      	ldr	r4, [pc, #88]	@ (80191b4 <rmw_time_equal+0xa4>)
 801915c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801915e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019160:	fba3 3104 	umull	r3, r1, r3, r4
 8019164:	fb04 1105 	mla	r1, r4, r5, r1
 8019168:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801916c:	43dd      	mvns	r5, r3
 801916e:	ebac 0401 	sub.w	r4, ip, r1
 8019172:	4295      	cmp	r5, r2
 8019174:	41b4      	sbcs	r4, r6
 8019176:	d314      	bcc.n	80191a2 <rmw_time_equal+0x92>
 8019178:	18d2      	adds	r2, r2, r3
 801917a:	eb41 0306 	adc.w	r3, r1, r6
 801917e:	4283      	cmp	r3, r0
 8019180:	bf08      	it	eq
 8019182:	4572      	cmpeq	r2, lr
 8019184:	bf0c      	ite	eq
 8019186:	2001      	moveq	r0, #1
 8019188:	2000      	movne	r0, #0
 801918a:	b004      	add	sp, #16
 801918c:	bd70      	pop	{r4, r5, r6, pc}
 801918e:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8019192:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019196:	e7d9      	b.n	801914c <rmw_time_equal+0x3c>
 8019198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801919c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80191a0:	e7ed      	b.n	801917e <rmw_time_equal+0x6e>
 80191a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80191a6:	4663      	mov	r3, ip
 80191a8:	e7e9      	b.n	801917e <rmw_time_equal+0x6e>
 80191aa:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80191ae:	e7cd      	b.n	801914c <rmw_time_equal+0x3c>
 80191b0:	25c17d04 	.word	0x25c17d04
 80191b4:	3b9aca00 	.word	0x3b9aca00

080191b8 <rmw_time_total_nsec>:
 80191b8:	b430      	push	{r4, r5}
 80191ba:	b084      	sub	sp, #16
 80191bc:	ac04      	add	r4, sp, #16
 80191be:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80191c2:	4914      	ldr	r1, [pc, #80]	@ (8019214 <rmw_time_total_nsec+0x5c>)
 80191c4:	9c01      	ldr	r4, [sp, #4]
 80191c6:	2202      	movs	r2, #2
 80191c8:	4281      	cmp	r1, r0
 80191ca:	41a2      	sbcs	r2, r4
 80191cc:	d315      	bcc.n	80191fa <rmw_time_total_nsec+0x42>
 80191ce:	4912      	ldr	r1, [pc, #72]	@ (8019218 <rmw_time_total_nsec+0x60>)
 80191d0:	4603      	mov	r3, r0
 80191d2:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 80191d6:	fba3 3201 	umull	r3, r2, r3, r1
 80191da:	fb01 2204 	mla	r2, r1, r4, r2
 80191de:	ea6f 0c03 	mvn.w	ip, r3
 80191e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80191e6:	1a8c      	subs	r4, r1, r2
 80191e8:	4584      	cmp	ip, r0
 80191ea:	41ac      	sbcs	r4, r5
 80191ec:	d30c      	bcc.n	8019208 <rmw_time_total_nsec+0x50>
 80191ee:	1818      	adds	r0, r3, r0
 80191f0:	eb42 0105 	adc.w	r1, r2, r5
 80191f4:	b004      	add	sp, #16
 80191f6:	bc30      	pop	{r4, r5}
 80191f8:	4770      	bx	lr
 80191fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80191fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019202:	b004      	add	sp, #16
 8019204:	bc30      	pop	{r4, r5}
 8019206:	4770      	bx	lr
 8019208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801920c:	b004      	add	sp, #16
 801920e:	bc30      	pop	{r4, r5}
 8019210:	4770      	bx	lr
 8019212:	bf00      	nop
 8019214:	25c17d04 	.word	0x25c17d04
 8019218:	3b9aca00 	.word	0x3b9aca00

0801921c <on_status>:
 801921c:	b082      	sub	sp, #8
 801921e:	b002      	add	sp, #8
 8019220:	4770      	bx	lr
 8019222:	bf00      	nop

08019224 <on_topic>:
 8019224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019228:	4a22      	ldr	r2, [pc, #136]	@ (80192b4 <on_topic+0x90>)
 801922a:	b094      	sub	sp, #80	@ 0x50
 801922c:	6812      	ldr	r2, [r2, #0]
 801922e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019230:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019234:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019238:	b3c2      	cbz	r2, 80192ac <on_topic+0x88>
 801923a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801923e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8019242:	e001      	b.n	8019248 <on_topic+0x24>
 8019244:	6852      	ldr	r2, [r2, #4]
 8019246:	b38a      	cbz	r2, 80192ac <on_topic+0x88>
 8019248:	6894      	ldr	r4, [r2, #8]
 801924a:	8aa3      	ldrh	r3, [r4, #20]
 801924c:	428b      	cmp	r3, r1
 801924e:	d1f9      	bne.n	8019244 <on_topic+0x20>
 8019250:	7da3      	ldrb	r3, [r4, #22]
 8019252:	4283      	cmp	r3, r0
 8019254:	d1f6      	bne.n	8019244 <on_topic+0x20>
 8019256:	2248      	movs	r2, #72	@ 0x48
 8019258:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801925c:	4668      	mov	r0, sp
 801925e:	f002 fc62 	bl	801bb26 <memcpy>
 8019262:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8019266:	cb0c      	ldmia	r3, {r2, r3}
 8019268:	4620      	mov	r0, r4
 801926a:	f7fa ffa7 	bl	80141bc <rmw_uxrce_get_static_input_buffer_for_entity>
 801926e:	4607      	mov	r7, r0
 8019270:	b1e0      	cbz	r0, 80192ac <on_topic+0x88>
 8019272:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019276:	4632      	mov	r2, r6
 8019278:	4628      	mov	r0, r5
 801927a:	f108 0110 	add.w	r1, r8, #16
 801927e:	f7fb fcc9 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 8019282:	b930      	cbnz	r0, 8019292 <on_topic+0x6e>
 8019284:	480c      	ldr	r0, [pc, #48]	@ (80192b8 <on_topic+0x94>)
 8019286:	4639      	mov	r1, r7
 8019288:	b014      	add	sp, #80	@ 0x50
 801928a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801928e:	f000 b8bd 	b.w	801940c <put_memory>
 8019292:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019296:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801929a:	f000 f969 	bl	8019570 <rmw_uros_epoch_nanos>
 801929e:	2305      	movs	r3, #5
 80192a0:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80192a4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80192a8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80192ac:	b014      	add	sp, #80	@ 0x50
 80192ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192b2:	bf00      	nop
 80192b4:	20015850 	.word	0x20015850
 80192b8:	200150a0 	.word	0x200150a0

080192bc <on_request>:
 80192bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192c0:	4823      	ldr	r0, [pc, #140]	@ (8019350 <on_request+0x94>)
 80192c2:	b094      	sub	sp, #80	@ 0x50
 80192c4:	6800      	ldr	r0, [r0, #0]
 80192c6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80192c8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80192cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80192ce:	2800      	cmp	r0, #0
 80192d0:	d03b      	beq.n	801934a <on_request+0x8e>
 80192d2:	461d      	mov	r5, r3
 80192d4:	e001      	b.n	80192da <on_request+0x1e>
 80192d6:	6840      	ldr	r0, [r0, #4]
 80192d8:	b3b8      	cbz	r0, 801934a <on_request+0x8e>
 80192da:	6884      	ldr	r4, [r0, #8]
 80192dc:	8b21      	ldrh	r1, [r4, #24]
 80192de:	4291      	cmp	r1, r2
 80192e0:	d1f9      	bne.n	80192d6 <on_request+0x1a>
 80192e2:	2248      	movs	r2, #72	@ 0x48
 80192e4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80192e8:	4668      	mov	r0, sp
 80192ea:	f002 fc1c 	bl	801bb26 <memcpy>
 80192ee:	f104 0320 	add.w	r3, r4, #32
 80192f2:	cb0c      	ldmia	r3, {r2, r3}
 80192f4:	4620      	mov	r0, r4
 80192f6:	f7fa ff61 	bl	80141bc <rmw_uxrce_get_static_input_buffer_for_entity>
 80192fa:	4680      	mov	r8, r0
 80192fc:	b328      	cbz	r0, 801934a <on_request+0x8e>
 80192fe:	4638      	mov	r0, r7
 8019300:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019304:	4632      	mov	r2, r6
 8019306:	f107 0110 	add.w	r1, r7, #16
 801930a:	f7fb fc83 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 801930e:	b930      	cbnz	r0, 801931e <on_request+0x62>
 8019310:	4810      	ldr	r0, [pc, #64]	@ (8019354 <on_request+0x98>)
 8019312:	4641      	mov	r1, r8
 8019314:	b014      	add	sp, #80	@ 0x50
 8019316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801931a:	f000 b877 	b.w	801940c <put_memory>
 801931e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019320:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019324:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019328:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801932c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019330:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019334:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019338:	f000 f91a 	bl	8019570 <rmw_uros_epoch_nanos>
 801933c:	2303      	movs	r3, #3
 801933e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019342:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019346:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801934a:	b014      	add	sp, #80	@ 0x50
 801934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019350:	20015408 	.word	0x20015408
 8019354:	200150a0 	.word	0x200150a0

08019358 <on_reply>:
 8019358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801935c:	4821      	ldr	r0, [pc, #132]	@ (80193e4 <on_reply+0x8c>)
 801935e:	b094      	sub	sp, #80	@ 0x50
 8019360:	6800      	ldr	r0, [r0, #0]
 8019362:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019364:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019368:	9113      	str	r1, [sp, #76]	@ 0x4c
 801936a:	b3b8      	cbz	r0, 80193dc <on_reply+0x84>
 801936c:	461d      	mov	r5, r3
 801936e:	e001      	b.n	8019374 <on_reply+0x1c>
 8019370:	6840      	ldr	r0, [r0, #4]
 8019372:	b398      	cbz	r0, 80193dc <on_reply+0x84>
 8019374:	6884      	ldr	r4, [r0, #8]
 8019376:	8b21      	ldrh	r1, [r4, #24]
 8019378:	4291      	cmp	r1, r2
 801937a:	d1f9      	bne.n	8019370 <on_reply+0x18>
 801937c:	2248      	movs	r2, #72	@ 0x48
 801937e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019382:	4668      	mov	r0, sp
 8019384:	f002 fbcf 	bl	801bb26 <memcpy>
 8019388:	f104 0320 	add.w	r3, r4, #32
 801938c:	cb0c      	ldmia	r3, {r2, r3}
 801938e:	4620      	mov	r0, r4
 8019390:	f7fa ff14 	bl	80141bc <rmw_uxrce_get_static_input_buffer_for_entity>
 8019394:	4680      	mov	r8, r0
 8019396:	b308      	cbz	r0, 80193dc <on_reply+0x84>
 8019398:	4638      	mov	r0, r7
 801939a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801939e:	4632      	mov	r2, r6
 80193a0:	f107 0110 	add.w	r1, r7, #16
 80193a4:	f7fb fc36 	bl	8014c14 <ucdr_deserialize_array_uint8_t>
 80193a8:	b930      	cbnz	r0, 80193b8 <on_reply+0x60>
 80193aa:	480f      	ldr	r0, [pc, #60]	@ (80193e8 <on_reply+0x90>)
 80193ac:	4641      	mov	r1, r8
 80193ae:	b014      	add	sp, #80	@ 0x50
 80193b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80193b4:	f000 b82a 	b.w	801940c <put_memory>
 80193b8:	2200      	movs	r2, #0
 80193ba:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80193be:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80193c2:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80193c6:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80193ca:	f000 f8d1 	bl	8019570 <rmw_uros_epoch_nanos>
 80193ce:	2304      	movs	r3, #4
 80193d0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80193d4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80193d8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80193dc:	b014      	add	sp, #80	@ 0x50
 80193de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193e2:	bf00      	nop
 80193e4:	20015330 	.word	0x20015330
 80193e8:	200150a0 	.word	0x200150a0

080193ec <get_memory>:
 80193ec:	4603      	mov	r3, r0
 80193ee:	6840      	ldr	r0, [r0, #4]
 80193f0:	b158      	cbz	r0, 801940a <get_memory+0x1e>
 80193f2:	6842      	ldr	r2, [r0, #4]
 80193f4:	605a      	str	r2, [r3, #4]
 80193f6:	b10a      	cbz	r2, 80193fc <get_memory+0x10>
 80193f8:	2100      	movs	r1, #0
 80193fa:	6011      	str	r1, [r2, #0]
 80193fc:	681a      	ldr	r2, [r3, #0]
 80193fe:	6042      	str	r2, [r0, #4]
 8019400:	b102      	cbz	r2, 8019404 <get_memory+0x18>
 8019402:	6010      	str	r0, [r2, #0]
 8019404:	2200      	movs	r2, #0
 8019406:	6002      	str	r2, [r0, #0]
 8019408:	6018      	str	r0, [r3, #0]
 801940a:	4770      	bx	lr

0801940c <put_memory>:
 801940c:	680b      	ldr	r3, [r1, #0]
 801940e:	b10b      	cbz	r3, 8019414 <put_memory+0x8>
 8019410:	684a      	ldr	r2, [r1, #4]
 8019412:	605a      	str	r2, [r3, #4]
 8019414:	684a      	ldr	r2, [r1, #4]
 8019416:	b102      	cbz	r2, 801941a <put_memory+0xe>
 8019418:	6013      	str	r3, [r2, #0]
 801941a:	6803      	ldr	r3, [r0, #0]
 801941c:	428b      	cmp	r3, r1
 801941e:	6843      	ldr	r3, [r0, #4]
 8019420:	bf08      	it	eq
 8019422:	6002      	streq	r2, [r0, #0]
 8019424:	604b      	str	r3, [r1, #4]
 8019426:	b103      	cbz	r3, 801942a <put_memory+0x1e>
 8019428:	6019      	str	r1, [r3, #0]
 801942a:	2300      	movs	r3, #0
 801942c:	600b      	str	r3, [r1, #0]
 801942e:	6041      	str	r1, [r0, #4]
 8019430:	4770      	bx	lr
 8019432:	bf00      	nop

08019434 <rmw_create_guard_condition>:
 8019434:	b538      	push	{r3, r4, r5, lr}
 8019436:	4605      	mov	r5, r0
 8019438:	4807      	ldr	r0, [pc, #28]	@ (8019458 <rmw_create_guard_condition+0x24>)
 801943a:	f7ff ffd7 	bl	80193ec <get_memory>
 801943e:	b148      	cbz	r0, 8019454 <rmw_create_guard_condition+0x20>
 8019440:	6884      	ldr	r4, [r0, #8]
 8019442:	2300      	movs	r3, #0
 8019444:	7423      	strb	r3, [r4, #16]
 8019446:	61e5      	str	r5, [r4, #28]
 8019448:	f7f9 fafe 	bl	8012a48 <rmw_get_implementation_identifier>
 801944c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019450:	f104 0014 	add.w	r0, r4, #20
 8019454:	bd38      	pop	{r3, r4, r5, pc}
 8019456:	bf00      	nop
 8019458:	20012e78 	.word	0x20012e78

0801945c <rmw_destroy_guard_condition>:
 801945c:	b508      	push	{r3, lr}
 801945e:	4b08      	ldr	r3, [pc, #32]	@ (8019480 <rmw_destroy_guard_condition+0x24>)
 8019460:	6819      	ldr	r1, [r3, #0]
 8019462:	b911      	cbnz	r1, 801946a <rmw_destroy_guard_condition+0xe>
 8019464:	e00a      	b.n	801947c <rmw_destroy_guard_condition+0x20>
 8019466:	6849      	ldr	r1, [r1, #4]
 8019468:	b141      	cbz	r1, 801947c <rmw_destroy_guard_condition+0x20>
 801946a:	688b      	ldr	r3, [r1, #8]
 801946c:	3314      	adds	r3, #20
 801946e:	4298      	cmp	r0, r3
 8019470:	d1f9      	bne.n	8019466 <rmw_destroy_guard_condition+0xa>
 8019472:	4803      	ldr	r0, [pc, #12]	@ (8019480 <rmw_destroy_guard_condition+0x24>)
 8019474:	f7ff ffca 	bl	801940c <put_memory>
 8019478:	2000      	movs	r0, #0
 801947a:	bd08      	pop	{r3, pc}
 801947c:	2001      	movs	r0, #1
 801947e:	bd08      	pop	{r3, pc}
 8019480:	20012e78 	.word	0x20012e78

08019484 <create_topic>:
 8019484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019488:	4604      	mov	r4, r0
 801948a:	b084      	sub	sp, #16
 801948c:	4824      	ldr	r0, [pc, #144]	@ (8019520 <create_topic+0x9c>)
 801948e:	460f      	mov	r7, r1
 8019490:	4616      	mov	r6, r2
 8019492:	f7ff ffab 	bl	80193ec <get_memory>
 8019496:	2800      	cmp	r0, #0
 8019498:	d03c      	beq.n	8019514 <create_topic+0x90>
 801949a:	6923      	ldr	r3, [r4, #16]
 801949c:	6885      	ldr	r5, [r0, #8]
 801949e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8019528 <create_topic+0xa4>
 80194a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80194a6:	e9c5 6405 	strd	r6, r4, [r5, #20]
 80194aa:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80194ae:	1c42      	adds	r2, r0, #1
 80194b0:	2102      	movs	r1, #2
 80194b2:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80194b6:	f7fb ff55 	bl	8015364 <uxr_object_id>
 80194ba:	223c      	movs	r2, #60	@ 0x3c
 80194bc:	6128      	str	r0, [r5, #16]
 80194be:	4641      	mov	r1, r8
 80194c0:	4638      	mov	r0, r7
 80194c2:	f7fa ffe3 	bl	801448c <generate_topic_name>
 80194c6:	b310      	cbz	r0, 801950e <create_topic+0x8a>
 80194c8:	4f16      	ldr	r7, [pc, #88]	@ (8019524 <create_topic+0xa0>)
 80194ca:	4630      	mov	r0, r6
 80194cc:	2264      	movs	r2, #100	@ 0x64
 80194ce:	4639      	mov	r1, r7
 80194d0:	f7fa ffac 	bl	801442c <generate_type_name>
 80194d4:	b1d8      	cbz	r0, 801950e <create_topic+0x8a>
 80194d6:	6920      	ldr	r0, [r4, #16]
 80194d8:	2306      	movs	r3, #6
 80194da:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80194de:	f8cd 8000 	str.w	r8, [sp]
 80194e2:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80194e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80194ea:	6811      	ldr	r1, [r2, #0]
 80194ec:	6963      	ldr	r3, [r4, #20]
 80194ee:	692a      	ldr	r2, [r5, #16]
 80194f0:	f7fb fd1a 	bl	8014f28 <uxr_buffer_create_topic_bin>
 80194f4:	4602      	mov	r2, r0
 80194f6:	6920      	ldr	r0, [r4, #16]
 80194f8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80194fc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019500:	f7fa ff58 	bl	80143b4 <run_xrce_session>
 8019504:	b118      	cbz	r0, 801950e <create_topic+0x8a>
 8019506:	4628      	mov	r0, r5
 8019508:	b004      	add	sp, #16
 801950a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801950e:	4628      	mov	r0, r5
 8019510:	f7fa fe48 	bl	80141a4 <rmw_uxrce_fini_topic_memory>
 8019514:	2500      	movs	r5, #0
 8019516:	4628      	mov	r0, r5
 8019518:	b004      	add	sp, #16
 801951a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801951e:	bf00      	nop
 8019520:	20015254 	.word	0x20015254
 8019524:	2001788c 	.word	0x2001788c
 8019528:	200178f0 	.word	0x200178f0

0801952c <destroy_topic>:
 801952c:	b538      	push	{r3, r4, r5, lr}
 801952e:	6984      	ldr	r4, [r0, #24]
 8019530:	b1d4      	cbz	r4, 8019568 <destroy_topic+0x3c>
 8019532:	4605      	mov	r5, r0
 8019534:	6920      	ldr	r0, [r4, #16]
 8019536:	692a      	ldr	r2, [r5, #16]
 8019538:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801953c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019540:	6819      	ldr	r1, [r3, #0]
 8019542:	f7fb fc75 	bl	8014e30 <uxr_buffer_delete_entity>
 8019546:	4602      	mov	r2, r0
 8019548:	6920      	ldr	r0, [r4, #16]
 801954a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801954e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019552:	f7fa ff2f 	bl	80143b4 <run_xrce_session>
 8019556:	f080 0401 	eor.w	r4, r0, #1
 801955a:	b2e4      	uxtb	r4, r4
 801955c:	4628      	mov	r0, r5
 801955e:	0064      	lsls	r4, r4, #1
 8019560:	f7fa fe20 	bl	80141a4 <rmw_uxrce_fini_topic_memory>
 8019564:	4620      	mov	r0, r4
 8019566:	bd38      	pop	{r3, r4, r5, pc}
 8019568:	2401      	movs	r4, #1
 801956a:	4620      	mov	r0, r4
 801956c:	bd38      	pop	{r3, r4, r5, pc}
 801956e:	bf00      	nop

08019570 <rmw_uros_epoch_nanos>:
 8019570:	4b05      	ldr	r3, [pc, #20]	@ (8019588 <rmw_uros_epoch_nanos+0x18>)
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	b123      	cbz	r3, 8019580 <rmw_uros_epoch_nanos+0x10>
 8019576:	6898      	ldr	r0, [r3, #8]
 8019578:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801957c:	f7fc b94a 	b.w	8015814 <uxr_epoch_nanos>
 8019580:	2000      	movs	r0, #0
 8019582:	2100      	movs	r1, #0
 8019584:	4770      	bx	lr
 8019586:	bf00      	nop
 8019588:	20017740 	.word	0x20017740

0801958c <rosidl_runtime_c__String__init>:
 801958c:	b1b0      	cbz	r0, 80195bc <rosidl_runtime_c__String__init+0x30>
 801958e:	b510      	push	{r4, lr}
 8019590:	b086      	sub	sp, #24
 8019592:	4604      	mov	r4, r0
 8019594:	a801      	add	r0, sp, #4
 8019596:	f7f3 fe77 	bl	800d288 <rcutils_get_default_allocator>
 801959a:	9b01      	ldr	r3, [sp, #4]
 801959c:	9905      	ldr	r1, [sp, #20]
 801959e:	2001      	movs	r0, #1
 80195a0:	4798      	blx	r3
 80195a2:	6020      	str	r0, [r4, #0]
 80195a4:	b138      	cbz	r0, 80195b6 <rosidl_runtime_c__String__init+0x2a>
 80195a6:	2200      	movs	r2, #0
 80195a8:	2301      	movs	r3, #1
 80195aa:	7002      	strb	r2, [r0, #0]
 80195ac:	4618      	mov	r0, r3
 80195ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80195b2:	b006      	add	sp, #24
 80195b4:	bd10      	pop	{r4, pc}
 80195b6:	2000      	movs	r0, #0
 80195b8:	b006      	add	sp, #24
 80195ba:	bd10      	pop	{r4, pc}
 80195bc:	2000      	movs	r0, #0
 80195be:	4770      	bx	lr

080195c0 <rosidl_runtime_c__String__fini>:
 80195c0:	b320      	cbz	r0, 801960c <rosidl_runtime_c__String__fini+0x4c>
 80195c2:	b510      	push	{r4, lr}
 80195c4:	6803      	ldr	r3, [r0, #0]
 80195c6:	b086      	sub	sp, #24
 80195c8:	4604      	mov	r4, r0
 80195ca:	b173      	cbz	r3, 80195ea <rosidl_runtime_c__String__fini+0x2a>
 80195cc:	6883      	ldr	r3, [r0, #8]
 80195ce:	b1f3      	cbz	r3, 801960e <rosidl_runtime_c__String__fini+0x4e>
 80195d0:	a801      	add	r0, sp, #4
 80195d2:	f7f3 fe59 	bl	800d288 <rcutils_get_default_allocator>
 80195d6:	9b02      	ldr	r3, [sp, #8]
 80195d8:	9905      	ldr	r1, [sp, #20]
 80195da:	6820      	ldr	r0, [r4, #0]
 80195dc:	4798      	blx	r3
 80195de:	2300      	movs	r3, #0
 80195e0:	e9c4 3300 	strd	r3, r3, [r4]
 80195e4:	60a3      	str	r3, [r4, #8]
 80195e6:	b006      	add	sp, #24
 80195e8:	bd10      	pop	{r4, pc}
 80195ea:	6843      	ldr	r3, [r0, #4]
 80195ec:	b9db      	cbnz	r3, 8019626 <rosidl_runtime_c__String__fini+0x66>
 80195ee:	6883      	ldr	r3, [r0, #8]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d0f8      	beq.n	80195e6 <rosidl_runtime_c__String__fini+0x26>
 80195f4:	4b12      	ldr	r3, [pc, #72]	@ (8019640 <rosidl_runtime_c__String__fini+0x80>)
 80195f6:	4813      	ldr	r0, [pc, #76]	@ (8019644 <rosidl_runtime_c__String__fini+0x84>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	2251      	movs	r2, #81	@ 0x51
 80195fc:	68db      	ldr	r3, [r3, #12]
 80195fe:	2101      	movs	r1, #1
 8019600:	f001 ff50 	bl	801b4a4 <fwrite>
 8019604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019608:	f000 fda0 	bl	801a14c <exit>
 801960c:	4770      	bx	lr
 801960e:	4b0c      	ldr	r3, [pc, #48]	@ (8019640 <rosidl_runtime_c__String__fini+0x80>)
 8019610:	480d      	ldr	r0, [pc, #52]	@ (8019648 <rosidl_runtime_c__String__fini+0x88>)
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	224c      	movs	r2, #76	@ 0x4c
 8019616:	68db      	ldr	r3, [r3, #12]
 8019618:	2101      	movs	r1, #1
 801961a:	f001 ff43 	bl	801b4a4 <fwrite>
 801961e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019622:	f000 fd93 	bl	801a14c <exit>
 8019626:	4b06      	ldr	r3, [pc, #24]	@ (8019640 <rosidl_runtime_c__String__fini+0x80>)
 8019628:	4808      	ldr	r0, [pc, #32]	@ (801964c <rosidl_runtime_c__String__fini+0x8c>)
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	224e      	movs	r2, #78	@ 0x4e
 801962e:	68db      	ldr	r3, [r3, #12]
 8019630:	2101      	movs	r1, #1
 8019632:	f001 ff37 	bl	801b4a4 <fwrite>
 8019636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801963a:	f000 fd87 	bl	801a14c <exit>
 801963e:	bf00      	nop
 8019640:	20001240 	.word	0x20001240
 8019644:	08020214 	.word	0x08020214
 8019648:	08020174 	.word	0x08020174
 801964c:	080201c4 	.word	0x080201c4

08019650 <ucdr_serialize_string>:
 8019650:	b538      	push	{r3, r4, r5, lr}
 8019652:	4605      	mov	r5, r0
 8019654:	4608      	mov	r0, r1
 8019656:	460c      	mov	r4, r1
 8019658:	f7e6 fe3a 	bl	80002d0 <strlen>
 801965c:	4621      	mov	r1, r4
 801965e:	1c42      	adds	r2, r0, #1
 8019660:	4628      	mov	r0, r5
 8019662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019666:	f7f5 bba9 	b.w	800edbc <ucdr_serialize_sequence_char>
 801966a:	bf00      	nop

0801966c <ucdr_deserialize_string>:
 801966c:	b500      	push	{lr}
 801966e:	b083      	sub	sp, #12
 8019670:	ab01      	add	r3, sp, #4
 8019672:	f7f5 fbb5 	bl	800ede0 <ucdr_deserialize_sequence_char>
 8019676:	b003      	add	sp, #12
 8019678:	f85d fb04 	ldr.w	pc, [sp], #4

0801967c <uxr_init_input_best_effort_stream>:
 801967c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019680:	8003      	strh	r3, [r0, #0]
 8019682:	4770      	bx	lr

08019684 <uxr_reset_input_best_effort_stream>:
 8019684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019688:	8003      	strh	r3, [r0, #0]
 801968a:	4770      	bx	lr

0801968c <uxr_receive_best_effort_message>:
 801968c:	b538      	push	{r3, r4, r5, lr}
 801968e:	4604      	mov	r4, r0
 8019690:	8800      	ldrh	r0, [r0, #0]
 8019692:	460d      	mov	r5, r1
 8019694:	f000 fd28 	bl	801a0e8 <uxr_seq_num_cmp>
 8019698:	4603      	mov	r3, r0
 801969a:	2b00      	cmp	r3, #0
 801969c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80196a0:	bfb8      	it	lt
 80196a2:	8025      	strhlt	r5, [r4, #0]
 80196a4:	bd38      	pop	{r3, r4, r5, pc}
 80196a6:	bf00      	nop

080196a8 <on_full_input_buffer>:
 80196a8:	b570      	push	{r4, r5, r6, lr}
 80196aa:	4605      	mov	r5, r0
 80196ac:	460c      	mov	r4, r1
 80196ae:	682b      	ldr	r3, [r5, #0]
 80196b0:	6809      	ldr	r1, [r1, #0]
 80196b2:	8920      	ldrh	r0, [r4, #8]
 80196b4:	6862      	ldr	r2, [r4, #4]
 80196b6:	fbb2 f2f0 	udiv	r2, r2, r0
 80196ba:	1a5b      	subs	r3, r3, r1
 80196bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80196c0:	3301      	adds	r3, #1
 80196c2:	b29b      	uxth	r3, r3
 80196c4:	fbb3 f6f0 	udiv	r6, r3, r0
 80196c8:	fb00 3316 	mls	r3, r0, r6, r3
 80196cc:	b29b      	uxth	r3, r3
 80196ce:	fb02 f303 	mul.w	r3, r2, r3
 80196d2:	1d18      	adds	r0, r3, #4
 80196d4:	4408      	add	r0, r1
 80196d6:	7d26      	ldrb	r6, [r4, #20]
 80196d8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80196dc:	b116      	cbz	r6, 80196e4 <on_full_input_buffer+0x3c>
 80196de:	2600      	movs	r6, #0
 80196e0:	f840 6c04 	str.w	r6, [r0, #-4]
 80196e4:	2a03      	cmp	r2, #3
 80196e6:	d801      	bhi.n	80196ec <on_full_input_buffer+0x44>
 80196e8:	2001      	movs	r0, #1
 80196ea:	bd70      	pop	{r4, r5, r6, pc}
 80196ec:	3308      	adds	r3, #8
 80196ee:	4419      	add	r1, r3
 80196f0:	4628      	mov	r0, r5
 80196f2:	692b      	ldr	r3, [r5, #16]
 80196f4:	3a04      	subs	r2, #4
 80196f6:	f7f5 fae9 	bl	800eccc <ucdr_init_buffer_origin>
 80196fa:	4628      	mov	r0, r5
 80196fc:	4902      	ldr	r1, [pc, #8]	@ (8019708 <on_full_input_buffer+0x60>)
 80196fe:	4622      	mov	r2, r4
 8019700:	f7f5 fac0 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 8019704:	2000      	movs	r0, #0
 8019706:	bd70      	pop	{r4, r5, r6, pc}
 8019708:	080196a9 	.word	0x080196a9

0801970c <uxr_init_input_reliable_stream>:
 801970c:	b500      	push	{lr}
 801970e:	e9c0 1200 	strd	r1, r2, [r0]
 8019712:	f04f 0e00 	mov.w	lr, #0
 8019716:	9a01      	ldr	r2, [sp, #4]
 8019718:	8103      	strh	r3, [r0, #8]
 801971a:	6102      	str	r2, [r0, #16]
 801971c:	f880 e014 	strb.w	lr, [r0, #20]
 8019720:	b1d3      	cbz	r3, 8019758 <uxr_init_input_reliable_stream+0x4c>
 8019722:	f8c1 e000 	str.w	lr, [r1]
 8019726:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801972a:	f1bc 0f01 	cmp.w	ip, #1
 801972e:	d913      	bls.n	8019758 <uxr_init_input_reliable_stream+0x4c>
 8019730:	2301      	movs	r3, #1
 8019732:	fbb3 f1fc 	udiv	r1, r3, ip
 8019736:	fb0c 3111 	mls	r1, ip, r1, r3
 801973a:	b289      	uxth	r1, r1
 801973c:	6842      	ldr	r2, [r0, #4]
 801973e:	fbb2 f2fc 	udiv	r2, r2, ip
 8019742:	fb01 f202 	mul.w	r2, r1, r2
 8019746:	6801      	ldr	r1, [r0, #0]
 8019748:	f841 e002 	str.w	lr, [r1, r2]
 801974c:	3301      	adds	r3, #1
 801974e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019752:	b29b      	uxth	r3, r3
 8019754:	459c      	cmp	ip, r3
 8019756:	d8ec      	bhi.n	8019732 <uxr_init_input_reliable_stream+0x26>
 8019758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801975c:	60c3      	str	r3, [r0, #12]
 801975e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019762:	bf00      	nop

08019764 <uxr_reset_input_reliable_stream>:
 8019764:	8901      	ldrh	r1, [r0, #8]
 8019766:	b1e9      	cbz	r1, 80197a4 <uxr_reset_input_reliable_stream+0x40>
 8019768:	f04f 0c00 	mov.w	ip, #0
 801976c:	b500      	push	{lr}
 801976e:	4663      	mov	r3, ip
 8019770:	46e6      	mov	lr, ip
 8019772:	fbb3 f2f1 	udiv	r2, r3, r1
 8019776:	fb01 3312 	mls	r3, r1, r2, r3
 801977a:	b29b      	uxth	r3, r3
 801977c:	6842      	ldr	r2, [r0, #4]
 801977e:	fbb2 f2f1 	udiv	r2, r2, r1
 8019782:	fb03 f202 	mul.w	r2, r3, r2
 8019786:	6803      	ldr	r3, [r0, #0]
 8019788:	f843 e002 	str.w	lr, [r3, r2]
 801978c:	f10c 0c01 	add.w	ip, ip, #1
 8019790:	8901      	ldrh	r1, [r0, #8]
 8019792:	fa1f f38c 	uxth.w	r3, ip
 8019796:	4299      	cmp	r1, r3
 8019798:	d8eb      	bhi.n	8019772 <uxr_reset_input_reliable_stream+0xe>
 801979a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801979e:	60c3      	str	r3, [r0, #12]
 80197a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80197a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80197a8:	60c3      	str	r3, [r0, #12]
 80197aa:	4770      	bx	lr

080197ac <uxr_receive_reliable_message>:
 80197ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197b0:	4604      	mov	r4, r0
 80197b2:	460d      	mov	r5, r1
 80197b4:	8901      	ldrh	r1, [r0, #8]
 80197b6:	8980      	ldrh	r0, [r0, #12]
 80197b8:	4690      	mov	r8, r2
 80197ba:	461f      	mov	r7, r3
 80197bc:	f000 fc8c 	bl	801a0d8 <uxr_seq_num_add>
 80197c0:	4629      	mov	r1, r5
 80197c2:	4606      	mov	r6, r0
 80197c4:	89a0      	ldrh	r0, [r4, #12]
 80197c6:	f000 fc8f 	bl	801a0e8 <uxr_seq_num_cmp>
 80197ca:	2800      	cmp	r0, #0
 80197cc:	db0a      	blt.n	80197e4 <uxr_receive_reliable_message+0x38>
 80197ce:	2600      	movs	r6, #0
 80197d0:	89e0      	ldrh	r0, [r4, #14]
 80197d2:	4629      	mov	r1, r5
 80197d4:	f000 fc88 	bl	801a0e8 <uxr_seq_num_cmp>
 80197d8:	2800      	cmp	r0, #0
 80197da:	bfb8      	it	lt
 80197dc:	81e5      	strhlt	r5, [r4, #14]
 80197de:	4630      	mov	r0, r6
 80197e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197e4:	4630      	mov	r0, r6
 80197e6:	4629      	mov	r1, r5
 80197e8:	f000 fc7e 	bl	801a0e8 <uxr_seq_num_cmp>
 80197ec:	2800      	cmp	r0, #0
 80197ee:	dbee      	blt.n	80197ce <uxr_receive_reliable_message+0x22>
 80197f0:	6923      	ldr	r3, [r4, #16]
 80197f2:	4640      	mov	r0, r8
 80197f4:	4798      	blx	r3
 80197f6:	2101      	movs	r1, #1
 80197f8:	4606      	mov	r6, r0
 80197fa:	89a0      	ldrh	r0, [r4, #12]
 80197fc:	f000 fc6c 	bl	801a0d8 <uxr_seq_num_add>
 8019800:	b90e      	cbnz	r6, 8019806 <uxr_receive_reliable_message+0x5a>
 8019802:	4285      	cmp	r5, r0
 8019804:	d046      	beq.n	8019894 <uxr_receive_reliable_message+0xe8>
 8019806:	8921      	ldrh	r1, [r4, #8]
 8019808:	fbb5 f2f1 	udiv	r2, r5, r1
 801980c:	fb01 5212 	mls	r2, r1, r2, r5
 8019810:	b292      	uxth	r2, r2
 8019812:	6863      	ldr	r3, [r4, #4]
 8019814:	6820      	ldr	r0, [r4, #0]
 8019816:	fbb3 f3f1 	udiv	r3, r3, r1
 801981a:	fb02 f303 	mul.w	r3, r2, r3
 801981e:	3304      	adds	r3, #4
 8019820:	4418      	add	r0, r3
 8019822:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d1d1      	bne.n	80197ce <uxr_receive_reliable_message+0x22>
 801982a:	4641      	mov	r1, r8
 801982c:	463a      	mov	r2, r7
 801982e:	f002 f97a 	bl	801bb26 <memcpy>
 8019832:	8921      	ldrh	r1, [r4, #8]
 8019834:	fbb5 f2f1 	udiv	r2, r5, r1
 8019838:	fb01 5212 	mls	r2, r1, r2, r5
 801983c:	b292      	uxth	r2, r2
 801983e:	6863      	ldr	r3, [r4, #4]
 8019840:	fbb3 f3f1 	udiv	r3, r3, r1
 8019844:	fb02 f303 	mul.w	r3, r2, r3
 8019848:	6822      	ldr	r2, [r4, #0]
 801984a:	50d7      	str	r7, [r2, r3]
 801984c:	9a06      	ldr	r2, [sp, #24]
 801984e:	2301      	movs	r3, #1
 8019850:	7013      	strb	r3, [r2, #0]
 8019852:	2e00      	cmp	r6, #0
 8019854:	d0bb      	beq.n	80197ce <uxr_receive_reliable_message+0x22>
 8019856:	89a6      	ldrh	r6, [r4, #12]
 8019858:	2101      	movs	r1, #1
 801985a:	4630      	mov	r0, r6
 801985c:	f000 fc3c 	bl	801a0d8 <uxr_seq_num_add>
 8019860:	8921      	ldrh	r1, [r4, #8]
 8019862:	fbb0 f2f1 	udiv	r2, r0, r1
 8019866:	fb01 0212 	mls	r2, r1, r2, r0
 801986a:	b292      	uxth	r2, r2
 801986c:	6863      	ldr	r3, [r4, #4]
 801986e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019872:	4606      	mov	r6, r0
 8019874:	fb02 f303 	mul.w	r3, r2, r3
 8019878:	6820      	ldr	r0, [r4, #0]
 801987a:	3304      	adds	r3, #4
 801987c:	4418      	add	r0, r3
 801987e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d0a3      	beq.n	80197ce <uxr_receive_reliable_message+0x22>
 8019886:	6923      	ldr	r3, [r4, #16]
 8019888:	4798      	blx	r3
 801988a:	2802      	cmp	r0, #2
 801988c:	d005      	beq.n	801989a <uxr_receive_reliable_message+0xee>
 801988e:	2801      	cmp	r0, #1
 8019890:	d0e2      	beq.n	8019858 <uxr_receive_reliable_message+0xac>
 8019892:	e79c      	b.n	80197ce <uxr_receive_reliable_message+0x22>
 8019894:	9b06      	ldr	r3, [sp, #24]
 8019896:	81a5      	strh	r5, [r4, #12]
 8019898:	701e      	strb	r6, [r3, #0]
 801989a:	2601      	movs	r6, #1
 801989c:	e798      	b.n	80197d0 <uxr_receive_reliable_message+0x24>
 801989e:	bf00      	nop

080198a0 <uxr_next_input_reliable_buffer_available>:
 80198a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198a4:	4604      	mov	r4, r0
 80198a6:	460f      	mov	r7, r1
 80198a8:	8980      	ldrh	r0, [r0, #12]
 80198aa:	2101      	movs	r1, #1
 80198ac:	4690      	mov	r8, r2
 80198ae:	f000 fc13 	bl	801a0d8 <uxr_seq_num_add>
 80198b2:	8921      	ldrh	r1, [r4, #8]
 80198b4:	fbb0 f2f1 	udiv	r2, r0, r1
 80198b8:	fb01 0212 	mls	r2, r1, r2, r0
 80198bc:	b292      	uxth	r2, r2
 80198be:	6863      	ldr	r3, [r4, #4]
 80198c0:	6826      	ldr	r6, [r4, #0]
 80198c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80198c6:	fb02 f303 	mul.w	r3, r2, r3
 80198ca:	3304      	adds	r3, #4
 80198cc:	441e      	add	r6, r3
 80198ce:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80198d2:	f1b9 0f00 	cmp.w	r9, #0
 80198d6:	d023      	beq.n	8019920 <uxr_next_input_reliable_buffer_available+0x80>
 80198d8:	6923      	ldr	r3, [r4, #16]
 80198da:	4605      	mov	r5, r0
 80198dc:	4630      	mov	r0, r6
 80198de:	4798      	blx	r3
 80198e0:	4682      	mov	sl, r0
 80198e2:	b300      	cbz	r0, 8019926 <uxr_next_input_reliable_buffer_available+0x86>
 80198e4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80198e8:	2101      	movs	r1, #1
 80198ea:	4650      	mov	r0, sl
 80198ec:	f000 fbf4 	bl	801a0d8 <uxr_seq_num_add>
 80198f0:	8921      	ldrh	r1, [r4, #8]
 80198f2:	fbb0 f2f1 	udiv	r2, r0, r1
 80198f6:	4682      	mov	sl, r0
 80198f8:	fb01 0212 	mls	r2, r1, r2, r0
 80198fc:	e9d4 0300 	ldrd	r0, r3, [r4]
 8019900:	b292      	uxth	r2, r2
 8019902:	fbb3 f3f1 	udiv	r3, r3, r1
 8019906:	fb02 f303 	mul.w	r3, r2, r3
 801990a:	3304      	adds	r3, #4
 801990c:	4418      	add	r0, r3
 801990e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019912:	b12b      	cbz	r3, 8019920 <uxr_next_input_reliable_buffer_available+0x80>
 8019914:	6923      	ldr	r3, [r4, #16]
 8019916:	4798      	blx	r3
 8019918:	2802      	cmp	r0, #2
 801991a:	d01b      	beq.n	8019954 <uxr_next_input_reliable_buffer_available+0xb4>
 801991c:	2801      	cmp	r0, #1
 801991e:	d0e3      	beq.n	80198e8 <uxr_next_input_reliable_buffer_available+0x48>
 8019920:	2000      	movs	r0, #0
 8019922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019926:	464a      	mov	r2, r9
 8019928:	4631      	mov	r1, r6
 801992a:	4638      	mov	r0, r7
 801992c:	f7f5 f9d6 	bl	800ecdc <ucdr_init_buffer>
 8019930:	8921      	ldrh	r1, [r4, #8]
 8019932:	fbb5 f2f1 	udiv	r2, r5, r1
 8019936:	fb01 5212 	mls	r2, r1, r2, r5
 801993a:	b292      	uxth	r2, r2
 801993c:	6863      	ldr	r3, [r4, #4]
 801993e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019942:	fb02 f303 	mul.w	r3, r2, r3
 8019946:	6822      	ldr	r2, [r4, #0]
 8019948:	f842 a003 	str.w	sl, [r2, r3]
 801994c:	81a5      	strh	r5, [r4, #12]
 801994e:	2001      	movs	r0, #1
 8019950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019954:	eb06 0108 	add.w	r1, r6, r8
 8019958:	8926      	ldrh	r6, [r4, #8]
 801995a:	fbb5 f0f6 	udiv	r0, r5, r6
 801995e:	fb06 5010 	mls	r0, r6, r0, r5
 8019962:	b280      	uxth	r0, r0
 8019964:	6863      	ldr	r3, [r4, #4]
 8019966:	fbb3 f3f6 	udiv	r3, r3, r6
 801996a:	fb00 f303 	mul.w	r3, r0, r3
 801996e:	6820      	ldr	r0, [r4, #0]
 8019970:	2500      	movs	r5, #0
 8019972:	50c5      	str	r5, [r0, r3]
 8019974:	eba9 0208 	sub.w	r2, r9, r8
 8019978:	4638      	mov	r0, r7
 801997a:	f7f5 f9af 	bl	800ecdc <ucdr_init_buffer>
 801997e:	4903      	ldr	r1, [pc, #12]	@ (801998c <uxr_next_input_reliable_buffer_available+0xec>)
 8019980:	4622      	mov	r2, r4
 8019982:	4638      	mov	r0, r7
 8019984:	f7f5 f97e 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 8019988:	4655      	mov	r5, sl
 801998a:	e7df      	b.n	801994c <uxr_next_input_reliable_buffer_available+0xac>
 801998c:	080196a9 	.word	0x080196a9

08019990 <uxr_process_heartbeat>:
 8019990:	b538      	push	{r3, r4, r5, lr}
 8019992:	4611      	mov	r1, r2
 8019994:	4604      	mov	r4, r0
 8019996:	89c0      	ldrh	r0, [r0, #14]
 8019998:	4615      	mov	r5, r2
 801999a:	f000 fba5 	bl	801a0e8 <uxr_seq_num_cmp>
 801999e:	2800      	cmp	r0, #0
 80199a0:	bfb8      	it	lt
 80199a2:	81e5      	strhlt	r5, [r4, #14]
 80199a4:	bd38      	pop	{r3, r4, r5, pc}
 80199a6:	bf00      	nop

080199a8 <uxr_compute_acknack>:
 80199a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199ac:	8903      	ldrh	r3, [r0, #8]
 80199ae:	8985      	ldrh	r5, [r0, #12]
 80199b0:	4604      	mov	r4, r0
 80199b2:	460e      	mov	r6, r1
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d048      	beq.n	8019a4a <uxr_compute_acknack+0xa2>
 80199b8:	4628      	mov	r0, r5
 80199ba:	2701      	movs	r7, #1
 80199bc:	e003      	b.n	80199c6 <uxr_compute_acknack+0x1e>
 80199be:	4567      	cmp	r7, ip
 80199c0:	d243      	bcs.n	8019a4a <uxr_compute_acknack+0xa2>
 80199c2:	89a0      	ldrh	r0, [r4, #12]
 80199c4:	3701      	adds	r7, #1
 80199c6:	b2b9      	uxth	r1, r7
 80199c8:	f000 fb86 	bl	801a0d8 <uxr_seq_num_add>
 80199cc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80199d0:	fbb0 f2fc 	udiv	r2, r0, ip
 80199d4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80199d8:	fb0c 0212 	mls	r2, ip, r2, r0
 80199dc:	b292      	uxth	r2, r2
 80199de:	fbb3 f3fc 	udiv	r3, r3, ip
 80199e2:	fb02 f303 	mul.w	r3, r2, r3
 80199e6:	58cb      	ldr	r3, [r1, r3]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d1e8      	bne.n	80199be <uxr_compute_acknack+0x16>
 80199ec:	8030      	strh	r0, [r6, #0]
 80199ee:	2101      	movs	r1, #1
 80199f0:	89e5      	ldrh	r5, [r4, #14]
 80199f2:	f000 fb75 	bl	801a0e0 <uxr_seq_num_sub>
 80199f6:	4601      	mov	r1, r0
 80199f8:	4628      	mov	r0, r5
 80199fa:	f000 fb71 	bl	801a0e0 <uxr_seq_num_sub>
 80199fe:	4605      	mov	r5, r0
 8019a00:	4607      	mov	r7, r0
 8019a02:	b1f8      	cbz	r0, 8019a44 <uxr_compute_acknack+0x9c>
 8019a04:	f04f 0900 	mov.w	r9, #0
 8019a08:	464d      	mov	r5, r9
 8019a0a:	f04f 0801 	mov.w	r8, #1
 8019a0e:	fa1f f189 	uxth.w	r1, r9
 8019a12:	8830      	ldrh	r0, [r6, #0]
 8019a14:	f000 fb60 	bl	801a0d8 <uxr_seq_num_add>
 8019a18:	8921      	ldrh	r1, [r4, #8]
 8019a1a:	fbb0 f3f1 	udiv	r3, r0, r1
 8019a1e:	fb03 0011 	mls	r0, r3, r1, r0
 8019a22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019a26:	b280      	uxth	r0, r0
 8019a28:	fbb3 f3f1 	udiv	r3, r3, r1
 8019a2c:	fb00 f303 	mul.w	r3, r0, r3
 8019a30:	fa08 f109 	lsl.w	r1, r8, r9
 8019a34:	58d3      	ldr	r3, [r2, r3]
 8019a36:	f109 0901 	add.w	r9, r9, #1
 8019a3a:	b90b      	cbnz	r3, 8019a40 <uxr_compute_acknack+0x98>
 8019a3c:	4329      	orrs	r1, r5
 8019a3e:	b28d      	uxth	r5, r1
 8019a40:	454f      	cmp	r7, r9
 8019a42:	d1e4      	bne.n	8019a0e <uxr_compute_acknack+0x66>
 8019a44:	4628      	mov	r0, r5
 8019a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a4a:	4628      	mov	r0, r5
 8019a4c:	e7ce      	b.n	80199ec <uxr_compute_acknack+0x44>
 8019a4e:	bf00      	nop

08019a50 <uxr_init_output_best_effort_stream>:
 8019a50:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8019a54:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019a58:	6001      	str	r1, [r0, #0]
 8019a5a:	7303      	strb	r3, [r0, #12]
 8019a5c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019a60:	4770      	bx	lr
 8019a62:	bf00      	nop

08019a64 <uxr_reset_output_best_effort_stream>:
 8019a64:	7b02      	ldrb	r2, [r0, #12]
 8019a66:	6042      	str	r2, [r0, #4]
 8019a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a6c:	81c3      	strh	r3, [r0, #14]
 8019a6e:	4770      	bx	lr

08019a70 <uxr_prepare_best_effort_buffer_to_write>:
 8019a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a72:	4604      	mov	r4, r0
 8019a74:	b083      	sub	sp, #12
 8019a76:	6840      	ldr	r0, [r0, #4]
 8019a78:	460d      	mov	r5, r1
 8019a7a:	4616      	mov	r6, r2
 8019a7c:	f7fd fbf2 	bl	8017264 <uxr_submessage_padding>
 8019a80:	6863      	ldr	r3, [r4, #4]
 8019a82:	4418      	add	r0, r3
 8019a84:	68a3      	ldr	r3, [r4, #8]
 8019a86:	1942      	adds	r2, r0, r5
 8019a88:	4293      	cmp	r3, r2
 8019a8a:	bf2c      	ite	cs
 8019a8c:	2701      	movcs	r7, #1
 8019a8e:	2700      	movcc	r7, #0
 8019a90:	d202      	bcs.n	8019a98 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019a92:	4638      	mov	r0, r7
 8019a94:	b003      	add	sp, #12
 8019a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a98:	9000      	str	r0, [sp, #0]
 8019a9a:	6821      	ldr	r1, [r4, #0]
 8019a9c:	4630      	mov	r0, r6
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	f7f5 f90a 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 8019aa4:	6863      	ldr	r3, [r4, #4]
 8019aa6:	4638      	mov	r0, r7
 8019aa8:	442b      	add	r3, r5
 8019aaa:	6063      	str	r3, [r4, #4]
 8019aac:	b003      	add	sp, #12
 8019aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ab0 <uxr_prepare_best_effort_buffer_to_send>:
 8019ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ab4:	4604      	mov	r4, r0
 8019ab6:	461d      	mov	r5, r3
 8019ab8:	6840      	ldr	r0, [r0, #4]
 8019aba:	7b23      	ldrb	r3, [r4, #12]
 8019abc:	4298      	cmp	r0, r3
 8019abe:	bf8c      	ite	hi
 8019ac0:	2601      	movhi	r6, #1
 8019ac2:	2600      	movls	r6, #0
 8019ac4:	d802      	bhi.n	8019acc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019ac6:	4630      	mov	r0, r6
 8019ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019acc:	4688      	mov	r8, r1
 8019ace:	89e0      	ldrh	r0, [r4, #14]
 8019ad0:	2101      	movs	r1, #1
 8019ad2:	4617      	mov	r7, r2
 8019ad4:	f000 fb00 	bl	801a0d8 <uxr_seq_num_add>
 8019ad8:	6823      	ldr	r3, [r4, #0]
 8019ada:	81e0      	strh	r0, [r4, #14]
 8019adc:	8028      	strh	r0, [r5, #0]
 8019ade:	f8c8 3000 	str.w	r3, [r8]
 8019ae2:	6863      	ldr	r3, [r4, #4]
 8019ae4:	603b      	str	r3, [r7, #0]
 8019ae6:	7b23      	ldrb	r3, [r4, #12]
 8019ae8:	6063      	str	r3, [r4, #4]
 8019aea:	4630      	mov	r0, r6
 8019aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019af0 <on_full_output_buffer>:
 8019af0:	b538      	push	{r3, r4, r5, lr}
 8019af2:	460c      	mov	r4, r1
 8019af4:	6803      	ldr	r3, [r0, #0]
 8019af6:	6809      	ldr	r1, [r1, #0]
 8019af8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019afc:	6862      	ldr	r2, [r4, #4]
 8019afe:	fbb2 f2fc 	udiv	r2, r2, ip
 8019b02:	1a5b      	subs	r3, r3, r1
 8019b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b08:	3301      	adds	r3, #1
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	fbb3 fefc 	udiv	lr, r3, ip
 8019b10:	fb0c 331e 	mls	r3, ip, lr, r3
 8019b14:	b29b      	uxth	r3, r3
 8019b16:	fb02 f303 	mul.w	r3, r2, r3
 8019b1a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8019b1e:	58ca      	ldr	r2, [r1, r3]
 8019b20:	4463      	add	r3, ip
 8019b22:	eba2 020c 	sub.w	r2, r2, ip
 8019b26:	3308      	adds	r3, #8
 8019b28:	4605      	mov	r5, r0
 8019b2a:	4419      	add	r1, r3
 8019b2c:	3a04      	subs	r2, #4
 8019b2e:	6903      	ldr	r3, [r0, #16]
 8019b30:	f7f5 f8cc 	bl	800eccc <ucdr_init_buffer_origin>
 8019b34:	4628      	mov	r0, r5
 8019b36:	4903      	ldr	r1, [pc, #12]	@ (8019b44 <on_full_output_buffer+0x54>)
 8019b38:	4622      	mov	r2, r4
 8019b3a:	f7f5 f8a3 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 8019b3e:	2000      	movs	r0, #0
 8019b40:	bd38      	pop	{r3, r4, r5, pc}
 8019b42:	bf00      	nop
 8019b44:	08019af1 	.word	0x08019af1

08019b48 <uxr_init_output_reliable_stream>:
 8019b48:	b410      	push	{r4}
 8019b4a:	f89d c004 	ldrb.w	ip, [sp, #4]
 8019b4e:	8103      	strh	r3, [r0, #8]
 8019b50:	e9c0 1200 	strd	r1, r2, [r0]
 8019b54:	f880 c00c 	strb.w	ip, [r0, #12]
 8019b58:	b1d3      	cbz	r3, 8019b90 <uxr_init_output_reliable_stream+0x48>
 8019b5a:	f8c1 c000 	str.w	ip, [r1]
 8019b5e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019b62:	f1bc 0f01 	cmp.w	ip, #1
 8019b66:	d913      	bls.n	8019b90 <uxr_init_output_reliable_stream+0x48>
 8019b68:	2301      	movs	r3, #1
 8019b6a:	fbb3 f1fc 	udiv	r1, r3, ip
 8019b6e:	fb0c 3111 	mls	r1, ip, r1, r3
 8019b72:	b289      	uxth	r1, r1
 8019b74:	6842      	ldr	r2, [r0, #4]
 8019b76:	6804      	ldr	r4, [r0, #0]
 8019b78:	fbb2 f2fc 	udiv	r2, r2, ip
 8019b7c:	fb01 f202 	mul.w	r2, r1, r2
 8019b80:	7b01      	ldrb	r1, [r0, #12]
 8019b82:	50a1      	str	r1, [r4, r2]
 8019b84:	3301      	adds	r3, #1
 8019b86:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019b8a:	b29b      	uxth	r3, r3
 8019b8c:	459c      	cmp	ip, r3
 8019b8e:	d8ec      	bhi.n	8019b6a <uxr_init_output_reliable_stream+0x22>
 8019b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b94:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019b98:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019b9c:	4905      	ldr	r1, [pc, #20]	@ (8019bb4 <uxr_init_output_reliable_stream+0x6c>)
 8019b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ba2:	f8c0 100e 	str.w	r1, [r0, #14]
 8019ba6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019baa:	2300      	movs	r3, #0
 8019bac:	8242      	strh	r2, [r0, #18]
 8019bae:	8403      	strh	r3, [r0, #32]
 8019bb0:	4770      	bx	lr
 8019bb2:	bf00      	nop
 8019bb4:	ffff0000 	.word	0xffff0000

08019bb8 <uxr_reset_output_reliable_stream>:
 8019bb8:	8901      	ldrh	r1, [r0, #8]
 8019bba:	b1b1      	cbz	r1, 8019bea <uxr_reset_output_reliable_stream+0x32>
 8019bbc:	f04f 0c00 	mov.w	ip, #0
 8019bc0:	4663      	mov	r3, ip
 8019bc2:	fbb3 f2f1 	udiv	r2, r3, r1
 8019bc6:	fb01 3312 	mls	r3, r1, r2, r3
 8019bca:	b29b      	uxth	r3, r3
 8019bcc:	6842      	ldr	r2, [r0, #4]
 8019bce:	fbb2 f2f1 	udiv	r2, r2, r1
 8019bd2:	6801      	ldr	r1, [r0, #0]
 8019bd4:	fb03 f202 	mul.w	r2, r3, r2
 8019bd8:	7b03      	ldrb	r3, [r0, #12]
 8019bda:	508b      	str	r3, [r1, r2]
 8019bdc:	f10c 0c01 	add.w	ip, ip, #1
 8019be0:	8901      	ldrh	r1, [r0, #8]
 8019be2:	fa1f f38c 	uxth.w	r3, ip
 8019be6:	4299      	cmp	r1, r3
 8019be8:	d8eb      	bhi.n	8019bc2 <uxr_reset_output_reliable_stream+0xa>
 8019bea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019bee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019bf2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019bf6:	4904      	ldr	r1, [pc, #16]	@ (8019c08 <uxr_reset_output_reliable_stream+0x50>)
 8019bf8:	f8c0 100e 	str.w	r1, [r0, #14]
 8019bfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019c00:	2300      	movs	r3, #0
 8019c02:	8242      	strh	r2, [r0, #18]
 8019c04:	8403      	strh	r3, [r0, #32]
 8019c06:	4770      	bx	lr
 8019c08:	ffff0000 	.word	0xffff0000

08019c0c <uxr_prepare_reliable_buffer_to_write>:
 8019c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c10:	4604      	mov	r4, r0
 8019c12:	b091      	sub	sp, #68	@ 0x44
 8019c14:	8900      	ldrh	r0, [r0, #8]
 8019c16:	89e7      	ldrh	r7, [r4, #14]
 8019c18:	6823      	ldr	r3, [r4, #0]
 8019c1a:	9204      	str	r2, [sp, #16]
 8019c1c:	fbb7 f2f0 	udiv	r2, r7, r0
 8019c20:	fb00 7212 	mls	r2, r0, r2, r7
 8019c24:	b292      	uxth	r2, r2
 8019c26:	6865      	ldr	r5, [r4, #4]
 8019c28:	fbb5 f5f0 	udiv	r5, r5, r0
 8019c2c:	fb05 3202 	mla	r2, r5, r2, r3
 8019c30:	3204      	adds	r2, #4
 8019c32:	f852 ac04 	ldr.w	sl, [r2, #-4]
 8019c36:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8019c3a:	9203      	str	r2, [sp, #12]
 8019c3c:	4688      	mov	r8, r1
 8019c3e:	f1a5 0904 	sub.w	r9, r5, #4
 8019c42:	2800      	cmp	r0, #0
 8019c44:	f000 8143 	beq.w	8019ece <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8019c48:	2100      	movs	r1, #0
 8019c4a:	460e      	mov	r6, r1
 8019c4c:	b28a      	uxth	r2, r1
 8019c4e:	fbb2 fcf0 	udiv	ip, r2, r0
 8019c52:	fb00 221c 	mls	r2, r0, ip, r2
 8019c56:	b292      	uxth	r2, r2
 8019c58:	fb05 f202 	mul.w	r2, r5, r2
 8019c5c:	3101      	adds	r1, #1
 8019c5e:	589a      	ldr	r2, [r3, r2]
 8019c60:	455a      	cmp	r2, fp
 8019c62:	bf04      	itt	eq
 8019c64:	3601      	addeq	r6, #1
 8019c66:	b2b6      	uxtheq	r6, r6
 8019c68:	4281      	cmp	r1, r0
 8019c6a:	d1ef      	bne.n	8019c4c <uxr_prepare_reliable_buffer_to_write+0x40>
 8019c6c:	4650      	mov	r0, sl
 8019c6e:	2104      	movs	r1, #4
 8019c70:	9605      	str	r6, [sp, #20]
 8019c72:	f7f5 f837 	bl	800ece4 <ucdr_alignment>
 8019c76:	4482      	add	sl, r0
 8019c78:	eb0a 0208 	add.w	r2, sl, r8
 8019c7c:	454a      	cmp	r2, r9
 8019c7e:	f240 80ca 	bls.w	8019e16 <uxr_prepare_reliable_buffer_to_write+0x20a>
 8019c82:	7b22      	ldrb	r2, [r4, #12]
 8019c84:	4442      	add	r2, r8
 8019c86:	454a      	cmp	r2, r9
 8019c88:	f240 80b2 	bls.w	8019df0 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 8019c8c:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8019c90:	32fc      	adds	r2, #252	@ 0xfc
 8019c92:	fa1f f389 	uxth.w	r3, r9
 8019c96:	441a      	add	r2, r3
 8019c98:	b292      	uxth	r2, r2
 8019c9a:	fb06 fb02 	mul.w	fp, r6, r2
 8019c9e:	45c3      	cmp	fp, r8
 8019ca0:	9205      	str	r2, [sp, #20]
 8019ca2:	9206      	str	r2, [sp, #24]
 8019ca4:	f0c0 80b3 	bcc.w	8019e0e <uxr_prepare_reliable_buffer_to_write+0x202>
 8019ca8:	f10a 0204 	add.w	r2, sl, #4
 8019cac:	454a      	cmp	r2, r9
 8019cae:	f080 80db 	bcs.w	8019e68 <uxr_prepare_reliable_buffer_to_write+0x25c>
 8019cb2:	f1a3 0b04 	sub.w	fp, r3, #4
 8019cb6:	ebab 0b0a 	sub.w	fp, fp, sl
 8019cba:	9b05      	ldr	r3, [sp, #20]
 8019cbc:	fa1f fb8b 	uxth.w	fp, fp
 8019cc0:	eba8 080b 	sub.w	r8, r8, fp
 8019cc4:	fbb8 fcf3 	udiv	ip, r8, r3
 8019cc8:	fb03 831c 	mls	r3, r3, ip, r8
 8019ccc:	fa1f fc8c 	uxth.w	ip, ip
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	f040 80c1 	bne.w	8019e58 <uxr_prepare_reliable_buffer_to_write+0x24c>
 8019cd6:	45b4      	cmp	ip, r6
 8019cd8:	f200 8099 	bhi.w	8019e0e <uxr_prepare_reliable_buffer_to_write+0x202>
 8019cdc:	f10d 0820 	add.w	r8, sp, #32
 8019ce0:	f1bc 0f00 	cmp.w	ip, #0
 8019ce4:	d040      	beq.n	8019d68 <uxr_prepare_reliable_buffer_to_write+0x15c>
 8019ce6:	f8cd a01c 	str.w	sl, [sp, #28]
 8019cea:	2600      	movs	r6, #0
 8019cec:	f8dd a014 	ldr.w	sl, [sp, #20]
 8019cf0:	9505      	str	r5, [sp, #20]
 8019cf2:	f10d 0820 	add.w	r8, sp, #32
 8019cf6:	4665      	mov	r5, ip
 8019cf8:	e000      	b.n	8019cfc <uxr_prepare_reliable_buffer_to_write+0xf0>
 8019cfa:	46d3      	mov	fp, sl
 8019cfc:	8921      	ldrh	r1, [r4, #8]
 8019cfe:	fbb7 f2f1 	udiv	r2, r7, r1
 8019d02:	fb01 7212 	mls	r2, r1, r2, r7
 8019d06:	b292      	uxth	r2, r2
 8019d08:	6863      	ldr	r3, [r4, #4]
 8019d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d0e:	6821      	ldr	r1, [r4, #0]
 8019d10:	fb02 f303 	mul.w	r3, r2, r3
 8019d14:	3304      	adds	r3, #4
 8019d16:	4419      	add	r1, r3
 8019d18:	4640      	mov	r0, r8
 8019d1a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8019d1e:	9200      	str	r2, [sp, #0]
 8019d20:	2300      	movs	r3, #0
 8019d22:	464a      	mov	r2, r9
 8019d24:	f7f4 ffc8 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 8019d28:	465a      	mov	r2, fp
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	210d      	movs	r1, #13
 8019d2e:	4640      	mov	r0, r8
 8019d30:	f7fd fa58 	bl	80171e4 <uxr_buffer_submessage_header>
 8019d34:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019d38:	fbb7 f2fc 	udiv	r2, r7, ip
 8019d3c:	fb0c 7212 	mls	r2, ip, r2, r7
 8019d40:	b292      	uxth	r2, r2
 8019d42:	6863      	ldr	r3, [r4, #4]
 8019d44:	fbb3 f3fc 	udiv	r3, r3, ip
 8019d48:	fb02 f303 	mul.w	r3, r2, r3
 8019d4c:	6822      	ldr	r2, [r4, #0]
 8019d4e:	4638      	mov	r0, r7
 8019d50:	f842 9003 	str.w	r9, [r2, r3]
 8019d54:	2101      	movs	r1, #1
 8019d56:	f000 f9bf 	bl	801a0d8 <uxr_seq_num_add>
 8019d5a:	3601      	adds	r6, #1
 8019d5c:	42ae      	cmp	r6, r5
 8019d5e:	4607      	mov	r7, r0
 8019d60:	d1cb      	bne.n	8019cfa <uxr_prepare_reliable_buffer_to_write+0xee>
 8019d62:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019d66:	9d05      	ldr	r5, [sp, #20]
 8019d68:	8920      	ldrh	r0, [r4, #8]
 8019d6a:	fbb7 f1f0 	udiv	r1, r7, r0
 8019d6e:	fb00 7111 	mls	r1, r0, r1, r7
 8019d72:	b289      	uxth	r1, r1
 8019d74:	6863      	ldr	r3, [r4, #4]
 8019d76:	fbb3 f3f0 	udiv	r3, r3, r0
 8019d7a:	fb01 f303 	mul.w	r3, r1, r3
 8019d7e:	6821      	ldr	r1, [r4, #0]
 8019d80:	3304      	adds	r3, #4
 8019d82:	4419      	add	r1, r3
 8019d84:	464a      	mov	r2, r9
 8019d86:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019d8a:	9000      	str	r0, [sp, #0]
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	4640      	mov	r0, r8
 8019d90:	f7f4 ff92 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 8019d94:	4640      	mov	r0, r8
 8019d96:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019d9a:	2302      	movs	r3, #2
 8019d9c:	fa1f f288 	uxth.w	r2, r8
 8019da0:	210d      	movs	r1, #13
 8019da2:	f7fd fa1f 	bl	80171e4 <uxr_buffer_submessage_header>
 8019da6:	8926      	ldrh	r6, [r4, #8]
 8019da8:	9b03      	ldr	r3, [sp, #12]
 8019daa:	7b20      	ldrb	r0, [r4, #12]
 8019dac:	f1a5 0208 	sub.w	r2, r5, #8
 8019db0:	f10a 0104 	add.w	r1, sl, #4
 8019db4:	fbb7 f5f6 	udiv	r5, r7, r6
 8019db8:	fb06 7515 	mls	r5, r6, r5, r7
 8019dbc:	440b      	add	r3, r1
 8019dbe:	b2ad      	uxth	r5, r5
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	3004      	adds	r0, #4
 8019dc4:	6863      	ldr	r3, [r4, #4]
 8019dc6:	fbb3 f3f6 	udiv	r3, r3, r6
 8019dca:	fb05 f303 	mul.w	r3, r5, r3
 8019dce:	6825      	ldr	r5, [r4, #0]
 8019dd0:	4440      	add	r0, r8
 8019dd2:	50e8      	str	r0, [r5, r3]
 8019dd4:	9d04      	ldr	r5, [sp, #16]
 8019dd6:	eba2 020a 	sub.w	r2, r2, sl
 8019dda:	4628      	mov	r0, r5
 8019ddc:	f7f4 ff7e 	bl	800ecdc <ucdr_init_buffer>
 8019de0:	493c      	ldr	r1, [pc, #240]	@ (8019ed4 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 8019de2:	4622      	mov	r2, r4
 8019de4:	4628      	mov	r0, r5
 8019de6:	f7f4 ff4d 	bl	800ec84 <ucdr_set_on_full_buffer_callback>
 8019dea:	81e7      	strh	r7, [r4, #14]
 8019dec:	2001      	movs	r0, #1
 8019dee:	e00f      	b.n	8019e10 <uxr_prepare_reliable_buffer_to_write+0x204>
 8019df0:	2101      	movs	r1, #1
 8019df2:	89e0      	ldrh	r0, [r4, #14]
 8019df4:	f000 f970 	bl	801a0d8 <uxr_seq_num_add>
 8019df8:	8921      	ldrh	r1, [r4, #8]
 8019dfa:	4605      	mov	r5, r0
 8019dfc:	8a60      	ldrh	r0, [r4, #18]
 8019dfe:	f000 f96b 	bl	801a0d8 <uxr_seq_num_add>
 8019e02:	4601      	mov	r1, r0
 8019e04:	4628      	mov	r0, r5
 8019e06:	f000 f96f 	bl	801a0e8 <uxr_seq_num_cmp>
 8019e0a:	2800      	cmp	r0, #0
 8019e0c:	dd45      	ble.n	8019e9a <uxr_prepare_reliable_buffer_to_write+0x28e>
 8019e0e:	2000      	movs	r0, #0
 8019e10:	b011      	add	sp, #68	@ 0x44
 8019e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e16:	8921      	ldrh	r1, [r4, #8]
 8019e18:	8a60      	ldrh	r0, [r4, #18]
 8019e1a:	9205      	str	r2, [sp, #20]
 8019e1c:	f000 f95c 	bl	801a0d8 <uxr_seq_num_add>
 8019e20:	4601      	mov	r1, r0
 8019e22:	4638      	mov	r0, r7
 8019e24:	f000 f960 	bl	801a0e8 <uxr_seq_num_cmp>
 8019e28:	2800      	cmp	r0, #0
 8019e2a:	9a05      	ldr	r2, [sp, #20]
 8019e2c:	dcef      	bgt.n	8019e0e <uxr_prepare_reliable_buffer_to_write+0x202>
 8019e2e:	8926      	ldrh	r6, [r4, #8]
 8019e30:	fbb7 f5f6 	udiv	r5, r7, r6
 8019e34:	fb06 7515 	mls	r5, r6, r5, r7
 8019e38:	b2ad      	uxth	r5, r5
 8019e3a:	6863      	ldr	r3, [r4, #4]
 8019e3c:	6824      	ldr	r4, [r4, #0]
 8019e3e:	fbb3 f3f6 	udiv	r3, r3, r6
 8019e42:	fb05 f303 	mul.w	r3, r5, r3
 8019e46:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019e4a:	50e2      	str	r2, [r4, r3]
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	f8cd a000 	str.w	sl, [sp]
 8019e52:	f7f4 ff31 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 8019e56:	e7c9      	b.n	8019dec <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8019e58:	f10c 0c01 	add.w	ip, ip, #1
 8019e5c:	fa1f fc8c 	uxth.w	ip, ip
 8019e60:	45b4      	cmp	ip, r6
 8019e62:	9306      	str	r3, [sp, #24]
 8019e64:	d8d3      	bhi.n	8019e0e <uxr_prepare_reliable_buffer_to_write+0x202>
 8019e66:	e739      	b.n	8019cdc <uxr_prepare_reliable_buffer_to_write+0xd0>
 8019e68:	4638      	mov	r0, r7
 8019e6a:	2101      	movs	r1, #1
 8019e6c:	9307      	str	r3, [sp, #28]
 8019e6e:	f000 f933 	bl	801a0d8 <uxr_seq_num_add>
 8019e72:	8921      	ldrh	r1, [r4, #8]
 8019e74:	6862      	ldr	r2, [r4, #4]
 8019e76:	4607      	mov	r7, r0
 8019e78:	fbb0 f0f1 	udiv	r0, r0, r1
 8019e7c:	fb01 7010 	mls	r0, r1, r0, r7
 8019e80:	b280      	uxth	r0, r0
 8019e82:	fbb2 f1f1 	udiv	r1, r2, r1
 8019e86:	6822      	ldr	r2, [r4, #0]
 8019e88:	fb00 f101 	mul.w	r1, r0, r1
 8019e8c:	3104      	adds	r1, #4
 8019e8e:	1853      	adds	r3, r2, r1
 8019e90:	9303      	str	r3, [sp, #12]
 8019e92:	f853 ac04 	ldr.w	sl, [r3, #-4]
 8019e96:	9b07      	ldr	r3, [sp, #28]
 8019e98:	e70b      	b.n	8019cb2 <uxr_prepare_reliable_buffer_to_write+0xa6>
 8019e9a:	8921      	ldrh	r1, [r4, #8]
 8019e9c:	fbb5 f2f1 	udiv	r2, r5, r1
 8019ea0:	fb01 5212 	mls	r2, r1, r2, r5
 8019ea4:	b292      	uxth	r2, r2
 8019ea6:	6863      	ldr	r3, [r4, #4]
 8019ea8:	fbb3 f3f1 	udiv	r3, r3, r1
 8019eac:	6821      	ldr	r1, [r4, #0]
 8019eae:	9804      	ldr	r0, [sp, #16]
 8019eb0:	fb02 f303 	mul.w	r3, r2, r3
 8019eb4:	3304      	adds	r3, #4
 8019eb6:	7b22      	ldrb	r2, [r4, #12]
 8019eb8:	4419      	add	r1, r3
 8019eba:	4442      	add	r2, r8
 8019ebc:	f841 2c04 	str.w	r2, [r1, #-4]
 8019ec0:	7b23      	ldrb	r3, [r4, #12]
 8019ec2:	9300      	str	r3, [sp, #0]
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	f7f4 fef7 	bl	800ecb8 <ucdr_init_buffer_origin_offset>
 8019eca:	81e5      	strh	r5, [r4, #14]
 8019ecc:	e78e      	b.n	8019dec <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8019ece:	4606      	mov	r6, r0
 8019ed0:	e6cc      	b.n	8019c6c <uxr_prepare_reliable_buffer_to_write+0x60>
 8019ed2:	bf00      	nop
 8019ed4:	08019af1 	.word	0x08019af1

08019ed8 <uxr_prepare_next_reliable_buffer_to_send>:
 8019ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eda:	4604      	mov	r4, r0
 8019edc:	460f      	mov	r7, r1
 8019ede:	8a00      	ldrh	r0, [r0, #16]
 8019ee0:	2101      	movs	r1, #1
 8019ee2:	4615      	mov	r5, r2
 8019ee4:	461e      	mov	r6, r3
 8019ee6:	f000 f8f7 	bl	801a0d8 <uxr_seq_num_add>
 8019eea:	8030      	strh	r0, [r6, #0]
 8019eec:	8922      	ldrh	r2, [r4, #8]
 8019eee:	fbb0 f3f2 	udiv	r3, r0, r2
 8019ef2:	fb02 0c13 	mls	ip, r2, r3, r0
 8019ef6:	fa1f fc8c 	uxth.w	ip, ip
 8019efa:	6863      	ldr	r3, [r4, #4]
 8019efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8019f00:	fb0c fc03 	mul.w	ip, ip, r3
 8019f04:	6823      	ldr	r3, [r4, #0]
 8019f06:	89e1      	ldrh	r1, [r4, #14]
 8019f08:	f10c 0c04 	add.w	ip, ip, #4
 8019f0c:	4463      	add	r3, ip
 8019f0e:	603b      	str	r3, [r7, #0]
 8019f10:	6823      	ldr	r3, [r4, #0]
 8019f12:	4463      	add	r3, ip
 8019f14:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019f18:	602b      	str	r3, [r5, #0]
 8019f1a:	f000 f8e5 	bl	801a0e8 <uxr_seq_num_cmp>
 8019f1e:	2800      	cmp	r0, #0
 8019f20:	dd01      	ble.n	8019f26 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019f22:	2000      	movs	r0, #0
 8019f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f26:	7b23      	ldrb	r3, [r4, #12]
 8019f28:	682a      	ldr	r2, [r5, #0]
 8019f2a:	429a      	cmp	r2, r3
 8019f2c:	d9f9      	bls.n	8019f22 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019f2e:	8a61      	ldrh	r1, [r4, #18]
 8019f30:	8a20      	ldrh	r0, [r4, #16]
 8019f32:	f000 f8d5 	bl	801a0e0 <uxr_seq_num_sub>
 8019f36:	8923      	ldrh	r3, [r4, #8]
 8019f38:	4283      	cmp	r3, r0
 8019f3a:	d0f2      	beq.n	8019f22 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019f3c:	8830      	ldrh	r0, [r6, #0]
 8019f3e:	89e3      	ldrh	r3, [r4, #14]
 8019f40:	8220      	strh	r0, [r4, #16]
 8019f42:	4298      	cmp	r0, r3
 8019f44:	d001      	beq.n	8019f4a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019f46:	2001      	movs	r0, #1
 8019f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f4a:	2101      	movs	r1, #1
 8019f4c:	f000 f8c4 	bl	801a0d8 <uxr_seq_num_add>
 8019f50:	81e0      	strh	r0, [r4, #14]
 8019f52:	e7f8      	b.n	8019f46 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

08019f54 <uxr_update_output_stream_heartbeat_timestamp>:
 8019f54:	b570      	push	{r4, r5, r6, lr}
 8019f56:	8a01      	ldrh	r1, [r0, #16]
 8019f58:	4604      	mov	r4, r0
 8019f5a:	8a40      	ldrh	r0, [r0, #18]
 8019f5c:	4615      	mov	r5, r2
 8019f5e:	461e      	mov	r6, r3
 8019f60:	f000 f8c2 	bl	801a0e8 <uxr_seq_num_cmp>
 8019f64:	2800      	cmp	r0, #0
 8019f66:	db07      	blt.n	8019f78 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019f68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8019f6c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8019f70:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019f74:	2000      	movs	r0, #0
 8019f76:	bd70      	pop	{r4, r5, r6, pc}
 8019f78:	f894 3020 	ldrb.w	r3, [r4, #32]
 8019f7c:	b953      	cbnz	r3, 8019f94 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8019f7e:	2301      	movs	r3, #1
 8019f80:	f884 3020 	strb.w	r3, [r4, #32]
 8019f84:	3564      	adds	r5, #100	@ 0x64
 8019f86:	f04f 0000 	mov.w	r0, #0
 8019f8a:	f146 0600 	adc.w	r6, r6, #0
 8019f8e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019f92:	bd70      	pop	{r4, r5, r6, pc}
 8019f94:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019f98:	428d      	cmp	r5, r1
 8019f9a:	eb76 0202 	sbcs.w	r2, r6, r2
 8019f9e:	dbf1      	blt.n	8019f84 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8019fa0:	3301      	adds	r3, #1
 8019fa2:	3564      	adds	r5, #100	@ 0x64
 8019fa4:	f884 3020 	strb.w	r3, [r4, #32]
 8019fa8:	f04f 0001 	mov.w	r0, #1
 8019fac:	f146 0600 	adc.w	r6, r6, #0
 8019fb0:	e7ed      	b.n	8019f8e <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8019fb2:	bf00      	nop

08019fb4 <uxr_begin_output_nack_buffer_it>:
 8019fb4:	8a40      	ldrh	r0, [r0, #18]
 8019fb6:	4770      	bx	lr

08019fb8 <uxr_next_reliable_nack_buffer_to_send>:
 8019fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fbc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8019fc0:	f1b8 0f00 	cmp.w	r8, #0
 8019fc4:	d104      	bne.n	8019fd0 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8019fc6:	f04f 0800 	mov.w	r8, #0
 8019fca:	4640      	mov	r0, r8
 8019fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fd0:	4604      	mov	r4, r0
 8019fd2:	460e      	mov	r6, r1
 8019fd4:	8818      	ldrh	r0, [r3, #0]
 8019fd6:	4617      	mov	r7, r2
 8019fd8:	461d      	mov	r5, r3
 8019fda:	e019      	b.n	801a010 <uxr_next_reliable_nack_buffer_to_send+0x58>
 8019fdc:	8921      	ldrh	r1, [r4, #8]
 8019fde:	8828      	ldrh	r0, [r5, #0]
 8019fe0:	fbb0 fcf1 	udiv	ip, r0, r1
 8019fe4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8019fe8:	fb01 0c1c 	mls	ip, r1, ip, r0
 8019fec:	fa1f fc8c 	uxth.w	ip, ip
 8019ff0:	fbb2 f2f1 	udiv	r2, r2, r1
 8019ff4:	fb02 fc0c 	mul.w	ip, r2, ip
 8019ff8:	f10c 0c04 	add.w	ip, ip, #4
 8019ffc:	4463      	add	r3, ip
 8019ffe:	6033      	str	r3, [r6, #0]
 801a000:	6823      	ldr	r3, [r4, #0]
 801a002:	4463      	add	r3, ip
 801a004:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a008:	603b      	str	r3, [r7, #0]
 801a00a:	7b22      	ldrb	r2, [r4, #12]
 801a00c:	429a      	cmp	r2, r3
 801a00e:	d1dc      	bne.n	8019fca <uxr_next_reliable_nack_buffer_to_send+0x12>
 801a010:	2101      	movs	r1, #1
 801a012:	f000 f861 	bl	801a0d8 <uxr_seq_num_add>
 801a016:	8028      	strh	r0, [r5, #0]
 801a018:	8a21      	ldrh	r1, [r4, #16]
 801a01a:	f000 f865 	bl	801a0e8 <uxr_seq_num_cmp>
 801a01e:	2800      	cmp	r0, #0
 801a020:	dddc      	ble.n	8019fdc <uxr_next_reliable_nack_buffer_to_send+0x24>
 801a022:	2300      	movs	r3, #0
 801a024:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801a028:	e7cd      	b.n	8019fc6 <uxr_next_reliable_nack_buffer_to_send+0xe>
 801a02a:	bf00      	nop

0801a02c <uxr_process_acknack>:
 801a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a02e:	4604      	mov	r4, r0
 801a030:	460e      	mov	r6, r1
 801a032:	4610      	mov	r0, r2
 801a034:	2101      	movs	r1, #1
 801a036:	f000 f853 	bl	801a0e0 <uxr_seq_num_sub>
 801a03a:	8a61      	ldrh	r1, [r4, #18]
 801a03c:	f000 f850 	bl	801a0e0 <uxr_seq_num_sub>
 801a040:	b1c0      	cbz	r0, 801a074 <uxr_process_acknack+0x48>
 801a042:	4605      	mov	r5, r0
 801a044:	2700      	movs	r7, #0
 801a046:	2101      	movs	r1, #1
 801a048:	8a60      	ldrh	r0, [r4, #18]
 801a04a:	f000 f845 	bl	801a0d8 <uxr_seq_num_add>
 801a04e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a052:	fbb0 f1fc 	udiv	r1, r0, ip
 801a056:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a05a:	fb0c 0111 	mls	r1, ip, r1, r0
 801a05e:	b289      	uxth	r1, r1
 801a060:	3701      	adds	r7, #1
 801a062:	fbb3 f3fc 	udiv	r3, r3, ip
 801a066:	fb01 f303 	mul.w	r3, r1, r3
 801a06a:	42bd      	cmp	r5, r7
 801a06c:	7b21      	ldrb	r1, [r4, #12]
 801a06e:	8260      	strh	r0, [r4, #18]
 801a070:	50d1      	str	r1, [r2, r3]
 801a072:	d1e8      	bne.n	801a046 <uxr_process_acknack+0x1a>
 801a074:	3e00      	subs	r6, #0
 801a076:	f04f 0300 	mov.w	r3, #0
 801a07a:	bf18      	it	ne
 801a07c:	2601      	movne	r6, #1
 801a07e:	f884 3020 	strb.w	r3, [r4, #32]
 801a082:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a088 <uxr_is_output_up_to_date>:
 801a088:	8a01      	ldrh	r1, [r0, #16]
 801a08a:	8a40      	ldrh	r0, [r0, #18]
 801a08c:	b508      	push	{r3, lr}
 801a08e:	f000 f82b 	bl	801a0e8 <uxr_seq_num_cmp>
 801a092:	fab0 f080 	clz	r0, r0
 801a096:	0940      	lsrs	r0, r0, #5
 801a098:	bd08      	pop	{r3, pc}
 801a09a:	bf00      	nop

0801a09c <get_available_free_slots>:
 801a09c:	8901      	ldrh	r1, [r0, #8]
 801a09e:	b1c1      	cbz	r1, 801a0d2 <get_available_free_slots+0x36>
 801a0a0:	b530      	push	{r4, r5, lr}
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	6843      	ldr	r3, [r0, #4]
 801a0a6:	6805      	ldr	r5, [r0, #0]
 801a0a8:	7b04      	ldrb	r4, [r0, #12]
 801a0aa:	fbb3 fef1 	udiv	lr, r3, r1
 801a0ae:	4610      	mov	r0, r2
 801a0b0:	b293      	uxth	r3, r2
 801a0b2:	fbb3 fcf1 	udiv	ip, r3, r1
 801a0b6:	fb01 331c 	mls	r3, r1, ip, r3
 801a0ba:	b29b      	uxth	r3, r3
 801a0bc:	fb0e f303 	mul.w	r3, lr, r3
 801a0c0:	3201      	adds	r2, #1
 801a0c2:	58eb      	ldr	r3, [r5, r3]
 801a0c4:	429c      	cmp	r4, r3
 801a0c6:	bf04      	itt	eq
 801a0c8:	3001      	addeq	r0, #1
 801a0ca:	b280      	uxtheq	r0, r0
 801a0cc:	4291      	cmp	r1, r2
 801a0ce:	d1ef      	bne.n	801a0b0 <get_available_free_slots+0x14>
 801a0d0:	bd30      	pop	{r4, r5, pc}
 801a0d2:	4608      	mov	r0, r1
 801a0d4:	4770      	bx	lr
 801a0d6:	bf00      	nop

0801a0d8 <uxr_seq_num_add>:
 801a0d8:	4408      	add	r0, r1
 801a0da:	b280      	uxth	r0, r0
 801a0dc:	4770      	bx	lr
 801a0de:	bf00      	nop

0801a0e0 <uxr_seq_num_sub>:
 801a0e0:	1a40      	subs	r0, r0, r1
 801a0e2:	b280      	uxth	r0, r0
 801a0e4:	4770      	bx	lr
 801a0e6:	bf00      	nop

0801a0e8 <uxr_seq_num_cmp>:
 801a0e8:	4288      	cmp	r0, r1
 801a0ea:	d010      	beq.n	801a10e <uxr_seq_num_cmp+0x26>
 801a0ec:	d207      	bcs.n	801a0fe <uxr_seq_num_cmp+0x16>
 801a0ee:	1a09      	subs	r1, r1, r0
 801a0f0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801a0f4:	bfb4      	ite	lt
 801a0f6:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801a0fa:	2001      	movge	r0, #1
 801a0fc:	4770      	bx	lr
 801a0fe:	1a41      	subs	r1, r0, r1
 801a100:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801a104:	bfcc      	ite	gt
 801a106:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a10a:	2001      	movle	r0, #1
 801a10c:	4770      	bx	lr
 801a10e:	2000      	movs	r0, #0
 801a110:	4770      	bx	lr
 801a112:	bf00      	nop

0801a114 <calloc>:
 801a114:	4b02      	ldr	r3, [pc, #8]	@ (801a120 <calloc+0xc>)
 801a116:	460a      	mov	r2, r1
 801a118:	4601      	mov	r1, r0
 801a11a:	6818      	ldr	r0, [r3, #0]
 801a11c:	f000 b802 	b.w	801a124 <_calloc_r>
 801a120:	20001240 	.word	0x20001240

0801a124 <_calloc_r>:
 801a124:	b570      	push	{r4, r5, r6, lr}
 801a126:	fba1 5402 	umull	r5, r4, r1, r2
 801a12a:	b93c      	cbnz	r4, 801a13c <_calloc_r+0x18>
 801a12c:	4629      	mov	r1, r5
 801a12e:	f000 f899 	bl	801a264 <_malloc_r>
 801a132:	4606      	mov	r6, r0
 801a134:	b928      	cbnz	r0, 801a142 <_calloc_r+0x1e>
 801a136:	2600      	movs	r6, #0
 801a138:	4630      	mov	r0, r6
 801a13a:	bd70      	pop	{r4, r5, r6, pc}
 801a13c:	220c      	movs	r2, #12
 801a13e:	6002      	str	r2, [r0, #0]
 801a140:	e7f9      	b.n	801a136 <_calloc_r+0x12>
 801a142:	462a      	mov	r2, r5
 801a144:	4621      	mov	r1, r4
 801a146:	f001 fbb9 	bl	801b8bc <memset>
 801a14a:	e7f5      	b.n	801a138 <_calloc_r+0x14>

0801a14c <exit>:
 801a14c:	b508      	push	{r3, lr}
 801a14e:	4b06      	ldr	r3, [pc, #24]	@ (801a168 <exit+0x1c>)
 801a150:	4604      	mov	r4, r0
 801a152:	b113      	cbz	r3, 801a15a <exit+0xe>
 801a154:	2100      	movs	r1, #0
 801a156:	f3af 8000 	nop.w
 801a15a:	4b04      	ldr	r3, [pc, #16]	@ (801a16c <exit+0x20>)
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	b103      	cbz	r3, 801a162 <exit+0x16>
 801a160:	4798      	blx	r3
 801a162:	4620      	mov	r0, r4
 801a164:	f7ea fa7c 	bl	8004660 <_exit>
 801a168:	00000000 	.word	0x00000000
 801a16c:	20017a6c 	.word	0x20017a6c

0801a170 <getenv>:
 801a170:	b507      	push	{r0, r1, r2, lr}
 801a172:	4b04      	ldr	r3, [pc, #16]	@ (801a184 <getenv+0x14>)
 801a174:	4601      	mov	r1, r0
 801a176:	aa01      	add	r2, sp, #4
 801a178:	6818      	ldr	r0, [r3, #0]
 801a17a:	f000 f805 	bl	801a188 <_findenv_r>
 801a17e:	b003      	add	sp, #12
 801a180:	f85d fb04 	ldr.w	pc, [sp], #4
 801a184:	20001240 	.word	0x20001240

0801a188 <_findenv_r>:
 801a188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a18c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801a1fc <_findenv_r+0x74>
 801a190:	4606      	mov	r6, r0
 801a192:	4689      	mov	r9, r1
 801a194:	4617      	mov	r7, r2
 801a196:	f002 fb47 	bl	801c828 <__env_lock>
 801a19a:	f8da 4000 	ldr.w	r4, [sl]
 801a19e:	b134      	cbz	r4, 801a1ae <_findenv_r+0x26>
 801a1a0:	464b      	mov	r3, r9
 801a1a2:	4698      	mov	r8, r3
 801a1a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1a8:	b13a      	cbz	r2, 801a1ba <_findenv_r+0x32>
 801a1aa:	2a3d      	cmp	r2, #61	@ 0x3d
 801a1ac:	d1f9      	bne.n	801a1a2 <_findenv_r+0x1a>
 801a1ae:	4630      	mov	r0, r6
 801a1b0:	f002 fb40 	bl	801c834 <__env_unlock>
 801a1b4:	2000      	movs	r0, #0
 801a1b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ba:	eba8 0809 	sub.w	r8, r8, r9
 801a1be:	46a3      	mov	fp, r4
 801a1c0:	f854 0b04 	ldr.w	r0, [r4], #4
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d0f2      	beq.n	801a1ae <_findenv_r+0x26>
 801a1c8:	4642      	mov	r2, r8
 801a1ca:	4649      	mov	r1, r9
 801a1cc:	f001 fb8b 	bl	801b8e6 <strncmp>
 801a1d0:	2800      	cmp	r0, #0
 801a1d2:	d1f4      	bne.n	801a1be <_findenv_r+0x36>
 801a1d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a1d8:	eb03 0508 	add.w	r5, r3, r8
 801a1dc:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a1e0:	2b3d      	cmp	r3, #61	@ 0x3d
 801a1e2:	d1ec      	bne.n	801a1be <_findenv_r+0x36>
 801a1e4:	f8da 3000 	ldr.w	r3, [sl]
 801a1e8:	ebab 0303 	sub.w	r3, fp, r3
 801a1ec:	109b      	asrs	r3, r3, #2
 801a1ee:	4630      	mov	r0, r6
 801a1f0:	603b      	str	r3, [r7, #0]
 801a1f2:	f002 fb1f 	bl	801c834 <__env_unlock>
 801a1f6:	1c68      	adds	r0, r5, #1
 801a1f8:	e7dd      	b.n	801a1b6 <_findenv_r+0x2e>
 801a1fa:	bf00      	nop
 801a1fc:	20000174 	.word	0x20000174

0801a200 <malloc>:
 801a200:	4b02      	ldr	r3, [pc, #8]	@ (801a20c <malloc+0xc>)
 801a202:	4601      	mov	r1, r0
 801a204:	6818      	ldr	r0, [r3, #0]
 801a206:	f000 b82d 	b.w	801a264 <_malloc_r>
 801a20a:	bf00      	nop
 801a20c:	20001240 	.word	0x20001240

0801a210 <free>:
 801a210:	4b02      	ldr	r3, [pc, #8]	@ (801a21c <free+0xc>)
 801a212:	4601      	mov	r1, r0
 801a214:	6818      	ldr	r0, [r3, #0]
 801a216:	f002 bb13 	b.w	801c840 <_free_r>
 801a21a:	bf00      	nop
 801a21c:	20001240 	.word	0x20001240

0801a220 <sbrk_aligned>:
 801a220:	b570      	push	{r4, r5, r6, lr}
 801a222:	4e0f      	ldr	r6, [pc, #60]	@ (801a260 <sbrk_aligned+0x40>)
 801a224:	460c      	mov	r4, r1
 801a226:	6831      	ldr	r1, [r6, #0]
 801a228:	4605      	mov	r5, r0
 801a22a:	b911      	cbnz	r1, 801a232 <sbrk_aligned+0x12>
 801a22c:	f001 fc24 	bl	801ba78 <_sbrk_r>
 801a230:	6030      	str	r0, [r6, #0]
 801a232:	4621      	mov	r1, r4
 801a234:	4628      	mov	r0, r5
 801a236:	f001 fc1f 	bl	801ba78 <_sbrk_r>
 801a23a:	1c43      	adds	r3, r0, #1
 801a23c:	d103      	bne.n	801a246 <sbrk_aligned+0x26>
 801a23e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a242:	4620      	mov	r0, r4
 801a244:	bd70      	pop	{r4, r5, r6, pc}
 801a246:	1cc4      	adds	r4, r0, #3
 801a248:	f024 0403 	bic.w	r4, r4, #3
 801a24c:	42a0      	cmp	r0, r4
 801a24e:	d0f8      	beq.n	801a242 <sbrk_aligned+0x22>
 801a250:	1a21      	subs	r1, r4, r0
 801a252:	4628      	mov	r0, r5
 801a254:	f001 fc10 	bl	801ba78 <_sbrk_r>
 801a258:	3001      	adds	r0, #1
 801a25a:	d1f2      	bne.n	801a242 <sbrk_aligned+0x22>
 801a25c:	e7ef      	b.n	801a23e <sbrk_aligned+0x1e>
 801a25e:	bf00      	nop
 801a260:	2001792c 	.word	0x2001792c

0801a264 <_malloc_r>:
 801a264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a268:	1ccd      	adds	r5, r1, #3
 801a26a:	f025 0503 	bic.w	r5, r5, #3
 801a26e:	3508      	adds	r5, #8
 801a270:	2d0c      	cmp	r5, #12
 801a272:	bf38      	it	cc
 801a274:	250c      	movcc	r5, #12
 801a276:	2d00      	cmp	r5, #0
 801a278:	4606      	mov	r6, r0
 801a27a:	db01      	blt.n	801a280 <_malloc_r+0x1c>
 801a27c:	42a9      	cmp	r1, r5
 801a27e:	d904      	bls.n	801a28a <_malloc_r+0x26>
 801a280:	230c      	movs	r3, #12
 801a282:	6033      	str	r3, [r6, #0]
 801a284:	2000      	movs	r0, #0
 801a286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a28a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a360 <_malloc_r+0xfc>
 801a28e:	f000 f869 	bl	801a364 <__malloc_lock>
 801a292:	f8d8 3000 	ldr.w	r3, [r8]
 801a296:	461c      	mov	r4, r3
 801a298:	bb44      	cbnz	r4, 801a2ec <_malloc_r+0x88>
 801a29a:	4629      	mov	r1, r5
 801a29c:	4630      	mov	r0, r6
 801a29e:	f7ff ffbf 	bl	801a220 <sbrk_aligned>
 801a2a2:	1c43      	adds	r3, r0, #1
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	d158      	bne.n	801a35a <_malloc_r+0xf6>
 801a2a8:	f8d8 4000 	ldr.w	r4, [r8]
 801a2ac:	4627      	mov	r7, r4
 801a2ae:	2f00      	cmp	r7, #0
 801a2b0:	d143      	bne.n	801a33a <_malloc_r+0xd6>
 801a2b2:	2c00      	cmp	r4, #0
 801a2b4:	d04b      	beq.n	801a34e <_malloc_r+0xea>
 801a2b6:	6823      	ldr	r3, [r4, #0]
 801a2b8:	4639      	mov	r1, r7
 801a2ba:	4630      	mov	r0, r6
 801a2bc:	eb04 0903 	add.w	r9, r4, r3
 801a2c0:	f001 fbda 	bl	801ba78 <_sbrk_r>
 801a2c4:	4581      	cmp	r9, r0
 801a2c6:	d142      	bne.n	801a34e <_malloc_r+0xea>
 801a2c8:	6821      	ldr	r1, [r4, #0]
 801a2ca:	1a6d      	subs	r5, r5, r1
 801a2cc:	4629      	mov	r1, r5
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	f7ff ffa6 	bl	801a220 <sbrk_aligned>
 801a2d4:	3001      	adds	r0, #1
 801a2d6:	d03a      	beq.n	801a34e <_malloc_r+0xea>
 801a2d8:	6823      	ldr	r3, [r4, #0]
 801a2da:	442b      	add	r3, r5
 801a2dc:	6023      	str	r3, [r4, #0]
 801a2de:	f8d8 3000 	ldr.w	r3, [r8]
 801a2e2:	685a      	ldr	r2, [r3, #4]
 801a2e4:	bb62      	cbnz	r2, 801a340 <_malloc_r+0xdc>
 801a2e6:	f8c8 7000 	str.w	r7, [r8]
 801a2ea:	e00f      	b.n	801a30c <_malloc_r+0xa8>
 801a2ec:	6822      	ldr	r2, [r4, #0]
 801a2ee:	1b52      	subs	r2, r2, r5
 801a2f0:	d420      	bmi.n	801a334 <_malloc_r+0xd0>
 801a2f2:	2a0b      	cmp	r2, #11
 801a2f4:	d917      	bls.n	801a326 <_malloc_r+0xc2>
 801a2f6:	1961      	adds	r1, r4, r5
 801a2f8:	42a3      	cmp	r3, r4
 801a2fa:	6025      	str	r5, [r4, #0]
 801a2fc:	bf18      	it	ne
 801a2fe:	6059      	strne	r1, [r3, #4]
 801a300:	6863      	ldr	r3, [r4, #4]
 801a302:	bf08      	it	eq
 801a304:	f8c8 1000 	streq.w	r1, [r8]
 801a308:	5162      	str	r2, [r4, r5]
 801a30a:	604b      	str	r3, [r1, #4]
 801a30c:	4630      	mov	r0, r6
 801a30e:	f000 f82f 	bl	801a370 <__malloc_unlock>
 801a312:	f104 000b 	add.w	r0, r4, #11
 801a316:	1d23      	adds	r3, r4, #4
 801a318:	f020 0007 	bic.w	r0, r0, #7
 801a31c:	1ac2      	subs	r2, r0, r3
 801a31e:	bf1c      	itt	ne
 801a320:	1a1b      	subne	r3, r3, r0
 801a322:	50a3      	strne	r3, [r4, r2]
 801a324:	e7af      	b.n	801a286 <_malloc_r+0x22>
 801a326:	6862      	ldr	r2, [r4, #4]
 801a328:	42a3      	cmp	r3, r4
 801a32a:	bf0c      	ite	eq
 801a32c:	f8c8 2000 	streq.w	r2, [r8]
 801a330:	605a      	strne	r2, [r3, #4]
 801a332:	e7eb      	b.n	801a30c <_malloc_r+0xa8>
 801a334:	4623      	mov	r3, r4
 801a336:	6864      	ldr	r4, [r4, #4]
 801a338:	e7ae      	b.n	801a298 <_malloc_r+0x34>
 801a33a:	463c      	mov	r4, r7
 801a33c:	687f      	ldr	r7, [r7, #4]
 801a33e:	e7b6      	b.n	801a2ae <_malloc_r+0x4a>
 801a340:	461a      	mov	r2, r3
 801a342:	685b      	ldr	r3, [r3, #4]
 801a344:	42a3      	cmp	r3, r4
 801a346:	d1fb      	bne.n	801a340 <_malloc_r+0xdc>
 801a348:	2300      	movs	r3, #0
 801a34a:	6053      	str	r3, [r2, #4]
 801a34c:	e7de      	b.n	801a30c <_malloc_r+0xa8>
 801a34e:	230c      	movs	r3, #12
 801a350:	6033      	str	r3, [r6, #0]
 801a352:	4630      	mov	r0, r6
 801a354:	f000 f80c 	bl	801a370 <__malloc_unlock>
 801a358:	e794      	b.n	801a284 <_malloc_r+0x20>
 801a35a:	6005      	str	r5, [r0, #0]
 801a35c:	e7d6      	b.n	801a30c <_malloc_r+0xa8>
 801a35e:	bf00      	nop
 801a360:	20017930 	.word	0x20017930

0801a364 <__malloc_lock>:
 801a364:	4801      	ldr	r0, [pc, #4]	@ (801a36c <__malloc_lock+0x8>)
 801a366:	f001 bbd4 	b.w	801bb12 <__retarget_lock_acquire_recursive>
 801a36a:	bf00      	nop
 801a36c:	20017a75 	.word	0x20017a75

0801a370 <__malloc_unlock>:
 801a370:	4801      	ldr	r0, [pc, #4]	@ (801a378 <__malloc_unlock+0x8>)
 801a372:	f001 bbcf 	b.w	801bb14 <__retarget_lock_release_recursive>
 801a376:	bf00      	nop
 801a378:	20017a75 	.word	0x20017a75

0801a37c <srand>:
 801a37c:	b538      	push	{r3, r4, r5, lr}
 801a37e:	4b10      	ldr	r3, [pc, #64]	@ (801a3c0 <srand+0x44>)
 801a380:	681d      	ldr	r5, [r3, #0]
 801a382:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a384:	4604      	mov	r4, r0
 801a386:	b9b3      	cbnz	r3, 801a3b6 <srand+0x3a>
 801a388:	2018      	movs	r0, #24
 801a38a:	f7ff ff39 	bl	801a200 <malloc>
 801a38e:	4602      	mov	r2, r0
 801a390:	6328      	str	r0, [r5, #48]	@ 0x30
 801a392:	b920      	cbnz	r0, 801a39e <srand+0x22>
 801a394:	4b0b      	ldr	r3, [pc, #44]	@ (801a3c4 <srand+0x48>)
 801a396:	480c      	ldr	r0, [pc, #48]	@ (801a3c8 <srand+0x4c>)
 801a398:	2146      	movs	r1, #70	@ 0x46
 801a39a:	f001 fbd9 	bl	801bb50 <__assert_func>
 801a39e:	490b      	ldr	r1, [pc, #44]	@ (801a3cc <srand+0x50>)
 801a3a0:	4b0b      	ldr	r3, [pc, #44]	@ (801a3d0 <srand+0x54>)
 801a3a2:	e9c0 1300 	strd	r1, r3, [r0]
 801a3a6:	4b0b      	ldr	r3, [pc, #44]	@ (801a3d4 <srand+0x58>)
 801a3a8:	6083      	str	r3, [r0, #8]
 801a3aa:	230b      	movs	r3, #11
 801a3ac:	8183      	strh	r3, [r0, #12]
 801a3ae:	2100      	movs	r1, #0
 801a3b0:	2001      	movs	r0, #1
 801a3b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a3b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	611c      	str	r4, [r3, #16]
 801a3bc:	615a      	str	r2, [r3, #20]
 801a3be:	bd38      	pop	{r3, r4, r5, pc}
 801a3c0:	20001240 	.word	0x20001240
 801a3c4:	08020266 	.word	0x08020266
 801a3c8:	0802027d 	.word	0x0802027d
 801a3cc:	abcd330e 	.word	0xabcd330e
 801a3d0:	e66d1234 	.word	0xe66d1234
 801a3d4:	0005deec 	.word	0x0005deec

0801a3d8 <rand>:
 801a3d8:	4b16      	ldr	r3, [pc, #88]	@ (801a434 <rand+0x5c>)
 801a3da:	b510      	push	{r4, lr}
 801a3dc:	681c      	ldr	r4, [r3, #0]
 801a3de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a3e0:	b9b3      	cbnz	r3, 801a410 <rand+0x38>
 801a3e2:	2018      	movs	r0, #24
 801a3e4:	f7ff ff0c 	bl	801a200 <malloc>
 801a3e8:	4602      	mov	r2, r0
 801a3ea:	6320      	str	r0, [r4, #48]	@ 0x30
 801a3ec:	b920      	cbnz	r0, 801a3f8 <rand+0x20>
 801a3ee:	4b12      	ldr	r3, [pc, #72]	@ (801a438 <rand+0x60>)
 801a3f0:	4812      	ldr	r0, [pc, #72]	@ (801a43c <rand+0x64>)
 801a3f2:	2152      	movs	r1, #82	@ 0x52
 801a3f4:	f001 fbac 	bl	801bb50 <__assert_func>
 801a3f8:	4911      	ldr	r1, [pc, #68]	@ (801a440 <rand+0x68>)
 801a3fa:	4b12      	ldr	r3, [pc, #72]	@ (801a444 <rand+0x6c>)
 801a3fc:	e9c0 1300 	strd	r1, r3, [r0]
 801a400:	4b11      	ldr	r3, [pc, #68]	@ (801a448 <rand+0x70>)
 801a402:	6083      	str	r3, [r0, #8]
 801a404:	230b      	movs	r3, #11
 801a406:	8183      	strh	r3, [r0, #12]
 801a408:	2100      	movs	r1, #0
 801a40a:	2001      	movs	r0, #1
 801a40c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a410:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a412:	480e      	ldr	r0, [pc, #56]	@ (801a44c <rand+0x74>)
 801a414:	690b      	ldr	r3, [r1, #16]
 801a416:	694c      	ldr	r4, [r1, #20]
 801a418:	4a0d      	ldr	r2, [pc, #52]	@ (801a450 <rand+0x78>)
 801a41a:	4358      	muls	r0, r3
 801a41c:	fb02 0004 	mla	r0, r2, r4, r0
 801a420:	fba3 3202 	umull	r3, r2, r3, r2
 801a424:	3301      	adds	r3, #1
 801a426:	eb40 0002 	adc.w	r0, r0, r2
 801a42a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a42e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a432:	bd10      	pop	{r4, pc}
 801a434:	20001240 	.word	0x20001240
 801a438:	08020266 	.word	0x08020266
 801a43c:	0802027d 	.word	0x0802027d
 801a440:	abcd330e 	.word	0xabcd330e
 801a444:	e66d1234 	.word	0xe66d1234
 801a448:	0005deec 	.word	0x0005deec
 801a44c:	5851f42d 	.word	0x5851f42d
 801a450:	4c957f2d 	.word	0x4c957f2d

0801a454 <realloc>:
 801a454:	4b02      	ldr	r3, [pc, #8]	@ (801a460 <realloc+0xc>)
 801a456:	460a      	mov	r2, r1
 801a458:	4601      	mov	r1, r0
 801a45a:	6818      	ldr	r0, [r3, #0]
 801a45c:	f000 b802 	b.w	801a464 <_realloc_r>
 801a460:	20001240 	.word	0x20001240

0801a464 <_realloc_r>:
 801a464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a468:	4680      	mov	r8, r0
 801a46a:	4615      	mov	r5, r2
 801a46c:	460c      	mov	r4, r1
 801a46e:	b921      	cbnz	r1, 801a47a <_realloc_r+0x16>
 801a470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a474:	4611      	mov	r1, r2
 801a476:	f7ff bef5 	b.w	801a264 <_malloc_r>
 801a47a:	b92a      	cbnz	r2, 801a488 <_realloc_r+0x24>
 801a47c:	f002 f9e0 	bl	801c840 <_free_r>
 801a480:	2400      	movs	r4, #0
 801a482:	4620      	mov	r0, r4
 801a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a488:	f002 fed6 	bl	801d238 <_malloc_usable_size_r>
 801a48c:	4285      	cmp	r5, r0
 801a48e:	4606      	mov	r6, r0
 801a490:	d802      	bhi.n	801a498 <_realloc_r+0x34>
 801a492:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a496:	d8f4      	bhi.n	801a482 <_realloc_r+0x1e>
 801a498:	4629      	mov	r1, r5
 801a49a:	4640      	mov	r0, r8
 801a49c:	f7ff fee2 	bl	801a264 <_malloc_r>
 801a4a0:	4607      	mov	r7, r0
 801a4a2:	2800      	cmp	r0, #0
 801a4a4:	d0ec      	beq.n	801a480 <_realloc_r+0x1c>
 801a4a6:	42b5      	cmp	r5, r6
 801a4a8:	462a      	mov	r2, r5
 801a4aa:	4621      	mov	r1, r4
 801a4ac:	bf28      	it	cs
 801a4ae:	4632      	movcs	r2, r6
 801a4b0:	f001 fb39 	bl	801bb26 <memcpy>
 801a4b4:	4621      	mov	r1, r4
 801a4b6:	4640      	mov	r0, r8
 801a4b8:	f002 f9c2 	bl	801c840 <_free_r>
 801a4bc:	463c      	mov	r4, r7
 801a4be:	e7e0      	b.n	801a482 <_realloc_r+0x1e>

0801a4c0 <_strtoul_l.constprop.0>:
 801a4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4c4:	4e34      	ldr	r6, [pc, #208]	@ (801a598 <_strtoul_l.constprop.0+0xd8>)
 801a4c6:	4686      	mov	lr, r0
 801a4c8:	460d      	mov	r5, r1
 801a4ca:	4628      	mov	r0, r5
 801a4cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a4d0:	5d37      	ldrb	r7, [r6, r4]
 801a4d2:	f017 0708 	ands.w	r7, r7, #8
 801a4d6:	d1f8      	bne.n	801a4ca <_strtoul_l.constprop.0+0xa>
 801a4d8:	2c2d      	cmp	r4, #45	@ 0x2d
 801a4da:	d12f      	bne.n	801a53c <_strtoul_l.constprop.0+0x7c>
 801a4dc:	782c      	ldrb	r4, [r5, #0]
 801a4de:	2701      	movs	r7, #1
 801a4e0:	1c85      	adds	r5, r0, #2
 801a4e2:	f033 0010 	bics.w	r0, r3, #16
 801a4e6:	d109      	bne.n	801a4fc <_strtoul_l.constprop.0+0x3c>
 801a4e8:	2c30      	cmp	r4, #48	@ 0x30
 801a4ea:	d12c      	bne.n	801a546 <_strtoul_l.constprop.0+0x86>
 801a4ec:	7828      	ldrb	r0, [r5, #0]
 801a4ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801a4f2:	2858      	cmp	r0, #88	@ 0x58
 801a4f4:	d127      	bne.n	801a546 <_strtoul_l.constprop.0+0x86>
 801a4f6:	786c      	ldrb	r4, [r5, #1]
 801a4f8:	2310      	movs	r3, #16
 801a4fa:	3502      	adds	r5, #2
 801a4fc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801a500:	2600      	movs	r6, #0
 801a502:	fbb8 f8f3 	udiv	r8, r8, r3
 801a506:	fb03 f908 	mul.w	r9, r3, r8
 801a50a:	ea6f 0909 	mvn.w	r9, r9
 801a50e:	4630      	mov	r0, r6
 801a510:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a514:	f1bc 0f09 	cmp.w	ip, #9
 801a518:	d81c      	bhi.n	801a554 <_strtoul_l.constprop.0+0x94>
 801a51a:	4664      	mov	r4, ip
 801a51c:	42a3      	cmp	r3, r4
 801a51e:	dd2a      	ble.n	801a576 <_strtoul_l.constprop.0+0xb6>
 801a520:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801a524:	d007      	beq.n	801a536 <_strtoul_l.constprop.0+0x76>
 801a526:	4580      	cmp	r8, r0
 801a528:	d322      	bcc.n	801a570 <_strtoul_l.constprop.0+0xb0>
 801a52a:	d101      	bne.n	801a530 <_strtoul_l.constprop.0+0x70>
 801a52c:	45a1      	cmp	r9, r4
 801a52e:	db1f      	blt.n	801a570 <_strtoul_l.constprop.0+0xb0>
 801a530:	fb00 4003 	mla	r0, r0, r3, r4
 801a534:	2601      	movs	r6, #1
 801a536:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a53a:	e7e9      	b.n	801a510 <_strtoul_l.constprop.0+0x50>
 801a53c:	2c2b      	cmp	r4, #43	@ 0x2b
 801a53e:	bf04      	itt	eq
 801a540:	782c      	ldrbeq	r4, [r5, #0]
 801a542:	1c85      	addeq	r5, r0, #2
 801a544:	e7cd      	b.n	801a4e2 <_strtoul_l.constprop.0+0x22>
 801a546:	2b00      	cmp	r3, #0
 801a548:	d1d8      	bne.n	801a4fc <_strtoul_l.constprop.0+0x3c>
 801a54a:	2c30      	cmp	r4, #48	@ 0x30
 801a54c:	bf0c      	ite	eq
 801a54e:	2308      	moveq	r3, #8
 801a550:	230a      	movne	r3, #10
 801a552:	e7d3      	b.n	801a4fc <_strtoul_l.constprop.0+0x3c>
 801a554:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a558:	f1bc 0f19 	cmp.w	ip, #25
 801a55c:	d801      	bhi.n	801a562 <_strtoul_l.constprop.0+0xa2>
 801a55e:	3c37      	subs	r4, #55	@ 0x37
 801a560:	e7dc      	b.n	801a51c <_strtoul_l.constprop.0+0x5c>
 801a562:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a566:	f1bc 0f19 	cmp.w	ip, #25
 801a56a:	d804      	bhi.n	801a576 <_strtoul_l.constprop.0+0xb6>
 801a56c:	3c57      	subs	r4, #87	@ 0x57
 801a56e:	e7d5      	b.n	801a51c <_strtoul_l.constprop.0+0x5c>
 801a570:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a574:	e7df      	b.n	801a536 <_strtoul_l.constprop.0+0x76>
 801a576:	1c73      	adds	r3, r6, #1
 801a578:	d106      	bne.n	801a588 <_strtoul_l.constprop.0+0xc8>
 801a57a:	2322      	movs	r3, #34	@ 0x22
 801a57c:	f8ce 3000 	str.w	r3, [lr]
 801a580:	4630      	mov	r0, r6
 801a582:	b932      	cbnz	r2, 801a592 <_strtoul_l.constprop.0+0xd2>
 801a584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a588:	b107      	cbz	r7, 801a58c <_strtoul_l.constprop.0+0xcc>
 801a58a:	4240      	negs	r0, r0
 801a58c:	2a00      	cmp	r2, #0
 801a58e:	d0f9      	beq.n	801a584 <_strtoul_l.constprop.0+0xc4>
 801a590:	b106      	cbz	r6, 801a594 <_strtoul_l.constprop.0+0xd4>
 801a592:	1e69      	subs	r1, r5, #1
 801a594:	6011      	str	r1, [r2, #0]
 801a596:	e7f5      	b.n	801a584 <_strtoul_l.constprop.0+0xc4>
 801a598:	080202d6 	.word	0x080202d6

0801a59c <strtoul>:
 801a59c:	4613      	mov	r3, r2
 801a59e:	460a      	mov	r2, r1
 801a5a0:	4601      	mov	r1, r0
 801a5a2:	4802      	ldr	r0, [pc, #8]	@ (801a5ac <strtoul+0x10>)
 801a5a4:	6800      	ldr	r0, [r0, #0]
 801a5a6:	f7ff bf8b 	b.w	801a4c0 <_strtoul_l.constprop.0>
 801a5aa:	bf00      	nop
 801a5ac:	20001240 	.word	0x20001240

0801a5b0 <__cvt>:
 801a5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a5b4:	ec57 6b10 	vmov	r6, r7, d0
 801a5b8:	2f00      	cmp	r7, #0
 801a5ba:	460c      	mov	r4, r1
 801a5bc:	4619      	mov	r1, r3
 801a5be:	463b      	mov	r3, r7
 801a5c0:	bfbb      	ittet	lt
 801a5c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a5c6:	461f      	movlt	r7, r3
 801a5c8:	2300      	movge	r3, #0
 801a5ca:	232d      	movlt	r3, #45	@ 0x2d
 801a5cc:	700b      	strb	r3, [r1, #0]
 801a5ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a5d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a5d4:	4691      	mov	r9, r2
 801a5d6:	f023 0820 	bic.w	r8, r3, #32
 801a5da:	bfbc      	itt	lt
 801a5dc:	4632      	movlt	r2, r6
 801a5de:	4616      	movlt	r6, r2
 801a5e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a5e4:	d005      	beq.n	801a5f2 <__cvt+0x42>
 801a5e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a5ea:	d100      	bne.n	801a5ee <__cvt+0x3e>
 801a5ec:	3401      	adds	r4, #1
 801a5ee:	2102      	movs	r1, #2
 801a5f0:	e000      	b.n	801a5f4 <__cvt+0x44>
 801a5f2:	2103      	movs	r1, #3
 801a5f4:	ab03      	add	r3, sp, #12
 801a5f6:	9301      	str	r3, [sp, #4]
 801a5f8:	ab02      	add	r3, sp, #8
 801a5fa:	9300      	str	r3, [sp, #0]
 801a5fc:	ec47 6b10 	vmov	d0, r6, r7
 801a600:	4653      	mov	r3, sl
 801a602:	4622      	mov	r2, r4
 801a604:	f001 fb4c 	bl	801bca0 <_dtoa_r>
 801a608:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a60c:	4605      	mov	r5, r0
 801a60e:	d119      	bne.n	801a644 <__cvt+0x94>
 801a610:	f019 0f01 	tst.w	r9, #1
 801a614:	d00e      	beq.n	801a634 <__cvt+0x84>
 801a616:	eb00 0904 	add.w	r9, r0, r4
 801a61a:	2200      	movs	r2, #0
 801a61c:	2300      	movs	r3, #0
 801a61e:	4630      	mov	r0, r6
 801a620:	4639      	mov	r1, r7
 801a622:	f7e6 fa81 	bl	8000b28 <__aeabi_dcmpeq>
 801a626:	b108      	cbz	r0, 801a62c <__cvt+0x7c>
 801a628:	f8cd 900c 	str.w	r9, [sp, #12]
 801a62c:	2230      	movs	r2, #48	@ 0x30
 801a62e:	9b03      	ldr	r3, [sp, #12]
 801a630:	454b      	cmp	r3, r9
 801a632:	d31e      	bcc.n	801a672 <__cvt+0xc2>
 801a634:	9b03      	ldr	r3, [sp, #12]
 801a636:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a638:	1b5b      	subs	r3, r3, r5
 801a63a:	4628      	mov	r0, r5
 801a63c:	6013      	str	r3, [r2, #0]
 801a63e:	b004      	add	sp, #16
 801a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a644:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a648:	eb00 0904 	add.w	r9, r0, r4
 801a64c:	d1e5      	bne.n	801a61a <__cvt+0x6a>
 801a64e:	7803      	ldrb	r3, [r0, #0]
 801a650:	2b30      	cmp	r3, #48	@ 0x30
 801a652:	d10a      	bne.n	801a66a <__cvt+0xba>
 801a654:	2200      	movs	r2, #0
 801a656:	2300      	movs	r3, #0
 801a658:	4630      	mov	r0, r6
 801a65a:	4639      	mov	r1, r7
 801a65c:	f7e6 fa64 	bl	8000b28 <__aeabi_dcmpeq>
 801a660:	b918      	cbnz	r0, 801a66a <__cvt+0xba>
 801a662:	f1c4 0401 	rsb	r4, r4, #1
 801a666:	f8ca 4000 	str.w	r4, [sl]
 801a66a:	f8da 3000 	ldr.w	r3, [sl]
 801a66e:	4499      	add	r9, r3
 801a670:	e7d3      	b.n	801a61a <__cvt+0x6a>
 801a672:	1c59      	adds	r1, r3, #1
 801a674:	9103      	str	r1, [sp, #12]
 801a676:	701a      	strb	r2, [r3, #0]
 801a678:	e7d9      	b.n	801a62e <__cvt+0x7e>

0801a67a <__exponent>:
 801a67a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a67c:	2900      	cmp	r1, #0
 801a67e:	bfba      	itte	lt
 801a680:	4249      	neglt	r1, r1
 801a682:	232d      	movlt	r3, #45	@ 0x2d
 801a684:	232b      	movge	r3, #43	@ 0x2b
 801a686:	2909      	cmp	r1, #9
 801a688:	7002      	strb	r2, [r0, #0]
 801a68a:	7043      	strb	r3, [r0, #1]
 801a68c:	dd29      	ble.n	801a6e2 <__exponent+0x68>
 801a68e:	f10d 0307 	add.w	r3, sp, #7
 801a692:	461d      	mov	r5, r3
 801a694:	270a      	movs	r7, #10
 801a696:	461a      	mov	r2, r3
 801a698:	fbb1 f6f7 	udiv	r6, r1, r7
 801a69c:	fb07 1416 	mls	r4, r7, r6, r1
 801a6a0:	3430      	adds	r4, #48	@ 0x30
 801a6a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a6a6:	460c      	mov	r4, r1
 801a6a8:	2c63      	cmp	r4, #99	@ 0x63
 801a6aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801a6ae:	4631      	mov	r1, r6
 801a6b0:	dcf1      	bgt.n	801a696 <__exponent+0x1c>
 801a6b2:	3130      	adds	r1, #48	@ 0x30
 801a6b4:	1e94      	subs	r4, r2, #2
 801a6b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a6ba:	1c41      	adds	r1, r0, #1
 801a6bc:	4623      	mov	r3, r4
 801a6be:	42ab      	cmp	r3, r5
 801a6c0:	d30a      	bcc.n	801a6d8 <__exponent+0x5e>
 801a6c2:	f10d 0309 	add.w	r3, sp, #9
 801a6c6:	1a9b      	subs	r3, r3, r2
 801a6c8:	42ac      	cmp	r4, r5
 801a6ca:	bf88      	it	hi
 801a6cc:	2300      	movhi	r3, #0
 801a6ce:	3302      	adds	r3, #2
 801a6d0:	4403      	add	r3, r0
 801a6d2:	1a18      	subs	r0, r3, r0
 801a6d4:	b003      	add	sp, #12
 801a6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a6dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a6e0:	e7ed      	b.n	801a6be <__exponent+0x44>
 801a6e2:	2330      	movs	r3, #48	@ 0x30
 801a6e4:	3130      	adds	r1, #48	@ 0x30
 801a6e6:	7083      	strb	r3, [r0, #2]
 801a6e8:	70c1      	strb	r1, [r0, #3]
 801a6ea:	1d03      	adds	r3, r0, #4
 801a6ec:	e7f1      	b.n	801a6d2 <__exponent+0x58>
	...

0801a6f0 <_printf_float>:
 801a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6f4:	b08d      	sub	sp, #52	@ 0x34
 801a6f6:	460c      	mov	r4, r1
 801a6f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a6fc:	4616      	mov	r6, r2
 801a6fe:	461f      	mov	r7, r3
 801a700:	4605      	mov	r5, r0
 801a702:	f001 f92b 	bl	801b95c <_localeconv_r>
 801a706:	6803      	ldr	r3, [r0, #0]
 801a708:	9304      	str	r3, [sp, #16]
 801a70a:	4618      	mov	r0, r3
 801a70c:	f7e5 fde0 	bl	80002d0 <strlen>
 801a710:	2300      	movs	r3, #0
 801a712:	930a      	str	r3, [sp, #40]	@ 0x28
 801a714:	f8d8 3000 	ldr.w	r3, [r8]
 801a718:	9005      	str	r0, [sp, #20]
 801a71a:	3307      	adds	r3, #7
 801a71c:	f023 0307 	bic.w	r3, r3, #7
 801a720:	f103 0208 	add.w	r2, r3, #8
 801a724:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a728:	f8d4 b000 	ldr.w	fp, [r4]
 801a72c:	f8c8 2000 	str.w	r2, [r8]
 801a730:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a734:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a738:	9307      	str	r3, [sp, #28]
 801a73a:	f8cd 8018 	str.w	r8, [sp, #24]
 801a73e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a746:	4b9c      	ldr	r3, [pc, #624]	@ (801a9b8 <_printf_float+0x2c8>)
 801a748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a74c:	f7e6 fa1e 	bl	8000b8c <__aeabi_dcmpun>
 801a750:	bb70      	cbnz	r0, 801a7b0 <_printf_float+0xc0>
 801a752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a756:	4b98      	ldr	r3, [pc, #608]	@ (801a9b8 <_printf_float+0x2c8>)
 801a758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a75c:	f7e6 f9f8 	bl	8000b50 <__aeabi_dcmple>
 801a760:	bb30      	cbnz	r0, 801a7b0 <_printf_float+0xc0>
 801a762:	2200      	movs	r2, #0
 801a764:	2300      	movs	r3, #0
 801a766:	4640      	mov	r0, r8
 801a768:	4649      	mov	r1, r9
 801a76a:	f7e6 f9e7 	bl	8000b3c <__aeabi_dcmplt>
 801a76e:	b110      	cbz	r0, 801a776 <_printf_float+0x86>
 801a770:	232d      	movs	r3, #45	@ 0x2d
 801a772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a776:	4a91      	ldr	r2, [pc, #580]	@ (801a9bc <_printf_float+0x2cc>)
 801a778:	4b91      	ldr	r3, [pc, #580]	@ (801a9c0 <_printf_float+0x2d0>)
 801a77a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a77e:	bf94      	ite	ls
 801a780:	4690      	movls	r8, r2
 801a782:	4698      	movhi	r8, r3
 801a784:	2303      	movs	r3, #3
 801a786:	6123      	str	r3, [r4, #16]
 801a788:	f02b 0304 	bic.w	r3, fp, #4
 801a78c:	6023      	str	r3, [r4, #0]
 801a78e:	f04f 0900 	mov.w	r9, #0
 801a792:	9700      	str	r7, [sp, #0]
 801a794:	4633      	mov	r3, r6
 801a796:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a798:	4621      	mov	r1, r4
 801a79a:	4628      	mov	r0, r5
 801a79c:	f000 f9d2 	bl	801ab44 <_printf_common>
 801a7a0:	3001      	adds	r0, #1
 801a7a2:	f040 808d 	bne.w	801a8c0 <_printf_float+0x1d0>
 801a7a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a7aa:	b00d      	add	sp, #52	@ 0x34
 801a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7b0:	4642      	mov	r2, r8
 801a7b2:	464b      	mov	r3, r9
 801a7b4:	4640      	mov	r0, r8
 801a7b6:	4649      	mov	r1, r9
 801a7b8:	f7e6 f9e8 	bl	8000b8c <__aeabi_dcmpun>
 801a7bc:	b140      	cbz	r0, 801a7d0 <_printf_float+0xe0>
 801a7be:	464b      	mov	r3, r9
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	bfbc      	itt	lt
 801a7c4:	232d      	movlt	r3, #45	@ 0x2d
 801a7c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a7ca:	4a7e      	ldr	r2, [pc, #504]	@ (801a9c4 <_printf_float+0x2d4>)
 801a7cc:	4b7e      	ldr	r3, [pc, #504]	@ (801a9c8 <_printf_float+0x2d8>)
 801a7ce:	e7d4      	b.n	801a77a <_printf_float+0x8a>
 801a7d0:	6863      	ldr	r3, [r4, #4]
 801a7d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a7d6:	9206      	str	r2, [sp, #24]
 801a7d8:	1c5a      	adds	r2, r3, #1
 801a7da:	d13b      	bne.n	801a854 <_printf_float+0x164>
 801a7dc:	2306      	movs	r3, #6
 801a7de:	6063      	str	r3, [r4, #4]
 801a7e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	6022      	str	r2, [r4, #0]
 801a7e8:	9303      	str	r3, [sp, #12]
 801a7ea:	ab0a      	add	r3, sp, #40	@ 0x28
 801a7ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a7f0:	ab09      	add	r3, sp, #36	@ 0x24
 801a7f2:	9300      	str	r3, [sp, #0]
 801a7f4:	6861      	ldr	r1, [r4, #4]
 801a7f6:	ec49 8b10 	vmov	d0, r8, r9
 801a7fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a7fe:	4628      	mov	r0, r5
 801a800:	f7ff fed6 	bl	801a5b0 <__cvt>
 801a804:	9b06      	ldr	r3, [sp, #24]
 801a806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a808:	2b47      	cmp	r3, #71	@ 0x47
 801a80a:	4680      	mov	r8, r0
 801a80c:	d129      	bne.n	801a862 <_printf_float+0x172>
 801a80e:	1cc8      	adds	r0, r1, #3
 801a810:	db02      	blt.n	801a818 <_printf_float+0x128>
 801a812:	6863      	ldr	r3, [r4, #4]
 801a814:	4299      	cmp	r1, r3
 801a816:	dd41      	ble.n	801a89c <_printf_float+0x1ac>
 801a818:	f1aa 0a02 	sub.w	sl, sl, #2
 801a81c:	fa5f fa8a 	uxtb.w	sl, sl
 801a820:	3901      	subs	r1, #1
 801a822:	4652      	mov	r2, sl
 801a824:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a828:	9109      	str	r1, [sp, #36]	@ 0x24
 801a82a:	f7ff ff26 	bl	801a67a <__exponent>
 801a82e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a830:	1813      	adds	r3, r2, r0
 801a832:	2a01      	cmp	r2, #1
 801a834:	4681      	mov	r9, r0
 801a836:	6123      	str	r3, [r4, #16]
 801a838:	dc02      	bgt.n	801a840 <_printf_float+0x150>
 801a83a:	6822      	ldr	r2, [r4, #0]
 801a83c:	07d2      	lsls	r2, r2, #31
 801a83e:	d501      	bpl.n	801a844 <_printf_float+0x154>
 801a840:	3301      	adds	r3, #1
 801a842:	6123      	str	r3, [r4, #16]
 801a844:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d0a2      	beq.n	801a792 <_printf_float+0xa2>
 801a84c:	232d      	movs	r3, #45	@ 0x2d
 801a84e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a852:	e79e      	b.n	801a792 <_printf_float+0xa2>
 801a854:	9a06      	ldr	r2, [sp, #24]
 801a856:	2a47      	cmp	r2, #71	@ 0x47
 801a858:	d1c2      	bne.n	801a7e0 <_printf_float+0xf0>
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d1c0      	bne.n	801a7e0 <_printf_float+0xf0>
 801a85e:	2301      	movs	r3, #1
 801a860:	e7bd      	b.n	801a7de <_printf_float+0xee>
 801a862:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a866:	d9db      	bls.n	801a820 <_printf_float+0x130>
 801a868:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a86c:	d118      	bne.n	801a8a0 <_printf_float+0x1b0>
 801a86e:	2900      	cmp	r1, #0
 801a870:	6863      	ldr	r3, [r4, #4]
 801a872:	dd0b      	ble.n	801a88c <_printf_float+0x19c>
 801a874:	6121      	str	r1, [r4, #16]
 801a876:	b913      	cbnz	r3, 801a87e <_printf_float+0x18e>
 801a878:	6822      	ldr	r2, [r4, #0]
 801a87a:	07d0      	lsls	r0, r2, #31
 801a87c:	d502      	bpl.n	801a884 <_printf_float+0x194>
 801a87e:	3301      	adds	r3, #1
 801a880:	440b      	add	r3, r1
 801a882:	6123      	str	r3, [r4, #16]
 801a884:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a886:	f04f 0900 	mov.w	r9, #0
 801a88a:	e7db      	b.n	801a844 <_printf_float+0x154>
 801a88c:	b913      	cbnz	r3, 801a894 <_printf_float+0x1a4>
 801a88e:	6822      	ldr	r2, [r4, #0]
 801a890:	07d2      	lsls	r2, r2, #31
 801a892:	d501      	bpl.n	801a898 <_printf_float+0x1a8>
 801a894:	3302      	adds	r3, #2
 801a896:	e7f4      	b.n	801a882 <_printf_float+0x192>
 801a898:	2301      	movs	r3, #1
 801a89a:	e7f2      	b.n	801a882 <_printf_float+0x192>
 801a89c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a8a2:	4299      	cmp	r1, r3
 801a8a4:	db05      	blt.n	801a8b2 <_printf_float+0x1c2>
 801a8a6:	6823      	ldr	r3, [r4, #0]
 801a8a8:	6121      	str	r1, [r4, #16]
 801a8aa:	07d8      	lsls	r0, r3, #31
 801a8ac:	d5ea      	bpl.n	801a884 <_printf_float+0x194>
 801a8ae:	1c4b      	adds	r3, r1, #1
 801a8b0:	e7e7      	b.n	801a882 <_printf_float+0x192>
 801a8b2:	2900      	cmp	r1, #0
 801a8b4:	bfd4      	ite	le
 801a8b6:	f1c1 0202 	rsble	r2, r1, #2
 801a8ba:	2201      	movgt	r2, #1
 801a8bc:	4413      	add	r3, r2
 801a8be:	e7e0      	b.n	801a882 <_printf_float+0x192>
 801a8c0:	6823      	ldr	r3, [r4, #0]
 801a8c2:	055a      	lsls	r2, r3, #21
 801a8c4:	d407      	bmi.n	801a8d6 <_printf_float+0x1e6>
 801a8c6:	6923      	ldr	r3, [r4, #16]
 801a8c8:	4642      	mov	r2, r8
 801a8ca:	4631      	mov	r1, r6
 801a8cc:	4628      	mov	r0, r5
 801a8ce:	47b8      	blx	r7
 801a8d0:	3001      	adds	r0, #1
 801a8d2:	d12b      	bne.n	801a92c <_printf_float+0x23c>
 801a8d4:	e767      	b.n	801a7a6 <_printf_float+0xb6>
 801a8d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a8da:	f240 80dd 	bls.w	801aa98 <_printf_float+0x3a8>
 801a8de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	2300      	movs	r3, #0
 801a8e6:	f7e6 f91f 	bl	8000b28 <__aeabi_dcmpeq>
 801a8ea:	2800      	cmp	r0, #0
 801a8ec:	d033      	beq.n	801a956 <_printf_float+0x266>
 801a8ee:	4a37      	ldr	r2, [pc, #220]	@ (801a9cc <_printf_float+0x2dc>)
 801a8f0:	2301      	movs	r3, #1
 801a8f2:	4631      	mov	r1, r6
 801a8f4:	4628      	mov	r0, r5
 801a8f6:	47b8      	blx	r7
 801a8f8:	3001      	adds	r0, #1
 801a8fa:	f43f af54 	beq.w	801a7a6 <_printf_float+0xb6>
 801a8fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a902:	4543      	cmp	r3, r8
 801a904:	db02      	blt.n	801a90c <_printf_float+0x21c>
 801a906:	6823      	ldr	r3, [r4, #0]
 801a908:	07d8      	lsls	r0, r3, #31
 801a90a:	d50f      	bpl.n	801a92c <_printf_float+0x23c>
 801a90c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a910:	4631      	mov	r1, r6
 801a912:	4628      	mov	r0, r5
 801a914:	47b8      	blx	r7
 801a916:	3001      	adds	r0, #1
 801a918:	f43f af45 	beq.w	801a7a6 <_printf_float+0xb6>
 801a91c:	f04f 0900 	mov.w	r9, #0
 801a920:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a924:	f104 0a1a 	add.w	sl, r4, #26
 801a928:	45c8      	cmp	r8, r9
 801a92a:	dc09      	bgt.n	801a940 <_printf_float+0x250>
 801a92c:	6823      	ldr	r3, [r4, #0]
 801a92e:	079b      	lsls	r3, r3, #30
 801a930:	f100 8103 	bmi.w	801ab3a <_printf_float+0x44a>
 801a934:	68e0      	ldr	r0, [r4, #12]
 801a936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a938:	4298      	cmp	r0, r3
 801a93a:	bfb8      	it	lt
 801a93c:	4618      	movlt	r0, r3
 801a93e:	e734      	b.n	801a7aa <_printf_float+0xba>
 801a940:	2301      	movs	r3, #1
 801a942:	4652      	mov	r2, sl
 801a944:	4631      	mov	r1, r6
 801a946:	4628      	mov	r0, r5
 801a948:	47b8      	blx	r7
 801a94a:	3001      	adds	r0, #1
 801a94c:	f43f af2b 	beq.w	801a7a6 <_printf_float+0xb6>
 801a950:	f109 0901 	add.w	r9, r9, #1
 801a954:	e7e8      	b.n	801a928 <_printf_float+0x238>
 801a956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a958:	2b00      	cmp	r3, #0
 801a95a:	dc39      	bgt.n	801a9d0 <_printf_float+0x2e0>
 801a95c:	4a1b      	ldr	r2, [pc, #108]	@ (801a9cc <_printf_float+0x2dc>)
 801a95e:	2301      	movs	r3, #1
 801a960:	4631      	mov	r1, r6
 801a962:	4628      	mov	r0, r5
 801a964:	47b8      	blx	r7
 801a966:	3001      	adds	r0, #1
 801a968:	f43f af1d 	beq.w	801a7a6 <_printf_float+0xb6>
 801a96c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a970:	ea59 0303 	orrs.w	r3, r9, r3
 801a974:	d102      	bne.n	801a97c <_printf_float+0x28c>
 801a976:	6823      	ldr	r3, [r4, #0]
 801a978:	07d9      	lsls	r1, r3, #31
 801a97a:	d5d7      	bpl.n	801a92c <_printf_float+0x23c>
 801a97c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a980:	4631      	mov	r1, r6
 801a982:	4628      	mov	r0, r5
 801a984:	47b8      	blx	r7
 801a986:	3001      	adds	r0, #1
 801a988:	f43f af0d 	beq.w	801a7a6 <_printf_float+0xb6>
 801a98c:	f04f 0a00 	mov.w	sl, #0
 801a990:	f104 0b1a 	add.w	fp, r4, #26
 801a994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a996:	425b      	negs	r3, r3
 801a998:	4553      	cmp	r3, sl
 801a99a:	dc01      	bgt.n	801a9a0 <_printf_float+0x2b0>
 801a99c:	464b      	mov	r3, r9
 801a99e:	e793      	b.n	801a8c8 <_printf_float+0x1d8>
 801a9a0:	2301      	movs	r3, #1
 801a9a2:	465a      	mov	r2, fp
 801a9a4:	4631      	mov	r1, r6
 801a9a6:	4628      	mov	r0, r5
 801a9a8:	47b8      	blx	r7
 801a9aa:	3001      	adds	r0, #1
 801a9ac:	f43f aefb 	beq.w	801a7a6 <_printf_float+0xb6>
 801a9b0:	f10a 0a01 	add.w	sl, sl, #1
 801a9b4:	e7ee      	b.n	801a994 <_printf_float+0x2a4>
 801a9b6:	bf00      	nop
 801a9b8:	7fefffff 	.word	0x7fefffff
 801a9bc:	080203d6 	.word	0x080203d6
 801a9c0:	080203da 	.word	0x080203da
 801a9c4:	080203de 	.word	0x080203de
 801a9c8:	080203e2 	.word	0x080203e2
 801a9cc:	080203e6 	.word	0x080203e6
 801a9d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a9d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a9d6:	4553      	cmp	r3, sl
 801a9d8:	bfa8      	it	ge
 801a9da:	4653      	movge	r3, sl
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	4699      	mov	r9, r3
 801a9e0:	dc36      	bgt.n	801aa50 <_printf_float+0x360>
 801a9e2:	f04f 0b00 	mov.w	fp, #0
 801a9e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a9ea:	f104 021a 	add.w	r2, r4, #26
 801a9ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a9f0:	9306      	str	r3, [sp, #24]
 801a9f2:	eba3 0309 	sub.w	r3, r3, r9
 801a9f6:	455b      	cmp	r3, fp
 801a9f8:	dc31      	bgt.n	801aa5e <_printf_float+0x36e>
 801a9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9fc:	459a      	cmp	sl, r3
 801a9fe:	dc3a      	bgt.n	801aa76 <_printf_float+0x386>
 801aa00:	6823      	ldr	r3, [r4, #0]
 801aa02:	07da      	lsls	r2, r3, #31
 801aa04:	d437      	bmi.n	801aa76 <_printf_float+0x386>
 801aa06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa08:	ebaa 0903 	sub.w	r9, sl, r3
 801aa0c:	9b06      	ldr	r3, [sp, #24]
 801aa0e:	ebaa 0303 	sub.w	r3, sl, r3
 801aa12:	4599      	cmp	r9, r3
 801aa14:	bfa8      	it	ge
 801aa16:	4699      	movge	r9, r3
 801aa18:	f1b9 0f00 	cmp.w	r9, #0
 801aa1c:	dc33      	bgt.n	801aa86 <_printf_float+0x396>
 801aa1e:	f04f 0800 	mov.w	r8, #0
 801aa22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aa26:	f104 0b1a 	add.w	fp, r4, #26
 801aa2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa2c:	ebaa 0303 	sub.w	r3, sl, r3
 801aa30:	eba3 0309 	sub.w	r3, r3, r9
 801aa34:	4543      	cmp	r3, r8
 801aa36:	f77f af79 	ble.w	801a92c <_printf_float+0x23c>
 801aa3a:	2301      	movs	r3, #1
 801aa3c:	465a      	mov	r2, fp
 801aa3e:	4631      	mov	r1, r6
 801aa40:	4628      	mov	r0, r5
 801aa42:	47b8      	blx	r7
 801aa44:	3001      	adds	r0, #1
 801aa46:	f43f aeae 	beq.w	801a7a6 <_printf_float+0xb6>
 801aa4a:	f108 0801 	add.w	r8, r8, #1
 801aa4e:	e7ec      	b.n	801aa2a <_printf_float+0x33a>
 801aa50:	4642      	mov	r2, r8
 801aa52:	4631      	mov	r1, r6
 801aa54:	4628      	mov	r0, r5
 801aa56:	47b8      	blx	r7
 801aa58:	3001      	adds	r0, #1
 801aa5a:	d1c2      	bne.n	801a9e2 <_printf_float+0x2f2>
 801aa5c:	e6a3      	b.n	801a7a6 <_printf_float+0xb6>
 801aa5e:	2301      	movs	r3, #1
 801aa60:	4631      	mov	r1, r6
 801aa62:	4628      	mov	r0, r5
 801aa64:	9206      	str	r2, [sp, #24]
 801aa66:	47b8      	blx	r7
 801aa68:	3001      	adds	r0, #1
 801aa6a:	f43f ae9c 	beq.w	801a7a6 <_printf_float+0xb6>
 801aa6e:	9a06      	ldr	r2, [sp, #24]
 801aa70:	f10b 0b01 	add.w	fp, fp, #1
 801aa74:	e7bb      	b.n	801a9ee <_printf_float+0x2fe>
 801aa76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aa7a:	4631      	mov	r1, r6
 801aa7c:	4628      	mov	r0, r5
 801aa7e:	47b8      	blx	r7
 801aa80:	3001      	adds	r0, #1
 801aa82:	d1c0      	bne.n	801aa06 <_printf_float+0x316>
 801aa84:	e68f      	b.n	801a7a6 <_printf_float+0xb6>
 801aa86:	9a06      	ldr	r2, [sp, #24]
 801aa88:	464b      	mov	r3, r9
 801aa8a:	4442      	add	r2, r8
 801aa8c:	4631      	mov	r1, r6
 801aa8e:	4628      	mov	r0, r5
 801aa90:	47b8      	blx	r7
 801aa92:	3001      	adds	r0, #1
 801aa94:	d1c3      	bne.n	801aa1e <_printf_float+0x32e>
 801aa96:	e686      	b.n	801a7a6 <_printf_float+0xb6>
 801aa98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801aa9c:	f1ba 0f01 	cmp.w	sl, #1
 801aaa0:	dc01      	bgt.n	801aaa6 <_printf_float+0x3b6>
 801aaa2:	07db      	lsls	r3, r3, #31
 801aaa4:	d536      	bpl.n	801ab14 <_printf_float+0x424>
 801aaa6:	2301      	movs	r3, #1
 801aaa8:	4642      	mov	r2, r8
 801aaaa:	4631      	mov	r1, r6
 801aaac:	4628      	mov	r0, r5
 801aaae:	47b8      	blx	r7
 801aab0:	3001      	adds	r0, #1
 801aab2:	f43f ae78 	beq.w	801a7a6 <_printf_float+0xb6>
 801aab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aaba:	4631      	mov	r1, r6
 801aabc:	4628      	mov	r0, r5
 801aabe:	47b8      	blx	r7
 801aac0:	3001      	adds	r0, #1
 801aac2:	f43f ae70 	beq.w	801a7a6 <_printf_float+0xb6>
 801aac6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801aaca:	2200      	movs	r2, #0
 801aacc:	2300      	movs	r3, #0
 801aace:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801aad2:	f7e6 f829 	bl	8000b28 <__aeabi_dcmpeq>
 801aad6:	b9c0      	cbnz	r0, 801ab0a <_printf_float+0x41a>
 801aad8:	4653      	mov	r3, sl
 801aada:	f108 0201 	add.w	r2, r8, #1
 801aade:	4631      	mov	r1, r6
 801aae0:	4628      	mov	r0, r5
 801aae2:	47b8      	blx	r7
 801aae4:	3001      	adds	r0, #1
 801aae6:	d10c      	bne.n	801ab02 <_printf_float+0x412>
 801aae8:	e65d      	b.n	801a7a6 <_printf_float+0xb6>
 801aaea:	2301      	movs	r3, #1
 801aaec:	465a      	mov	r2, fp
 801aaee:	4631      	mov	r1, r6
 801aaf0:	4628      	mov	r0, r5
 801aaf2:	47b8      	blx	r7
 801aaf4:	3001      	adds	r0, #1
 801aaf6:	f43f ae56 	beq.w	801a7a6 <_printf_float+0xb6>
 801aafa:	f108 0801 	add.w	r8, r8, #1
 801aafe:	45d0      	cmp	r8, sl
 801ab00:	dbf3      	blt.n	801aaea <_printf_float+0x3fa>
 801ab02:	464b      	mov	r3, r9
 801ab04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ab08:	e6df      	b.n	801a8ca <_printf_float+0x1da>
 801ab0a:	f04f 0800 	mov.w	r8, #0
 801ab0e:	f104 0b1a 	add.w	fp, r4, #26
 801ab12:	e7f4      	b.n	801aafe <_printf_float+0x40e>
 801ab14:	2301      	movs	r3, #1
 801ab16:	4642      	mov	r2, r8
 801ab18:	e7e1      	b.n	801aade <_printf_float+0x3ee>
 801ab1a:	2301      	movs	r3, #1
 801ab1c:	464a      	mov	r2, r9
 801ab1e:	4631      	mov	r1, r6
 801ab20:	4628      	mov	r0, r5
 801ab22:	47b8      	blx	r7
 801ab24:	3001      	adds	r0, #1
 801ab26:	f43f ae3e 	beq.w	801a7a6 <_printf_float+0xb6>
 801ab2a:	f108 0801 	add.w	r8, r8, #1
 801ab2e:	68e3      	ldr	r3, [r4, #12]
 801ab30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ab32:	1a5b      	subs	r3, r3, r1
 801ab34:	4543      	cmp	r3, r8
 801ab36:	dcf0      	bgt.n	801ab1a <_printf_float+0x42a>
 801ab38:	e6fc      	b.n	801a934 <_printf_float+0x244>
 801ab3a:	f04f 0800 	mov.w	r8, #0
 801ab3e:	f104 0919 	add.w	r9, r4, #25
 801ab42:	e7f4      	b.n	801ab2e <_printf_float+0x43e>

0801ab44 <_printf_common>:
 801ab44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab48:	4616      	mov	r6, r2
 801ab4a:	4698      	mov	r8, r3
 801ab4c:	688a      	ldr	r2, [r1, #8]
 801ab4e:	690b      	ldr	r3, [r1, #16]
 801ab50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ab54:	4293      	cmp	r3, r2
 801ab56:	bfb8      	it	lt
 801ab58:	4613      	movlt	r3, r2
 801ab5a:	6033      	str	r3, [r6, #0]
 801ab5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ab60:	4607      	mov	r7, r0
 801ab62:	460c      	mov	r4, r1
 801ab64:	b10a      	cbz	r2, 801ab6a <_printf_common+0x26>
 801ab66:	3301      	adds	r3, #1
 801ab68:	6033      	str	r3, [r6, #0]
 801ab6a:	6823      	ldr	r3, [r4, #0]
 801ab6c:	0699      	lsls	r1, r3, #26
 801ab6e:	bf42      	ittt	mi
 801ab70:	6833      	ldrmi	r3, [r6, #0]
 801ab72:	3302      	addmi	r3, #2
 801ab74:	6033      	strmi	r3, [r6, #0]
 801ab76:	6825      	ldr	r5, [r4, #0]
 801ab78:	f015 0506 	ands.w	r5, r5, #6
 801ab7c:	d106      	bne.n	801ab8c <_printf_common+0x48>
 801ab7e:	f104 0a19 	add.w	sl, r4, #25
 801ab82:	68e3      	ldr	r3, [r4, #12]
 801ab84:	6832      	ldr	r2, [r6, #0]
 801ab86:	1a9b      	subs	r3, r3, r2
 801ab88:	42ab      	cmp	r3, r5
 801ab8a:	dc26      	bgt.n	801abda <_printf_common+0x96>
 801ab8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ab90:	6822      	ldr	r2, [r4, #0]
 801ab92:	3b00      	subs	r3, #0
 801ab94:	bf18      	it	ne
 801ab96:	2301      	movne	r3, #1
 801ab98:	0692      	lsls	r2, r2, #26
 801ab9a:	d42b      	bmi.n	801abf4 <_printf_common+0xb0>
 801ab9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801aba0:	4641      	mov	r1, r8
 801aba2:	4638      	mov	r0, r7
 801aba4:	47c8      	blx	r9
 801aba6:	3001      	adds	r0, #1
 801aba8:	d01e      	beq.n	801abe8 <_printf_common+0xa4>
 801abaa:	6823      	ldr	r3, [r4, #0]
 801abac:	6922      	ldr	r2, [r4, #16]
 801abae:	f003 0306 	and.w	r3, r3, #6
 801abb2:	2b04      	cmp	r3, #4
 801abb4:	bf02      	ittt	eq
 801abb6:	68e5      	ldreq	r5, [r4, #12]
 801abb8:	6833      	ldreq	r3, [r6, #0]
 801abba:	1aed      	subeq	r5, r5, r3
 801abbc:	68a3      	ldr	r3, [r4, #8]
 801abbe:	bf0c      	ite	eq
 801abc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801abc4:	2500      	movne	r5, #0
 801abc6:	4293      	cmp	r3, r2
 801abc8:	bfc4      	itt	gt
 801abca:	1a9b      	subgt	r3, r3, r2
 801abcc:	18ed      	addgt	r5, r5, r3
 801abce:	2600      	movs	r6, #0
 801abd0:	341a      	adds	r4, #26
 801abd2:	42b5      	cmp	r5, r6
 801abd4:	d11a      	bne.n	801ac0c <_printf_common+0xc8>
 801abd6:	2000      	movs	r0, #0
 801abd8:	e008      	b.n	801abec <_printf_common+0xa8>
 801abda:	2301      	movs	r3, #1
 801abdc:	4652      	mov	r2, sl
 801abde:	4641      	mov	r1, r8
 801abe0:	4638      	mov	r0, r7
 801abe2:	47c8      	blx	r9
 801abe4:	3001      	adds	r0, #1
 801abe6:	d103      	bne.n	801abf0 <_printf_common+0xac>
 801abe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abf0:	3501      	adds	r5, #1
 801abf2:	e7c6      	b.n	801ab82 <_printf_common+0x3e>
 801abf4:	18e1      	adds	r1, r4, r3
 801abf6:	1c5a      	adds	r2, r3, #1
 801abf8:	2030      	movs	r0, #48	@ 0x30
 801abfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801abfe:	4422      	add	r2, r4
 801ac00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ac04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ac08:	3302      	adds	r3, #2
 801ac0a:	e7c7      	b.n	801ab9c <_printf_common+0x58>
 801ac0c:	2301      	movs	r3, #1
 801ac0e:	4622      	mov	r2, r4
 801ac10:	4641      	mov	r1, r8
 801ac12:	4638      	mov	r0, r7
 801ac14:	47c8      	blx	r9
 801ac16:	3001      	adds	r0, #1
 801ac18:	d0e6      	beq.n	801abe8 <_printf_common+0xa4>
 801ac1a:	3601      	adds	r6, #1
 801ac1c:	e7d9      	b.n	801abd2 <_printf_common+0x8e>
	...

0801ac20 <_printf_i>:
 801ac20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac24:	7e0f      	ldrb	r7, [r1, #24]
 801ac26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ac28:	2f78      	cmp	r7, #120	@ 0x78
 801ac2a:	4691      	mov	r9, r2
 801ac2c:	4680      	mov	r8, r0
 801ac2e:	460c      	mov	r4, r1
 801ac30:	469a      	mov	sl, r3
 801ac32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ac36:	d807      	bhi.n	801ac48 <_printf_i+0x28>
 801ac38:	2f62      	cmp	r7, #98	@ 0x62
 801ac3a:	d80a      	bhi.n	801ac52 <_printf_i+0x32>
 801ac3c:	2f00      	cmp	r7, #0
 801ac3e:	f000 80d2 	beq.w	801ade6 <_printf_i+0x1c6>
 801ac42:	2f58      	cmp	r7, #88	@ 0x58
 801ac44:	f000 80b9 	beq.w	801adba <_printf_i+0x19a>
 801ac48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ac4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ac50:	e03a      	b.n	801acc8 <_printf_i+0xa8>
 801ac52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ac56:	2b15      	cmp	r3, #21
 801ac58:	d8f6      	bhi.n	801ac48 <_printf_i+0x28>
 801ac5a:	a101      	add	r1, pc, #4	@ (adr r1, 801ac60 <_printf_i+0x40>)
 801ac5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ac60:	0801acb9 	.word	0x0801acb9
 801ac64:	0801accd 	.word	0x0801accd
 801ac68:	0801ac49 	.word	0x0801ac49
 801ac6c:	0801ac49 	.word	0x0801ac49
 801ac70:	0801ac49 	.word	0x0801ac49
 801ac74:	0801ac49 	.word	0x0801ac49
 801ac78:	0801accd 	.word	0x0801accd
 801ac7c:	0801ac49 	.word	0x0801ac49
 801ac80:	0801ac49 	.word	0x0801ac49
 801ac84:	0801ac49 	.word	0x0801ac49
 801ac88:	0801ac49 	.word	0x0801ac49
 801ac8c:	0801adcd 	.word	0x0801adcd
 801ac90:	0801acf7 	.word	0x0801acf7
 801ac94:	0801ad87 	.word	0x0801ad87
 801ac98:	0801ac49 	.word	0x0801ac49
 801ac9c:	0801ac49 	.word	0x0801ac49
 801aca0:	0801adef 	.word	0x0801adef
 801aca4:	0801ac49 	.word	0x0801ac49
 801aca8:	0801acf7 	.word	0x0801acf7
 801acac:	0801ac49 	.word	0x0801ac49
 801acb0:	0801ac49 	.word	0x0801ac49
 801acb4:	0801ad8f 	.word	0x0801ad8f
 801acb8:	6833      	ldr	r3, [r6, #0]
 801acba:	1d1a      	adds	r2, r3, #4
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	6032      	str	r2, [r6, #0]
 801acc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801acc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801acc8:	2301      	movs	r3, #1
 801acca:	e09d      	b.n	801ae08 <_printf_i+0x1e8>
 801accc:	6833      	ldr	r3, [r6, #0]
 801acce:	6820      	ldr	r0, [r4, #0]
 801acd0:	1d19      	adds	r1, r3, #4
 801acd2:	6031      	str	r1, [r6, #0]
 801acd4:	0606      	lsls	r6, r0, #24
 801acd6:	d501      	bpl.n	801acdc <_printf_i+0xbc>
 801acd8:	681d      	ldr	r5, [r3, #0]
 801acda:	e003      	b.n	801ace4 <_printf_i+0xc4>
 801acdc:	0645      	lsls	r5, r0, #25
 801acde:	d5fb      	bpl.n	801acd8 <_printf_i+0xb8>
 801ace0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ace4:	2d00      	cmp	r5, #0
 801ace6:	da03      	bge.n	801acf0 <_printf_i+0xd0>
 801ace8:	232d      	movs	r3, #45	@ 0x2d
 801acea:	426d      	negs	r5, r5
 801acec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801acf0:	4859      	ldr	r0, [pc, #356]	@ (801ae58 <_printf_i+0x238>)
 801acf2:	230a      	movs	r3, #10
 801acf4:	e011      	b.n	801ad1a <_printf_i+0xfa>
 801acf6:	6821      	ldr	r1, [r4, #0]
 801acf8:	6833      	ldr	r3, [r6, #0]
 801acfa:	0608      	lsls	r0, r1, #24
 801acfc:	f853 5b04 	ldr.w	r5, [r3], #4
 801ad00:	d402      	bmi.n	801ad08 <_printf_i+0xe8>
 801ad02:	0649      	lsls	r1, r1, #25
 801ad04:	bf48      	it	mi
 801ad06:	b2ad      	uxthmi	r5, r5
 801ad08:	2f6f      	cmp	r7, #111	@ 0x6f
 801ad0a:	4853      	ldr	r0, [pc, #332]	@ (801ae58 <_printf_i+0x238>)
 801ad0c:	6033      	str	r3, [r6, #0]
 801ad0e:	bf14      	ite	ne
 801ad10:	230a      	movne	r3, #10
 801ad12:	2308      	moveq	r3, #8
 801ad14:	2100      	movs	r1, #0
 801ad16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ad1a:	6866      	ldr	r6, [r4, #4]
 801ad1c:	60a6      	str	r6, [r4, #8]
 801ad1e:	2e00      	cmp	r6, #0
 801ad20:	bfa2      	ittt	ge
 801ad22:	6821      	ldrge	r1, [r4, #0]
 801ad24:	f021 0104 	bicge.w	r1, r1, #4
 801ad28:	6021      	strge	r1, [r4, #0]
 801ad2a:	b90d      	cbnz	r5, 801ad30 <_printf_i+0x110>
 801ad2c:	2e00      	cmp	r6, #0
 801ad2e:	d04b      	beq.n	801adc8 <_printf_i+0x1a8>
 801ad30:	4616      	mov	r6, r2
 801ad32:	fbb5 f1f3 	udiv	r1, r5, r3
 801ad36:	fb03 5711 	mls	r7, r3, r1, r5
 801ad3a:	5dc7      	ldrb	r7, [r0, r7]
 801ad3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ad40:	462f      	mov	r7, r5
 801ad42:	42bb      	cmp	r3, r7
 801ad44:	460d      	mov	r5, r1
 801ad46:	d9f4      	bls.n	801ad32 <_printf_i+0x112>
 801ad48:	2b08      	cmp	r3, #8
 801ad4a:	d10b      	bne.n	801ad64 <_printf_i+0x144>
 801ad4c:	6823      	ldr	r3, [r4, #0]
 801ad4e:	07df      	lsls	r7, r3, #31
 801ad50:	d508      	bpl.n	801ad64 <_printf_i+0x144>
 801ad52:	6923      	ldr	r3, [r4, #16]
 801ad54:	6861      	ldr	r1, [r4, #4]
 801ad56:	4299      	cmp	r1, r3
 801ad58:	bfde      	ittt	le
 801ad5a:	2330      	movle	r3, #48	@ 0x30
 801ad5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ad60:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801ad64:	1b92      	subs	r2, r2, r6
 801ad66:	6122      	str	r2, [r4, #16]
 801ad68:	f8cd a000 	str.w	sl, [sp]
 801ad6c:	464b      	mov	r3, r9
 801ad6e:	aa03      	add	r2, sp, #12
 801ad70:	4621      	mov	r1, r4
 801ad72:	4640      	mov	r0, r8
 801ad74:	f7ff fee6 	bl	801ab44 <_printf_common>
 801ad78:	3001      	adds	r0, #1
 801ad7a:	d14a      	bne.n	801ae12 <_printf_i+0x1f2>
 801ad7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad80:	b004      	add	sp, #16
 801ad82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad86:	6823      	ldr	r3, [r4, #0]
 801ad88:	f043 0320 	orr.w	r3, r3, #32
 801ad8c:	6023      	str	r3, [r4, #0]
 801ad8e:	4833      	ldr	r0, [pc, #204]	@ (801ae5c <_printf_i+0x23c>)
 801ad90:	2778      	movs	r7, #120	@ 0x78
 801ad92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ad96:	6823      	ldr	r3, [r4, #0]
 801ad98:	6831      	ldr	r1, [r6, #0]
 801ad9a:	061f      	lsls	r7, r3, #24
 801ad9c:	f851 5b04 	ldr.w	r5, [r1], #4
 801ada0:	d402      	bmi.n	801ada8 <_printf_i+0x188>
 801ada2:	065f      	lsls	r7, r3, #25
 801ada4:	bf48      	it	mi
 801ada6:	b2ad      	uxthmi	r5, r5
 801ada8:	6031      	str	r1, [r6, #0]
 801adaa:	07d9      	lsls	r1, r3, #31
 801adac:	bf44      	itt	mi
 801adae:	f043 0320 	orrmi.w	r3, r3, #32
 801adb2:	6023      	strmi	r3, [r4, #0]
 801adb4:	b11d      	cbz	r5, 801adbe <_printf_i+0x19e>
 801adb6:	2310      	movs	r3, #16
 801adb8:	e7ac      	b.n	801ad14 <_printf_i+0xf4>
 801adba:	4827      	ldr	r0, [pc, #156]	@ (801ae58 <_printf_i+0x238>)
 801adbc:	e7e9      	b.n	801ad92 <_printf_i+0x172>
 801adbe:	6823      	ldr	r3, [r4, #0]
 801adc0:	f023 0320 	bic.w	r3, r3, #32
 801adc4:	6023      	str	r3, [r4, #0]
 801adc6:	e7f6      	b.n	801adb6 <_printf_i+0x196>
 801adc8:	4616      	mov	r6, r2
 801adca:	e7bd      	b.n	801ad48 <_printf_i+0x128>
 801adcc:	6833      	ldr	r3, [r6, #0]
 801adce:	6825      	ldr	r5, [r4, #0]
 801add0:	6961      	ldr	r1, [r4, #20]
 801add2:	1d18      	adds	r0, r3, #4
 801add4:	6030      	str	r0, [r6, #0]
 801add6:	062e      	lsls	r6, r5, #24
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	d501      	bpl.n	801ade0 <_printf_i+0x1c0>
 801addc:	6019      	str	r1, [r3, #0]
 801adde:	e002      	b.n	801ade6 <_printf_i+0x1c6>
 801ade0:	0668      	lsls	r0, r5, #25
 801ade2:	d5fb      	bpl.n	801addc <_printf_i+0x1bc>
 801ade4:	8019      	strh	r1, [r3, #0]
 801ade6:	2300      	movs	r3, #0
 801ade8:	6123      	str	r3, [r4, #16]
 801adea:	4616      	mov	r6, r2
 801adec:	e7bc      	b.n	801ad68 <_printf_i+0x148>
 801adee:	6833      	ldr	r3, [r6, #0]
 801adf0:	1d1a      	adds	r2, r3, #4
 801adf2:	6032      	str	r2, [r6, #0]
 801adf4:	681e      	ldr	r6, [r3, #0]
 801adf6:	6862      	ldr	r2, [r4, #4]
 801adf8:	2100      	movs	r1, #0
 801adfa:	4630      	mov	r0, r6
 801adfc:	f7e5 fa18 	bl	8000230 <memchr>
 801ae00:	b108      	cbz	r0, 801ae06 <_printf_i+0x1e6>
 801ae02:	1b80      	subs	r0, r0, r6
 801ae04:	6060      	str	r0, [r4, #4]
 801ae06:	6863      	ldr	r3, [r4, #4]
 801ae08:	6123      	str	r3, [r4, #16]
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ae10:	e7aa      	b.n	801ad68 <_printf_i+0x148>
 801ae12:	6923      	ldr	r3, [r4, #16]
 801ae14:	4632      	mov	r2, r6
 801ae16:	4649      	mov	r1, r9
 801ae18:	4640      	mov	r0, r8
 801ae1a:	47d0      	blx	sl
 801ae1c:	3001      	adds	r0, #1
 801ae1e:	d0ad      	beq.n	801ad7c <_printf_i+0x15c>
 801ae20:	6823      	ldr	r3, [r4, #0]
 801ae22:	079b      	lsls	r3, r3, #30
 801ae24:	d413      	bmi.n	801ae4e <_printf_i+0x22e>
 801ae26:	68e0      	ldr	r0, [r4, #12]
 801ae28:	9b03      	ldr	r3, [sp, #12]
 801ae2a:	4298      	cmp	r0, r3
 801ae2c:	bfb8      	it	lt
 801ae2e:	4618      	movlt	r0, r3
 801ae30:	e7a6      	b.n	801ad80 <_printf_i+0x160>
 801ae32:	2301      	movs	r3, #1
 801ae34:	4632      	mov	r2, r6
 801ae36:	4649      	mov	r1, r9
 801ae38:	4640      	mov	r0, r8
 801ae3a:	47d0      	blx	sl
 801ae3c:	3001      	adds	r0, #1
 801ae3e:	d09d      	beq.n	801ad7c <_printf_i+0x15c>
 801ae40:	3501      	adds	r5, #1
 801ae42:	68e3      	ldr	r3, [r4, #12]
 801ae44:	9903      	ldr	r1, [sp, #12]
 801ae46:	1a5b      	subs	r3, r3, r1
 801ae48:	42ab      	cmp	r3, r5
 801ae4a:	dcf2      	bgt.n	801ae32 <_printf_i+0x212>
 801ae4c:	e7eb      	b.n	801ae26 <_printf_i+0x206>
 801ae4e:	2500      	movs	r5, #0
 801ae50:	f104 0619 	add.w	r6, r4, #25
 801ae54:	e7f5      	b.n	801ae42 <_printf_i+0x222>
 801ae56:	bf00      	nop
 801ae58:	080203e8 	.word	0x080203e8
 801ae5c:	080203f9 	.word	0x080203f9

0801ae60 <_scanf_float>:
 801ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae64:	b087      	sub	sp, #28
 801ae66:	4617      	mov	r7, r2
 801ae68:	9303      	str	r3, [sp, #12]
 801ae6a:	688b      	ldr	r3, [r1, #8]
 801ae6c:	1e5a      	subs	r2, r3, #1
 801ae6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ae72:	bf81      	itttt	hi
 801ae74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ae78:	eb03 0b05 	addhi.w	fp, r3, r5
 801ae7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ae80:	608b      	strhi	r3, [r1, #8]
 801ae82:	680b      	ldr	r3, [r1, #0]
 801ae84:	460a      	mov	r2, r1
 801ae86:	f04f 0500 	mov.w	r5, #0
 801ae8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801ae8e:	f842 3b1c 	str.w	r3, [r2], #28
 801ae92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ae96:	4680      	mov	r8, r0
 801ae98:	460c      	mov	r4, r1
 801ae9a:	bf98      	it	ls
 801ae9c:	f04f 0b00 	movls.w	fp, #0
 801aea0:	9201      	str	r2, [sp, #4]
 801aea2:	4616      	mov	r6, r2
 801aea4:	46aa      	mov	sl, r5
 801aea6:	46a9      	mov	r9, r5
 801aea8:	9502      	str	r5, [sp, #8]
 801aeaa:	68a2      	ldr	r2, [r4, #8]
 801aeac:	b152      	cbz	r2, 801aec4 <_scanf_float+0x64>
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	781b      	ldrb	r3, [r3, #0]
 801aeb2:	2b4e      	cmp	r3, #78	@ 0x4e
 801aeb4:	d864      	bhi.n	801af80 <_scanf_float+0x120>
 801aeb6:	2b40      	cmp	r3, #64	@ 0x40
 801aeb8:	d83c      	bhi.n	801af34 <_scanf_float+0xd4>
 801aeba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801aebe:	b2c8      	uxtb	r0, r1
 801aec0:	280e      	cmp	r0, #14
 801aec2:	d93a      	bls.n	801af3a <_scanf_float+0xda>
 801aec4:	f1b9 0f00 	cmp.w	r9, #0
 801aec8:	d003      	beq.n	801aed2 <_scanf_float+0x72>
 801aeca:	6823      	ldr	r3, [r4, #0]
 801aecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801aed0:	6023      	str	r3, [r4, #0]
 801aed2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801aed6:	f1ba 0f01 	cmp.w	sl, #1
 801aeda:	f200 8117 	bhi.w	801b10c <_scanf_float+0x2ac>
 801aede:	9b01      	ldr	r3, [sp, #4]
 801aee0:	429e      	cmp	r6, r3
 801aee2:	f200 8108 	bhi.w	801b0f6 <_scanf_float+0x296>
 801aee6:	2001      	movs	r0, #1
 801aee8:	b007      	add	sp, #28
 801aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801aef2:	2a0d      	cmp	r2, #13
 801aef4:	d8e6      	bhi.n	801aec4 <_scanf_float+0x64>
 801aef6:	a101      	add	r1, pc, #4	@ (adr r1, 801aefc <_scanf_float+0x9c>)
 801aef8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801aefc:	0801b043 	.word	0x0801b043
 801af00:	0801aec5 	.word	0x0801aec5
 801af04:	0801aec5 	.word	0x0801aec5
 801af08:	0801aec5 	.word	0x0801aec5
 801af0c:	0801b0a3 	.word	0x0801b0a3
 801af10:	0801b07b 	.word	0x0801b07b
 801af14:	0801aec5 	.word	0x0801aec5
 801af18:	0801aec5 	.word	0x0801aec5
 801af1c:	0801b051 	.word	0x0801b051
 801af20:	0801aec5 	.word	0x0801aec5
 801af24:	0801aec5 	.word	0x0801aec5
 801af28:	0801aec5 	.word	0x0801aec5
 801af2c:	0801aec5 	.word	0x0801aec5
 801af30:	0801b009 	.word	0x0801b009
 801af34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801af38:	e7db      	b.n	801aef2 <_scanf_float+0x92>
 801af3a:	290e      	cmp	r1, #14
 801af3c:	d8c2      	bhi.n	801aec4 <_scanf_float+0x64>
 801af3e:	a001      	add	r0, pc, #4	@ (adr r0, 801af44 <_scanf_float+0xe4>)
 801af40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801af44:	0801aff9 	.word	0x0801aff9
 801af48:	0801aec5 	.word	0x0801aec5
 801af4c:	0801aff9 	.word	0x0801aff9
 801af50:	0801b08f 	.word	0x0801b08f
 801af54:	0801aec5 	.word	0x0801aec5
 801af58:	0801afa1 	.word	0x0801afa1
 801af5c:	0801afdf 	.word	0x0801afdf
 801af60:	0801afdf 	.word	0x0801afdf
 801af64:	0801afdf 	.word	0x0801afdf
 801af68:	0801afdf 	.word	0x0801afdf
 801af6c:	0801afdf 	.word	0x0801afdf
 801af70:	0801afdf 	.word	0x0801afdf
 801af74:	0801afdf 	.word	0x0801afdf
 801af78:	0801afdf 	.word	0x0801afdf
 801af7c:	0801afdf 	.word	0x0801afdf
 801af80:	2b6e      	cmp	r3, #110	@ 0x6e
 801af82:	d809      	bhi.n	801af98 <_scanf_float+0x138>
 801af84:	2b60      	cmp	r3, #96	@ 0x60
 801af86:	d8b2      	bhi.n	801aeee <_scanf_float+0x8e>
 801af88:	2b54      	cmp	r3, #84	@ 0x54
 801af8a:	d07b      	beq.n	801b084 <_scanf_float+0x224>
 801af8c:	2b59      	cmp	r3, #89	@ 0x59
 801af8e:	d199      	bne.n	801aec4 <_scanf_float+0x64>
 801af90:	2d07      	cmp	r5, #7
 801af92:	d197      	bne.n	801aec4 <_scanf_float+0x64>
 801af94:	2508      	movs	r5, #8
 801af96:	e02c      	b.n	801aff2 <_scanf_float+0x192>
 801af98:	2b74      	cmp	r3, #116	@ 0x74
 801af9a:	d073      	beq.n	801b084 <_scanf_float+0x224>
 801af9c:	2b79      	cmp	r3, #121	@ 0x79
 801af9e:	e7f6      	b.n	801af8e <_scanf_float+0x12e>
 801afa0:	6821      	ldr	r1, [r4, #0]
 801afa2:	05c8      	lsls	r0, r1, #23
 801afa4:	d51b      	bpl.n	801afde <_scanf_float+0x17e>
 801afa6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801afaa:	6021      	str	r1, [r4, #0]
 801afac:	f109 0901 	add.w	r9, r9, #1
 801afb0:	f1bb 0f00 	cmp.w	fp, #0
 801afb4:	d003      	beq.n	801afbe <_scanf_float+0x15e>
 801afb6:	3201      	adds	r2, #1
 801afb8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 801afbc:	60a2      	str	r2, [r4, #8]
 801afbe:	68a3      	ldr	r3, [r4, #8]
 801afc0:	3b01      	subs	r3, #1
 801afc2:	60a3      	str	r3, [r4, #8]
 801afc4:	6923      	ldr	r3, [r4, #16]
 801afc6:	3301      	adds	r3, #1
 801afc8:	6123      	str	r3, [r4, #16]
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	3b01      	subs	r3, #1
 801afce:	2b00      	cmp	r3, #0
 801afd0:	607b      	str	r3, [r7, #4]
 801afd2:	f340 8087 	ble.w	801b0e4 <_scanf_float+0x284>
 801afd6:	683b      	ldr	r3, [r7, #0]
 801afd8:	3301      	adds	r3, #1
 801afda:	603b      	str	r3, [r7, #0]
 801afdc:	e765      	b.n	801aeaa <_scanf_float+0x4a>
 801afde:	eb1a 0105 	adds.w	r1, sl, r5
 801afe2:	f47f af6f 	bne.w	801aec4 <_scanf_float+0x64>
 801afe6:	6822      	ldr	r2, [r4, #0]
 801afe8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801afec:	6022      	str	r2, [r4, #0]
 801afee:	460d      	mov	r5, r1
 801aff0:	468a      	mov	sl, r1
 801aff2:	f806 3b01 	strb.w	r3, [r6], #1
 801aff6:	e7e2      	b.n	801afbe <_scanf_float+0x15e>
 801aff8:	6822      	ldr	r2, [r4, #0]
 801affa:	0610      	lsls	r0, r2, #24
 801affc:	f57f af62 	bpl.w	801aec4 <_scanf_float+0x64>
 801b000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b004:	6022      	str	r2, [r4, #0]
 801b006:	e7f4      	b.n	801aff2 <_scanf_float+0x192>
 801b008:	f1ba 0f00 	cmp.w	sl, #0
 801b00c:	d10e      	bne.n	801b02c <_scanf_float+0x1cc>
 801b00e:	f1b9 0f00 	cmp.w	r9, #0
 801b012:	d10e      	bne.n	801b032 <_scanf_float+0x1d2>
 801b014:	6822      	ldr	r2, [r4, #0]
 801b016:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b01a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b01e:	d108      	bne.n	801b032 <_scanf_float+0x1d2>
 801b020:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b024:	6022      	str	r2, [r4, #0]
 801b026:	f04f 0a01 	mov.w	sl, #1
 801b02a:	e7e2      	b.n	801aff2 <_scanf_float+0x192>
 801b02c:	f1ba 0f02 	cmp.w	sl, #2
 801b030:	d055      	beq.n	801b0de <_scanf_float+0x27e>
 801b032:	2d01      	cmp	r5, #1
 801b034:	d002      	beq.n	801b03c <_scanf_float+0x1dc>
 801b036:	2d04      	cmp	r5, #4
 801b038:	f47f af44 	bne.w	801aec4 <_scanf_float+0x64>
 801b03c:	3501      	adds	r5, #1
 801b03e:	b2ed      	uxtb	r5, r5
 801b040:	e7d7      	b.n	801aff2 <_scanf_float+0x192>
 801b042:	f1ba 0f01 	cmp.w	sl, #1
 801b046:	f47f af3d 	bne.w	801aec4 <_scanf_float+0x64>
 801b04a:	f04f 0a02 	mov.w	sl, #2
 801b04e:	e7d0      	b.n	801aff2 <_scanf_float+0x192>
 801b050:	b97d      	cbnz	r5, 801b072 <_scanf_float+0x212>
 801b052:	f1b9 0f00 	cmp.w	r9, #0
 801b056:	f47f af38 	bne.w	801aeca <_scanf_float+0x6a>
 801b05a:	6822      	ldr	r2, [r4, #0]
 801b05c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b060:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b064:	f040 8108 	bne.w	801b278 <_scanf_float+0x418>
 801b068:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b06c:	6022      	str	r2, [r4, #0]
 801b06e:	2501      	movs	r5, #1
 801b070:	e7bf      	b.n	801aff2 <_scanf_float+0x192>
 801b072:	2d03      	cmp	r5, #3
 801b074:	d0e2      	beq.n	801b03c <_scanf_float+0x1dc>
 801b076:	2d05      	cmp	r5, #5
 801b078:	e7de      	b.n	801b038 <_scanf_float+0x1d8>
 801b07a:	2d02      	cmp	r5, #2
 801b07c:	f47f af22 	bne.w	801aec4 <_scanf_float+0x64>
 801b080:	2503      	movs	r5, #3
 801b082:	e7b6      	b.n	801aff2 <_scanf_float+0x192>
 801b084:	2d06      	cmp	r5, #6
 801b086:	f47f af1d 	bne.w	801aec4 <_scanf_float+0x64>
 801b08a:	2507      	movs	r5, #7
 801b08c:	e7b1      	b.n	801aff2 <_scanf_float+0x192>
 801b08e:	6822      	ldr	r2, [r4, #0]
 801b090:	0591      	lsls	r1, r2, #22
 801b092:	f57f af17 	bpl.w	801aec4 <_scanf_float+0x64>
 801b096:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b09a:	6022      	str	r2, [r4, #0]
 801b09c:	f8cd 9008 	str.w	r9, [sp, #8]
 801b0a0:	e7a7      	b.n	801aff2 <_scanf_float+0x192>
 801b0a2:	6822      	ldr	r2, [r4, #0]
 801b0a4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801b0a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b0ac:	d006      	beq.n	801b0bc <_scanf_float+0x25c>
 801b0ae:	0550      	lsls	r0, r2, #21
 801b0b0:	f57f af08 	bpl.w	801aec4 <_scanf_float+0x64>
 801b0b4:	f1b9 0f00 	cmp.w	r9, #0
 801b0b8:	f000 80de 	beq.w	801b278 <_scanf_float+0x418>
 801b0bc:	0591      	lsls	r1, r2, #22
 801b0be:	bf58      	it	pl
 801b0c0:	9902      	ldrpl	r1, [sp, #8]
 801b0c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b0c6:	bf58      	it	pl
 801b0c8:	eba9 0101 	subpl.w	r1, r9, r1
 801b0cc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801b0d0:	bf58      	it	pl
 801b0d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b0d6:	6022      	str	r2, [r4, #0]
 801b0d8:	f04f 0900 	mov.w	r9, #0
 801b0dc:	e789      	b.n	801aff2 <_scanf_float+0x192>
 801b0de:	f04f 0a03 	mov.w	sl, #3
 801b0e2:	e786      	b.n	801aff2 <_scanf_float+0x192>
 801b0e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b0e8:	4639      	mov	r1, r7
 801b0ea:	4640      	mov	r0, r8
 801b0ec:	4798      	blx	r3
 801b0ee:	2800      	cmp	r0, #0
 801b0f0:	f43f aedb 	beq.w	801aeaa <_scanf_float+0x4a>
 801b0f4:	e6e6      	b.n	801aec4 <_scanf_float+0x64>
 801b0f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b0fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b0fe:	463a      	mov	r2, r7
 801b100:	4640      	mov	r0, r8
 801b102:	4798      	blx	r3
 801b104:	6923      	ldr	r3, [r4, #16]
 801b106:	3b01      	subs	r3, #1
 801b108:	6123      	str	r3, [r4, #16]
 801b10a:	e6e8      	b.n	801aede <_scanf_float+0x7e>
 801b10c:	1e6b      	subs	r3, r5, #1
 801b10e:	2b06      	cmp	r3, #6
 801b110:	d824      	bhi.n	801b15c <_scanf_float+0x2fc>
 801b112:	2d02      	cmp	r5, #2
 801b114:	d836      	bhi.n	801b184 <_scanf_float+0x324>
 801b116:	9b01      	ldr	r3, [sp, #4]
 801b118:	429e      	cmp	r6, r3
 801b11a:	f67f aee4 	bls.w	801aee6 <_scanf_float+0x86>
 801b11e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b122:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b126:	463a      	mov	r2, r7
 801b128:	4640      	mov	r0, r8
 801b12a:	4798      	blx	r3
 801b12c:	6923      	ldr	r3, [r4, #16]
 801b12e:	3b01      	subs	r3, #1
 801b130:	6123      	str	r3, [r4, #16]
 801b132:	e7f0      	b.n	801b116 <_scanf_float+0x2b6>
 801b134:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b138:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b13c:	463a      	mov	r2, r7
 801b13e:	4640      	mov	r0, r8
 801b140:	4798      	blx	r3
 801b142:	6923      	ldr	r3, [r4, #16]
 801b144:	3b01      	subs	r3, #1
 801b146:	6123      	str	r3, [r4, #16]
 801b148:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801b14c:	fa5f fa8a 	uxtb.w	sl, sl
 801b150:	f1ba 0f02 	cmp.w	sl, #2
 801b154:	d1ee      	bne.n	801b134 <_scanf_float+0x2d4>
 801b156:	3d03      	subs	r5, #3
 801b158:	b2ed      	uxtb	r5, r5
 801b15a:	1b76      	subs	r6, r6, r5
 801b15c:	6823      	ldr	r3, [r4, #0]
 801b15e:	05da      	lsls	r2, r3, #23
 801b160:	d530      	bpl.n	801b1c4 <_scanf_float+0x364>
 801b162:	055b      	lsls	r3, r3, #21
 801b164:	d511      	bpl.n	801b18a <_scanf_float+0x32a>
 801b166:	9b01      	ldr	r3, [sp, #4]
 801b168:	429e      	cmp	r6, r3
 801b16a:	f67f aebc 	bls.w	801aee6 <_scanf_float+0x86>
 801b16e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b176:	463a      	mov	r2, r7
 801b178:	4640      	mov	r0, r8
 801b17a:	4798      	blx	r3
 801b17c:	6923      	ldr	r3, [r4, #16]
 801b17e:	3b01      	subs	r3, #1
 801b180:	6123      	str	r3, [r4, #16]
 801b182:	e7f0      	b.n	801b166 <_scanf_float+0x306>
 801b184:	46aa      	mov	sl, r5
 801b186:	46b3      	mov	fp, r6
 801b188:	e7de      	b.n	801b148 <_scanf_float+0x2e8>
 801b18a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b18e:	6923      	ldr	r3, [r4, #16]
 801b190:	2965      	cmp	r1, #101	@ 0x65
 801b192:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801b196:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801b19a:	6123      	str	r3, [r4, #16]
 801b19c:	d00c      	beq.n	801b1b8 <_scanf_float+0x358>
 801b19e:	2945      	cmp	r1, #69	@ 0x45
 801b1a0:	d00a      	beq.n	801b1b8 <_scanf_float+0x358>
 801b1a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b1a6:	463a      	mov	r2, r7
 801b1a8:	4640      	mov	r0, r8
 801b1aa:	4798      	blx	r3
 801b1ac:	6923      	ldr	r3, [r4, #16]
 801b1ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b1b2:	3b01      	subs	r3, #1
 801b1b4:	1eb5      	subs	r5, r6, #2
 801b1b6:	6123      	str	r3, [r4, #16]
 801b1b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b1bc:	463a      	mov	r2, r7
 801b1be:	4640      	mov	r0, r8
 801b1c0:	4798      	blx	r3
 801b1c2:	462e      	mov	r6, r5
 801b1c4:	6822      	ldr	r2, [r4, #0]
 801b1c6:	f012 0210 	ands.w	r2, r2, #16
 801b1ca:	d001      	beq.n	801b1d0 <_scanf_float+0x370>
 801b1cc:	2000      	movs	r0, #0
 801b1ce:	e68b      	b.n	801aee8 <_scanf_float+0x88>
 801b1d0:	7032      	strb	r2, [r6, #0]
 801b1d2:	6823      	ldr	r3, [r4, #0]
 801b1d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b1d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b1dc:	d11c      	bne.n	801b218 <_scanf_float+0x3b8>
 801b1de:	9b02      	ldr	r3, [sp, #8]
 801b1e0:	454b      	cmp	r3, r9
 801b1e2:	eba3 0209 	sub.w	r2, r3, r9
 801b1e6:	d123      	bne.n	801b230 <_scanf_float+0x3d0>
 801b1e8:	9901      	ldr	r1, [sp, #4]
 801b1ea:	2200      	movs	r2, #0
 801b1ec:	4640      	mov	r0, r8
 801b1ee:	f002 fe2f 	bl	801de50 <_strtod_r>
 801b1f2:	9b03      	ldr	r3, [sp, #12]
 801b1f4:	6821      	ldr	r1, [r4, #0]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	f011 0f02 	tst.w	r1, #2
 801b1fc:	ec57 6b10 	vmov	r6, r7, d0
 801b200:	f103 0204 	add.w	r2, r3, #4
 801b204:	d01f      	beq.n	801b246 <_scanf_float+0x3e6>
 801b206:	9903      	ldr	r1, [sp, #12]
 801b208:	600a      	str	r2, [r1, #0]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	e9c3 6700 	strd	r6, r7, [r3]
 801b210:	68e3      	ldr	r3, [r4, #12]
 801b212:	3301      	adds	r3, #1
 801b214:	60e3      	str	r3, [r4, #12]
 801b216:	e7d9      	b.n	801b1cc <_scanf_float+0x36c>
 801b218:	9b04      	ldr	r3, [sp, #16]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d0e4      	beq.n	801b1e8 <_scanf_float+0x388>
 801b21e:	9905      	ldr	r1, [sp, #20]
 801b220:	230a      	movs	r3, #10
 801b222:	3101      	adds	r1, #1
 801b224:	4640      	mov	r0, r8
 801b226:	f002 fe93 	bl	801df50 <_strtol_r>
 801b22a:	9b04      	ldr	r3, [sp, #16]
 801b22c:	9e05      	ldr	r6, [sp, #20]
 801b22e:	1ac2      	subs	r2, r0, r3
 801b230:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b234:	429e      	cmp	r6, r3
 801b236:	bf28      	it	cs
 801b238:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b23c:	4910      	ldr	r1, [pc, #64]	@ (801b280 <_scanf_float+0x420>)
 801b23e:	4630      	mov	r0, r6
 801b240:	f000 f9e2 	bl	801b608 <siprintf>
 801b244:	e7d0      	b.n	801b1e8 <_scanf_float+0x388>
 801b246:	f011 0f04 	tst.w	r1, #4
 801b24a:	9903      	ldr	r1, [sp, #12]
 801b24c:	600a      	str	r2, [r1, #0]
 801b24e:	d1dc      	bne.n	801b20a <_scanf_float+0x3aa>
 801b250:	681d      	ldr	r5, [r3, #0]
 801b252:	4632      	mov	r2, r6
 801b254:	463b      	mov	r3, r7
 801b256:	4630      	mov	r0, r6
 801b258:	4639      	mov	r1, r7
 801b25a:	f7e5 fc97 	bl	8000b8c <__aeabi_dcmpun>
 801b25e:	b128      	cbz	r0, 801b26c <_scanf_float+0x40c>
 801b260:	4808      	ldr	r0, [pc, #32]	@ (801b284 <_scanf_float+0x424>)
 801b262:	f000 fc6f 	bl	801bb44 <nanf>
 801b266:	ed85 0a00 	vstr	s0, [r5]
 801b26a:	e7d1      	b.n	801b210 <_scanf_float+0x3b0>
 801b26c:	4630      	mov	r0, r6
 801b26e:	4639      	mov	r1, r7
 801b270:	f7e5 fcea 	bl	8000c48 <__aeabi_d2f>
 801b274:	6028      	str	r0, [r5, #0]
 801b276:	e7cb      	b.n	801b210 <_scanf_float+0x3b0>
 801b278:	f04f 0900 	mov.w	r9, #0
 801b27c:	e629      	b.n	801aed2 <_scanf_float+0x72>
 801b27e:	bf00      	nop
 801b280:	0802040a 	.word	0x0802040a
 801b284:	0802044a 	.word	0x0802044a

0801b288 <std>:
 801b288:	2300      	movs	r3, #0
 801b28a:	b510      	push	{r4, lr}
 801b28c:	4604      	mov	r4, r0
 801b28e:	e9c0 3300 	strd	r3, r3, [r0]
 801b292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b296:	6083      	str	r3, [r0, #8]
 801b298:	8181      	strh	r1, [r0, #12]
 801b29a:	6643      	str	r3, [r0, #100]	@ 0x64
 801b29c:	81c2      	strh	r2, [r0, #14]
 801b29e:	6183      	str	r3, [r0, #24]
 801b2a0:	4619      	mov	r1, r3
 801b2a2:	2208      	movs	r2, #8
 801b2a4:	305c      	adds	r0, #92	@ 0x5c
 801b2a6:	f000 fb09 	bl	801b8bc <memset>
 801b2aa:	4b0d      	ldr	r3, [pc, #52]	@ (801b2e0 <std+0x58>)
 801b2ac:	6263      	str	r3, [r4, #36]	@ 0x24
 801b2ae:	4b0d      	ldr	r3, [pc, #52]	@ (801b2e4 <std+0x5c>)
 801b2b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b2b2:	4b0d      	ldr	r3, [pc, #52]	@ (801b2e8 <std+0x60>)
 801b2b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b2b6:	4b0d      	ldr	r3, [pc, #52]	@ (801b2ec <std+0x64>)
 801b2b8:	6323      	str	r3, [r4, #48]	@ 0x30
 801b2ba:	4b0d      	ldr	r3, [pc, #52]	@ (801b2f0 <std+0x68>)
 801b2bc:	6224      	str	r4, [r4, #32]
 801b2be:	429c      	cmp	r4, r3
 801b2c0:	d006      	beq.n	801b2d0 <std+0x48>
 801b2c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b2c6:	4294      	cmp	r4, r2
 801b2c8:	d002      	beq.n	801b2d0 <std+0x48>
 801b2ca:	33d0      	adds	r3, #208	@ 0xd0
 801b2cc:	429c      	cmp	r4, r3
 801b2ce:	d105      	bne.n	801b2dc <std+0x54>
 801b2d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2d8:	f000 bc1a 	b.w	801bb10 <__retarget_lock_init_recursive>
 801b2dc:	bd10      	pop	{r4, pc}
 801b2de:	bf00      	nop
 801b2e0:	0801b649 	.word	0x0801b649
 801b2e4:	0801b66b 	.word	0x0801b66b
 801b2e8:	0801b6a3 	.word	0x0801b6a3
 801b2ec:	0801b6c7 	.word	0x0801b6c7
 801b2f0:	20017934 	.word	0x20017934

0801b2f4 <stdio_exit_handler>:
 801b2f4:	4a02      	ldr	r2, [pc, #8]	@ (801b300 <stdio_exit_handler+0xc>)
 801b2f6:	4903      	ldr	r1, [pc, #12]	@ (801b304 <stdio_exit_handler+0x10>)
 801b2f8:	4803      	ldr	r0, [pc, #12]	@ (801b308 <stdio_exit_handler+0x14>)
 801b2fa:	f000 b869 	b.w	801b3d0 <_fwalk_sglue>
 801b2fe:	bf00      	nop
 801b300:	20001234 	.word	0x20001234
 801b304:	0801e591 	.word	0x0801e591
 801b308:	20001244 	.word	0x20001244

0801b30c <cleanup_stdio>:
 801b30c:	6841      	ldr	r1, [r0, #4]
 801b30e:	4b0c      	ldr	r3, [pc, #48]	@ (801b340 <cleanup_stdio+0x34>)
 801b310:	4299      	cmp	r1, r3
 801b312:	b510      	push	{r4, lr}
 801b314:	4604      	mov	r4, r0
 801b316:	d001      	beq.n	801b31c <cleanup_stdio+0x10>
 801b318:	f003 f93a 	bl	801e590 <_fflush_r>
 801b31c:	68a1      	ldr	r1, [r4, #8]
 801b31e:	4b09      	ldr	r3, [pc, #36]	@ (801b344 <cleanup_stdio+0x38>)
 801b320:	4299      	cmp	r1, r3
 801b322:	d002      	beq.n	801b32a <cleanup_stdio+0x1e>
 801b324:	4620      	mov	r0, r4
 801b326:	f003 f933 	bl	801e590 <_fflush_r>
 801b32a:	68e1      	ldr	r1, [r4, #12]
 801b32c:	4b06      	ldr	r3, [pc, #24]	@ (801b348 <cleanup_stdio+0x3c>)
 801b32e:	4299      	cmp	r1, r3
 801b330:	d004      	beq.n	801b33c <cleanup_stdio+0x30>
 801b332:	4620      	mov	r0, r4
 801b334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b338:	f003 b92a 	b.w	801e590 <_fflush_r>
 801b33c:	bd10      	pop	{r4, pc}
 801b33e:	bf00      	nop
 801b340:	20017934 	.word	0x20017934
 801b344:	2001799c 	.word	0x2001799c
 801b348:	20017a04 	.word	0x20017a04

0801b34c <global_stdio_init.part.0>:
 801b34c:	b510      	push	{r4, lr}
 801b34e:	4b0b      	ldr	r3, [pc, #44]	@ (801b37c <global_stdio_init.part.0+0x30>)
 801b350:	4c0b      	ldr	r4, [pc, #44]	@ (801b380 <global_stdio_init.part.0+0x34>)
 801b352:	4a0c      	ldr	r2, [pc, #48]	@ (801b384 <global_stdio_init.part.0+0x38>)
 801b354:	601a      	str	r2, [r3, #0]
 801b356:	4620      	mov	r0, r4
 801b358:	2200      	movs	r2, #0
 801b35a:	2104      	movs	r1, #4
 801b35c:	f7ff ff94 	bl	801b288 <std>
 801b360:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b364:	2201      	movs	r2, #1
 801b366:	2109      	movs	r1, #9
 801b368:	f7ff ff8e 	bl	801b288 <std>
 801b36c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b370:	2202      	movs	r2, #2
 801b372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b376:	2112      	movs	r1, #18
 801b378:	f7ff bf86 	b.w	801b288 <std>
 801b37c:	20017a6c 	.word	0x20017a6c
 801b380:	20017934 	.word	0x20017934
 801b384:	0801b2f5 	.word	0x0801b2f5

0801b388 <__sfp_lock_acquire>:
 801b388:	4801      	ldr	r0, [pc, #4]	@ (801b390 <__sfp_lock_acquire+0x8>)
 801b38a:	f000 bbc2 	b.w	801bb12 <__retarget_lock_acquire_recursive>
 801b38e:	bf00      	nop
 801b390:	20017a76 	.word	0x20017a76

0801b394 <__sfp_lock_release>:
 801b394:	4801      	ldr	r0, [pc, #4]	@ (801b39c <__sfp_lock_release+0x8>)
 801b396:	f000 bbbd 	b.w	801bb14 <__retarget_lock_release_recursive>
 801b39a:	bf00      	nop
 801b39c:	20017a76 	.word	0x20017a76

0801b3a0 <__sinit>:
 801b3a0:	b510      	push	{r4, lr}
 801b3a2:	4604      	mov	r4, r0
 801b3a4:	f7ff fff0 	bl	801b388 <__sfp_lock_acquire>
 801b3a8:	6a23      	ldr	r3, [r4, #32]
 801b3aa:	b11b      	cbz	r3, 801b3b4 <__sinit+0x14>
 801b3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3b0:	f7ff bff0 	b.w	801b394 <__sfp_lock_release>
 801b3b4:	4b04      	ldr	r3, [pc, #16]	@ (801b3c8 <__sinit+0x28>)
 801b3b6:	6223      	str	r3, [r4, #32]
 801b3b8:	4b04      	ldr	r3, [pc, #16]	@ (801b3cc <__sinit+0x2c>)
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d1f5      	bne.n	801b3ac <__sinit+0xc>
 801b3c0:	f7ff ffc4 	bl	801b34c <global_stdio_init.part.0>
 801b3c4:	e7f2      	b.n	801b3ac <__sinit+0xc>
 801b3c6:	bf00      	nop
 801b3c8:	0801b30d 	.word	0x0801b30d
 801b3cc:	20017a6c 	.word	0x20017a6c

0801b3d0 <_fwalk_sglue>:
 801b3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3d4:	4607      	mov	r7, r0
 801b3d6:	4688      	mov	r8, r1
 801b3d8:	4614      	mov	r4, r2
 801b3da:	2600      	movs	r6, #0
 801b3dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b3e0:	f1b9 0901 	subs.w	r9, r9, #1
 801b3e4:	d505      	bpl.n	801b3f2 <_fwalk_sglue+0x22>
 801b3e6:	6824      	ldr	r4, [r4, #0]
 801b3e8:	2c00      	cmp	r4, #0
 801b3ea:	d1f7      	bne.n	801b3dc <_fwalk_sglue+0xc>
 801b3ec:	4630      	mov	r0, r6
 801b3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3f2:	89ab      	ldrh	r3, [r5, #12]
 801b3f4:	2b01      	cmp	r3, #1
 801b3f6:	d907      	bls.n	801b408 <_fwalk_sglue+0x38>
 801b3f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b3fc:	3301      	adds	r3, #1
 801b3fe:	d003      	beq.n	801b408 <_fwalk_sglue+0x38>
 801b400:	4629      	mov	r1, r5
 801b402:	4638      	mov	r0, r7
 801b404:	47c0      	blx	r8
 801b406:	4306      	orrs	r6, r0
 801b408:	3568      	adds	r5, #104	@ 0x68
 801b40a:	e7e9      	b.n	801b3e0 <_fwalk_sglue+0x10>

0801b40c <_fwrite_r>:
 801b40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b410:	9c08      	ldr	r4, [sp, #32]
 801b412:	468a      	mov	sl, r1
 801b414:	4690      	mov	r8, r2
 801b416:	fb02 f903 	mul.w	r9, r2, r3
 801b41a:	4606      	mov	r6, r0
 801b41c:	b118      	cbz	r0, 801b426 <_fwrite_r+0x1a>
 801b41e:	6a03      	ldr	r3, [r0, #32]
 801b420:	b90b      	cbnz	r3, 801b426 <_fwrite_r+0x1a>
 801b422:	f7ff ffbd 	bl	801b3a0 <__sinit>
 801b426:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b428:	07dd      	lsls	r5, r3, #31
 801b42a:	d405      	bmi.n	801b438 <_fwrite_r+0x2c>
 801b42c:	89a3      	ldrh	r3, [r4, #12]
 801b42e:	0598      	lsls	r0, r3, #22
 801b430:	d402      	bmi.n	801b438 <_fwrite_r+0x2c>
 801b432:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b434:	f000 fb6d 	bl	801bb12 <__retarget_lock_acquire_recursive>
 801b438:	89a3      	ldrh	r3, [r4, #12]
 801b43a:	0719      	lsls	r1, r3, #28
 801b43c:	d516      	bpl.n	801b46c <_fwrite_r+0x60>
 801b43e:	6923      	ldr	r3, [r4, #16]
 801b440:	b1a3      	cbz	r3, 801b46c <_fwrite_r+0x60>
 801b442:	2500      	movs	r5, #0
 801b444:	454d      	cmp	r5, r9
 801b446:	d01f      	beq.n	801b488 <_fwrite_r+0x7c>
 801b448:	68a7      	ldr	r7, [r4, #8]
 801b44a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b44e:	3f01      	subs	r7, #1
 801b450:	2f00      	cmp	r7, #0
 801b452:	60a7      	str	r7, [r4, #8]
 801b454:	da04      	bge.n	801b460 <_fwrite_r+0x54>
 801b456:	69a3      	ldr	r3, [r4, #24]
 801b458:	429f      	cmp	r7, r3
 801b45a:	db0f      	blt.n	801b47c <_fwrite_r+0x70>
 801b45c:	290a      	cmp	r1, #10
 801b45e:	d00d      	beq.n	801b47c <_fwrite_r+0x70>
 801b460:	6823      	ldr	r3, [r4, #0]
 801b462:	1c5a      	adds	r2, r3, #1
 801b464:	6022      	str	r2, [r4, #0]
 801b466:	7019      	strb	r1, [r3, #0]
 801b468:	3501      	adds	r5, #1
 801b46a:	e7eb      	b.n	801b444 <_fwrite_r+0x38>
 801b46c:	4621      	mov	r1, r4
 801b46e:	4630      	mov	r0, r6
 801b470:	f000 f9a4 	bl	801b7bc <__swsetup_r>
 801b474:	2800      	cmp	r0, #0
 801b476:	d0e4      	beq.n	801b442 <_fwrite_r+0x36>
 801b478:	2500      	movs	r5, #0
 801b47a:	e005      	b.n	801b488 <_fwrite_r+0x7c>
 801b47c:	4622      	mov	r2, r4
 801b47e:	4630      	mov	r0, r6
 801b480:	f000 f95e 	bl	801b740 <__swbuf_r>
 801b484:	3001      	adds	r0, #1
 801b486:	d1ef      	bne.n	801b468 <_fwrite_r+0x5c>
 801b488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b48a:	07da      	lsls	r2, r3, #31
 801b48c:	d405      	bmi.n	801b49a <_fwrite_r+0x8e>
 801b48e:	89a3      	ldrh	r3, [r4, #12]
 801b490:	059b      	lsls	r3, r3, #22
 801b492:	d402      	bmi.n	801b49a <_fwrite_r+0x8e>
 801b494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b496:	f000 fb3d 	bl	801bb14 <__retarget_lock_release_recursive>
 801b49a:	fbb5 f0f8 	udiv	r0, r5, r8
 801b49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b4a4 <fwrite>:
 801b4a4:	b507      	push	{r0, r1, r2, lr}
 801b4a6:	9300      	str	r3, [sp, #0]
 801b4a8:	4613      	mov	r3, r2
 801b4aa:	460a      	mov	r2, r1
 801b4ac:	4601      	mov	r1, r0
 801b4ae:	4803      	ldr	r0, [pc, #12]	@ (801b4bc <fwrite+0x18>)
 801b4b0:	6800      	ldr	r0, [r0, #0]
 801b4b2:	f7ff ffab 	bl	801b40c <_fwrite_r>
 801b4b6:	b003      	add	sp, #12
 801b4b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b4bc:	20001240 	.word	0x20001240

0801b4c0 <iprintf>:
 801b4c0:	b40f      	push	{r0, r1, r2, r3}
 801b4c2:	b507      	push	{r0, r1, r2, lr}
 801b4c4:	4906      	ldr	r1, [pc, #24]	@ (801b4e0 <iprintf+0x20>)
 801b4c6:	ab04      	add	r3, sp, #16
 801b4c8:	6808      	ldr	r0, [r1, #0]
 801b4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4ce:	6881      	ldr	r1, [r0, #8]
 801b4d0:	9301      	str	r3, [sp, #4]
 801b4d2:	f002 fec1 	bl	801e258 <_vfiprintf_r>
 801b4d6:	b003      	add	sp, #12
 801b4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b4dc:	b004      	add	sp, #16
 801b4de:	4770      	bx	lr
 801b4e0:	20001240 	.word	0x20001240

0801b4e4 <_puts_r>:
 801b4e4:	6a03      	ldr	r3, [r0, #32]
 801b4e6:	b570      	push	{r4, r5, r6, lr}
 801b4e8:	6884      	ldr	r4, [r0, #8]
 801b4ea:	4605      	mov	r5, r0
 801b4ec:	460e      	mov	r6, r1
 801b4ee:	b90b      	cbnz	r3, 801b4f4 <_puts_r+0x10>
 801b4f0:	f7ff ff56 	bl	801b3a0 <__sinit>
 801b4f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b4f6:	07db      	lsls	r3, r3, #31
 801b4f8:	d405      	bmi.n	801b506 <_puts_r+0x22>
 801b4fa:	89a3      	ldrh	r3, [r4, #12]
 801b4fc:	0598      	lsls	r0, r3, #22
 801b4fe:	d402      	bmi.n	801b506 <_puts_r+0x22>
 801b500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b502:	f000 fb06 	bl	801bb12 <__retarget_lock_acquire_recursive>
 801b506:	89a3      	ldrh	r3, [r4, #12]
 801b508:	0719      	lsls	r1, r3, #28
 801b50a:	d502      	bpl.n	801b512 <_puts_r+0x2e>
 801b50c:	6923      	ldr	r3, [r4, #16]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d135      	bne.n	801b57e <_puts_r+0x9a>
 801b512:	4621      	mov	r1, r4
 801b514:	4628      	mov	r0, r5
 801b516:	f000 f951 	bl	801b7bc <__swsetup_r>
 801b51a:	b380      	cbz	r0, 801b57e <_puts_r+0x9a>
 801b51c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801b520:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b522:	07da      	lsls	r2, r3, #31
 801b524:	d405      	bmi.n	801b532 <_puts_r+0x4e>
 801b526:	89a3      	ldrh	r3, [r4, #12]
 801b528:	059b      	lsls	r3, r3, #22
 801b52a:	d402      	bmi.n	801b532 <_puts_r+0x4e>
 801b52c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b52e:	f000 faf1 	bl	801bb14 <__retarget_lock_release_recursive>
 801b532:	4628      	mov	r0, r5
 801b534:	bd70      	pop	{r4, r5, r6, pc}
 801b536:	2b00      	cmp	r3, #0
 801b538:	da04      	bge.n	801b544 <_puts_r+0x60>
 801b53a:	69a2      	ldr	r2, [r4, #24]
 801b53c:	429a      	cmp	r2, r3
 801b53e:	dc17      	bgt.n	801b570 <_puts_r+0x8c>
 801b540:	290a      	cmp	r1, #10
 801b542:	d015      	beq.n	801b570 <_puts_r+0x8c>
 801b544:	6823      	ldr	r3, [r4, #0]
 801b546:	1c5a      	adds	r2, r3, #1
 801b548:	6022      	str	r2, [r4, #0]
 801b54a:	7019      	strb	r1, [r3, #0]
 801b54c:	68a3      	ldr	r3, [r4, #8]
 801b54e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b552:	3b01      	subs	r3, #1
 801b554:	60a3      	str	r3, [r4, #8]
 801b556:	2900      	cmp	r1, #0
 801b558:	d1ed      	bne.n	801b536 <_puts_r+0x52>
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	da11      	bge.n	801b582 <_puts_r+0x9e>
 801b55e:	4622      	mov	r2, r4
 801b560:	210a      	movs	r1, #10
 801b562:	4628      	mov	r0, r5
 801b564:	f000 f8ec 	bl	801b740 <__swbuf_r>
 801b568:	3001      	adds	r0, #1
 801b56a:	d0d7      	beq.n	801b51c <_puts_r+0x38>
 801b56c:	250a      	movs	r5, #10
 801b56e:	e7d7      	b.n	801b520 <_puts_r+0x3c>
 801b570:	4622      	mov	r2, r4
 801b572:	4628      	mov	r0, r5
 801b574:	f000 f8e4 	bl	801b740 <__swbuf_r>
 801b578:	3001      	adds	r0, #1
 801b57a:	d1e7      	bne.n	801b54c <_puts_r+0x68>
 801b57c:	e7ce      	b.n	801b51c <_puts_r+0x38>
 801b57e:	3e01      	subs	r6, #1
 801b580:	e7e4      	b.n	801b54c <_puts_r+0x68>
 801b582:	6823      	ldr	r3, [r4, #0]
 801b584:	1c5a      	adds	r2, r3, #1
 801b586:	6022      	str	r2, [r4, #0]
 801b588:	220a      	movs	r2, #10
 801b58a:	701a      	strb	r2, [r3, #0]
 801b58c:	e7ee      	b.n	801b56c <_puts_r+0x88>
	...

0801b590 <puts>:
 801b590:	4b02      	ldr	r3, [pc, #8]	@ (801b59c <puts+0xc>)
 801b592:	4601      	mov	r1, r0
 801b594:	6818      	ldr	r0, [r3, #0]
 801b596:	f7ff bfa5 	b.w	801b4e4 <_puts_r>
 801b59a:	bf00      	nop
 801b59c:	20001240 	.word	0x20001240

0801b5a0 <sniprintf>:
 801b5a0:	b40c      	push	{r2, r3}
 801b5a2:	b530      	push	{r4, r5, lr}
 801b5a4:	4b17      	ldr	r3, [pc, #92]	@ (801b604 <sniprintf+0x64>)
 801b5a6:	1e0c      	subs	r4, r1, #0
 801b5a8:	681d      	ldr	r5, [r3, #0]
 801b5aa:	b09d      	sub	sp, #116	@ 0x74
 801b5ac:	da08      	bge.n	801b5c0 <sniprintf+0x20>
 801b5ae:	238b      	movs	r3, #139	@ 0x8b
 801b5b0:	602b      	str	r3, [r5, #0]
 801b5b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b5b6:	b01d      	add	sp, #116	@ 0x74
 801b5b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5bc:	b002      	add	sp, #8
 801b5be:	4770      	bx	lr
 801b5c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b5c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b5c8:	bf14      	ite	ne
 801b5ca:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b5ce:	4623      	moveq	r3, r4
 801b5d0:	9304      	str	r3, [sp, #16]
 801b5d2:	9307      	str	r3, [sp, #28]
 801b5d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b5d8:	9002      	str	r0, [sp, #8]
 801b5da:	9006      	str	r0, [sp, #24]
 801b5dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b5e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b5e2:	ab21      	add	r3, sp, #132	@ 0x84
 801b5e4:	a902      	add	r1, sp, #8
 801b5e6:	4628      	mov	r0, r5
 801b5e8:	9301      	str	r3, [sp, #4]
 801b5ea:	f002 fd0f 	bl	801e00c <_svfiprintf_r>
 801b5ee:	1c43      	adds	r3, r0, #1
 801b5f0:	bfbc      	itt	lt
 801b5f2:	238b      	movlt	r3, #139	@ 0x8b
 801b5f4:	602b      	strlt	r3, [r5, #0]
 801b5f6:	2c00      	cmp	r4, #0
 801b5f8:	d0dd      	beq.n	801b5b6 <sniprintf+0x16>
 801b5fa:	9b02      	ldr	r3, [sp, #8]
 801b5fc:	2200      	movs	r2, #0
 801b5fe:	701a      	strb	r2, [r3, #0]
 801b600:	e7d9      	b.n	801b5b6 <sniprintf+0x16>
 801b602:	bf00      	nop
 801b604:	20001240 	.word	0x20001240

0801b608 <siprintf>:
 801b608:	b40e      	push	{r1, r2, r3}
 801b60a:	b500      	push	{lr}
 801b60c:	b09c      	sub	sp, #112	@ 0x70
 801b60e:	ab1d      	add	r3, sp, #116	@ 0x74
 801b610:	9002      	str	r0, [sp, #8]
 801b612:	9006      	str	r0, [sp, #24]
 801b614:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b618:	4809      	ldr	r0, [pc, #36]	@ (801b640 <siprintf+0x38>)
 801b61a:	9107      	str	r1, [sp, #28]
 801b61c:	9104      	str	r1, [sp, #16]
 801b61e:	4909      	ldr	r1, [pc, #36]	@ (801b644 <siprintf+0x3c>)
 801b620:	f853 2b04 	ldr.w	r2, [r3], #4
 801b624:	9105      	str	r1, [sp, #20]
 801b626:	6800      	ldr	r0, [r0, #0]
 801b628:	9301      	str	r3, [sp, #4]
 801b62a:	a902      	add	r1, sp, #8
 801b62c:	f002 fcee 	bl	801e00c <_svfiprintf_r>
 801b630:	9b02      	ldr	r3, [sp, #8]
 801b632:	2200      	movs	r2, #0
 801b634:	701a      	strb	r2, [r3, #0]
 801b636:	b01c      	add	sp, #112	@ 0x70
 801b638:	f85d eb04 	ldr.w	lr, [sp], #4
 801b63c:	b003      	add	sp, #12
 801b63e:	4770      	bx	lr
 801b640:	20001240 	.word	0x20001240
 801b644:	ffff0208 	.word	0xffff0208

0801b648 <__sread>:
 801b648:	b510      	push	{r4, lr}
 801b64a:	460c      	mov	r4, r1
 801b64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b650:	f000 fa00 	bl	801ba54 <_read_r>
 801b654:	2800      	cmp	r0, #0
 801b656:	bfab      	itete	ge
 801b658:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b65a:	89a3      	ldrhlt	r3, [r4, #12]
 801b65c:	181b      	addge	r3, r3, r0
 801b65e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b662:	bfac      	ite	ge
 801b664:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b666:	81a3      	strhlt	r3, [r4, #12]
 801b668:	bd10      	pop	{r4, pc}

0801b66a <__swrite>:
 801b66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b66e:	461f      	mov	r7, r3
 801b670:	898b      	ldrh	r3, [r1, #12]
 801b672:	05db      	lsls	r3, r3, #23
 801b674:	4605      	mov	r5, r0
 801b676:	460c      	mov	r4, r1
 801b678:	4616      	mov	r6, r2
 801b67a:	d505      	bpl.n	801b688 <__swrite+0x1e>
 801b67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b680:	2302      	movs	r3, #2
 801b682:	2200      	movs	r2, #0
 801b684:	f000 f9d4 	bl	801ba30 <_lseek_r>
 801b688:	89a3      	ldrh	r3, [r4, #12]
 801b68a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b68e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b692:	81a3      	strh	r3, [r4, #12]
 801b694:	4632      	mov	r2, r6
 801b696:	463b      	mov	r3, r7
 801b698:	4628      	mov	r0, r5
 801b69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b69e:	f000 b9fb 	b.w	801ba98 <_write_r>

0801b6a2 <__sseek>:
 801b6a2:	b510      	push	{r4, lr}
 801b6a4:	460c      	mov	r4, r1
 801b6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6aa:	f000 f9c1 	bl	801ba30 <_lseek_r>
 801b6ae:	1c43      	adds	r3, r0, #1
 801b6b0:	89a3      	ldrh	r3, [r4, #12]
 801b6b2:	bf15      	itete	ne
 801b6b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b6b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b6ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b6be:	81a3      	strheq	r3, [r4, #12]
 801b6c0:	bf18      	it	ne
 801b6c2:	81a3      	strhne	r3, [r4, #12]
 801b6c4:	bd10      	pop	{r4, pc}

0801b6c6 <__sclose>:
 801b6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6ca:	f000 b94b 	b.w	801b964 <_close_r>

0801b6ce <_vsniprintf_r>:
 801b6ce:	b530      	push	{r4, r5, lr}
 801b6d0:	4614      	mov	r4, r2
 801b6d2:	2c00      	cmp	r4, #0
 801b6d4:	b09b      	sub	sp, #108	@ 0x6c
 801b6d6:	4605      	mov	r5, r0
 801b6d8:	461a      	mov	r2, r3
 801b6da:	da05      	bge.n	801b6e8 <_vsniprintf_r+0x1a>
 801b6dc:	238b      	movs	r3, #139	@ 0x8b
 801b6de:	6003      	str	r3, [r0, #0]
 801b6e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b6e4:	b01b      	add	sp, #108	@ 0x6c
 801b6e6:	bd30      	pop	{r4, r5, pc}
 801b6e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b6ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b6f0:	bf14      	ite	ne
 801b6f2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b6f6:	4623      	moveq	r3, r4
 801b6f8:	9302      	str	r3, [sp, #8]
 801b6fa:	9305      	str	r3, [sp, #20]
 801b6fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b700:	9100      	str	r1, [sp, #0]
 801b702:	9104      	str	r1, [sp, #16]
 801b704:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b708:	4669      	mov	r1, sp
 801b70a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b70c:	f002 fc7e 	bl	801e00c <_svfiprintf_r>
 801b710:	1c43      	adds	r3, r0, #1
 801b712:	bfbc      	itt	lt
 801b714:	238b      	movlt	r3, #139	@ 0x8b
 801b716:	602b      	strlt	r3, [r5, #0]
 801b718:	2c00      	cmp	r4, #0
 801b71a:	d0e3      	beq.n	801b6e4 <_vsniprintf_r+0x16>
 801b71c:	9b00      	ldr	r3, [sp, #0]
 801b71e:	2200      	movs	r2, #0
 801b720:	701a      	strb	r2, [r3, #0]
 801b722:	e7df      	b.n	801b6e4 <_vsniprintf_r+0x16>

0801b724 <vsniprintf>:
 801b724:	b507      	push	{r0, r1, r2, lr}
 801b726:	9300      	str	r3, [sp, #0]
 801b728:	4613      	mov	r3, r2
 801b72a:	460a      	mov	r2, r1
 801b72c:	4601      	mov	r1, r0
 801b72e:	4803      	ldr	r0, [pc, #12]	@ (801b73c <vsniprintf+0x18>)
 801b730:	6800      	ldr	r0, [r0, #0]
 801b732:	f7ff ffcc 	bl	801b6ce <_vsniprintf_r>
 801b736:	b003      	add	sp, #12
 801b738:	f85d fb04 	ldr.w	pc, [sp], #4
 801b73c:	20001240 	.word	0x20001240

0801b740 <__swbuf_r>:
 801b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b742:	460e      	mov	r6, r1
 801b744:	4614      	mov	r4, r2
 801b746:	4605      	mov	r5, r0
 801b748:	b118      	cbz	r0, 801b752 <__swbuf_r+0x12>
 801b74a:	6a03      	ldr	r3, [r0, #32]
 801b74c:	b90b      	cbnz	r3, 801b752 <__swbuf_r+0x12>
 801b74e:	f7ff fe27 	bl	801b3a0 <__sinit>
 801b752:	69a3      	ldr	r3, [r4, #24]
 801b754:	60a3      	str	r3, [r4, #8]
 801b756:	89a3      	ldrh	r3, [r4, #12]
 801b758:	071a      	lsls	r2, r3, #28
 801b75a:	d501      	bpl.n	801b760 <__swbuf_r+0x20>
 801b75c:	6923      	ldr	r3, [r4, #16]
 801b75e:	b943      	cbnz	r3, 801b772 <__swbuf_r+0x32>
 801b760:	4621      	mov	r1, r4
 801b762:	4628      	mov	r0, r5
 801b764:	f000 f82a 	bl	801b7bc <__swsetup_r>
 801b768:	b118      	cbz	r0, 801b772 <__swbuf_r+0x32>
 801b76a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b76e:	4638      	mov	r0, r7
 801b770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b772:	6823      	ldr	r3, [r4, #0]
 801b774:	6922      	ldr	r2, [r4, #16]
 801b776:	1a98      	subs	r0, r3, r2
 801b778:	6963      	ldr	r3, [r4, #20]
 801b77a:	b2f6      	uxtb	r6, r6
 801b77c:	4283      	cmp	r3, r0
 801b77e:	4637      	mov	r7, r6
 801b780:	dc05      	bgt.n	801b78e <__swbuf_r+0x4e>
 801b782:	4621      	mov	r1, r4
 801b784:	4628      	mov	r0, r5
 801b786:	f002 ff03 	bl	801e590 <_fflush_r>
 801b78a:	2800      	cmp	r0, #0
 801b78c:	d1ed      	bne.n	801b76a <__swbuf_r+0x2a>
 801b78e:	68a3      	ldr	r3, [r4, #8]
 801b790:	3b01      	subs	r3, #1
 801b792:	60a3      	str	r3, [r4, #8]
 801b794:	6823      	ldr	r3, [r4, #0]
 801b796:	1c5a      	adds	r2, r3, #1
 801b798:	6022      	str	r2, [r4, #0]
 801b79a:	701e      	strb	r6, [r3, #0]
 801b79c:	6962      	ldr	r2, [r4, #20]
 801b79e:	1c43      	adds	r3, r0, #1
 801b7a0:	429a      	cmp	r2, r3
 801b7a2:	d004      	beq.n	801b7ae <__swbuf_r+0x6e>
 801b7a4:	89a3      	ldrh	r3, [r4, #12]
 801b7a6:	07db      	lsls	r3, r3, #31
 801b7a8:	d5e1      	bpl.n	801b76e <__swbuf_r+0x2e>
 801b7aa:	2e0a      	cmp	r6, #10
 801b7ac:	d1df      	bne.n	801b76e <__swbuf_r+0x2e>
 801b7ae:	4621      	mov	r1, r4
 801b7b0:	4628      	mov	r0, r5
 801b7b2:	f002 feed 	bl	801e590 <_fflush_r>
 801b7b6:	2800      	cmp	r0, #0
 801b7b8:	d0d9      	beq.n	801b76e <__swbuf_r+0x2e>
 801b7ba:	e7d6      	b.n	801b76a <__swbuf_r+0x2a>

0801b7bc <__swsetup_r>:
 801b7bc:	b538      	push	{r3, r4, r5, lr}
 801b7be:	4b29      	ldr	r3, [pc, #164]	@ (801b864 <__swsetup_r+0xa8>)
 801b7c0:	4605      	mov	r5, r0
 801b7c2:	6818      	ldr	r0, [r3, #0]
 801b7c4:	460c      	mov	r4, r1
 801b7c6:	b118      	cbz	r0, 801b7d0 <__swsetup_r+0x14>
 801b7c8:	6a03      	ldr	r3, [r0, #32]
 801b7ca:	b90b      	cbnz	r3, 801b7d0 <__swsetup_r+0x14>
 801b7cc:	f7ff fde8 	bl	801b3a0 <__sinit>
 801b7d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b7d4:	0719      	lsls	r1, r3, #28
 801b7d6:	d422      	bmi.n	801b81e <__swsetup_r+0x62>
 801b7d8:	06da      	lsls	r2, r3, #27
 801b7da:	d407      	bmi.n	801b7ec <__swsetup_r+0x30>
 801b7dc:	2209      	movs	r2, #9
 801b7de:	602a      	str	r2, [r5, #0]
 801b7e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b7e4:	81a3      	strh	r3, [r4, #12]
 801b7e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7ea:	e033      	b.n	801b854 <__swsetup_r+0x98>
 801b7ec:	0758      	lsls	r0, r3, #29
 801b7ee:	d512      	bpl.n	801b816 <__swsetup_r+0x5a>
 801b7f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b7f2:	b141      	cbz	r1, 801b806 <__swsetup_r+0x4a>
 801b7f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b7f8:	4299      	cmp	r1, r3
 801b7fa:	d002      	beq.n	801b802 <__swsetup_r+0x46>
 801b7fc:	4628      	mov	r0, r5
 801b7fe:	f001 f81f 	bl	801c840 <_free_r>
 801b802:	2300      	movs	r3, #0
 801b804:	6363      	str	r3, [r4, #52]	@ 0x34
 801b806:	89a3      	ldrh	r3, [r4, #12]
 801b808:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b80c:	81a3      	strh	r3, [r4, #12]
 801b80e:	2300      	movs	r3, #0
 801b810:	6063      	str	r3, [r4, #4]
 801b812:	6923      	ldr	r3, [r4, #16]
 801b814:	6023      	str	r3, [r4, #0]
 801b816:	89a3      	ldrh	r3, [r4, #12]
 801b818:	f043 0308 	orr.w	r3, r3, #8
 801b81c:	81a3      	strh	r3, [r4, #12]
 801b81e:	6923      	ldr	r3, [r4, #16]
 801b820:	b94b      	cbnz	r3, 801b836 <__swsetup_r+0x7a>
 801b822:	89a3      	ldrh	r3, [r4, #12]
 801b824:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b82c:	d003      	beq.n	801b836 <__swsetup_r+0x7a>
 801b82e:	4621      	mov	r1, r4
 801b830:	4628      	mov	r0, r5
 801b832:	f002 ff0d 	bl	801e650 <__smakebuf_r>
 801b836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b83a:	f013 0201 	ands.w	r2, r3, #1
 801b83e:	d00a      	beq.n	801b856 <__swsetup_r+0x9a>
 801b840:	2200      	movs	r2, #0
 801b842:	60a2      	str	r2, [r4, #8]
 801b844:	6962      	ldr	r2, [r4, #20]
 801b846:	4252      	negs	r2, r2
 801b848:	61a2      	str	r2, [r4, #24]
 801b84a:	6922      	ldr	r2, [r4, #16]
 801b84c:	b942      	cbnz	r2, 801b860 <__swsetup_r+0xa4>
 801b84e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b852:	d1c5      	bne.n	801b7e0 <__swsetup_r+0x24>
 801b854:	bd38      	pop	{r3, r4, r5, pc}
 801b856:	0799      	lsls	r1, r3, #30
 801b858:	bf58      	it	pl
 801b85a:	6962      	ldrpl	r2, [r4, #20]
 801b85c:	60a2      	str	r2, [r4, #8]
 801b85e:	e7f4      	b.n	801b84a <__swsetup_r+0x8e>
 801b860:	2000      	movs	r0, #0
 801b862:	e7f7      	b.n	801b854 <__swsetup_r+0x98>
 801b864:	20001240 	.word	0x20001240

0801b868 <memcmp>:
 801b868:	b510      	push	{r4, lr}
 801b86a:	3901      	subs	r1, #1
 801b86c:	4402      	add	r2, r0
 801b86e:	4290      	cmp	r0, r2
 801b870:	d101      	bne.n	801b876 <memcmp+0xe>
 801b872:	2000      	movs	r0, #0
 801b874:	e005      	b.n	801b882 <memcmp+0x1a>
 801b876:	7803      	ldrb	r3, [r0, #0]
 801b878:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b87c:	42a3      	cmp	r3, r4
 801b87e:	d001      	beq.n	801b884 <memcmp+0x1c>
 801b880:	1b18      	subs	r0, r3, r4
 801b882:	bd10      	pop	{r4, pc}
 801b884:	3001      	adds	r0, #1
 801b886:	e7f2      	b.n	801b86e <memcmp+0x6>

0801b888 <memmove>:
 801b888:	4288      	cmp	r0, r1
 801b88a:	b510      	push	{r4, lr}
 801b88c:	eb01 0402 	add.w	r4, r1, r2
 801b890:	d902      	bls.n	801b898 <memmove+0x10>
 801b892:	4284      	cmp	r4, r0
 801b894:	4623      	mov	r3, r4
 801b896:	d807      	bhi.n	801b8a8 <memmove+0x20>
 801b898:	1e43      	subs	r3, r0, #1
 801b89a:	42a1      	cmp	r1, r4
 801b89c:	d008      	beq.n	801b8b0 <memmove+0x28>
 801b89e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b8a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b8a6:	e7f8      	b.n	801b89a <memmove+0x12>
 801b8a8:	4402      	add	r2, r0
 801b8aa:	4601      	mov	r1, r0
 801b8ac:	428a      	cmp	r2, r1
 801b8ae:	d100      	bne.n	801b8b2 <memmove+0x2a>
 801b8b0:	bd10      	pop	{r4, pc}
 801b8b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b8b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b8ba:	e7f7      	b.n	801b8ac <memmove+0x24>

0801b8bc <memset>:
 801b8bc:	4402      	add	r2, r0
 801b8be:	4603      	mov	r3, r0
 801b8c0:	4293      	cmp	r3, r2
 801b8c2:	d100      	bne.n	801b8c6 <memset+0xa>
 801b8c4:	4770      	bx	lr
 801b8c6:	f803 1b01 	strb.w	r1, [r3], #1
 801b8ca:	e7f9      	b.n	801b8c0 <memset+0x4>

0801b8cc <strchr>:
 801b8cc:	b2c9      	uxtb	r1, r1
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b8d6:	b112      	cbz	r2, 801b8de <strchr+0x12>
 801b8d8:	428a      	cmp	r2, r1
 801b8da:	d1f9      	bne.n	801b8d0 <strchr+0x4>
 801b8dc:	4770      	bx	lr
 801b8de:	2900      	cmp	r1, #0
 801b8e0:	bf18      	it	ne
 801b8e2:	2000      	movne	r0, #0
 801b8e4:	4770      	bx	lr

0801b8e6 <strncmp>:
 801b8e6:	b510      	push	{r4, lr}
 801b8e8:	b16a      	cbz	r2, 801b906 <strncmp+0x20>
 801b8ea:	3901      	subs	r1, #1
 801b8ec:	1884      	adds	r4, r0, r2
 801b8ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b8f6:	429a      	cmp	r2, r3
 801b8f8:	d103      	bne.n	801b902 <strncmp+0x1c>
 801b8fa:	42a0      	cmp	r0, r4
 801b8fc:	d001      	beq.n	801b902 <strncmp+0x1c>
 801b8fe:	2a00      	cmp	r2, #0
 801b900:	d1f5      	bne.n	801b8ee <strncmp+0x8>
 801b902:	1ad0      	subs	r0, r2, r3
 801b904:	bd10      	pop	{r4, pc}
 801b906:	4610      	mov	r0, r2
 801b908:	e7fc      	b.n	801b904 <strncmp+0x1e>

0801b90a <strncpy>:
 801b90a:	b510      	push	{r4, lr}
 801b90c:	3901      	subs	r1, #1
 801b90e:	4603      	mov	r3, r0
 801b910:	b132      	cbz	r2, 801b920 <strncpy+0x16>
 801b912:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b916:	f803 4b01 	strb.w	r4, [r3], #1
 801b91a:	3a01      	subs	r2, #1
 801b91c:	2c00      	cmp	r4, #0
 801b91e:	d1f7      	bne.n	801b910 <strncpy+0x6>
 801b920:	441a      	add	r2, r3
 801b922:	2100      	movs	r1, #0
 801b924:	4293      	cmp	r3, r2
 801b926:	d100      	bne.n	801b92a <strncpy+0x20>
 801b928:	bd10      	pop	{r4, pc}
 801b92a:	f803 1b01 	strb.w	r1, [r3], #1
 801b92e:	e7f9      	b.n	801b924 <strncpy+0x1a>

0801b930 <strstr>:
 801b930:	780a      	ldrb	r2, [r1, #0]
 801b932:	b570      	push	{r4, r5, r6, lr}
 801b934:	b96a      	cbnz	r2, 801b952 <strstr+0x22>
 801b936:	bd70      	pop	{r4, r5, r6, pc}
 801b938:	429a      	cmp	r2, r3
 801b93a:	d109      	bne.n	801b950 <strstr+0x20>
 801b93c:	460c      	mov	r4, r1
 801b93e:	4605      	mov	r5, r0
 801b940:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b944:	2b00      	cmp	r3, #0
 801b946:	d0f6      	beq.n	801b936 <strstr+0x6>
 801b948:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b94c:	429e      	cmp	r6, r3
 801b94e:	d0f7      	beq.n	801b940 <strstr+0x10>
 801b950:	3001      	adds	r0, #1
 801b952:	7803      	ldrb	r3, [r0, #0]
 801b954:	2b00      	cmp	r3, #0
 801b956:	d1ef      	bne.n	801b938 <strstr+0x8>
 801b958:	4618      	mov	r0, r3
 801b95a:	e7ec      	b.n	801b936 <strstr+0x6>

0801b95c <_localeconv_r>:
 801b95c:	4800      	ldr	r0, [pc, #0]	@ (801b960 <_localeconv_r+0x4>)
 801b95e:	4770      	bx	lr
 801b960:	20001380 	.word	0x20001380

0801b964 <_close_r>:
 801b964:	b538      	push	{r3, r4, r5, lr}
 801b966:	4d06      	ldr	r5, [pc, #24]	@ (801b980 <_close_r+0x1c>)
 801b968:	2300      	movs	r3, #0
 801b96a:	4604      	mov	r4, r0
 801b96c:	4608      	mov	r0, r1
 801b96e:	602b      	str	r3, [r5, #0]
 801b970:	f7e8 feba 	bl	80046e8 <_close>
 801b974:	1c43      	adds	r3, r0, #1
 801b976:	d102      	bne.n	801b97e <_close_r+0x1a>
 801b978:	682b      	ldr	r3, [r5, #0]
 801b97a:	b103      	cbz	r3, 801b97e <_close_r+0x1a>
 801b97c:	6023      	str	r3, [r4, #0]
 801b97e:	bd38      	pop	{r3, r4, r5, pc}
 801b980:	20017a70 	.word	0x20017a70

0801b984 <_reclaim_reent>:
 801b984:	4b29      	ldr	r3, [pc, #164]	@ (801ba2c <_reclaim_reent+0xa8>)
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	4283      	cmp	r3, r0
 801b98a:	b570      	push	{r4, r5, r6, lr}
 801b98c:	4604      	mov	r4, r0
 801b98e:	d04b      	beq.n	801ba28 <_reclaim_reent+0xa4>
 801b990:	69c3      	ldr	r3, [r0, #28]
 801b992:	b1ab      	cbz	r3, 801b9c0 <_reclaim_reent+0x3c>
 801b994:	68db      	ldr	r3, [r3, #12]
 801b996:	b16b      	cbz	r3, 801b9b4 <_reclaim_reent+0x30>
 801b998:	2500      	movs	r5, #0
 801b99a:	69e3      	ldr	r3, [r4, #28]
 801b99c:	68db      	ldr	r3, [r3, #12]
 801b99e:	5959      	ldr	r1, [r3, r5]
 801b9a0:	2900      	cmp	r1, #0
 801b9a2:	d13b      	bne.n	801ba1c <_reclaim_reent+0x98>
 801b9a4:	3504      	adds	r5, #4
 801b9a6:	2d80      	cmp	r5, #128	@ 0x80
 801b9a8:	d1f7      	bne.n	801b99a <_reclaim_reent+0x16>
 801b9aa:	69e3      	ldr	r3, [r4, #28]
 801b9ac:	4620      	mov	r0, r4
 801b9ae:	68d9      	ldr	r1, [r3, #12]
 801b9b0:	f000 ff46 	bl	801c840 <_free_r>
 801b9b4:	69e3      	ldr	r3, [r4, #28]
 801b9b6:	6819      	ldr	r1, [r3, #0]
 801b9b8:	b111      	cbz	r1, 801b9c0 <_reclaim_reent+0x3c>
 801b9ba:	4620      	mov	r0, r4
 801b9bc:	f000 ff40 	bl	801c840 <_free_r>
 801b9c0:	6961      	ldr	r1, [r4, #20]
 801b9c2:	b111      	cbz	r1, 801b9ca <_reclaim_reent+0x46>
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	f000 ff3b 	bl	801c840 <_free_r>
 801b9ca:	69e1      	ldr	r1, [r4, #28]
 801b9cc:	b111      	cbz	r1, 801b9d4 <_reclaim_reent+0x50>
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	f000 ff36 	bl	801c840 <_free_r>
 801b9d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b9d6:	b111      	cbz	r1, 801b9de <_reclaim_reent+0x5a>
 801b9d8:	4620      	mov	r0, r4
 801b9da:	f000 ff31 	bl	801c840 <_free_r>
 801b9de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b9e0:	b111      	cbz	r1, 801b9e8 <_reclaim_reent+0x64>
 801b9e2:	4620      	mov	r0, r4
 801b9e4:	f000 ff2c 	bl	801c840 <_free_r>
 801b9e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b9ea:	b111      	cbz	r1, 801b9f2 <_reclaim_reent+0x6e>
 801b9ec:	4620      	mov	r0, r4
 801b9ee:	f000 ff27 	bl	801c840 <_free_r>
 801b9f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b9f4:	b111      	cbz	r1, 801b9fc <_reclaim_reent+0x78>
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f000 ff22 	bl	801c840 <_free_r>
 801b9fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b9fe:	b111      	cbz	r1, 801ba06 <_reclaim_reent+0x82>
 801ba00:	4620      	mov	r0, r4
 801ba02:	f000 ff1d 	bl	801c840 <_free_r>
 801ba06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ba08:	b111      	cbz	r1, 801ba10 <_reclaim_reent+0x8c>
 801ba0a:	4620      	mov	r0, r4
 801ba0c:	f000 ff18 	bl	801c840 <_free_r>
 801ba10:	6a23      	ldr	r3, [r4, #32]
 801ba12:	b14b      	cbz	r3, 801ba28 <_reclaim_reent+0xa4>
 801ba14:	4620      	mov	r0, r4
 801ba16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba1a:	4718      	bx	r3
 801ba1c:	680e      	ldr	r6, [r1, #0]
 801ba1e:	4620      	mov	r0, r4
 801ba20:	f000 ff0e 	bl	801c840 <_free_r>
 801ba24:	4631      	mov	r1, r6
 801ba26:	e7bb      	b.n	801b9a0 <_reclaim_reent+0x1c>
 801ba28:	bd70      	pop	{r4, r5, r6, pc}
 801ba2a:	bf00      	nop
 801ba2c:	20001240 	.word	0x20001240

0801ba30 <_lseek_r>:
 801ba30:	b538      	push	{r3, r4, r5, lr}
 801ba32:	4d07      	ldr	r5, [pc, #28]	@ (801ba50 <_lseek_r+0x20>)
 801ba34:	4604      	mov	r4, r0
 801ba36:	4608      	mov	r0, r1
 801ba38:	4611      	mov	r1, r2
 801ba3a:	2200      	movs	r2, #0
 801ba3c:	602a      	str	r2, [r5, #0]
 801ba3e:	461a      	mov	r2, r3
 801ba40:	f7e8 fe79 	bl	8004736 <_lseek>
 801ba44:	1c43      	adds	r3, r0, #1
 801ba46:	d102      	bne.n	801ba4e <_lseek_r+0x1e>
 801ba48:	682b      	ldr	r3, [r5, #0]
 801ba4a:	b103      	cbz	r3, 801ba4e <_lseek_r+0x1e>
 801ba4c:	6023      	str	r3, [r4, #0]
 801ba4e:	bd38      	pop	{r3, r4, r5, pc}
 801ba50:	20017a70 	.word	0x20017a70

0801ba54 <_read_r>:
 801ba54:	b538      	push	{r3, r4, r5, lr}
 801ba56:	4d07      	ldr	r5, [pc, #28]	@ (801ba74 <_read_r+0x20>)
 801ba58:	4604      	mov	r4, r0
 801ba5a:	4608      	mov	r0, r1
 801ba5c:	4611      	mov	r1, r2
 801ba5e:	2200      	movs	r2, #0
 801ba60:	602a      	str	r2, [r5, #0]
 801ba62:	461a      	mov	r2, r3
 801ba64:	f7e8 fe07 	bl	8004676 <_read>
 801ba68:	1c43      	adds	r3, r0, #1
 801ba6a:	d102      	bne.n	801ba72 <_read_r+0x1e>
 801ba6c:	682b      	ldr	r3, [r5, #0]
 801ba6e:	b103      	cbz	r3, 801ba72 <_read_r+0x1e>
 801ba70:	6023      	str	r3, [r4, #0]
 801ba72:	bd38      	pop	{r3, r4, r5, pc}
 801ba74:	20017a70 	.word	0x20017a70

0801ba78 <_sbrk_r>:
 801ba78:	b538      	push	{r3, r4, r5, lr}
 801ba7a:	4d06      	ldr	r5, [pc, #24]	@ (801ba94 <_sbrk_r+0x1c>)
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	4604      	mov	r4, r0
 801ba80:	4608      	mov	r0, r1
 801ba82:	602b      	str	r3, [r5, #0]
 801ba84:	f7e8 fe64 	bl	8004750 <_sbrk>
 801ba88:	1c43      	adds	r3, r0, #1
 801ba8a:	d102      	bne.n	801ba92 <_sbrk_r+0x1a>
 801ba8c:	682b      	ldr	r3, [r5, #0]
 801ba8e:	b103      	cbz	r3, 801ba92 <_sbrk_r+0x1a>
 801ba90:	6023      	str	r3, [r4, #0]
 801ba92:	bd38      	pop	{r3, r4, r5, pc}
 801ba94:	20017a70 	.word	0x20017a70

0801ba98 <_write_r>:
 801ba98:	b538      	push	{r3, r4, r5, lr}
 801ba9a:	4d07      	ldr	r5, [pc, #28]	@ (801bab8 <_write_r+0x20>)
 801ba9c:	4604      	mov	r4, r0
 801ba9e:	4608      	mov	r0, r1
 801baa0:	4611      	mov	r1, r2
 801baa2:	2200      	movs	r2, #0
 801baa4:	602a      	str	r2, [r5, #0]
 801baa6:	461a      	mov	r2, r3
 801baa8:	f7e8 fe02 	bl	80046b0 <_write>
 801baac:	1c43      	adds	r3, r0, #1
 801baae:	d102      	bne.n	801bab6 <_write_r+0x1e>
 801bab0:	682b      	ldr	r3, [r5, #0]
 801bab2:	b103      	cbz	r3, 801bab6 <_write_r+0x1e>
 801bab4:	6023      	str	r3, [r4, #0]
 801bab6:	bd38      	pop	{r3, r4, r5, pc}
 801bab8:	20017a70 	.word	0x20017a70

0801babc <__errno>:
 801babc:	4b01      	ldr	r3, [pc, #4]	@ (801bac4 <__errno+0x8>)
 801babe:	6818      	ldr	r0, [r3, #0]
 801bac0:	4770      	bx	lr
 801bac2:	bf00      	nop
 801bac4:	20001240 	.word	0x20001240

0801bac8 <__libc_init_array>:
 801bac8:	b570      	push	{r4, r5, r6, lr}
 801baca:	4d0d      	ldr	r5, [pc, #52]	@ (801bb00 <__libc_init_array+0x38>)
 801bacc:	4c0d      	ldr	r4, [pc, #52]	@ (801bb04 <__libc_init_array+0x3c>)
 801bace:	1b64      	subs	r4, r4, r5
 801bad0:	10a4      	asrs	r4, r4, #2
 801bad2:	2600      	movs	r6, #0
 801bad4:	42a6      	cmp	r6, r4
 801bad6:	d109      	bne.n	801baec <__libc_init_array+0x24>
 801bad8:	4d0b      	ldr	r5, [pc, #44]	@ (801bb08 <__libc_init_array+0x40>)
 801bada:	4c0c      	ldr	r4, [pc, #48]	@ (801bb0c <__libc_init_array+0x44>)
 801badc:	f003 f9c2 	bl	801ee64 <_init>
 801bae0:	1b64      	subs	r4, r4, r5
 801bae2:	10a4      	asrs	r4, r4, #2
 801bae4:	2600      	movs	r6, #0
 801bae6:	42a6      	cmp	r6, r4
 801bae8:	d105      	bne.n	801baf6 <__libc_init_array+0x2e>
 801baea:	bd70      	pop	{r4, r5, r6, pc}
 801baec:	f855 3b04 	ldr.w	r3, [r5], #4
 801baf0:	4798      	blx	r3
 801baf2:	3601      	adds	r6, #1
 801baf4:	e7ee      	b.n	801bad4 <__libc_init_array+0xc>
 801baf6:	f855 3b04 	ldr.w	r3, [r5], #4
 801bafa:	4798      	blx	r3
 801bafc:	3601      	adds	r6, #1
 801bafe:	e7f2      	b.n	801bae6 <__libc_init_array+0x1e>
 801bb00:	080206f4 	.word	0x080206f4
 801bb04:	080206f4 	.word	0x080206f4
 801bb08:	080206f4 	.word	0x080206f4
 801bb0c:	08020700 	.word	0x08020700

0801bb10 <__retarget_lock_init_recursive>:
 801bb10:	4770      	bx	lr

0801bb12 <__retarget_lock_acquire_recursive>:
 801bb12:	4770      	bx	lr

0801bb14 <__retarget_lock_release_recursive>:
 801bb14:	4770      	bx	lr

0801bb16 <strcpy>:
 801bb16:	4603      	mov	r3, r0
 801bb18:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bb1c:	f803 2b01 	strb.w	r2, [r3], #1
 801bb20:	2a00      	cmp	r2, #0
 801bb22:	d1f9      	bne.n	801bb18 <strcpy+0x2>
 801bb24:	4770      	bx	lr

0801bb26 <memcpy>:
 801bb26:	440a      	add	r2, r1
 801bb28:	4291      	cmp	r1, r2
 801bb2a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801bb2e:	d100      	bne.n	801bb32 <memcpy+0xc>
 801bb30:	4770      	bx	lr
 801bb32:	b510      	push	{r4, lr}
 801bb34:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb38:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb3c:	4291      	cmp	r1, r2
 801bb3e:	d1f9      	bne.n	801bb34 <memcpy+0xe>
 801bb40:	bd10      	pop	{r4, pc}
	...

0801bb44 <nanf>:
 801bb44:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801bb4c <nanf+0x8>
 801bb48:	4770      	bx	lr
 801bb4a:	bf00      	nop
 801bb4c:	7fc00000 	.word	0x7fc00000

0801bb50 <__assert_func>:
 801bb50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bb52:	4614      	mov	r4, r2
 801bb54:	461a      	mov	r2, r3
 801bb56:	4b09      	ldr	r3, [pc, #36]	@ (801bb7c <__assert_func+0x2c>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	4605      	mov	r5, r0
 801bb5c:	68d8      	ldr	r0, [r3, #12]
 801bb5e:	b954      	cbnz	r4, 801bb76 <__assert_func+0x26>
 801bb60:	4b07      	ldr	r3, [pc, #28]	@ (801bb80 <__assert_func+0x30>)
 801bb62:	461c      	mov	r4, r3
 801bb64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bb68:	9100      	str	r1, [sp, #0]
 801bb6a:	462b      	mov	r3, r5
 801bb6c:	4905      	ldr	r1, [pc, #20]	@ (801bb84 <__assert_func+0x34>)
 801bb6e:	f002 fd37 	bl	801e5e0 <fiprintf>
 801bb72:	f002 fdd5 	bl	801e720 <abort>
 801bb76:	4b04      	ldr	r3, [pc, #16]	@ (801bb88 <__assert_func+0x38>)
 801bb78:	e7f4      	b.n	801bb64 <__assert_func+0x14>
 801bb7a:	bf00      	nop
 801bb7c:	20001240 	.word	0x20001240
 801bb80:	0802044a 	.word	0x0802044a
 801bb84:	0802041c 	.word	0x0802041c
 801bb88:	0802040f 	.word	0x0802040f

0801bb8c <quorem>:
 801bb8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb90:	6903      	ldr	r3, [r0, #16]
 801bb92:	690c      	ldr	r4, [r1, #16]
 801bb94:	42a3      	cmp	r3, r4
 801bb96:	4607      	mov	r7, r0
 801bb98:	db7e      	blt.n	801bc98 <quorem+0x10c>
 801bb9a:	3c01      	subs	r4, #1
 801bb9c:	f101 0814 	add.w	r8, r1, #20
 801bba0:	00a3      	lsls	r3, r4, #2
 801bba2:	f100 0514 	add.w	r5, r0, #20
 801bba6:	9300      	str	r3, [sp, #0]
 801bba8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bbac:	9301      	str	r3, [sp, #4]
 801bbae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bbb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bbb6:	3301      	adds	r3, #1
 801bbb8:	429a      	cmp	r2, r3
 801bbba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bbbe:	fbb2 f6f3 	udiv	r6, r2, r3
 801bbc2:	d32e      	bcc.n	801bc22 <quorem+0x96>
 801bbc4:	f04f 0a00 	mov.w	sl, #0
 801bbc8:	46c4      	mov	ip, r8
 801bbca:	46ae      	mov	lr, r5
 801bbcc:	46d3      	mov	fp, sl
 801bbce:	f85c 3b04 	ldr.w	r3, [ip], #4
 801bbd2:	b298      	uxth	r0, r3
 801bbd4:	fb06 a000 	mla	r0, r6, r0, sl
 801bbd8:	0c02      	lsrs	r2, r0, #16
 801bbda:	0c1b      	lsrs	r3, r3, #16
 801bbdc:	fb06 2303 	mla	r3, r6, r3, r2
 801bbe0:	f8de 2000 	ldr.w	r2, [lr]
 801bbe4:	b280      	uxth	r0, r0
 801bbe6:	b292      	uxth	r2, r2
 801bbe8:	1a12      	subs	r2, r2, r0
 801bbea:	445a      	add	r2, fp
 801bbec:	f8de 0000 	ldr.w	r0, [lr]
 801bbf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801bbfa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801bbfe:	b292      	uxth	r2, r2
 801bc00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801bc04:	45e1      	cmp	r9, ip
 801bc06:	f84e 2b04 	str.w	r2, [lr], #4
 801bc0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801bc0e:	d2de      	bcs.n	801bbce <quorem+0x42>
 801bc10:	9b00      	ldr	r3, [sp, #0]
 801bc12:	58eb      	ldr	r3, [r5, r3]
 801bc14:	b92b      	cbnz	r3, 801bc22 <quorem+0x96>
 801bc16:	9b01      	ldr	r3, [sp, #4]
 801bc18:	3b04      	subs	r3, #4
 801bc1a:	429d      	cmp	r5, r3
 801bc1c:	461a      	mov	r2, r3
 801bc1e:	d32f      	bcc.n	801bc80 <quorem+0xf4>
 801bc20:	613c      	str	r4, [r7, #16]
 801bc22:	4638      	mov	r0, r7
 801bc24:	f001 f91a 	bl	801ce5c <__mcmp>
 801bc28:	2800      	cmp	r0, #0
 801bc2a:	db25      	blt.n	801bc78 <quorem+0xec>
 801bc2c:	4629      	mov	r1, r5
 801bc2e:	2000      	movs	r0, #0
 801bc30:	f858 2b04 	ldr.w	r2, [r8], #4
 801bc34:	f8d1 c000 	ldr.w	ip, [r1]
 801bc38:	fa1f fe82 	uxth.w	lr, r2
 801bc3c:	fa1f f38c 	uxth.w	r3, ip
 801bc40:	eba3 030e 	sub.w	r3, r3, lr
 801bc44:	4403      	add	r3, r0
 801bc46:	0c12      	lsrs	r2, r2, #16
 801bc48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801bc4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801bc50:	b29b      	uxth	r3, r3
 801bc52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bc56:	45c1      	cmp	r9, r8
 801bc58:	f841 3b04 	str.w	r3, [r1], #4
 801bc5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801bc60:	d2e6      	bcs.n	801bc30 <quorem+0xa4>
 801bc62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bc66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bc6a:	b922      	cbnz	r2, 801bc76 <quorem+0xea>
 801bc6c:	3b04      	subs	r3, #4
 801bc6e:	429d      	cmp	r5, r3
 801bc70:	461a      	mov	r2, r3
 801bc72:	d30b      	bcc.n	801bc8c <quorem+0x100>
 801bc74:	613c      	str	r4, [r7, #16]
 801bc76:	3601      	adds	r6, #1
 801bc78:	4630      	mov	r0, r6
 801bc7a:	b003      	add	sp, #12
 801bc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc80:	6812      	ldr	r2, [r2, #0]
 801bc82:	3b04      	subs	r3, #4
 801bc84:	2a00      	cmp	r2, #0
 801bc86:	d1cb      	bne.n	801bc20 <quorem+0x94>
 801bc88:	3c01      	subs	r4, #1
 801bc8a:	e7c6      	b.n	801bc1a <quorem+0x8e>
 801bc8c:	6812      	ldr	r2, [r2, #0]
 801bc8e:	3b04      	subs	r3, #4
 801bc90:	2a00      	cmp	r2, #0
 801bc92:	d1ef      	bne.n	801bc74 <quorem+0xe8>
 801bc94:	3c01      	subs	r4, #1
 801bc96:	e7ea      	b.n	801bc6e <quorem+0xe2>
 801bc98:	2000      	movs	r0, #0
 801bc9a:	e7ee      	b.n	801bc7a <quorem+0xee>
 801bc9c:	0000      	movs	r0, r0
	...

0801bca0 <_dtoa_r>:
 801bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca4:	69c7      	ldr	r7, [r0, #28]
 801bca6:	b099      	sub	sp, #100	@ 0x64
 801bca8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801bcac:	ec55 4b10 	vmov	r4, r5, d0
 801bcb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801bcb2:	9109      	str	r1, [sp, #36]	@ 0x24
 801bcb4:	4683      	mov	fp, r0
 801bcb6:	920e      	str	r2, [sp, #56]	@ 0x38
 801bcb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bcba:	b97f      	cbnz	r7, 801bcdc <_dtoa_r+0x3c>
 801bcbc:	2010      	movs	r0, #16
 801bcbe:	f7fe fa9f 	bl	801a200 <malloc>
 801bcc2:	4602      	mov	r2, r0
 801bcc4:	f8cb 001c 	str.w	r0, [fp, #28]
 801bcc8:	b920      	cbnz	r0, 801bcd4 <_dtoa_r+0x34>
 801bcca:	4ba7      	ldr	r3, [pc, #668]	@ (801bf68 <_dtoa_r+0x2c8>)
 801bccc:	21ef      	movs	r1, #239	@ 0xef
 801bcce:	48a7      	ldr	r0, [pc, #668]	@ (801bf6c <_dtoa_r+0x2cc>)
 801bcd0:	f7ff ff3e 	bl	801bb50 <__assert_func>
 801bcd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801bcd8:	6007      	str	r7, [r0, #0]
 801bcda:	60c7      	str	r7, [r0, #12]
 801bcdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bce0:	6819      	ldr	r1, [r3, #0]
 801bce2:	b159      	cbz	r1, 801bcfc <_dtoa_r+0x5c>
 801bce4:	685a      	ldr	r2, [r3, #4]
 801bce6:	604a      	str	r2, [r1, #4]
 801bce8:	2301      	movs	r3, #1
 801bcea:	4093      	lsls	r3, r2
 801bcec:	608b      	str	r3, [r1, #8]
 801bcee:	4658      	mov	r0, fp
 801bcf0:	f000 fe30 	bl	801c954 <_Bfree>
 801bcf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bcf8:	2200      	movs	r2, #0
 801bcfa:	601a      	str	r2, [r3, #0]
 801bcfc:	1e2b      	subs	r3, r5, #0
 801bcfe:	bfb9      	ittee	lt
 801bd00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801bd04:	9303      	strlt	r3, [sp, #12]
 801bd06:	2300      	movge	r3, #0
 801bd08:	6033      	strge	r3, [r6, #0]
 801bd0a:	9f03      	ldr	r7, [sp, #12]
 801bd0c:	4b98      	ldr	r3, [pc, #608]	@ (801bf70 <_dtoa_r+0x2d0>)
 801bd0e:	bfbc      	itt	lt
 801bd10:	2201      	movlt	r2, #1
 801bd12:	6032      	strlt	r2, [r6, #0]
 801bd14:	43bb      	bics	r3, r7
 801bd16:	d112      	bne.n	801bd3e <_dtoa_r+0x9e>
 801bd18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bd1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801bd1e:	6013      	str	r3, [r2, #0]
 801bd20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bd24:	4323      	orrs	r3, r4
 801bd26:	f000 854d 	beq.w	801c7c4 <_dtoa_r+0xb24>
 801bd2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bd2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801bf84 <_dtoa_r+0x2e4>
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	f000 854f 	beq.w	801c7d4 <_dtoa_r+0xb34>
 801bd36:	f10a 0303 	add.w	r3, sl, #3
 801bd3a:	f000 bd49 	b.w	801c7d0 <_dtoa_r+0xb30>
 801bd3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bd42:	2200      	movs	r2, #0
 801bd44:	ec51 0b17 	vmov	r0, r1, d7
 801bd48:	2300      	movs	r3, #0
 801bd4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801bd4e:	f7e4 feeb 	bl	8000b28 <__aeabi_dcmpeq>
 801bd52:	4680      	mov	r8, r0
 801bd54:	b158      	cbz	r0, 801bd6e <_dtoa_r+0xce>
 801bd56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bd58:	2301      	movs	r3, #1
 801bd5a:	6013      	str	r3, [r2, #0]
 801bd5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bd5e:	b113      	cbz	r3, 801bd66 <_dtoa_r+0xc6>
 801bd60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801bd62:	4b84      	ldr	r3, [pc, #528]	@ (801bf74 <_dtoa_r+0x2d4>)
 801bd64:	6013      	str	r3, [r2, #0]
 801bd66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801bf88 <_dtoa_r+0x2e8>
 801bd6a:	f000 bd33 	b.w	801c7d4 <_dtoa_r+0xb34>
 801bd6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801bd72:	aa16      	add	r2, sp, #88	@ 0x58
 801bd74:	a917      	add	r1, sp, #92	@ 0x5c
 801bd76:	4658      	mov	r0, fp
 801bd78:	f001 f990 	bl	801d09c <__d2b>
 801bd7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801bd80:	4681      	mov	r9, r0
 801bd82:	2e00      	cmp	r6, #0
 801bd84:	d077      	beq.n	801be76 <_dtoa_r+0x1d6>
 801bd86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bd88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801bd8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bd90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bd94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801bd98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801bd9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801bda0:	4619      	mov	r1, r3
 801bda2:	2200      	movs	r2, #0
 801bda4:	4b74      	ldr	r3, [pc, #464]	@ (801bf78 <_dtoa_r+0x2d8>)
 801bda6:	f7e4 fa9f 	bl	80002e8 <__aeabi_dsub>
 801bdaa:	a369      	add	r3, pc, #420	@ (adr r3, 801bf50 <_dtoa_r+0x2b0>)
 801bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdb0:	f7e4 fc52 	bl	8000658 <__aeabi_dmul>
 801bdb4:	a368      	add	r3, pc, #416	@ (adr r3, 801bf58 <_dtoa_r+0x2b8>)
 801bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdba:	f7e4 fa97 	bl	80002ec <__adddf3>
 801bdbe:	4604      	mov	r4, r0
 801bdc0:	4630      	mov	r0, r6
 801bdc2:	460d      	mov	r5, r1
 801bdc4:	f7e4 fbde 	bl	8000584 <__aeabi_i2d>
 801bdc8:	a365      	add	r3, pc, #404	@ (adr r3, 801bf60 <_dtoa_r+0x2c0>)
 801bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdce:	f7e4 fc43 	bl	8000658 <__aeabi_dmul>
 801bdd2:	4602      	mov	r2, r0
 801bdd4:	460b      	mov	r3, r1
 801bdd6:	4620      	mov	r0, r4
 801bdd8:	4629      	mov	r1, r5
 801bdda:	f7e4 fa87 	bl	80002ec <__adddf3>
 801bdde:	4604      	mov	r4, r0
 801bde0:	460d      	mov	r5, r1
 801bde2:	f7e4 fee9 	bl	8000bb8 <__aeabi_d2iz>
 801bde6:	2200      	movs	r2, #0
 801bde8:	4607      	mov	r7, r0
 801bdea:	2300      	movs	r3, #0
 801bdec:	4620      	mov	r0, r4
 801bdee:	4629      	mov	r1, r5
 801bdf0:	f7e4 fea4 	bl	8000b3c <__aeabi_dcmplt>
 801bdf4:	b140      	cbz	r0, 801be08 <_dtoa_r+0x168>
 801bdf6:	4638      	mov	r0, r7
 801bdf8:	f7e4 fbc4 	bl	8000584 <__aeabi_i2d>
 801bdfc:	4622      	mov	r2, r4
 801bdfe:	462b      	mov	r3, r5
 801be00:	f7e4 fe92 	bl	8000b28 <__aeabi_dcmpeq>
 801be04:	b900      	cbnz	r0, 801be08 <_dtoa_r+0x168>
 801be06:	3f01      	subs	r7, #1
 801be08:	2f16      	cmp	r7, #22
 801be0a:	d851      	bhi.n	801beb0 <_dtoa_r+0x210>
 801be0c:	4b5b      	ldr	r3, [pc, #364]	@ (801bf7c <_dtoa_r+0x2dc>)
 801be0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801be1a:	f7e4 fe8f 	bl	8000b3c <__aeabi_dcmplt>
 801be1e:	2800      	cmp	r0, #0
 801be20:	d048      	beq.n	801beb4 <_dtoa_r+0x214>
 801be22:	3f01      	subs	r7, #1
 801be24:	2300      	movs	r3, #0
 801be26:	9312      	str	r3, [sp, #72]	@ 0x48
 801be28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801be2a:	1b9b      	subs	r3, r3, r6
 801be2c:	1e5a      	subs	r2, r3, #1
 801be2e:	bf44      	itt	mi
 801be30:	f1c3 0801 	rsbmi	r8, r3, #1
 801be34:	2300      	movmi	r3, #0
 801be36:	9208      	str	r2, [sp, #32]
 801be38:	bf54      	ite	pl
 801be3a:	f04f 0800 	movpl.w	r8, #0
 801be3e:	9308      	strmi	r3, [sp, #32]
 801be40:	2f00      	cmp	r7, #0
 801be42:	db39      	blt.n	801beb8 <_dtoa_r+0x218>
 801be44:	9b08      	ldr	r3, [sp, #32]
 801be46:	970f      	str	r7, [sp, #60]	@ 0x3c
 801be48:	443b      	add	r3, r7
 801be4a:	9308      	str	r3, [sp, #32]
 801be4c:	2300      	movs	r3, #0
 801be4e:	930a      	str	r3, [sp, #40]	@ 0x28
 801be50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be52:	2b09      	cmp	r3, #9
 801be54:	d864      	bhi.n	801bf20 <_dtoa_r+0x280>
 801be56:	2b05      	cmp	r3, #5
 801be58:	bfc4      	itt	gt
 801be5a:	3b04      	subgt	r3, #4
 801be5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801be5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be60:	f1a3 0302 	sub.w	r3, r3, #2
 801be64:	bfcc      	ite	gt
 801be66:	2400      	movgt	r4, #0
 801be68:	2401      	movle	r4, #1
 801be6a:	2b03      	cmp	r3, #3
 801be6c:	d863      	bhi.n	801bf36 <_dtoa_r+0x296>
 801be6e:	e8df f003 	tbb	[pc, r3]
 801be72:	372a      	.short	0x372a
 801be74:	5535      	.short	0x5535
 801be76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801be7a:	441e      	add	r6, r3
 801be7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801be80:	2b20      	cmp	r3, #32
 801be82:	bfc1      	itttt	gt
 801be84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801be88:	409f      	lslgt	r7, r3
 801be8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801be8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801be92:	bfd6      	itet	le
 801be94:	f1c3 0320 	rsble	r3, r3, #32
 801be98:	ea47 0003 	orrgt.w	r0, r7, r3
 801be9c:	fa04 f003 	lslle.w	r0, r4, r3
 801bea0:	f7e4 fb60 	bl	8000564 <__aeabi_ui2d>
 801bea4:	2201      	movs	r2, #1
 801bea6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801beaa:	3e01      	subs	r6, #1
 801beac:	9214      	str	r2, [sp, #80]	@ 0x50
 801beae:	e777      	b.n	801bda0 <_dtoa_r+0x100>
 801beb0:	2301      	movs	r3, #1
 801beb2:	e7b8      	b.n	801be26 <_dtoa_r+0x186>
 801beb4:	9012      	str	r0, [sp, #72]	@ 0x48
 801beb6:	e7b7      	b.n	801be28 <_dtoa_r+0x188>
 801beb8:	427b      	negs	r3, r7
 801beba:	930a      	str	r3, [sp, #40]	@ 0x28
 801bebc:	2300      	movs	r3, #0
 801bebe:	eba8 0807 	sub.w	r8, r8, r7
 801bec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bec4:	e7c4      	b.n	801be50 <_dtoa_r+0x1b0>
 801bec6:	2300      	movs	r3, #0
 801bec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801beca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801becc:	2b00      	cmp	r3, #0
 801bece:	dc35      	bgt.n	801bf3c <_dtoa_r+0x29c>
 801bed0:	2301      	movs	r3, #1
 801bed2:	9300      	str	r3, [sp, #0]
 801bed4:	9307      	str	r3, [sp, #28]
 801bed6:	461a      	mov	r2, r3
 801bed8:	920e      	str	r2, [sp, #56]	@ 0x38
 801beda:	e00b      	b.n	801bef4 <_dtoa_r+0x254>
 801bedc:	2301      	movs	r3, #1
 801bede:	e7f3      	b.n	801bec8 <_dtoa_r+0x228>
 801bee0:	2300      	movs	r3, #0
 801bee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bee6:	18fb      	adds	r3, r7, r3
 801bee8:	9300      	str	r3, [sp, #0]
 801beea:	3301      	adds	r3, #1
 801beec:	2b01      	cmp	r3, #1
 801beee:	9307      	str	r3, [sp, #28]
 801bef0:	bfb8      	it	lt
 801bef2:	2301      	movlt	r3, #1
 801bef4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801bef8:	2100      	movs	r1, #0
 801befa:	2204      	movs	r2, #4
 801befc:	f102 0514 	add.w	r5, r2, #20
 801bf00:	429d      	cmp	r5, r3
 801bf02:	d91f      	bls.n	801bf44 <_dtoa_r+0x2a4>
 801bf04:	6041      	str	r1, [r0, #4]
 801bf06:	4658      	mov	r0, fp
 801bf08:	f000 fce4 	bl	801c8d4 <_Balloc>
 801bf0c:	4682      	mov	sl, r0
 801bf0e:	2800      	cmp	r0, #0
 801bf10:	d13c      	bne.n	801bf8c <_dtoa_r+0x2ec>
 801bf12:	4b1b      	ldr	r3, [pc, #108]	@ (801bf80 <_dtoa_r+0x2e0>)
 801bf14:	4602      	mov	r2, r0
 801bf16:	f240 11af 	movw	r1, #431	@ 0x1af
 801bf1a:	e6d8      	b.n	801bcce <_dtoa_r+0x2e>
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	e7e0      	b.n	801bee2 <_dtoa_r+0x242>
 801bf20:	2401      	movs	r4, #1
 801bf22:	2300      	movs	r3, #0
 801bf24:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf26:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bf28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf2c:	9300      	str	r3, [sp, #0]
 801bf2e:	9307      	str	r3, [sp, #28]
 801bf30:	2200      	movs	r2, #0
 801bf32:	2312      	movs	r3, #18
 801bf34:	e7d0      	b.n	801bed8 <_dtoa_r+0x238>
 801bf36:	2301      	movs	r3, #1
 801bf38:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bf3a:	e7f5      	b.n	801bf28 <_dtoa_r+0x288>
 801bf3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf3e:	9300      	str	r3, [sp, #0]
 801bf40:	9307      	str	r3, [sp, #28]
 801bf42:	e7d7      	b.n	801bef4 <_dtoa_r+0x254>
 801bf44:	3101      	adds	r1, #1
 801bf46:	0052      	lsls	r2, r2, #1
 801bf48:	e7d8      	b.n	801befc <_dtoa_r+0x25c>
 801bf4a:	bf00      	nop
 801bf4c:	f3af 8000 	nop.w
 801bf50:	636f4361 	.word	0x636f4361
 801bf54:	3fd287a7 	.word	0x3fd287a7
 801bf58:	8b60c8b3 	.word	0x8b60c8b3
 801bf5c:	3fc68a28 	.word	0x3fc68a28
 801bf60:	509f79fb 	.word	0x509f79fb
 801bf64:	3fd34413 	.word	0x3fd34413
 801bf68:	08020266 	.word	0x08020266
 801bf6c:	08020458 	.word	0x08020458
 801bf70:	7ff00000 	.word	0x7ff00000
 801bf74:	080203e7 	.word	0x080203e7
 801bf78:	3ff80000 	.word	0x3ff80000
 801bf7c:	08020550 	.word	0x08020550
 801bf80:	080204b0 	.word	0x080204b0
 801bf84:	08020454 	.word	0x08020454
 801bf88:	080203e6 	.word	0x080203e6
 801bf8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bf90:	6018      	str	r0, [r3, #0]
 801bf92:	9b07      	ldr	r3, [sp, #28]
 801bf94:	2b0e      	cmp	r3, #14
 801bf96:	f200 80a4 	bhi.w	801c0e2 <_dtoa_r+0x442>
 801bf9a:	2c00      	cmp	r4, #0
 801bf9c:	f000 80a1 	beq.w	801c0e2 <_dtoa_r+0x442>
 801bfa0:	2f00      	cmp	r7, #0
 801bfa2:	dd33      	ble.n	801c00c <_dtoa_r+0x36c>
 801bfa4:	4bad      	ldr	r3, [pc, #692]	@ (801c25c <_dtoa_r+0x5bc>)
 801bfa6:	f007 020f 	and.w	r2, r7, #15
 801bfaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bfae:	ed93 7b00 	vldr	d7, [r3]
 801bfb2:	05f8      	lsls	r0, r7, #23
 801bfb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bfb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801bfbc:	d516      	bpl.n	801bfec <_dtoa_r+0x34c>
 801bfbe:	4ba8      	ldr	r3, [pc, #672]	@ (801c260 <_dtoa_r+0x5c0>)
 801bfc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bfc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bfc8:	f7e4 fc70 	bl	80008ac <__aeabi_ddiv>
 801bfcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bfd0:	f004 040f 	and.w	r4, r4, #15
 801bfd4:	2603      	movs	r6, #3
 801bfd6:	4da2      	ldr	r5, [pc, #648]	@ (801c260 <_dtoa_r+0x5c0>)
 801bfd8:	b954      	cbnz	r4, 801bff0 <_dtoa_r+0x350>
 801bfda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bfde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bfe2:	f7e4 fc63 	bl	80008ac <__aeabi_ddiv>
 801bfe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bfea:	e028      	b.n	801c03e <_dtoa_r+0x39e>
 801bfec:	2602      	movs	r6, #2
 801bfee:	e7f2      	b.n	801bfd6 <_dtoa_r+0x336>
 801bff0:	07e1      	lsls	r1, r4, #31
 801bff2:	d508      	bpl.n	801c006 <_dtoa_r+0x366>
 801bff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bffc:	f7e4 fb2c 	bl	8000658 <__aeabi_dmul>
 801c000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c004:	3601      	adds	r6, #1
 801c006:	1064      	asrs	r4, r4, #1
 801c008:	3508      	adds	r5, #8
 801c00a:	e7e5      	b.n	801bfd8 <_dtoa_r+0x338>
 801c00c:	f000 80d2 	beq.w	801c1b4 <_dtoa_r+0x514>
 801c010:	427c      	negs	r4, r7
 801c012:	4b92      	ldr	r3, [pc, #584]	@ (801c25c <_dtoa_r+0x5bc>)
 801c014:	4d92      	ldr	r5, [pc, #584]	@ (801c260 <_dtoa_r+0x5c0>)
 801c016:	f004 020f 	and.w	r2, r4, #15
 801c01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c026:	f7e4 fb17 	bl	8000658 <__aeabi_dmul>
 801c02a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c02e:	1124      	asrs	r4, r4, #4
 801c030:	2300      	movs	r3, #0
 801c032:	2602      	movs	r6, #2
 801c034:	2c00      	cmp	r4, #0
 801c036:	f040 80b2 	bne.w	801c19e <_dtoa_r+0x4fe>
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d1d3      	bne.n	801bfe6 <_dtoa_r+0x346>
 801c03e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c040:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801c044:	2b00      	cmp	r3, #0
 801c046:	f000 80b7 	beq.w	801c1b8 <_dtoa_r+0x518>
 801c04a:	4b86      	ldr	r3, [pc, #536]	@ (801c264 <_dtoa_r+0x5c4>)
 801c04c:	2200      	movs	r2, #0
 801c04e:	4620      	mov	r0, r4
 801c050:	4629      	mov	r1, r5
 801c052:	f7e4 fd73 	bl	8000b3c <__aeabi_dcmplt>
 801c056:	2800      	cmp	r0, #0
 801c058:	f000 80ae 	beq.w	801c1b8 <_dtoa_r+0x518>
 801c05c:	9b07      	ldr	r3, [sp, #28]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	f000 80aa 	beq.w	801c1b8 <_dtoa_r+0x518>
 801c064:	9b00      	ldr	r3, [sp, #0]
 801c066:	2b00      	cmp	r3, #0
 801c068:	dd37      	ble.n	801c0da <_dtoa_r+0x43a>
 801c06a:	1e7b      	subs	r3, r7, #1
 801c06c:	9304      	str	r3, [sp, #16]
 801c06e:	4620      	mov	r0, r4
 801c070:	4b7d      	ldr	r3, [pc, #500]	@ (801c268 <_dtoa_r+0x5c8>)
 801c072:	2200      	movs	r2, #0
 801c074:	4629      	mov	r1, r5
 801c076:	f7e4 faef 	bl	8000658 <__aeabi_dmul>
 801c07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c07e:	9c00      	ldr	r4, [sp, #0]
 801c080:	3601      	adds	r6, #1
 801c082:	4630      	mov	r0, r6
 801c084:	f7e4 fa7e 	bl	8000584 <__aeabi_i2d>
 801c088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c08c:	f7e4 fae4 	bl	8000658 <__aeabi_dmul>
 801c090:	4b76      	ldr	r3, [pc, #472]	@ (801c26c <_dtoa_r+0x5cc>)
 801c092:	2200      	movs	r2, #0
 801c094:	f7e4 f92a 	bl	80002ec <__adddf3>
 801c098:	4605      	mov	r5, r0
 801c09a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801c09e:	2c00      	cmp	r4, #0
 801c0a0:	f040 808d 	bne.w	801c1be <_dtoa_r+0x51e>
 801c0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0a8:	4b71      	ldr	r3, [pc, #452]	@ (801c270 <_dtoa_r+0x5d0>)
 801c0aa:	2200      	movs	r2, #0
 801c0ac:	f7e4 f91c 	bl	80002e8 <__aeabi_dsub>
 801c0b0:	4602      	mov	r2, r0
 801c0b2:	460b      	mov	r3, r1
 801c0b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c0b8:	462a      	mov	r2, r5
 801c0ba:	4633      	mov	r3, r6
 801c0bc:	f7e4 fd5c 	bl	8000b78 <__aeabi_dcmpgt>
 801c0c0:	2800      	cmp	r0, #0
 801c0c2:	f040 828b 	bne.w	801c5dc <_dtoa_r+0x93c>
 801c0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0ca:	462a      	mov	r2, r5
 801c0cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801c0d0:	f7e4 fd34 	bl	8000b3c <__aeabi_dcmplt>
 801c0d4:	2800      	cmp	r0, #0
 801c0d6:	f040 8128 	bne.w	801c32a <_dtoa_r+0x68a>
 801c0da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801c0de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801c0e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	f2c0 815a 	blt.w	801c39e <_dtoa_r+0x6fe>
 801c0ea:	2f0e      	cmp	r7, #14
 801c0ec:	f300 8157 	bgt.w	801c39e <_dtoa_r+0x6fe>
 801c0f0:	4b5a      	ldr	r3, [pc, #360]	@ (801c25c <_dtoa_r+0x5bc>)
 801c0f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c0f6:	ed93 7b00 	vldr	d7, [r3]
 801c0fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	ed8d 7b00 	vstr	d7, [sp]
 801c102:	da03      	bge.n	801c10c <_dtoa_r+0x46c>
 801c104:	9b07      	ldr	r3, [sp, #28]
 801c106:	2b00      	cmp	r3, #0
 801c108:	f340 8101 	ble.w	801c30e <_dtoa_r+0x66e>
 801c10c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801c110:	4656      	mov	r6, sl
 801c112:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c116:	4620      	mov	r0, r4
 801c118:	4629      	mov	r1, r5
 801c11a:	f7e4 fbc7 	bl	80008ac <__aeabi_ddiv>
 801c11e:	f7e4 fd4b 	bl	8000bb8 <__aeabi_d2iz>
 801c122:	4680      	mov	r8, r0
 801c124:	f7e4 fa2e 	bl	8000584 <__aeabi_i2d>
 801c128:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c12c:	f7e4 fa94 	bl	8000658 <__aeabi_dmul>
 801c130:	4602      	mov	r2, r0
 801c132:	460b      	mov	r3, r1
 801c134:	4620      	mov	r0, r4
 801c136:	4629      	mov	r1, r5
 801c138:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801c13c:	f7e4 f8d4 	bl	80002e8 <__aeabi_dsub>
 801c140:	f806 4b01 	strb.w	r4, [r6], #1
 801c144:	9d07      	ldr	r5, [sp, #28]
 801c146:	eba6 040a 	sub.w	r4, r6, sl
 801c14a:	42a5      	cmp	r5, r4
 801c14c:	4602      	mov	r2, r0
 801c14e:	460b      	mov	r3, r1
 801c150:	f040 8117 	bne.w	801c382 <_dtoa_r+0x6e2>
 801c154:	f7e4 f8ca 	bl	80002ec <__adddf3>
 801c158:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c15c:	4604      	mov	r4, r0
 801c15e:	460d      	mov	r5, r1
 801c160:	f7e4 fd0a 	bl	8000b78 <__aeabi_dcmpgt>
 801c164:	2800      	cmp	r0, #0
 801c166:	f040 80f9 	bne.w	801c35c <_dtoa_r+0x6bc>
 801c16a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c16e:	4620      	mov	r0, r4
 801c170:	4629      	mov	r1, r5
 801c172:	f7e4 fcd9 	bl	8000b28 <__aeabi_dcmpeq>
 801c176:	b118      	cbz	r0, 801c180 <_dtoa_r+0x4e0>
 801c178:	f018 0f01 	tst.w	r8, #1
 801c17c:	f040 80ee 	bne.w	801c35c <_dtoa_r+0x6bc>
 801c180:	4649      	mov	r1, r9
 801c182:	4658      	mov	r0, fp
 801c184:	f000 fbe6 	bl	801c954 <_Bfree>
 801c188:	2300      	movs	r3, #0
 801c18a:	7033      	strb	r3, [r6, #0]
 801c18c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c18e:	3701      	adds	r7, #1
 801c190:	601f      	str	r7, [r3, #0]
 801c192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c194:	2b00      	cmp	r3, #0
 801c196:	f000 831d 	beq.w	801c7d4 <_dtoa_r+0xb34>
 801c19a:	601e      	str	r6, [r3, #0]
 801c19c:	e31a      	b.n	801c7d4 <_dtoa_r+0xb34>
 801c19e:	07e2      	lsls	r2, r4, #31
 801c1a0:	d505      	bpl.n	801c1ae <_dtoa_r+0x50e>
 801c1a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c1a6:	f7e4 fa57 	bl	8000658 <__aeabi_dmul>
 801c1aa:	3601      	adds	r6, #1
 801c1ac:	2301      	movs	r3, #1
 801c1ae:	1064      	asrs	r4, r4, #1
 801c1b0:	3508      	adds	r5, #8
 801c1b2:	e73f      	b.n	801c034 <_dtoa_r+0x394>
 801c1b4:	2602      	movs	r6, #2
 801c1b6:	e742      	b.n	801c03e <_dtoa_r+0x39e>
 801c1b8:	9c07      	ldr	r4, [sp, #28]
 801c1ba:	9704      	str	r7, [sp, #16]
 801c1bc:	e761      	b.n	801c082 <_dtoa_r+0x3e2>
 801c1be:	4b27      	ldr	r3, [pc, #156]	@ (801c25c <_dtoa_r+0x5bc>)
 801c1c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c1c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c1c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c1ca:	4454      	add	r4, sl
 801c1cc:	2900      	cmp	r1, #0
 801c1ce:	d053      	beq.n	801c278 <_dtoa_r+0x5d8>
 801c1d0:	4928      	ldr	r1, [pc, #160]	@ (801c274 <_dtoa_r+0x5d4>)
 801c1d2:	2000      	movs	r0, #0
 801c1d4:	f7e4 fb6a 	bl	80008ac <__aeabi_ddiv>
 801c1d8:	4633      	mov	r3, r6
 801c1da:	462a      	mov	r2, r5
 801c1dc:	f7e4 f884 	bl	80002e8 <__aeabi_dsub>
 801c1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c1e4:	4656      	mov	r6, sl
 801c1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1ea:	f7e4 fce5 	bl	8000bb8 <__aeabi_d2iz>
 801c1ee:	4605      	mov	r5, r0
 801c1f0:	f7e4 f9c8 	bl	8000584 <__aeabi_i2d>
 801c1f4:	4602      	mov	r2, r0
 801c1f6:	460b      	mov	r3, r1
 801c1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1fc:	f7e4 f874 	bl	80002e8 <__aeabi_dsub>
 801c200:	3530      	adds	r5, #48	@ 0x30
 801c202:	4602      	mov	r2, r0
 801c204:	460b      	mov	r3, r1
 801c206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c20a:	f806 5b01 	strb.w	r5, [r6], #1
 801c20e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c212:	f7e4 fc93 	bl	8000b3c <__aeabi_dcmplt>
 801c216:	2800      	cmp	r0, #0
 801c218:	d171      	bne.n	801c2fe <_dtoa_r+0x65e>
 801c21a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c21e:	4911      	ldr	r1, [pc, #68]	@ (801c264 <_dtoa_r+0x5c4>)
 801c220:	2000      	movs	r0, #0
 801c222:	f7e4 f861 	bl	80002e8 <__aeabi_dsub>
 801c226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c22a:	f7e4 fc87 	bl	8000b3c <__aeabi_dcmplt>
 801c22e:	2800      	cmp	r0, #0
 801c230:	f040 8095 	bne.w	801c35e <_dtoa_r+0x6be>
 801c234:	42a6      	cmp	r6, r4
 801c236:	f43f af50 	beq.w	801c0da <_dtoa_r+0x43a>
 801c23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c23e:	4b0a      	ldr	r3, [pc, #40]	@ (801c268 <_dtoa_r+0x5c8>)
 801c240:	2200      	movs	r2, #0
 801c242:	f7e4 fa09 	bl	8000658 <__aeabi_dmul>
 801c246:	4b08      	ldr	r3, [pc, #32]	@ (801c268 <_dtoa_r+0x5c8>)
 801c248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c24c:	2200      	movs	r2, #0
 801c24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c252:	f7e4 fa01 	bl	8000658 <__aeabi_dmul>
 801c256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c25a:	e7c4      	b.n	801c1e6 <_dtoa_r+0x546>
 801c25c:	08020550 	.word	0x08020550
 801c260:	08020528 	.word	0x08020528
 801c264:	3ff00000 	.word	0x3ff00000
 801c268:	40240000 	.word	0x40240000
 801c26c:	401c0000 	.word	0x401c0000
 801c270:	40140000 	.word	0x40140000
 801c274:	3fe00000 	.word	0x3fe00000
 801c278:	4631      	mov	r1, r6
 801c27a:	4628      	mov	r0, r5
 801c27c:	f7e4 f9ec 	bl	8000658 <__aeabi_dmul>
 801c280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c284:	9415      	str	r4, [sp, #84]	@ 0x54
 801c286:	4656      	mov	r6, sl
 801c288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c28c:	f7e4 fc94 	bl	8000bb8 <__aeabi_d2iz>
 801c290:	4605      	mov	r5, r0
 801c292:	f7e4 f977 	bl	8000584 <__aeabi_i2d>
 801c296:	4602      	mov	r2, r0
 801c298:	460b      	mov	r3, r1
 801c29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c29e:	f7e4 f823 	bl	80002e8 <__aeabi_dsub>
 801c2a2:	3530      	adds	r5, #48	@ 0x30
 801c2a4:	f806 5b01 	strb.w	r5, [r6], #1
 801c2a8:	4602      	mov	r2, r0
 801c2aa:	460b      	mov	r3, r1
 801c2ac:	42a6      	cmp	r6, r4
 801c2ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c2b2:	f04f 0200 	mov.w	r2, #0
 801c2b6:	d124      	bne.n	801c302 <_dtoa_r+0x662>
 801c2b8:	4bac      	ldr	r3, [pc, #688]	@ (801c56c <_dtoa_r+0x8cc>)
 801c2ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c2be:	f7e4 f815 	bl	80002ec <__adddf3>
 801c2c2:	4602      	mov	r2, r0
 801c2c4:	460b      	mov	r3, r1
 801c2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c2ca:	f7e4 fc55 	bl	8000b78 <__aeabi_dcmpgt>
 801c2ce:	2800      	cmp	r0, #0
 801c2d0:	d145      	bne.n	801c35e <_dtoa_r+0x6be>
 801c2d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c2d6:	49a5      	ldr	r1, [pc, #660]	@ (801c56c <_dtoa_r+0x8cc>)
 801c2d8:	2000      	movs	r0, #0
 801c2da:	f7e4 f805 	bl	80002e8 <__aeabi_dsub>
 801c2de:	4602      	mov	r2, r0
 801c2e0:	460b      	mov	r3, r1
 801c2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c2e6:	f7e4 fc29 	bl	8000b3c <__aeabi_dcmplt>
 801c2ea:	2800      	cmp	r0, #0
 801c2ec:	f43f aef5 	beq.w	801c0da <_dtoa_r+0x43a>
 801c2f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801c2f2:	1e73      	subs	r3, r6, #1
 801c2f4:	9315      	str	r3, [sp, #84]	@ 0x54
 801c2f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c2fa:	2b30      	cmp	r3, #48	@ 0x30
 801c2fc:	d0f8      	beq.n	801c2f0 <_dtoa_r+0x650>
 801c2fe:	9f04      	ldr	r7, [sp, #16]
 801c300:	e73e      	b.n	801c180 <_dtoa_r+0x4e0>
 801c302:	4b9b      	ldr	r3, [pc, #620]	@ (801c570 <_dtoa_r+0x8d0>)
 801c304:	f7e4 f9a8 	bl	8000658 <__aeabi_dmul>
 801c308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c30c:	e7bc      	b.n	801c288 <_dtoa_r+0x5e8>
 801c30e:	d10c      	bne.n	801c32a <_dtoa_r+0x68a>
 801c310:	4b98      	ldr	r3, [pc, #608]	@ (801c574 <_dtoa_r+0x8d4>)
 801c312:	2200      	movs	r2, #0
 801c314:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c318:	f7e4 f99e 	bl	8000658 <__aeabi_dmul>
 801c31c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c320:	f7e4 fc20 	bl	8000b64 <__aeabi_dcmpge>
 801c324:	2800      	cmp	r0, #0
 801c326:	f000 8157 	beq.w	801c5d8 <_dtoa_r+0x938>
 801c32a:	2400      	movs	r4, #0
 801c32c:	4625      	mov	r5, r4
 801c32e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c330:	43db      	mvns	r3, r3
 801c332:	9304      	str	r3, [sp, #16]
 801c334:	4656      	mov	r6, sl
 801c336:	2700      	movs	r7, #0
 801c338:	4621      	mov	r1, r4
 801c33a:	4658      	mov	r0, fp
 801c33c:	f000 fb0a 	bl	801c954 <_Bfree>
 801c340:	2d00      	cmp	r5, #0
 801c342:	d0dc      	beq.n	801c2fe <_dtoa_r+0x65e>
 801c344:	b12f      	cbz	r7, 801c352 <_dtoa_r+0x6b2>
 801c346:	42af      	cmp	r7, r5
 801c348:	d003      	beq.n	801c352 <_dtoa_r+0x6b2>
 801c34a:	4639      	mov	r1, r7
 801c34c:	4658      	mov	r0, fp
 801c34e:	f000 fb01 	bl	801c954 <_Bfree>
 801c352:	4629      	mov	r1, r5
 801c354:	4658      	mov	r0, fp
 801c356:	f000 fafd 	bl	801c954 <_Bfree>
 801c35a:	e7d0      	b.n	801c2fe <_dtoa_r+0x65e>
 801c35c:	9704      	str	r7, [sp, #16]
 801c35e:	4633      	mov	r3, r6
 801c360:	461e      	mov	r6, r3
 801c362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c366:	2a39      	cmp	r2, #57	@ 0x39
 801c368:	d107      	bne.n	801c37a <_dtoa_r+0x6da>
 801c36a:	459a      	cmp	sl, r3
 801c36c:	d1f8      	bne.n	801c360 <_dtoa_r+0x6c0>
 801c36e:	9a04      	ldr	r2, [sp, #16]
 801c370:	3201      	adds	r2, #1
 801c372:	9204      	str	r2, [sp, #16]
 801c374:	2230      	movs	r2, #48	@ 0x30
 801c376:	f88a 2000 	strb.w	r2, [sl]
 801c37a:	781a      	ldrb	r2, [r3, #0]
 801c37c:	3201      	adds	r2, #1
 801c37e:	701a      	strb	r2, [r3, #0]
 801c380:	e7bd      	b.n	801c2fe <_dtoa_r+0x65e>
 801c382:	4b7b      	ldr	r3, [pc, #492]	@ (801c570 <_dtoa_r+0x8d0>)
 801c384:	2200      	movs	r2, #0
 801c386:	f7e4 f967 	bl	8000658 <__aeabi_dmul>
 801c38a:	2200      	movs	r2, #0
 801c38c:	2300      	movs	r3, #0
 801c38e:	4604      	mov	r4, r0
 801c390:	460d      	mov	r5, r1
 801c392:	f7e4 fbc9 	bl	8000b28 <__aeabi_dcmpeq>
 801c396:	2800      	cmp	r0, #0
 801c398:	f43f aebb 	beq.w	801c112 <_dtoa_r+0x472>
 801c39c:	e6f0      	b.n	801c180 <_dtoa_r+0x4e0>
 801c39e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c3a0:	2a00      	cmp	r2, #0
 801c3a2:	f000 80db 	beq.w	801c55c <_dtoa_r+0x8bc>
 801c3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c3a8:	2a01      	cmp	r2, #1
 801c3aa:	f300 80bf 	bgt.w	801c52c <_dtoa_r+0x88c>
 801c3ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c3b0:	2a00      	cmp	r2, #0
 801c3b2:	f000 80b7 	beq.w	801c524 <_dtoa_r+0x884>
 801c3b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801c3ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c3bc:	4646      	mov	r6, r8
 801c3be:	9a08      	ldr	r2, [sp, #32]
 801c3c0:	2101      	movs	r1, #1
 801c3c2:	441a      	add	r2, r3
 801c3c4:	4658      	mov	r0, fp
 801c3c6:	4498      	add	r8, r3
 801c3c8:	9208      	str	r2, [sp, #32]
 801c3ca:	f000 fbc1 	bl	801cb50 <__i2b>
 801c3ce:	4605      	mov	r5, r0
 801c3d0:	b15e      	cbz	r6, 801c3ea <_dtoa_r+0x74a>
 801c3d2:	9b08      	ldr	r3, [sp, #32]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	dd08      	ble.n	801c3ea <_dtoa_r+0x74a>
 801c3d8:	42b3      	cmp	r3, r6
 801c3da:	9a08      	ldr	r2, [sp, #32]
 801c3dc:	bfa8      	it	ge
 801c3de:	4633      	movge	r3, r6
 801c3e0:	eba8 0803 	sub.w	r8, r8, r3
 801c3e4:	1af6      	subs	r6, r6, r3
 801c3e6:	1ad3      	subs	r3, r2, r3
 801c3e8:	9308      	str	r3, [sp, #32]
 801c3ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c3ec:	b1f3      	cbz	r3, 801c42c <_dtoa_r+0x78c>
 801c3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	f000 80b7 	beq.w	801c564 <_dtoa_r+0x8c4>
 801c3f6:	b18c      	cbz	r4, 801c41c <_dtoa_r+0x77c>
 801c3f8:	4629      	mov	r1, r5
 801c3fa:	4622      	mov	r2, r4
 801c3fc:	4658      	mov	r0, fp
 801c3fe:	f000 fc67 	bl	801ccd0 <__pow5mult>
 801c402:	464a      	mov	r2, r9
 801c404:	4601      	mov	r1, r0
 801c406:	4605      	mov	r5, r0
 801c408:	4658      	mov	r0, fp
 801c40a:	f000 fbb7 	bl	801cb7c <__multiply>
 801c40e:	4649      	mov	r1, r9
 801c410:	9004      	str	r0, [sp, #16]
 801c412:	4658      	mov	r0, fp
 801c414:	f000 fa9e 	bl	801c954 <_Bfree>
 801c418:	9b04      	ldr	r3, [sp, #16]
 801c41a:	4699      	mov	r9, r3
 801c41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c41e:	1b1a      	subs	r2, r3, r4
 801c420:	d004      	beq.n	801c42c <_dtoa_r+0x78c>
 801c422:	4649      	mov	r1, r9
 801c424:	4658      	mov	r0, fp
 801c426:	f000 fc53 	bl	801ccd0 <__pow5mult>
 801c42a:	4681      	mov	r9, r0
 801c42c:	2101      	movs	r1, #1
 801c42e:	4658      	mov	r0, fp
 801c430:	f000 fb8e 	bl	801cb50 <__i2b>
 801c434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c436:	4604      	mov	r4, r0
 801c438:	2b00      	cmp	r3, #0
 801c43a:	f000 81cf 	beq.w	801c7dc <_dtoa_r+0xb3c>
 801c43e:	461a      	mov	r2, r3
 801c440:	4601      	mov	r1, r0
 801c442:	4658      	mov	r0, fp
 801c444:	f000 fc44 	bl	801ccd0 <__pow5mult>
 801c448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c44a:	2b01      	cmp	r3, #1
 801c44c:	4604      	mov	r4, r0
 801c44e:	f300 8095 	bgt.w	801c57c <_dtoa_r+0x8dc>
 801c452:	9b02      	ldr	r3, [sp, #8]
 801c454:	2b00      	cmp	r3, #0
 801c456:	f040 8087 	bne.w	801c568 <_dtoa_r+0x8c8>
 801c45a:	9b03      	ldr	r3, [sp, #12]
 801c45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c460:	2b00      	cmp	r3, #0
 801c462:	f040 8089 	bne.w	801c578 <_dtoa_r+0x8d8>
 801c466:	9b03      	ldr	r3, [sp, #12]
 801c468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c46c:	0d1b      	lsrs	r3, r3, #20
 801c46e:	051b      	lsls	r3, r3, #20
 801c470:	b12b      	cbz	r3, 801c47e <_dtoa_r+0x7de>
 801c472:	9b08      	ldr	r3, [sp, #32]
 801c474:	3301      	adds	r3, #1
 801c476:	9308      	str	r3, [sp, #32]
 801c478:	f108 0801 	add.w	r8, r8, #1
 801c47c:	2301      	movs	r3, #1
 801c47e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c482:	2b00      	cmp	r3, #0
 801c484:	f000 81b0 	beq.w	801c7e8 <_dtoa_r+0xb48>
 801c488:	6923      	ldr	r3, [r4, #16]
 801c48a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c48e:	6918      	ldr	r0, [r3, #16]
 801c490:	f000 fb12 	bl	801cab8 <__hi0bits>
 801c494:	f1c0 0020 	rsb	r0, r0, #32
 801c498:	9b08      	ldr	r3, [sp, #32]
 801c49a:	4418      	add	r0, r3
 801c49c:	f010 001f 	ands.w	r0, r0, #31
 801c4a0:	d077      	beq.n	801c592 <_dtoa_r+0x8f2>
 801c4a2:	f1c0 0320 	rsb	r3, r0, #32
 801c4a6:	2b04      	cmp	r3, #4
 801c4a8:	dd6b      	ble.n	801c582 <_dtoa_r+0x8e2>
 801c4aa:	9b08      	ldr	r3, [sp, #32]
 801c4ac:	f1c0 001c 	rsb	r0, r0, #28
 801c4b0:	4403      	add	r3, r0
 801c4b2:	4480      	add	r8, r0
 801c4b4:	4406      	add	r6, r0
 801c4b6:	9308      	str	r3, [sp, #32]
 801c4b8:	f1b8 0f00 	cmp.w	r8, #0
 801c4bc:	dd05      	ble.n	801c4ca <_dtoa_r+0x82a>
 801c4be:	4649      	mov	r1, r9
 801c4c0:	4642      	mov	r2, r8
 801c4c2:	4658      	mov	r0, fp
 801c4c4:	f000 fc5e 	bl	801cd84 <__lshift>
 801c4c8:	4681      	mov	r9, r0
 801c4ca:	9b08      	ldr	r3, [sp, #32]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	dd05      	ble.n	801c4dc <_dtoa_r+0x83c>
 801c4d0:	4621      	mov	r1, r4
 801c4d2:	461a      	mov	r2, r3
 801c4d4:	4658      	mov	r0, fp
 801c4d6:	f000 fc55 	bl	801cd84 <__lshift>
 801c4da:	4604      	mov	r4, r0
 801c4dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d059      	beq.n	801c596 <_dtoa_r+0x8f6>
 801c4e2:	4621      	mov	r1, r4
 801c4e4:	4648      	mov	r0, r9
 801c4e6:	f000 fcb9 	bl	801ce5c <__mcmp>
 801c4ea:	2800      	cmp	r0, #0
 801c4ec:	da53      	bge.n	801c596 <_dtoa_r+0x8f6>
 801c4ee:	1e7b      	subs	r3, r7, #1
 801c4f0:	9304      	str	r3, [sp, #16]
 801c4f2:	4649      	mov	r1, r9
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	220a      	movs	r2, #10
 801c4f8:	4658      	mov	r0, fp
 801c4fa:	f000 fa4d 	bl	801c998 <__multadd>
 801c4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c500:	4681      	mov	r9, r0
 801c502:	2b00      	cmp	r3, #0
 801c504:	f000 8172 	beq.w	801c7ec <_dtoa_r+0xb4c>
 801c508:	2300      	movs	r3, #0
 801c50a:	4629      	mov	r1, r5
 801c50c:	220a      	movs	r2, #10
 801c50e:	4658      	mov	r0, fp
 801c510:	f000 fa42 	bl	801c998 <__multadd>
 801c514:	9b00      	ldr	r3, [sp, #0]
 801c516:	2b00      	cmp	r3, #0
 801c518:	4605      	mov	r5, r0
 801c51a:	dc67      	bgt.n	801c5ec <_dtoa_r+0x94c>
 801c51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c51e:	2b02      	cmp	r3, #2
 801c520:	dc41      	bgt.n	801c5a6 <_dtoa_r+0x906>
 801c522:	e063      	b.n	801c5ec <_dtoa_r+0x94c>
 801c524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c52a:	e746      	b.n	801c3ba <_dtoa_r+0x71a>
 801c52c:	9b07      	ldr	r3, [sp, #28]
 801c52e:	1e5c      	subs	r4, r3, #1
 801c530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c532:	42a3      	cmp	r3, r4
 801c534:	bfbf      	itttt	lt
 801c536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c538:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c53a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c53c:	1ae3      	sublt	r3, r4, r3
 801c53e:	bfb4      	ite	lt
 801c540:	18d2      	addlt	r2, r2, r3
 801c542:	1b1c      	subge	r4, r3, r4
 801c544:	9b07      	ldr	r3, [sp, #28]
 801c546:	bfbc      	itt	lt
 801c548:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c54a:	2400      	movlt	r4, #0
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	bfb5      	itete	lt
 801c550:	eba8 0603 	sublt.w	r6, r8, r3
 801c554:	9b07      	ldrge	r3, [sp, #28]
 801c556:	2300      	movlt	r3, #0
 801c558:	4646      	movge	r6, r8
 801c55a:	e730      	b.n	801c3be <_dtoa_r+0x71e>
 801c55c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c55e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c560:	4646      	mov	r6, r8
 801c562:	e735      	b.n	801c3d0 <_dtoa_r+0x730>
 801c564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c566:	e75c      	b.n	801c422 <_dtoa_r+0x782>
 801c568:	2300      	movs	r3, #0
 801c56a:	e788      	b.n	801c47e <_dtoa_r+0x7de>
 801c56c:	3fe00000 	.word	0x3fe00000
 801c570:	40240000 	.word	0x40240000
 801c574:	40140000 	.word	0x40140000
 801c578:	9b02      	ldr	r3, [sp, #8]
 801c57a:	e780      	b.n	801c47e <_dtoa_r+0x7de>
 801c57c:	2300      	movs	r3, #0
 801c57e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c580:	e782      	b.n	801c488 <_dtoa_r+0x7e8>
 801c582:	d099      	beq.n	801c4b8 <_dtoa_r+0x818>
 801c584:	9a08      	ldr	r2, [sp, #32]
 801c586:	331c      	adds	r3, #28
 801c588:	441a      	add	r2, r3
 801c58a:	4498      	add	r8, r3
 801c58c:	441e      	add	r6, r3
 801c58e:	9208      	str	r2, [sp, #32]
 801c590:	e792      	b.n	801c4b8 <_dtoa_r+0x818>
 801c592:	4603      	mov	r3, r0
 801c594:	e7f6      	b.n	801c584 <_dtoa_r+0x8e4>
 801c596:	9b07      	ldr	r3, [sp, #28]
 801c598:	9704      	str	r7, [sp, #16]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	dc20      	bgt.n	801c5e0 <_dtoa_r+0x940>
 801c59e:	9300      	str	r3, [sp, #0]
 801c5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5a2:	2b02      	cmp	r3, #2
 801c5a4:	dd1e      	ble.n	801c5e4 <_dtoa_r+0x944>
 801c5a6:	9b00      	ldr	r3, [sp, #0]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	f47f aec0 	bne.w	801c32e <_dtoa_r+0x68e>
 801c5ae:	4621      	mov	r1, r4
 801c5b0:	2205      	movs	r2, #5
 801c5b2:	4658      	mov	r0, fp
 801c5b4:	f000 f9f0 	bl	801c998 <__multadd>
 801c5b8:	4601      	mov	r1, r0
 801c5ba:	4604      	mov	r4, r0
 801c5bc:	4648      	mov	r0, r9
 801c5be:	f000 fc4d 	bl	801ce5c <__mcmp>
 801c5c2:	2800      	cmp	r0, #0
 801c5c4:	f77f aeb3 	ble.w	801c32e <_dtoa_r+0x68e>
 801c5c8:	4656      	mov	r6, sl
 801c5ca:	2331      	movs	r3, #49	@ 0x31
 801c5cc:	f806 3b01 	strb.w	r3, [r6], #1
 801c5d0:	9b04      	ldr	r3, [sp, #16]
 801c5d2:	3301      	adds	r3, #1
 801c5d4:	9304      	str	r3, [sp, #16]
 801c5d6:	e6ae      	b.n	801c336 <_dtoa_r+0x696>
 801c5d8:	9c07      	ldr	r4, [sp, #28]
 801c5da:	9704      	str	r7, [sp, #16]
 801c5dc:	4625      	mov	r5, r4
 801c5de:	e7f3      	b.n	801c5c8 <_dtoa_r+0x928>
 801c5e0:	9b07      	ldr	r3, [sp, #28]
 801c5e2:	9300      	str	r3, [sp, #0]
 801c5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	f000 8104 	beq.w	801c7f4 <_dtoa_r+0xb54>
 801c5ec:	2e00      	cmp	r6, #0
 801c5ee:	dd05      	ble.n	801c5fc <_dtoa_r+0x95c>
 801c5f0:	4629      	mov	r1, r5
 801c5f2:	4632      	mov	r2, r6
 801c5f4:	4658      	mov	r0, fp
 801c5f6:	f000 fbc5 	bl	801cd84 <__lshift>
 801c5fa:	4605      	mov	r5, r0
 801c5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d05a      	beq.n	801c6b8 <_dtoa_r+0xa18>
 801c602:	6869      	ldr	r1, [r5, #4]
 801c604:	4658      	mov	r0, fp
 801c606:	f000 f965 	bl	801c8d4 <_Balloc>
 801c60a:	4606      	mov	r6, r0
 801c60c:	b928      	cbnz	r0, 801c61a <_dtoa_r+0x97a>
 801c60e:	4b84      	ldr	r3, [pc, #528]	@ (801c820 <_dtoa_r+0xb80>)
 801c610:	4602      	mov	r2, r0
 801c612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c616:	f7ff bb5a 	b.w	801bcce <_dtoa_r+0x2e>
 801c61a:	692a      	ldr	r2, [r5, #16]
 801c61c:	3202      	adds	r2, #2
 801c61e:	0092      	lsls	r2, r2, #2
 801c620:	f105 010c 	add.w	r1, r5, #12
 801c624:	300c      	adds	r0, #12
 801c626:	f7ff fa7e 	bl	801bb26 <memcpy>
 801c62a:	2201      	movs	r2, #1
 801c62c:	4631      	mov	r1, r6
 801c62e:	4658      	mov	r0, fp
 801c630:	f000 fba8 	bl	801cd84 <__lshift>
 801c634:	f10a 0301 	add.w	r3, sl, #1
 801c638:	9307      	str	r3, [sp, #28]
 801c63a:	9b00      	ldr	r3, [sp, #0]
 801c63c:	4453      	add	r3, sl
 801c63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c640:	9b02      	ldr	r3, [sp, #8]
 801c642:	f003 0301 	and.w	r3, r3, #1
 801c646:	462f      	mov	r7, r5
 801c648:	930a      	str	r3, [sp, #40]	@ 0x28
 801c64a:	4605      	mov	r5, r0
 801c64c:	9b07      	ldr	r3, [sp, #28]
 801c64e:	4621      	mov	r1, r4
 801c650:	3b01      	subs	r3, #1
 801c652:	4648      	mov	r0, r9
 801c654:	9300      	str	r3, [sp, #0]
 801c656:	f7ff fa99 	bl	801bb8c <quorem>
 801c65a:	4639      	mov	r1, r7
 801c65c:	9002      	str	r0, [sp, #8]
 801c65e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c662:	4648      	mov	r0, r9
 801c664:	f000 fbfa 	bl	801ce5c <__mcmp>
 801c668:	462a      	mov	r2, r5
 801c66a:	9008      	str	r0, [sp, #32]
 801c66c:	4621      	mov	r1, r4
 801c66e:	4658      	mov	r0, fp
 801c670:	f000 fc10 	bl	801ce94 <__mdiff>
 801c674:	68c2      	ldr	r2, [r0, #12]
 801c676:	4606      	mov	r6, r0
 801c678:	bb02      	cbnz	r2, 801c6bc <_dtoa_r+0xa1c>
 801c67a:	4601      	mov	r1, r0
 801c67c:	4648      	mov	r0, r9
 801c67e:	f000 fbed 	bl	801ce5c <__mcmp>
 801c682:	4602      	mov	r2, r0
 801c684:	4631      	mov	r1, r6
 801c686:	4658      	mov	r0, fp
 801c688:	920e      	str	r2, [sp, #56]	@ 0x38
 801c68a:	f000 f963 	bl	801c954 <_Bfree>
 801c68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c692:	9e07      	ldr	r6, [sp, #28]
 801c694:	ea43 0102 	orr.w	r1, r3, r2
 801c698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c69a:	4319      	orrs	r1, r3
 801c69c:	d110      	bne.n	801c6c0 <_dtoa_r+0xa20>
 801c69e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c6a2:	d029      	beq.n	801c6f8 <_dtoa_r+0xa58>
 801c6a4:	9b08      	ldr	r3, [sp, #32]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	dd02      	ble.n	801c6b0 <_dtoa_r+0xa10>
 801c6aa:	9b02      	ldr	r3, [sp, #8]
 801c6ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c6b0:	9b00      	ldr	r3, [sp, #0]
 801c6b2:	f883 8000 	strb.w	r8, [r3]
 801c6b6:	e63f      	b.n	801c338 <_dtoa_r+0x698>
 801c6b8:	4628      	mov	r0, r5
 801c6ba:	e7bb      	b.n	801c634 <_dtoa_r+0x994>
 801c6bc:	2201      	movs	r2, #1
 801c6be:	e7e1      	b.n	801c684 <_dtoa_r+0x9e4>
 801c6c0:	9b08      	ldr	r3, [sp, #32]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	db04      	blt.n	801c6d0 <_dtoa_r+0xa30>
 801c6c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c6c8:	430b      	orrs	r3, r1
 801c6ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c6cc:	430b      	orrs	r3, r1
 801c6ce:	d120      	bne.n	801c712 <_dtoa_r+0xa72>
 801c6d0:	2a00      	cmp	r2, #0
 801c6d2:	dded      	ble.n	801c6b0 <_dtoa_r+0xa10>
 801c6d4:	4649      	mov	r1, r9
 801c6d6:	2201      	movs	r2, #1
 801c6d8:	4658      	mov	r0, fp
 801c6da:	f000 fb53 	bl	801cd84 <__lshift>
 801c6de:	4621      	mov	r1, r4
 801c6e0:	4681      	mov	r9, r0
 801c6e2:	f000 fbbb 	bl	801ce5c <__mcmp>
 801c6e6:	2800      	cmp	r0, #0
 801c6e8:	dc03      	bgt.n	801c6f2 <_dtoa_r+0xa52>
 801c6ea:	d1e1      	bne.n	801c6b0 <_dtoa_r+0xa10>
 801c6ec:	f018 0f01 	tst.w	r8, #1
 801c6f0:	d0de      	beq.n	801c6b0 <_dtoa_r+0xa10>
 801c6f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c6f6:	d1d8      	bne.n	801c6aa <_dtoa_r+0xa0a>
 801c6f8:	9a00      	ldr	r2, [sp, #0]
 801c6fa:	2339      	movs	r3, #57	@ 0x39
 801c6fc:	7013      	strb	r3, [r2, #0]
 801c6fe:	4633      	mov	r3, r6
 801c700:	461e      	mov	r6, r3
 801c702:	3b01      	subs	r3, #1
 801c704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c708:	2a39      	cmp	r2, #57	@ 0x39
 801c70a:	d052      	beq.n	801c7b2 <_dtoa_r+0xb12>
 801c70c:	3201      	adds	r2, #1
 801c70e:	701a      	strb	r2, [r3, #0]
 801c710:	e612      	b.n	801c338 <_dtoa_r+0x698>
 801c712:	2a00      	cmp	r2, #0
 801c714:	dd07      	ble.n	801c726 <_dtoa_r+0xa86>
 801c716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c71a:	d0ed      	beq.n	801c6f8 <_dtoa_r+0xa58>
 801c71c:	9a00      	ldr	r2, [sp, #0]
 801c71e:	f108 0301 	add.w	r3, r8, #1
 801c722:	7013      	strb	r3, [r2, #0]
 801c724:	e608      	b.n	801c338 <_dtoa_r+0x698>
 801c726:	9b07      	ldr	r3, [sp, #28]
 801c728:	9a07      	ldr	r2, [sp, #28]
 801c72a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c730:	4293      	cmp	r3, r2
 801c732:	d028      	beq.n	801c786 <_dtoa_r+0xae6>
 801c734:	4649      	mov	r1, r9
 801c736:	2300      	movs	r3, #0
 801c738:	220a      	movs	r2, #10
 801c73a:	4658      	mov	r0, fp
 801c73c:	f000 f92c 	bl	801c998 <__multadd>
 801c740:	42af      	cmp	r7, r5
 801c742:	4681      	mov	r9, r0
 801c744:	f04f 0300 	mov.w	r3, #0
 801c748:	f04f 020a 	mov.w	r2, #10
 801c74c:	4639      	mov	r1, r7
 801c74e:	4658      	mov	r0, fp
 801c750:	d107      	bne.n	801c762 <_dtoa_r+0xac2>
 801c752:	f000 f921 	bl	801c998 <__multadd>
 801c756:	4607      	mov	r7, r0
 801c758:	4605      	mov	r5, r0
 801c75a:	9b07      	ldr	r3, [sp, #28]
 801c75c:	3301      	adds	r3, #1
 801c75e:	9307      	str	r3, [sp, #28]
 801c760:	e774      	b.n	801c64c <_dtoa_r+0x9ac>
 801c762:	f000 f919 	bl	801c998 <__multadd>
 801c766:	4629      	mov	r1, r5
 801c768:	4607      	mov	r7, r0
 801c76a:	2300      	movs	r3, #0
 801c76c:	220a      	movs	r2, #10
 801c76e:	4658      	mov	r0, fp
 801c770:	f000 f912 	bl	801c998 <__multadd>
 801c774:	4605      	mov	r5, r0
 801c776:	e7f0      	b.n	801c75a <_dtoa_r+0xaba>
 801c778:	9b00      	ldr	r3, [sp, #0]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	bfcc      	ite	gt
 801c77e:	461e      	movgt	r6, r3
 801c780:	2601      	movle	r6, #1
 801c782:	4456      	add	r6, sl
 801c784:	2700      	movs	r7, #0
 801c786:	4649      	mov	r1, r9
 801c788:	2201      	movs	r2, #1
 801c78a:	4658      	mov	r0, fp
 801c78c:	f000 fafa 	bl	801cd84 <__lshift>
 801c790:	4621      	mov	r1, r4
 801c792:	4681      	mov	r9, r0
 801c794:	f000 fb62 	bl	801ce5c <__mcmp>
 801c798:	2800      	cmp	r0, #0
 801c79a:	dcb0      	bgt.n	801c6fe <_dtoa_r+0xa5e>
 801c79c:	d102      	bne.n	801c7a4 <_dtoa_r+0xb04>
 801c79e:	f018 0f01 	tst.w	r8, #1
 801c7a2:	d1ac      	bne.n	801c6fe <_dtoa_r+0xa5e>
 801c7a4:	4633      	mov	r3, r6
 801c7a6:	461e      	mov	r6, r3
 801c7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c7ac:	2a30      	cmp	r2, #48	@ 0x30
 801c7ae:	d0fa      	beq.n	801c7a6 <_dtoa_r+0xb06>
 801c7b0:	e5c2      	b.n	801c338 <_dtoa_r+0x698>
 801c7b2:	459a      	cmp	sl, r3
 801c7b4:	d1a4      	bne.n	801c700 <_dtoa_r+0xa60>
 801c7b6:	9b04      	ldr	r3, [sp, #16]
 801c7b8:	3301      	adds	r3, #1
 801c7ba:	9304      	str	r3, [sp, #16]
 801c7bc:	2331      	movs	r3, #49	@ 0x31
 801c7be:	f88a 3000 	strb.w	r3, [sl]
 801c7c2:	e5b9      	b.n	801c338 <_dtoa_r+0x698>
 801c7c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c7c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c824 <_dtoa_r+0xb84>
 801c7ca:	b11b      	cbz	r3, 801c7d4 <_dtoa_r+0xb34>
 801c7cc:	f10a 0308 	add.w	r3, sl, #8
 801c7d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c7d2:	6013      	str	r3, [r2, #0]
 801c7d4:	4650      	mov	r0, sl
 801c7d6:	b019      	add	sp, #100	@ 0x64
 801c7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7de:	2b01      	cmp	r3, #1
 801c7e0:	f77f ae37 	ble.w	801c452 <_dtoa_r+0x7b2>
 801c7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c7e8:	2001      	movs	r0, #1
 801c7ea:	e655      	b.n	801c498 <_dtoa_r+0x7f8>
 801c7ec:	9b00      	ldr	r3, [sp, #0]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	f77f aed6 	ble.w	801c5a0 <_dtoa_r+0x900>
 801c7f4:	4656      	mov	r6, sl
 801c7f6:	4621      	mov	r1, r4
 801c7f8:	4648      	mov	r0, r9
 801c7fa:	f7ff f9c7 	bl	801bb8c <quorem>
 801c7fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c802:	f806 8b01 	strb.w	r8, [r6], #1
 801c806:	9b00      	ldr	r3, [sp, #0]
 801c808:	eba6 020a 	sub.w	r2, r6, sl
 801c80c:	4293      	cmp	r3, r2
 801c80e:	ddb3      	ble.n	801c778 <_dtoa_r+0xad8>
 801c810:	4649      	mov	r1, r9
 801c812:	2300      	movs	r3, #0
 801c814:	220a      	movs	r2, #10
 801c816:	4658      	mov	r0, fp
 801c818:	f000 f8be 	bl	801c998 <__multadd>
 801c81c:	4681      	mov	r9, r0
 801c81e:	e7ea      	b.n	801c7f6 <_dtoa_r+0xb56>
 801c820:	080204b0 	.word	0x080204b0
 801c824:	0802044b 	.word	0x0802044b

0801c828 <__env_lock>:
 801c828:	4801      	ldr	r0, [pc, #4]	@ (801c830 <__env_lock+0x8>)
 801c82a:	f7ff b972 	b.w	801bb12 <__retarget_lock_acquire_recursive>
 801c82e:	bf00      	nop
 801c830:	20017a74 	.word	0x20017a74

0801c834 <__env_unlock>:
 801c834:	4801      	ldr	r0, [pc, #4]	@ (801c83c <__env_unlock+0x8>)
 801c836:	f7ff b96d 	b.w	801bb14 <__retarget_lock_release_recursive>
 801c83a:	bf00      	nop
 801c83c:	20017a74 	.word	0x20017a74

0801c840 <_free_r>:
 801c840:	b538      	push	{r3, r4, r5, lr}
 801c842:	4605      	mov	r5, r0
 801c844:	2900      	cmp	r1, #0
 801c846:	d041      	beq.n	801c8cc <_free_r+0x8c>
 801c848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c84c:	1f0c      	subs	r4, r1, #4
 801c84e:	2b00      	cmp	r3, #0
 801c850:	bfb8      	it	lt
 801c852:	18e4      	addlt	r4, r4, r3
 801c854:	f7fd fd86 	bl	801a364 <__malloc_lock>
 801c858:	4a1d      	ldr	r2, [pc, #116]	@ (801c8d0 <_free_r+0x90>)
 801c85a:	6813      	ldr	r3, [r2, #0]
 801c85c:	b933      	cbnz	r3, 801c86c <_free_r+0x2c>
 801c85e:	6063      	str	r3, [r4, #4]
 801c860:	6014      	str	r4, [r2, #0]
 801c862:	4628      	mov	r0, r5
 801c864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c868:	f7fd bd82 	b.w	801a370 <__malloc_unlock>
 801c86c:	42a3      	cmp	r3, r4
 801c86e:	d908      	bls.n	801c882 <_free_r+0x42>
 801c870:	6820      	ldr	r0, [r4, #0]
 801c872:	1821      	adds	r1, r4, r0
 801c874:	428b      	cmp	r3, r1
 801c876:	bf01      	itttt	eq
 801c878:	6819      	ldreq	r1, [r3, #0]
 801c87a:	685b      	ldreq	r3, [r3, #4]
 801c87c:	1809      	addeq	r1, r1, r0
 801c87e:	6021      	streq	r1, [r4, #0]
 801c880:	e7ed      	b.n	801c85e <_free_r+0x1e>
 801c882:	461a      	mov	r2, r3
 801c884:	685b      	ldr	r3, [r3, #4]
 801c886:	b10b      	cbz	r3, 801c88c <_free_r+0x4c>
 801c888:	42a3      	cmp	r3, r4
 801c88a:	d9fa      	bls.n	801c882 <_free_r+0x42>
 801c88c:	6811      	ldr	r1, [r2, #0]
 801c88e:	1850      	adds	r0, r2, r1
 801c890:	42a0      	cmp	r0, r4
 801c892:	d10b      	bne.n	801c8ac <_free_r+0x6c>
 801c894:	6820      	ldr	r0, [r4, #0]
 801c896:	4401      	add	r1, r0
 801c898:	1850      	adds	r0, r2, r1
 801c89a:	4283      	cmp	r3, r0
 801c89c:	6011      	str	r1, [r2, #0]
 801c89e:	d1e0      	bne.n	801c862 <_free_r+0x22>
 801c8a0:	6818      	ldr	r0, [r3, #0]
 801c8a2:	685b      	ldr	r3, [r3, #4]
 801c8a4:	6053      	str	r3, [r2, #4]
 801c8a6:	4408      	add	r0, r1
 801c8a8:	6010      	str	r0, [r2, #0]
 801c8aa:	e7da      	b.n	801c862 <_free_r+0x22>
 801c8ac:	d902      	bls.n	801c8b4 <_free_r+0x74>
 801c8ae:	230c      	movs	r3, #12
 801c8b0:	602b      	str	r3, [r5, #0]
 801c8b2:	e7d6      	b.n	801c862 <_free_r+0x22>
 801c8b4:	6820      	ldr	r0, [r4, #0]
 801c8b6:	1821      	adds	r1, r4, r0
 801c8b8:	428b      	cmp	r3, r1
 801c8ba:	bf04      	itt	eq
 801c8bc:	6819      	ldreq	r1, [r3, #0]
 801c8be:	685b      	ldreq	r3, [r3, #4]
 801c8c0:	6063      	str	r3, [r4, #4]
 801c8c2:	bf04      	itt	eq
 801c8c4:	1809      	addeq	r1, r1, r0
 801c8c6:	6021      	streq	r1, [r4, #0]
 801c8c8:	6054      	str	r4, [r2, #4]
 801c8ca:	e7ca      	b.n	801c862 <_free_r+0x22>
 801c8cc:	bd38      	pop	{r3, r4, r5, pc}
 801c8ce:	bf00      	nop
 801c8d0:	20017930 	.word	0x20017930

0801c8d4 <_Balloc>:
 801c8d4:	b570      	push	{r4, r5, r6, lr}
 801c8d6:	69c6      	ldr	r6, [r0, #28]
 801c8d8:	4604      	mov	r4, r0
 801c8da:	460d      	mov	r5, r1
 801c8dc:	b976      	cbnz	r6, 801c8fc <_Balloc+0x28>
 801c8de:	2010      	movs	r0, #16
 801c8e0:	f7fd fc8e 	bl	801a200 <malloc>
 801c8e4:	4602      	mov	r2, r0
 801c8e6:	61e0      	str	r0, [r4, #28]
 801c8e8:	b920      	cbnz	r0, 801c8f4 <_Balloc+0x20>
 801c8ea:	4b18      	ldr	r3, [pc, #96]	@ (801c94c <_Balloc+0x78>)
 801c8ec:	4818      	ldr	r0, [pc, #96]	@ (801c950 <_Balloc+0x7c>)
 801c8ee:	216b      	movs	r1, #107	@ 0x6b
 801c8f0:	f7ff f92e 	bl	801bb50 <__assert_func>
 801c8f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c8f8:	6006      	str	r6, [r0, #0]
 801c8fa:	60c6      	str	r6, [r0, #12]
 801c8fc:	69e6      	ldr	r6, [r4, #28]
 801c8fe:	68f3      	ldr	r3, [r6, #12]
 801c900:	b183      	cbz	r3, 801c924 <_Balloc+0x50>
 801c902:	69e3      	ldr	r3, [r4, #28]
 801c904:	68db      	ldr	r3, [r3, #12]
 801c906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c90a:	b9b8      	cbnz	r0, 801c93c <_Balloc+0x68>
 801c90c:	2101      	movs	r1, #1
 801c90e:	fa01 f605 	lsl.w	r6, r1, r5
 801c912:	1d72      	adds	r2, r6, #5
 801c914:	0092      	lsls	r2, r2, #2
 801c916:	4620      	mov	r0, r4
 801c918:	f7fd fc04 	bl	801a124 <_calloc_r>
 801c91c:	b160      	cbz	r0, 801c938 <_Balloc+0x64>
 801c91e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c922:	e00e      	b.n	801c942 <_Balloc+0x6e>
 801c924:	2221      	movs	r2, #33	@ 0x21
 801c926:	2104      	movs	r1, #4
 801c928:	4620      	mov	r0, r4
 801c92a:	f7fd fbfb 	bl	801a124 <_calloc_r>
 801c92e:	69e3      	ldr	r3, [r4, #28]
 801c930:	60f0      	str	r0, [r6, #12]
 801c932:	68db      	ldr	r3, [r3, #12]
 801c934:	2b00      	cmp	r3, #0
 801c936:	d1e4      	bne.n	801c902 <_Balloc+0x2e>
 801c938:	2000      	movs	r0, #0
 801c93a:	bd70      	pop	{r4, r5, r6, pc}
 801c93c:	6802      	ldr	r2, [r0, #0]
 801c93e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c942:	2300      	movs	r3, #0
 801c944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c948:	e7f7      	b.n	801c93a <_Balloc+0x66>
 801c94a:	bf00      	nop
 801c94c:	08020266 	.word	0x08020266
 801c950:	080204c1 	.word	0x080204c1

0801c954 <_Bfree>:
 801c954:	b570      	push	{r4, r5, r6, lr}
 801c956:	69c6      	ldr	r6, [r0, #28]
 801c958:	4605      	mov	r5, r0
 801c95a:	460c      	mov	r4, r1
 801c95c:	b976      	cbnz	r6, 801c97c <_Bfree+0x28>
 801c95e:	2010      	movs	r0, #16
 801c960:	f7fd fc4e 	bl	801a200 <malloc>
 801c964:	4602      	mov	r2, r0
 801c966:	61e8      	str	r0, [r5, #28]
 801c968:	b920      	cbnz	r0, 801c974 <_Bfree+0x20>
 801c96a:	4b09      	ldr	r3, [pc, #36]	@ (801c990 <_Bfree+0x3c>)
 801c96c:	4809      	ldr	r0, [pc, #36]	@ (801c994 <_Bfree+0x40>)
 801c96e:	218f      	movs	r1, #143	@ 0x8f
 801c970:	f7ff f8ee 	bl	801bb50 <__assert_func>
 801c974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c978:	6006      	str	r6, [r0, #0]
 801c97a:	60c6      	str	r6, [r0, #12]
 801c97c:	b13c      	cbz	r4, 801c98e <_Bfree+0x3a>
 801c97e:	69eb      	ldr	r3, [r5, #28]
 801c980:	6862      	ldr	r2, [r4, #4]
 801c982:	68db      	ldr	r3, [r3, #12]
 801c984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c988:	6021      	str	r1, [r4, #0]
 801c98a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c98e:	bd70      	pop	{r4, r5, r6, pc}
 801c990:	08020266 	.word	0x08020266
 801c994:	080204c1 	.word	0x080204c1

0801c998 <__multadd>:
 801c998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c99c:	690d      	ldr	r5, [r1, #16]
 801c99e:	4607      	mov	r7, r0
 801c9a0:	460c      	mov	r4, r1
 801c9a2:	461e      	mov	r6, r3
 801c9a4:	f101 0c14 	add.w	ip, r1, #20
 801c9a8:	2000      	movs	r0, #0
 801c9aa:	f8dc 3000 	ldr.w	r3, [ip]
 801c9ae:	b299      	uxth	r1, r3
 801c9b0:	fb02 6101 	mla	r1, r2, r1, r6
 801c9b4:	0c1e      	lsrs	r6, r3, #16
 801c9b6:	0c0b      	lsrs	r3, r1, #16
 801c9b8:	fb02 3306 	mla	r3, r2, r6, r3
 801c9bc:	b289      	uxth	r1, r1
 801c9be:	3001      	adds	r0, #1
 801c9c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c9c4:	4285      	cmp	r5, r0
 801c9c6:	f84c 1b04 	str.w	r1, [ip], #4
 801c9ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c9ce:	dcec      	bgt.n	801c9aa <__multadd+0x12>
 801c9d0:	b30e      	cbz	r6, 801ca16 <__multadd+0x7e>
 801c9d2:	68a3      	ldr	r3, [r4, #8]
 801c9d4:	42ab      	cmp	r3, r5
 801c9d6:	dc19      	bgt.n	801ca0c <__multadd+0x74>
 801c9d8:	6861      	ldr	r1, [r4, #4]
 801c9da:	4638      	mov	r0, r7
 801c9dc:	3101      	adds	r1, #1
 801c9de:	f7ff ff79 	bl	801c8d4 <_Balloc>
 801c9e2:	4680      	mov	r8, r0
 801c9e4:	b928      	cbnz	r0, 801c9f2 <__multadd+0x5a>
 801c9e6:	4602      	mov	r2, r0
 801c9e8:	4b0c      	ldr	r3, [pc, #48]	@ (801ca1c <__multadd+0x84>)
 801c9ea:	480d      	ldr	r0, [pc, #52]	@ (801ca20 <__multadd+0x88>)
 801c9ec:	21ba      	movs	r1, #186	@ 0xba
 801c9ee:	f7ff f8af 	bl	801bb50 <__assert_func>
 801c9f2:	6922      	ldr	r2, [r4, #16]
 801c9f4:	3202      	adds	r2, #2
 801c9f6:	f104 010c 	add.w	r1, r4, #12
 801c9fa:	0092      	lsls	r2, r2, #2
 801c9fc:	300c      	adds	r0, #12
 801c9fe:	f7ff f892 	bl	801bb26 <memcpy>
 801ca02:	4621      	mov	r1, r4
 801ca04:	4638      	mov	r0, r7
 801ca06:	f7ff ffa5 	bl	801c954 <_Bfree>
 801ca0a:	4644      	mov	r4, r8
 801ca0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ca10:	3501      	adds	r5, #1
 801ca12:	615e      	str	r6, [r3, #20]
 801ca14:	6125      	str	r5, [r4, #16]
 801ca16:	4620      	mov	r0, r4
 801ca18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca1c:	080204b0 	.word	0x080204b0
 801ca20:	080204c1 	.word	0x080204c1

0801ca24 <__s2b>:
 801ca24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca28:	460c      	mov	r4, r1
 801ca2a:	4615      	mov	r5, r2
 801ca2c:	461f      	mov	r7, r3
 801ca2e:	2209      	movs	r2, #9
 801ca30:	3308      	adds	r3, #8
 801ca32:	4606      	mov	r6, r0
 801ca34:	fb93 f3f2 	sdiv	r3, r3, r2
 801ca38:	2100      	movs	r1, #0
 801ca3a:	2201      	movs	r2, #1
 801ca3c:	429a      	cmp	r2, r3
 801ca3e:	db09      	blt.n	801ca54 <__s2b+0x30>
 801ca40:	4630      	mov	r0, r6
 801ca42:	f7ff ff47 	bl	801c8d4 <_Balloc>
 801ca46:	b940      	cbnz	r0, 801ca5a <__s2b+0x36>
 801ca48:	4602      	mov	r2, r0
 801ca4a:	4b19      	ldr	r3, [pc, #100]	@ (801cab0 <__s2b+0x8c>)
 801ca4c:	4819      	ldr	r0, [pc, #100]	@ (801cab4 <__s2b+0x90>)
 801ca4e:	21d3      	movs	r1, #211	@ 0xd3
 801ca50:	f7ff f87e 	bl	801bb50 <__assert_func>
 801ca54:	0052      	lsls	r2, r2, #1
 801ca56:	3101      	adds	r1, #1
 801ca58:	e7f0      	b.n	801ca3c <__s2b+0x18>
 801ca5a:	9b08      	ldr	r3, [sp, #32]
 801ca5c:	6143      	str	r3, [r0, #20]
 801ca5e:	2d09      	cmp	r5, #9
 801ca60:	f04f 0301 	mov.w	r3, #1
 801ca64:	6103      	str	r3, [r0, #16]
 801ca66:	dd16      	ble.n	801ca96 <__s2b+0x72>
 801ca68:	f104 0909 	add.w	r9, r4, #9
 801ca6c:	46c8      	mov	r8, r9
 801ca6e:	442c      	add	r4, r5
 801ca70:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ca74:	4601      	mov	r1, r0
 801ca76:	3b30      	subs	r3, #48	@ 0x30
 801ca78:	220a      	movs	r2, #10
 801ca7a:	4630      	mov	r0, r6
 801ca7c:	f7ff ff8c 	bl	801c998 <__multadd>
 801ca80:	45a0      	cmp	r8, r4
 801ca82:	d1f5      	bne.n	801ca70 <__s2b+0x4c>
 801ca84:	f1a5 0408 	sub.w	r4, r5, #8
 801ca88:	444c      	add	r4, r9
 801ca8a:	1b2d      	subs	r5, r5, r4
 801ca8c:	1963      	adds	r3, r4, r5
 801ca8e:	42bb      	cmp	r3, r7
 801ca90:	db04      	blt.n	801ca9c <__s2b+0x78>
 801ca92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca96:	340a      	adds	r4, #10
 801ca98:	2509      	movs	r5, #9
 801ca9a:	e7f6      	b.n	801ca8a <__s2b+0x66>
 801ca9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801caa0:	4601      	mov	r1, r0
 801caa2:	3b30      	subs	r3, #48	@ 0x30
 801caa4:	220a      	movs	r2, #10
 801caa6:	4630      	mov	r0, r6
 801caa8:	f7ff ff76 	bl	801c998 <__multadd>
 801caac:	e7ee      	b.n	801ca8c <__s2b+0x68>
 801caae:	bf00      	nop
 801cab0:	080204b0 	.word	0x080204b0
 801cab4:	080204c1 	.word	0x080204c1

0801cab8 <__hi0bits>:
 801cab8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801cabc:	4603      	mov	r3, r0
 801cabe:	bf36      	itet	cc
 801cac0:	0403      	lslcc	r3, r0, #16
 801cac2:	2000      	movcs	r0, #0
 801cac4:	2010      	movcc	r0, #16
 801cac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801caca:	bf3c      	itt	cc
 801cacc:	021b      	lslcc	r3, r3, #8
 801cace:	3008      	addcc	r0, #8
 801cad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cad4:	bf3c      	itt	cc
 801cad6:	011b      	lslcc	r3, r3, #4
 801cad8:	3004      	addcc	r0, #4
 801cada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cade:	bf3c      	itt	cc
 801cae0:	009b      	lslcc	r3, r3, #2
 801cae2:	3002      	addcc	r0, #2
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	db05      	blt.n	801caf4 <__hi0bits+0x3c>
 801cae8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801caec:	f100 0001 	add.w	r0, r0, #1
 801caf0:	bf08      	it	eq
 801caf2:	2020      	moveq	r0, #32
 801caf4:	4770      	bx	lr

0801caf6 <__lo0bits>:
 801caf6:	6803      	ldr	r3, [r0, #0]
 801caf8:	4602      	mov	r2, r0
 801cafa:	f013 0007 	ands.w	r0, r3, #7
 801cafe:	d00b      	beq.n	801cb18 <__lo0bits+0x22>
 801cb00:	07d9      	lsls	r1, r3, #31
 801cb02:	d421      	bmi.n	801cb48 <__lo0bits+0x52>
 801cb04:	0798      	lsls	r0, r3, #30
 801cb06:	bf49      	itett	mi
 801cb08:	085b      	lsrmi	r3, r3, #1
 801cb0a:	089b      	lsrpl	r3, r3, #2
 801cb0c:	2001      	movmi	r0, #1
 801cb0e:	6013      	strmi	r3, [r2, #0]
 801cb10:	bf5c      	itt	pl
 801cb12:	6013      	strpl	r3, [r2, #0]
 801cb14:	2002      	movpl	r0, #2
 801cb16:	4770      	bx	lr
 801cb18:	b299      	uxth	r1, r3
 801cb1a:	b909      	cbnz	r1, 801cb20 <__lo0bits+0x2a>
 801cb1c:	0c1b      	lsrs	r3, r3, #16
 801cb1e:	2010      	movs	r0, #16
 801cb20:	b2d9      	uxtb	r1, r3
 801cb22:	b909      	cbnz	r1, 801cb28 <__lo0bits+0x32>
 801cb24:	3008      	adds	r0, #8
 801cb26:	0a1b      	lsrs	r3, r3, #8
 801cb28:	0719      	lsls	r1, r3, #28
 801cb2a:	bf04      	itt	eq
 801cb2c:	091b      	lsreq	r3, r3, #4
 801cb2e:	3004      	addeq	r0, #4
 801cb30:	0799      	lsls	r1, r3, #30
 801cb32:	bf04      	itt	eq
 801cb34:	089b      	lsreq	r3, r3, #2
 801cb36:	3002      	addeq	r0, #2
 801cb38:	07d9      	lsls	r1, r3, #31
 801cb3a:	d403      	bmi.n	801cb44 <__lo0bits+0x4e>
 801cb3c:	085b      	lsrs	r3, r3, #1
 801cb3e:	f100 0001 	add.w	r0, r0, #1
 801cb42:	d003      	beq.n	801cb4c <__lo0bits+0x56>
 801cb44:	6013      	str	r3, [r2, #0]
 801cb46:	4770      	bx	lr
 801cb48:	2000      	movs	r0, #0
 801cb4a:	4770      	bx	lr
 801cb4c:	2020      	movs	r0, #32
 801cb4e:	4770      	bx	lr

0801cb50 <__i2b>:
 801cb50:	b510      	push	{r4, lr}
 801cb52:	460c      	mov	r4, r1
 801cb54:	2101      	movs	r1, #1
 801cb56:	f7ff febd 	bl	801c8d4 <_Balloc>
 801cb5a:	4602      	mov	r2, r0
 801cb5c:	b928      	cbnz	r0, 801cb6a <__i2b+0x1a>
 801cb5e:	4b05      	ldr	r3, [pc, #20]	@ (801cb74 <__i2b+0x24>)
 801cb60:	4805      	ldr	r0, [pc, #20]	@ (801cb78 <__i2b+0x28>)
 801cb62:	f240 1145 	movw	r1, #325	@ 0x145
 801cb66:	f7fe fff3 	bl	801bb50 <__assert_func>
 801cb6a:	2301      	movs	r3, #1
 801cb6c:	6144      	str	r4, [r0, #20]
 801cb6e:	6103      	str	r3, [r0, #16]
 801cb70:	bd10      	pop	{r4, pc}
 801cb72:	bf00      	nop
 801cb74:	080204b0 	.word	0x080204b0
 801cb78:	080204c1 	.word	0x080204c1

0801cb7c <__multiply>:
 801cb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb80:	4614      	mov	r4, r2
 801cb82:	690a      	ldr	r2, [r1, #16]
 801cb84:	6923      	ldr	r3, [r4, #16]
 801cb86:	429a      	cmp	r2, r3
 801cb88:	bfa8      	it	ge
 801cb8a:	4623      	movge	r3, r4
 801cb8c:	460f      	mov	r7, r1
 801cb8e:	bfa4      	itt	ge
 801cb90:	460c      	movge	r4, r1
 801cb92:	461f      	movge	r7, r3
 801cb94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801cb98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801cb9c:	68a3      	ldr	r3, [r4, #8]
 801cb9e:	6861      	ldr	r1, [r4, #4]
 801cba0:	eb0a 0609 	add.w	r6, sl, r9
 801cba4:	42b3      	cmp	r3, r6
 801cba6:	b085      	sub	sp, #20
 801cba8:	bfb8      	it	lt
 801cbaa:	3101      	addlt	r1, #1
 801cbac:	f7ff fe92 	bl	801c8d4 <_Balloc>
 801cbb0:	b930      	cbnz	r0, 801cbc0 <__multiply+0x44>
 801cbb2:	4602      	mov	r2, r0
 801cbb4:	4b44      	ldr	r3, [pc, #272]	@ (801ccc8 <__multiply+0x14c>)
 801cbb6:	4845      	ldr	r0, [pc, #276]	@ (801cccc <__multiply+0x150>)
 801cbb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801cbbc:	f7fe ffc8 	bl	801bb50 <__assert_func>
 801cbc0:	f100 0514 	add.w	r5, r0, #20
 801cbc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cbc8:	462b      	mov	r3, r5
 801cbca:	2200      	movs	r2, #0
 801cbcc:	4543      	cmp	r3, r8
 801cbce:	d321      	bcc.n	801cc14 <__multiply+0x98>
 801cbd0:	f107 0114 	add.w	r1, r7, #20
 801cbd4:	f104 0214 	add.w	r2, r4, #20
 801cbd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801cbdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801cbe0:	9302      	str	r3, [sp, #8]
 801cbe2:	1b13      	subs	r3, r2, r4
 801cbe4:	3b15      	subs	r3, #21
 801cbe6:	f023 0303 	bic.w	r3, r3, #3
 801cbea:	3304      	adds	r3, #4
 801cbec:	f104 0715 	add.w	r7, r4, #21
 801cbf0:	42ba      	cmp	r2, r7
 801cbf2:	bf38      	it	cc
 801cbf4:	2304      	movcc	r3, #4
 801cbf6:	9301      	str	r3, [sp, #4]
 801cbf8:	9b02      	ldr	r3, [sp, #8]
 801cbfa:	9103      	str	r1, [sp, #12]
 801cbfc:	428b      	cmp	r3, r1
 801cbfe:	d80c      	bhi.n	801cc1a <__multiply+0x9e>
 801cc00:	2e00      	cmp	r6, #0
 801cc02:	dd03      	ble.n	801cc0c <__multiply+0x90>
 801cc04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d05b      	beq.n	801ccc4 <__multiply+0x148>
 801cc0c:	6106      	str	r6, [r0, #16]
 801cc0e:	b005      	add	sp, #20
 801cc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc14:	f843 2b04 	str.w	r2, [r3], #4
 801cc18:	e7d8      	b.n	801cbcc <__multiply+0x50>
 801cc1a:	f8b1 a000 	ldrh.w	sl, [r1]
 801cc1e:	f1ba 0f00 	cmp.w	sl, #0
 801cc22:	d024      	beq.n	801cc6e <__multiply+0xf2>
 801cc24:	f104 0e14 	add.w	lr, r4, #20
 801cc28:	46a9      	mov	r9, r5
 801cc2a:	f04f 0c00 	mov.w	ip, #0
 801cc2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cc32:	f8d9 3000 	ldr.w	r3, [r9]
 801cc36:	fa1f fb87 	uxth.w	fp, r7
 801cc3a:	b29b      	uxth	r3, r3
 801cc3c:	fb0a 330b 	mla	r3, sl, fp, r3
 801cc40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801cc44:	f8d9 7000 	ldr.w	r7, [r9]
 801cc48:	4463      	add	r3, ip
 801cc4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801cc4e:	fb0a c70b 	mla	r7, sl, fp, ip
 801cc52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801cc56:	b29b      	uxth	r3, r3
 801cc58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cc5c:	4572      	cmp	r2, lr
 801cc5e:	f849 3b04 	str.w	r3, [r9], #4
 801cc62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801cc66:	d8e2      	bhi.n	801cc2e <__multiply+0xb2>
 801cc68:	9b01      	ldr	r3, [sp, #4]
 801cc6a:	f845 c003 	str.w	ip, [r5, r3]
 801cc6e:	9b03      	ldr	r3, [sp, #12]
 801cc70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801cc74:	3104      	adds	r1, #4
 801cc76:	f1b9 0f00 	cmp.w	r9, #0
 801cc7a:	d021      	beq.n	801ccc0 <__multiply+0x144>
 801cc7c:	682b      	ldr	r3, [r5, #0]
 801cc7e:	f104 0c14 	add.w	ip, r4, #20
 801cc82:	46ae      	mov	lr, r5
 801cc84:	f04f 0a00 	mov.w	sl, #0
 801cc88:	f8bc b000 	ldrh.w	fp, [ip]
 801cc8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801cc90:	fb09 770b 	mla	r7, r9, fp, r7
 801cc94:	4457      	add	r7, sl
 801cc96:	b29b      	uxth	r3, r3
 801cc98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cc9c:	f84e 3b04 	str.w	r3, [lr], #4
 801cca0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cca8:	f8be 3000 	ldrh.w	r3, [lr]
 801ccac:	fb09 330a 	mla	r3, r9, sl, r3
 801ccb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ccb4:	4562      	cmp	r2, ip
 801ccb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ccba:	d8e5      	bhi.n	801cc88 <__multiply+0x10c>
 801ccbc:	9f01      	ldr	r7, [sp, #4]
 801ccbe:	51eb      	str	r3, [r5, r7]
 801ccc0:	3504      	adds	r5, #4
 801ccc2:	e799      	b.n	801cbf8 <__multiply+0x7c>
 801ccc4:	3e01      	subs	r6, #1
 801ccc6:	e79b      	b.n	801cc00 <__multiply+0x84>
 801ccc8:	080204b0 	.word	0x080204b0
 801cccc:	080204c1 	.word	0x080204c1

0801ccd0 <__pow5mult>:
 801ccd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccd4:	4615      	mov	r5, r2
 801ccd6:	f012 0203 	ands.w	r2, r2, #3
 801ccda:	4607      	mov	r7, r0
 801ccdc:	460e      	mov	r6, r1
 801ccde:	d007      	beq.n	801ccf0 <__pow5mult+0x20>
 801cce0:	4c25      	ldr	r4, [pc, #148]	@ (801cd78 <__pow5mult+0xa8>)
 801cce2:	3a01      	subs	r2, #1
 801cce4:	2300      	movs	r3, #0
 801cce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ccea:	f7ff fe55 	bl	801c998 <__multadd>
 801ccee:	4606      	mov	r6, r0
 801ccf0:	10ad      	asrs	r5, r5, #2
 801ccf2:	d03d      	beq.n	801cd70 <__pow5mult+0xa0>
 801ccf4:	69fc      	ldr	r4, [r7, #28]
 801ccf6:	b97c      	cbnz	r4, 801cd18 <__pow5mult+0x48>
 801ccf8:	2010      	movs	r0, #16
 801ccfa:	f7fd fa81 	bl	801a200 <malloc>
 801ccfe:	4602      	mov	r2, r0
 801cd00:	61f8      	str	r0, [r7, #28]
 801cd02:	b928      	cbnz	r0, 801cd10 <__pow5mult+0x40>
 801cd04:	4b1d      	ldr	r3, [pc, #116]	@ (801cd7c <__pow5mult+0xac>)
 801cd06:	481e      	ldr	r0, [pc, #120]	@ (801cd80 <__pow5mult+0xb0>)
 801cd08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801cd0c:	f7fe ff20 	bl	801bb50 <__assert_func>
 801cd10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cd14:	6004      	str	r4, [r0, #0]
 801cd16:	60c4      	str	r4, [r0, #12]
 801cd18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801cd1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cd20:	b94c      	cbnz	r4, 801cd36 <__pow5mult+0x66>
 801cd22:	f240 2171 	movw	r1, #625	@ 0x271
 801cd26:	4638      	mov	r0, r7
 801cd28:	f7ff ff12 	bl	801cb50 <__i2b>
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	f8c8 0008 	str.w	r0, [r8, #8]
 801cd32:	4604      	mov	r4, r0
 801cd34:	6003      	str	r3, [r0, #0]
 801cd36:	f04f 0900 	mov.w	r9, #0
 801cd3a:	07eb      	lsls	r3, r5, #31
 801cd3c:	d50a      	bpl.n	801cd54 <__pow5mult+0x84>
 801cd3e:	4631      	mov	r1, r6
 801cd40:	4622      	mov	r2, r4
 801cd42:	4638      	mov	r0, r7
 801cd44:	f7ff ff1a 	bl	801cb7c <__multiply>
 801cd48:	4631      	mov	r1, r6
 801cd4a:	4680      	mov	r8, r0
 801cd4c:	4638      	mov	r0, r7
 801cd4e:	f7ff fe01 	bl	801c954 <_Bfree>
 801cd52:	4646      	mov	r6, r8
 801cd54:	106d      	asrs	r5, r5, #1
 801cd56:	d00b      	beq.n	801cd70 <__pow5mult+0xa0>
 801cd58:	6820      	ldr	r0, [r4, #0]
 801cd5a:	b938      	cbnz	r0, 801cd6c <__pow5mult+0x9c>
 801cd5c:	4622      	mov	r2, r4
 801cd5e:	4621      	mov	r1, r4
 801cd60:	4638      	mov	r0, r7
 801cd62:	f7ff ff0b 	bl	801cb7c <__multiply>
 801cd66:	6020      	str	r0, [r4, #0]
 801cd68:	f8c0 9000 	str.w	r9, [r0]
 801cd6c:	4604      	mov	r4, r0
 801cd6e:	e7e4      	b.n	801cd3a <__pow5mult+0x6a>
 801cd70:	4630      	mov	r0, r6
 801cd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd76:	bf00      	nop
 801cd78:	0802051c 	.word	0x0802051c
 801cd7c:	08020266 	.word	0x08020266
 801cd80:	080204c1 	.word	0x080204c1

0801cd84 <__lshift>:
 801cd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd88:	460c      	mov	r4, r1
 801cd8a:	6849      	ldr	r1, [r1, #4]
 801cd8c:	6923      	ldr	r3, [r4, #16]
 801cd8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cd92:	68a3      	ldr	r3, [r4, #8]
 801cd94:	4607      	mov	r7, r0
 801cd96:	4691      	mov	r9, r2
 801cd98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cd9c:	f108 0601 	add.w	r6, r8, #1
 801cda0:	42b3      	cmp	r3, r6
 801cda2:	db0b      	blt.n	801cdbc <__lshift+0x38>
 801cda4:	4638      	mov	r0, r7
 801cda6:	f7ff fd95 	bl	801c8d4 <_Balloc>
 801cdaa:	4605      	mov	r5, r0
 801cdac:	b948      	cbnz	r0, 801cdc2 <__lshift+0x3e>
 801cdae:	4602      	mov	r2, r0
 801cdb0:	4b28      	ldr	r3, [pc, #160]	@ (801ce54 <__lshift+0xd0>)
 801cdb2:	4829      	ldr	r0, [pc, #164]	@ (801ce58 <__lshift+0xd4>)
 801cdb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801cdb8:	f7fe feca 	bl	801bb50 <__assert_func>
 801cdbc:	3101      	adds	r1, #1
 801cdbe:	005b      	lsls	r3, r3, #1
 801cdc0:	e7ee      	b.n	801cda0 <__lshift+0x1c>
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	f100 0114 	add.w	r1, r0, #20
 801cdc8:	f100 0210 	add.w	r2, r0, #16
 801cdcc:	4618      	mov	r0, r3
 801cdce:	4553      	cmp	r3, sl
 801cdd0:	db33      	blt.n	801ce3a <__lshift+0xb6>
 801cdd2:	6920      	ldr	r0, [r4, #16]
 801cdd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cdd8:	f104 0314 	add.w	r3, r4, #20
 801cddc:	f019 091f 	ands.w	r9, r9, #31
 801cde0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cde4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cde8:	d02b      	beq.n	801ce42 <__lshift+0xbe>
 801cdea:	f1c9 0e20 	rsb	lr, r9, #32
 801cdee:	468a      	mov	sl, r1
 801cdf0:	2200      	movs	r2, #0
 801cdf2:	6818      	ldr	r0, [r3, #0]
 801cdf4:	fa00 f009 	lsl.w	r0, r0, r9
 801cdf8:	4310      	orrs	r0, r2
 801cdfa:	f84a 0b04 	str.w	r0, [sl], #4
 801cdfe:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce02:	459c      	cmp	ip, r3
 801ce04:	fa22 f20e 	lsr.w	r2, r2, lr
 801ce08:	d8f3      	bhi.n	801cdf2 <__lshift+0x6e>
 801ce0a:	ebac 0304 	sub.w	r3, ip, r4
 801ce0e:	3b15      	subs	r3, #21
 801ce10:	f023 0303 	bic.w	r3, r3, #3
 801ce14:	3304      	adds	r3, #4
 801ce16:	f104 0015 	add.w	r0, r4, #21
 801ce1a:	4584      	cmp	ip, r0
 801ce1c:	bf38      	it	cc
 801ce1e:	2304      	movcc	r3, #4
 801ce20:	50ca      	str	r2, [r1, r3]
 801ce22:	b10a      	cbz	r2, 801ce28 <__lshift+0xa4>
 801ce24:	f108 0602 	add.w	r6, r8, #2
 801ce28:	3e01      	subs	r6, #1
 801ce2a:	4638      	mov	r0, r7
 801ce2c:	612e      	str	r6, [r5, #16]
 801ce2e:	4621      	mov	r1, r4
 801ce30:	f7ff fd90 	bl	801c954 <_Bfree>
 801ce34:	4628      	mov	r0, r5
 801ce36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce3a:	f842 0f04 	str.w	r0, [r2, #4]!
 801ce3e:	3301      	adds	r3, #1
 801ce40:	e7c5      	b.n	801cdce <__lshift+0x4a>
 801ce42:	3904      	subs	r1, #4
 801ce44:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce48:	f841 2f04 	str.w	r2, [r1, #4]!
 801ce4c:	459c      	cmp	ip, r3
 801ce4e:	d8f9      	bhi.n	801ce44 <__lshift+0xc0>
 801ce50:	e7ea      	b.n	801ce28 <__lshift+0xa4>
 801ce52:	bf00      	nop
 801ce54:	080204b0 	.word	0x080204b0
 801ce58:	080204c1 	.word	0x080204c1

0801ce5c <__mcmp>:
 801ce5c:	690a      	ldr	r2, [r1, #16]
 801ce5e:	4603      	mov	r3, r0
 801ce60:	6900      	ldr	r0, [r0, #16]
 801ce62:	1a80      	subs	r0, r0, r2
 801ce64:	b530      	push	{r4, r5, lr}
 801ce66:	d10e      	bne.n	801ce86 <__mcmp+0x2a>
 801ce68:	3314      	adds	r3, #20
 801ce6a:	3114      	adds	r1, #20
 801ce6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ce70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ce74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ce78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ce7c:	4295      	cmp	r5, r2
 801ce7e:	d003      	beq.n	801ce88 <__mcmp+0x2c>
 801ce80:	d205      	bcs.n	801ce8e <__mcmp+0x32>
 801ce82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ce86:	bd30      	pop	{r4, r5, pc}
 801ce88:	42a3      	cmp	r3, r4
 801ce8a:	d3f3      	bcc.n	801ce74 <__mcmp+0x18>
 801ce8c:	e7fb      	b.n	801ce86 <__mcmp+0x2a>
 801ce8e:	2001      	movs	r0, #1
 801ce90:	e7f9      	b.n	801ce86 <__mcmp+0x2a>
	...

0801ce94 <__mdiff>:
 801ce94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce98:	4689      	mov	r9, r1
 801ce9a:	4606      	mov	r6, r0
 801ce9c:	4611      	mov	r1, r2
 801ce9e:	4648      	mov	r0, r9
 801cea0:	4614      	mov	r4, r2
 801cea2:	f7ff ffdb 	bl	801ce5c <__mcmp>
 801cea6:	1e05      	subs	r5, r0, #0
 801cea8:	d112      	bne.n	801ced0 <__mdiff+0x3c>
 801ceaa:	4629      	mov	r1, r5
 801ceac:	4630      	mov	r0, r6
 801ceae:	f7ff fd11 	bl	801c8d4 <_Balloc>
 801ceb2:	4602      	mov	r2, r0
 801ceb4:	b928      	cbnz	r0, 801cec2 <__mdiff+0x2e>
 801ceb6:	4b3f      	ldr	r3, [pc, #252]	@ (801cfb4 <__mdiff+0x120>)
 801ceb8:	f240 2137 	movw	r1, #567	@ 0x237
 801cebc:	483e      	ldr	r0, [pc, #248]	@ (801cfb8 <__mdiff+0x124>)
 801cebe:	f7fe fe47 	bl	801bb50 <__assert_func>
 801cec2:	2301      	movs	r3, #1
 801cec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cec8:	4610      	mov	r0, r2
 801ceca:	b003      	add	sp, #12
 801cecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ced0:	bfbc      	itt	lt
 801ced2:	464b      	movlt	r3, r9
 801ced4:	46a1      	movlt	r9, r4
 801ced6:	4630      	mov	r0, r6
 801ced8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801cedc:	bfba      	itte	lt
 801cede:	461c      	movlt	r4, r3
 801cee0:	2501      	movlt	r5, #1
 801cee2:	2500      	movge	r5, #0
 801cee4:	f7ff fcf6 	bl	801c8d4 <_Balloc>
 801cee8:	4602      	mov	r2, r0
 801ceea:	b918      	cbnz	r0, 801cef4 <__mdiff+0x60>
 801ceec:	4b31      	ldr	r3, [pc, #196]	@ (801cfb4 <__mdiff+0x120>)
 801ceee:	f240 2145 	movw	r1, #581	@ 0x245
 801cef2:	e7e3      	b.n	801cebc <__mdiff+0x28>
 801cef4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801cef8:	6926      	ldr	r6, [r4, #16]
 801cefa:	60c5      	str	r5, [r0, #12]
 801cefc:	f109 0310 	add.w	r3, r9, #16
 801cf00:	f109 0514 	add.w	r5, r9, #20
 801cf04:	f104 0e14 	add.w	lr, r4, #20
 801cf08:	f100 0b14 	add.w	fp, r0, #20
 801cf0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801cf10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801cf14:	9301      	str	r3, [sp, #4]
 801cf16:	46d9      	mov	r9, fp
 801cf18:	f04f 0c00 	mov.w	ip, #0
 801cf1c:	9b01      	ldr	r3, [sp, #4]
 801cf1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801cf22:	f853 af04 	ldr.w	sl, [r3, #4]!
 801cf26:	9301      	str	r3, [sp, #4]
 801cf28:	fa1f f38a 	uxth.w	r3, sl
 801cf2c:	4619      	mov	r1, r3
 801cf2e:	b283      	uxth	r3, r0
 801cf30:	1acb      	subs	r3, r1, r3
 801cf32:	0c00      	lsrs	r0, r0, #16
 801cf34:	4463      	add	r3, ip
 801cf36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801cf3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801cf3e:	b29b      	uxth	r3, r3
 801cf40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801cf44:	4576      	cmp	r6, lr
 801cf46:	f849 3b04 	str.w	r3, [r9], #4
 801cf4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801cf4e:	d8e5      	bhi.n	801cf1c <__mdiff+0x88>
 801cf50:	1b33      	subs	r3, r6, r4
 801cf52:	3b15      	subs	r3, #21
 801cf54:	f023 0303 	bic.w	r3, r3, #3
 801cf58:	3415      	adds	r4, #21
 801cf5a:	3304      	adds	r3, #4
 801cf5c:	42a6      	cmp	r6, r4
 801cf5e:	bf38      	it	cc
 801cf60:	2304      	movcc	r3, #4
 801cf62:	441d      	add	r5, r3
 801cf64:	445b      	add	r3, fp
 801cf66:	461e      	mov	r6, r3
 801cf68:	462c      	mov	r4, r5
 801cf6a:	4544      	cmp	r4, r8
 801cf6c:	d30e      	bcc.n	801cf8c <__mdiff+0xf8>
 801cf6e:	f108 0103 	add.w	r1, r8, #3
 801cf72:	1b49      	subs	r1, r1, r5
 801cf74:	f021 0103 	bic.w	r1, r1, #3
 801cf78:	3d03      	subs	r5, #3
 801cf7a:	45a8      	cmp	r8, r5
 801cf7c:	bf38      	it	cc
 801cf7e:	2100      	movcc	r1, #0
 801cf80:	440b      	add	r3, r1
 801cf82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cf86:	b191      	cbz	r1, 801cfae <__mdiff+0x11a>
 801cf88:	6117      	str	r7, [r2, #16]
 801cf8a:	e79d      	b.n	801cec8 <__mdiff+0x34>
 801cf8c:	f854 1b04 	ldr.w	r1, [r4], #4
 801cf90:	46e6      	mov	lr, ip
 801cf92:	0c08      	lsrs	r0, r1, #16
 801cf94:	fa1c fc81 	uxtah	ip, ip, r1
 801cf98:	4471      	add	r1, lr
 801cf9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801cf9e:	b289      	uxth	r1, r1
 801cfa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801cfa4:	f846 1b04 	str.w	r1, [r6], #4
 801cfa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801cfac:	e7dd      	b.n	801cf6a <__mdiff+0xd6>
 801cfae:	3f01      	subs	r7, #1
 801cfb0:	e7e7      	b.n	801cf82 <__mdiff+0xee>
 801cfb2:	bf00      	nop
 801cfb4:	080204b0 	.word	0x080204b0
 801cfb8:	080204c1 	.word	0x080204c1

0801cfbc <__ulp>:
 801cfbc:	b082      	sub	sp, #8
 801cfbe:	ed8d 0b00 	vstr	d0, [sp]
 801cfc2:	9a01      	ldr	r2, [sp, #4]
 801cfc4:	4b0f      	ldr	r3, [pc, #60]	@ (801d004 <__ulp+0x48>)
 801cfc6:	4013      	ands	r3, r2
 801cfc8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	dc08      	bgt.n	801cfe2 <__ulp+0x26>
 801cfd0:	425b      	negs	r3, r3
 801cfd2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801cfd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801cfda:	da04      	bge.n	801cfe6 <__ulp+0x2a>
 801cfdc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801cfe0:	4113      	asrs	r3, r2
 801cfe2:	2200      	movs	r2, #0
 801cfe4:	e008      	b.n	801cff8 <__ulp+0x3c>
 801cfe6:	f1a2 0314 	sub.w	r3, r2, #20
 801cfea:	2b1e      	cmp	r3, #30
 801cfec:	bfda      	itte	le
 801cfee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801cff2:	40da      	lsrle	r2, r3
 801cff4:	2201      	movgt	r2, #1
 801cff6:	2300      	movs	r3, #0
 801cff8:	4619      	mov	r1, r3
 801cffa:	4610      	mov	r0, r2
 801cffc:	ec41 0b10 	vmov	d0, r0, r1
 801d000:	b002      	add	sp, #8
 801d002:	4770      	bx	lr
 801d004:	7ff00000 	.word	0x7ff00000

0801d008 <__b2d>:
 801d008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d00c:	6906      	ldr	r6, [r0, #16]
 801d00e:	f100 0814 	add.w	r8, r0, #20
 801d012:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d016:	1f37      	subs	r7, r6, #4
 801d018:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d01c:	4610      	mov	r0, r2
 801d01e:	f7ff fd4b 	bl	801cab8 <__hi0bits>
 801d022:	f1c0 0320 	rsb	r3, r0, #32
 801d026:	280a      	cmp	r0, #10
 801d028:	600b      	str	r3, [r1, #0]
 801d02a:	491b      	ldr	r1, [pc, #108]	@ (801d098 <__b2d+0x90>)
 801d02c:	dc15      	bgt.n	801d05a <__b2d+0x52>
 801d02e:	f1c0 0c0b 	rsb	ip, r0, #11
 801d032:	fa22 f30c 	lsr.w	r3, r2, ip
 801d036:	45b8      	cmp	r8, r7
 801d038:	ea43 0501 	orr.w	r5, r3, r1
 801d03c:	bf34      	ite	cc
 801d03e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d042:	2300      	movcs	r3, #0
 801d044:	3015      	adds	r0, #21
 801d046:	fa02 f000 	lsl.w	r0, r2, r0
 801d04a:	fa23 f30c 	lsr.w	r3, r3, ip
 801d04e:	4303      	orrs	r3, r0
 801d050:	461c      	mov	r4, r3
 801d052:	ec45 4b10 	vmov	d0, r4, r5
 801d056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d05a:	45b8      	cmp	r8, r7
 801d05c:	bf3a      	itte	cc
 801d05e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d062:	f1a6 0708 	subcc.w	r7, r6, #8
 801d066:	2300      	movcs	r3, #0
 801d068:	380b      	subs	r0, #11
 801d06a:	d012      	beq.n	801d092 <__b2d+0x8a>
 801d06c:	f1c0 0120 	rsb	r1, r0, #32
 801d070:	fa23 f401 	lsr.w	r4, r3, r1
 801d074:	4082      	lsls	r2, r0
 801d076:	4322      	orrs	r2, r4
 801d078:	4547      	cmp	r7, r8
 801d07a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d07e:	bf8c      	ite	hi
 801d080:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d084:	2200      	movls	r2, #0
 801d086:	4083      	lsls	r3, r0
 801d088:	40ca      	lsrs	r2, r1
 801d08a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d08e:	4313      	orrs	r3, r2
 801d090:	e7de      	b.n	801d050 <__b2d+0x48>
 801d092:	ea42 0501 	orr.w	r5, r2, r1
 801d096:	e7db      	b.n	801d050 <__b2d+0x48>
 801d098:	3ff00000 	.word	0x3ff00000

0801d09c <__d2b>:
 801d09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d0a0:	460f      	mov	r7, r1
 801d0a2:	2101      	movs	r1, #1
 801d0a4:	ec59 8b10 	vmov	r8, r9, d0
 801d0a8:	4616      	mov	r6, r2
 801d0aa:	f7ff fc13 	bl	801c8d4 <_Balloc>
 801d0ae:	4604      	mov	r4, r0
 801d0b0:	b930      	cbnz	r0, 801d0c0 <__d2b+0x24>
 801d0b2:	4602      	mov	r2, r0
 801d0b4:	4b23      	ldr	r3, [pc, #140]	@ (801d144 <__d2b+0xa8>)
 801d0b6:	4824      	ldr	r0, [pc, #144]	@ (801d148 <__d2b+0xac>)
 801d0b8:	f240 310f 	movw	r1, #783	@ 0x30f
 801d0bc:	f7fe fd48 	bl	801bb50 <__assert_func>
 801d0c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d0c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d0c8:	b10d      	cbz	r5, 801d0ce <__d2b+0x32>
 801d0ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d0ce:	9301      	str	r3, [sp, #4]
 801d0d0:	f1b8 0300 	subs.w	r3, r8, #0
 801d0d4:	d023      	beq.n	801d11e <__d2b+0x82>
 801d0d6:	4668      	mov	r0, sp
 801d0d8:	9300      	str	r3, [sp, #0]
 801d0da:	f7ff fd0c 	bl	801caf6 <__lo0bits>
 801d0de:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d0e2:	b1d0      	cbz	r0, 801d11a <__d2b+0x7e>
 801d0e4:	f1c0 0320 	rsb	r3, r0, #32
 801d0e8:	fa02 f303 	lsl.w	r3, r2, r3
 801d0ec:	430b      	orrs	r3, r1
 801d0ee:	40c2      	lsrs	r2, r0
 801d0f0:	6163      	str	r3, [r4, #20]
 801d0f2:	9201      	str	r2, [sp, #4]
 801d0f4:	9b01      	ldr	r3, [sp, #4]
 801d0f6:	61a3      	str	r3, [r4, #24]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	bf0c      	ite	eq
 801d0fc:	2201      	moveq	r2, #1
 801d0fe:	2202      	movne	r2, #2
 801d100:	6122      	str	r2, [r4, #16]
 801d102:	b1a5      	cbz	r5, 801d12e <__d2b+0x92>
 801d104:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d108:	4405      	add	r5, r0
 801d10a:	603d      	str	r5, [r7, #0]
 801d10c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d110:	6030      	str	r0, [r6, #0]
 801d112:	4620      	mov	r0, r4
 801d114:	b003      	add	sp, #12
 801d116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d11a:	6161      	str	r1, [r4, #20]
 801d11c:	e7ea      	b.n	801d0f4 <__d2b+0x58>
 801d11e:	a801      	add	r0, sp, #4
 801d120:	f7ff fce9 	bl	801caf6 <__lo0bits>
 801d124:	9b01      	ldr	r3, [sp, #4]
 801d126:	6163      	str	r3, [r4, #20]
 801d128:	3020      	adds	r0, #32
 801d12a:	2201      	movs	r2, #1
 801d12c:	e7e8      	b.n	801d100 <__d2b+0x64>
 801d12e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d132:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d136:	6038      	str	r0, [r7, #0]
 801d138:	6918      	ldr	r0, [r3, #16]
 801d13a:	f7ff fcbd 	bl	801cab8 <__hi0bits>
 801d13e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d142:	e7e5      	b.n	801d110 <__d2b+0x74>
 801d144:	080204b0 	.word	0x080204b0
 801d148:	080204c1 	.word	0x080204c1

0801d14c <__ratio>:
 801d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d150:	b085      	sub	sp, #20
 801d152:	e9cd 1000 	strd	r1, r0, [sp]
 801d156:	a902      	add	r1, sp, #8
 801d158:	f7ff ff56 	bl	801d008 <__b2d>
 801d15c:	9800      	ldr	r0, [sp, #0]
 801d15e:	a903      	add	r1, sp, #12
 801d160:	ec55 4b10 	vmov	r4, r5, d0
 801d164:	f7ff ff50 	bl	801d008 <__b2d>
 801d168:	9b01      	ldr	r3, [sp, #4]
 801d16a:	6919      	ldr	r1, [r3, #16]
 801d16c:	9b00      	ldr	r3, [sp, #0]
 801d16e:	691b      	ldr	r3, [r3, #16]
 801d170:	1ac9      	subs	r1, r1, r3
 801d172:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d176:	1a9b      	subs	r3, r3, r2
 801d178:	ec5b ab10 	vmov	sl, fp, d0
 801d17c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d180:	2b00      	cmp	r3, #0
 801d182:	bfce      	itee	gt
 801d184:	462a      	movgt	r2, r5
 801d186:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d18a:	465a      	movle	r2, fp
 801d18c:	462f      	mov	r7, r5
 801d18e:	46d9      	mov	r9, fp
 801d190:	bfcc      	ite	gt
 801d192:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d196:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d19a:	464b      	mov	r3, r9
 801d19c:	4652      	mov	r2, sl
 801d19e:	4620      	mov	r0, r4
 801d1a0:	4639      	mov	r1, r7
 801d1a2:	f7e3 fb83 	bl	80008ac <__aeabi_ddiv>
 801d1a6:	ec41 0b10 	vmov	d0, r0, r1
 801d1aa:	b005      	add	sp, #20
 801d1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d1b0 <__copybits>:
 801d1b0:	3901      	subs	r1, #1
 801d1b2:	b570      	push	{r4, r5, r6, lr}
 801d1b4:	1149      	asrs	r1, r1, #5
 801d1b6:	6914      	ldr	r4, [r2, #16]
 801d1b8:	3101      	adds	r1, #1
 801d1ba:	f102 0314 	add.w	r3, r2, #20
 801d1be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d1c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d1c6:	1f05      	subs	r5, r0, #4
 801d1c8:	42a3      	cmp	r3, r4
 801d1ca:	d30c      	bcc.n	801d1e6 <__copybits+0x36>
 801d1cc:	1aa3      	subs	r3, r4, r2
 801d1ce:	3b11      	subs	r3, #17
 801d1d0:	f023 0303 	bic.w	r3, r3, #3
 801d1d4:	3211      	adds	r2, #17
 801d1d6:	42a2      	cmp	r2, r4
 801d1d8:	bf88      	it	hi
 801d1da:	2300      	movhi	r3, #0
 801d1dc:	4418      	add	r0, r3
 801d1de:	2300      	movs	r3, #0
 801d1e0:	4288      	cmp	r0, r1
 801d1e2:	d305      	bcc.n	801d1f0 <__copybits+0x40>
 801d1e4:	bd70      	pop	{r4, r5, r6, pc}
 801d1e6:	f853 6b04 	ldr.w	r6, [r3], #4
 801d1ea:	f845 6f04 	str.w	r6, [r5, #4]!
 801d1ee:	e7eb      	b.n	801d1c8 <__copybits+0x18>
 801d1f0:	f840 3b04 	str.w	r3, [r0], #4
 801d1f4:	e7f4      	b.n	801d1e0 <__copybits+0x30>

0801d1f6 <__any_on>:
 801d1f6:	f100 0214 	add.w	r2, r0, #20
 801d1fa:	6900      	ldr	r0, [r0, #16]
 801d1fc:	114b      	asrs	r3, r1, #5
 801d1fe:	4298      	cmp	r0, r3
 801d200:	b510      	push	{r4, lr}
 801d202:	db11      	blt.n	801d228 <__any_on+0x32>
 801d204:	dd0a      	ble.n	801d21c <__any_on+0x26>
 801d206:	f011 011f 	ands.w	r1, r1, #31
 801d20a:	d007      	beq.n	801d21c <__any_on+0x26>
 801d20c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d210:	fa24 f001 	lsr.w	r0, r4, r1
 801d214:	fa00 f101 	lsl.w	r1, r0, r1
 801d218:	428c      	cmp	r4, r1
 801d21a:	d10b      	bne.n	801d234 <__any_on+0x3e>
 801d21c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d220:	4293      	cmp	r3, r2
 801d222:	d803      	bhi.n	801d22c <__any_on+0x36>
 801d224:	2000      	movs	r0, #0
 801d226:	bd10      	pop	{r4, pc}
 801d228:	4603      	mov	r3, r0
 801d22a:	e7f7      	b.n	801d21c <__any_on+0x26>
 801d22c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d230:	2900      	cmp	r1, #0
 801d232:	d0f5      	beq.n	801d220 <__any_on+0x2a>
 801d234:	2001      	movs	r0, #1
 801d236:	e7f6      	b.n	801d226 <__any_on+0x30>

0801d238 <_malloc_usable_size_r>:
 801d238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d23c:	1f18      	subs	r0, r3, #4
 801d23e:	2b00      	cmp	r3, #0
 801d240:	bfbc      	itt	lt
 801d242:	580b      	ldrlt	r3, [r1, r0]
 801d244:	18c0      	addlt	r0, r0, r3
 801d246:	4770      	bx	lr

0801d248 <sulp>:
 801d248:	b570      	push	{r4, r5, r6, lr}
 801d24a:	4604      	mov	r4, r0
 801d24c:	460d      	mov	r5, r1
 801d24e:	ec45 4b10 	vmov	d0, r4, r5
 801d252:	4616      	mov	r6, r2
 801d254:	f7ff feb2 	bl	801cfbc <__ulp>
 801d258:	ec51 0b10 	vmov	r0, r1, d0
 801d25c:	b17e      	cbz	r6, 801d27e <sulp+0x36>
 801d25e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d262:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801d266:	2b00      	cmp	r3, #0
 801d268:	dd09      	ble.n	801d27e <sulp+0x36>
 801d26a:	051b      	lsls	r3, r3, #20
 801d26c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801d270:	2400      	movs	r4, #0
 801d272:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801d276:	4622      	mov	r2, r4
 801d278:	462b      	mov	r3, r5
 801d27a:	f7e3 f9ed 	bl	8000658 <__aeabi_dmul>
 801d27e:	ec41 0b10 	vmov	d0, r0, r1
 801d282:	bd70      	pop	{r4, r5, r6, pc}
 801d284:	0000      	movs	r0, r0
	...

0801d288 <_strtod_l>:
 801d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d28c:	b09f      	sub	sp, #124	@ 0x7c
 801d28e:	460c      	mov	r4, r1
 801d290:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d292:	2200      	movs	r2, #0
 801d294:	921a      	str	r2, [sp, #104]	@ 0x68
 801d296:	9005      	str	r0, [sp, #20]
 801d298:	f04f 0a00 	mov.w	sl, #0
 801d29c:	f04f 0b00 	mov.w	fp, #0
 801d2a0:	460a      	mov	r2, r1
 801d2a2:	9219      	str	r2, [sp, #100]	@ 0x64
 801d2a4:	7811      	ldrb	r1, [r2, #0]
 801d2a6:	292b      	cmp	r1, #43	@ 0x2b
 801d2a8:	d04a      	beq.n	801d340 <_strtod_l+0xb8>
 801d2aa:	d838      	bhi.n	801d31e <_strtod_l+0x96>
 801d2ac:	290d      	cmp	r1, #13
 801d2ae:	d832      	bhi.n	801d316 <_strtod_l+0x8e>
 801d2b0:	2908      	cmp	r1, #8
 801d2b2:	d832      	bhi.n	801d31a <_strtod_l+0x92>
 801d2b4:	2900      	cmp	r1, #0
 801d2b6:	d03b      	beq.n	801d330 <_strtod_l+0xa8>
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d2bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801d2be:	782a      	ldrb	r2, [r5, #0]
 801d2c0:	2a30      	cmp	r2, #48	@ 0x30
 801d2c2:	f040 80b3 	bne.w	801d42c <_strtod_l+0x1a4>
 801d2c6:	786a      	ldrb	r2, [r5, #1]
 801d2c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d2cc:	2a58      	cmp	r2, #88	@ 0x58
 801d2ce:	d16e      	bne.n	801d3ae <_strtod_l+0x126>
 801d2d0:	9302      	str	r3, [sp, #8]
 801d2d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2d4:	9301      	str	r3, [sp, #4]
 801d2d6:	ab1a      	add	r3, sp, #104	@ 0x68
 801d2d8:	9300      	str	r3, [sp, #0]
 801d2da:	4a8e      	ldr	r2, [pc, #568]	@ (801d514 <_strtod_l+0x28c>)
 801d2dc:	9805      	ldr	r0, [sp, #20]
 801d2de:	ab1b      	add	r3, sp, #108	@ 0x6c
 801d2e0:	a919      	add	r1, sp, #100	@ 0x64
 801d2e2:	f001 fa8b 	bl	801e7fc <__gethex>
 801d2e6:	f010 060f 	ands.w	r6, r0, #15
 801d2ea:	4604      	mov	r4, r0
 801d2ec:	d005      	beq.n	801d2fa <_strtod_l+0x72>
 801d2ee:	2e06      	cmp	r6, #6
 801d2f0:	d128      	bne.n	801d344 <_strtod_l+0xbc>
 801d2f2:	3501      	adds	r5, #1
 801d2f4:	2300      	movs	r3, #0
 801d2f6:	9519      	str	r5, [sp, #100]	@ 0x64
 801d2f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d2fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	f040 858e 	bne.w	801de1e <_strtod_l+0xb96>
 801d302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d304:	b1cb      	cbz	r3, 801d33a <_strtod_l+0xb2>
 801d306:	4652      	mov	r2, sl
 801d308:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801d30c:	ec43 2b10 	vmov	d0, r2, r3
 801d310:	b01f      	add	sp, #124	@ 0x7c
 801d312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d316:	2920      	cmp	r1, #32
 801d318:	d1ce      	bne.n	801d2b8 <_strtod_l+0x30>
 801d31a:	3201      	adds	r2, #1
 801d31c:	e7c1      	b.n	801d2a2 <_strtod_l+0x1a>
 801d31e:	292d      	cmp	r1, #45	@ 0x2d
 801d320:	d1ca      	bne.n	801d2b8 <_strtod_l+0x30>
 801d322:	2101      	movs	r1, #1
 801d324:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d326:	1c51      	adds	r1, r2, #1
 801d328:	9119      	str	r1, [sp, #100]	@ 0x64
 801d32a:	7852      	ldrb	r2, [r2, #1]
 801d32c:	2a00      	cmp	r2, #0
 801d32e:	d1c5      	bne.n	801d2bc <_strtod_l+0x34>
 801d330:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d332:	9419      	str	r4, [sp, #100]	@ 0x64
 801d334:	2b00      	cmp	r3, #0
 801d336:	f040 8570 	bne.w	801de1a <_strtod_l+0xb92>
 801d33a:	4652      	mov	r2, sl
 801d33c:	465b      	mov	r3, fp
 801d33e:	e7e5      	b.n	801d30c <_strtod_l+0x84>
 801d340:	2100      	movs	r1, #0
 801d342:	e7ef      	b.n	801d324 <_strtod_l+0x9c>
 801d344:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d346:	b13a      	cbz	r2, 801d358 <_strtod_l+0xd0>
 801d348:	2135      	movs	r1, #53	@ 0x35
 801d34a:	a81c      	add	r0, sp, #112	@ 0x70
 801d34c:	f7ff ff30 	bl	801d1b0 <__copybits>
 801d350:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d352:	9805      	ldr	r0, [sp, #20]
 801d354:	f7ff fafe 	bl	801c954 <_Bfree>
 801d358:	3e01      	subs	r6, #1
 801d35a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d35c:	2e04      	cmp	r6, #4
 801d35e:	d806      	bhi.n	801d36e <_strtod_l+0xe6>
 801d360:	e8df f006 	tbb	[pc, r6]
 801d364:	201d0314 	.word	0x201d0314
 801d368:	14          	.byte	0x14
 801d369:	00          	.byte	0x00
 801d36a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801d36e:	05e1      	lsls	r1, r4, #23
 801d370:	bf48      	it	mi
 801d372:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801d376:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d37a:	0d1b      	lsrs	r3, r3, #20
 801d37c:	051b      	lsls	r3, r3, #20
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d1bb      	bne.n	801d2fa <_strtod_l+0x72>
 801d382:	f7fe fb9b 	bl	801babc <__errno>
 801d386:	2322      	movs	r3, #34	@ 0x22
 801d388:	6003      	str	r3, [r0, #0]
 801d38a:	e7b6      	b.n	801d2fa <_strtod_l+0x72>
 801d38c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801d390:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801d394:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801d398:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801d39c:	e7e7      	b.n	801d36e <_strtod_l+0xe6>
 801d39e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801d51c <_strtod_l+0x294>
 801d3a2:	e7e4      	b.n	801d36e <_strtod_l+0xe6>
 801d3a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801d3a8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801d3ac:	e7df      	b.n	801d36e <_strtod_l+0xe6>
 801d3ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d3b0:	1c5a      	adds	r2, r3, #1
 801d3b2:	9219      	str	r2, [sp, #100]	@ 0x64
 801d3b4:	785b      	ldrb	r3, [r3, #1]
 801d3b6:	2b30      	cmp	r3, #48	@ 0x30
 801d3b8:	d0f9      	beq.n	801d3ae <_strtod_l+0x126>
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d09d      	beq.n	801d2fa <_strtod_l+0x72>
 801d3be:	2301      	movs	r3, #1
 801d3c0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d3c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d3c4:	930c      	str	r3, [sp, #48]	@ 0x30
 801d3c6:	2300      	movs	r3, #0
 801d3c8:	9308      	str	r3, [sp, #32]
 801d3ca:	930a      	str	r3, [sp, #40]	@ 0x28
 801d3cc:	461f      	mov	r7, r3
 801d3ce:	220a      	movs	r2, #10
 801d3d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d3d2:	7805      	ldrb	r5, [r0, #0]
 801d3d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801d3d8:	b2d9      	uxtb	r1, r3
 801d3da:	2909      	cmp	r1, #9
 801d3dc:	d928      	bls.n	801d430 <_strtod_l+0x1a8>
 801d3de:	494e      	ldr	r1, [pc, #312]	@ (801d518 <_strtod_l+0x290>)
 801d3e0:	2201      	movs	r2, #1
 801d3e2:	f7fe fa80 	bl	801b8e6 <strncmp>
 801d3e6:	2800      	cmp	r0, #0
 801d3e8:	d032      	beq.n	801d450 <_strtod_l+0x1c8>
 801d3ea:	2000      	movs	r0, #0
 801d3ec:	462a      	mov	r2, r5
 801d3ee:	4681      	mov	r9, r0
 801d3f0:	463d      	mov	r5, r7
 801d3f2:	4603      	mov	r3, r0
 801d3f4:	2a65      	cmp	r2, #101	@ 0x65
 801d3f6:	d001      	beq.n	801d3fc <_strtod_l+0x174>
 801d3f8:	2a45      	cmp	r2, #69	@ 0x45
 801d3fa:	d114      	bne.n	801d426 <_strtod_l+0x19e>
 801d3fc:	b91d      	cbnz	r5, 801d406 <_strtod_l+0x17e>
 801d3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d400:	4302      	orrs	r2, r0
 801d402:	d095      	beq.n	801d330 <_strtod_l+0xa8>
 801d404:	2500      	movs	r5, #0
 801d406:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801d408:	1c62      	adds	r2, r4, #1
 801d40a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d40c:	7862      	ldrb	r2, [r4, #1]
 801d40e:	2a2b      	cmp	r2, #43	@ 0x2b
 801d410:	d077      	beq.n	801d502 <_strtod_l+0x27a>
 801d412:	2a2d      	cmp	r2, #45	@ 0x2d
 801d414:	d07b      	beq.n	801d50e <_strtod_l+0x286>
 801d416:	f04f 0c00 	mov.w	ip, #0
 801d41a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801d41e:	2909      	cmp	r1, #9
 801d420:	f240 8082 	bls.w	801d528 <_strtod_l+0x2a0>
 801d424:	9419      	str	r4, [sp, #100]	@ 0x64
 801d426:	f04f 0800 	mov.w	r8, #0
 801d42a:	e0a2      	b.n	801d572 <_strtod_l+0x2ea>
 801d42c:	2300      	movs	r3, #0
 801d42e:	e7c7      	b.n	801d3c0 <_strtod_l+0x138>
 801d430:	2f08      	cmp	r7, #8
 801d432:	bfd5      	itete	le
 801d434:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801d436:	9908      	ldrgt	r1, [sp, #32]
 801d438:	fb02 3301 	mlale	r3, r2, r1, r3
 801d43c:	fb02 3301 	mlagt	r3, r2, r1, r3
 801d440:	f100 0001 	add.w	r0, r0, #1
 801d444:	bfd4      	ite	le
 801d446:	930a      	strle	r3, [sp, #40]	@ 0x28
 801d448:	9308      	strgt	r3, [sp, #32]
 801d44a:	3701      	adds	r7, #1
 801d44c:	9019      	str	r0, [sp, #100]	@ 0x64
 801d44e:	e7bf      	b.n	801d3d0 <_strtod_l+0x148>
 801d450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d452:	1c5a      	adds	r2, r3, #1
 801d454:	9219      	str	r2, [sp, #100]	@ 0x64
 801d456:	785a      	ldrb	r2, [r3, #1]
 801d458:	b37f      	cbz	r7, 801d4ba <_strtod_l+0x232>
 801d45a:	4681      	mov	r9, r0
 801d45c:	463d      	mov	r5, r7
 801d45e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801d462:	2b09      	cmp	r3, #9
 801d464:	d912      	bls.n	801d48c <_strtod_l+0x204>
 801d466:	2301      	movs	r3, #1
 801d468:	e7c4      	b.n	801d3f4 <_strtod_l+0x16c>
 801d46a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d46c:	1c5a      	adds	r2, r3, #1
 801d46e:	9219      	str	r2, [sp, #100]	@ 0x64
 801d470:	785a      	ldrb	r2, [r3, #1]
 801d472:	3001      	adds	r0, #1
 801d474:	2a30      	cmp	r2, #48	@ 0x30
 801d476:	d0f8      	beq.n	801d46a <_strtod_l+0x1e2>
 801d478:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801d47c:	2b08      	cmp	r3, #8
 801d47e:	f200 84d3 	bhi.w	801de28 <_strtod_l+0xba0>
 801d482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d484:	930c      	str	r3, [sp, #48]	@ 0x30
 801d486:	4681      	mov	r9, r0
 801d488:	2000      	movs	r0, #0
 801d48a:	4605      	mov	r5, r0
 801d48c:	3a30      	subs	r2, #48	@ 0x30
 801d48e:	f100 0301 	add.w	r3, r0, #1
 801d492:	d02a      	beq.n	801d4ea <_strtod_l+0x262>
 801d494:	4499      	add	r9, r3
 801d496:	eb00 0c05 	add.w	ip, r0, r5
 801d49a:	462b      	mov	r3, r5
 801d49c:	210a      	movs	r1, #10
 801d49e:	4563      	cmp	r3, ip
 801d4a0:	d10d      	bne.n	801d4be <_strtod_l+0x236>
 801d4a2:	1c69      	adds	r1, r5, #1
 801d4a4:	4401      	add	r1, r0
 801d4a6:	4428      	add	r0, r5
 801d4a8:	2808      	cmp	r0, #8
 801d4aa:	dc16      	bgt.n	801d4da <_strtod_l+0x252>
 801d4ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d4ae:	230a      	movs	r3, #10
 801d4b0:	fb03 2300 	mla	r3, r3, r0, r2
 801d4b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d4b6:	2300      	movs	r3, #0
 801d4b8:	e018      	b.n	801d4ec <_strtod_l+0x264>
 801d4ba:	4638      	mov	r0, r7
 801d4bc:	e7da      	b.n	801d474 <_strtod_l+0x1ec>
 801d4be:	2b08      	cmp	r3, #8
 801d4c0:	f103 0301 	add.w	r3, r3, #1
 801d4c4:	dc03      	bgt.n	801d4ce <_strtod_l+0x246>
 801d4c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801d4c8:	434e      	muls	r6, r1
 801d4ca:	960a      	str	r6, [sp, #40]	@ 0x28
 801d4cc:	e7e7      	b.n	801d49e <_strtod_l+0x216>
 801d4ce:	2b10      	cmp	r3, #16
 801d4d0:	bfde      	ittt	le
 801d4d2:	9e08      	ldrle	r6, [sp, #32]
 801d4d4:	434e      	mulle	r6, r1
 801d4d6:	9608      	strle	r6, [sp, #32]
 801d4d8:	e7e1      	b.n	801d49e <_strtod_l+0x216>
 801d4da:	280f      	cmp	r0, #15
 801d4dc:	dceb      	bgt.n	801d4b6 <_strtod_l+0x22e>
 801d4de:	9808      	ldr	r0, [sp, #32]
 801d4e0:	230a      	movs	r3, #10
 801d4e2:	fb03 2300 	mla	r3, r3, r0, r2
 801d4e6:	9308      	str	r3, [sp, #32]
 801d4e8:	e7e5      	b.n	801d4b6 <_strtod_l+0x22e>
 801d4ea:	4629      	mov	r1, r5
 801d4ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d4ee:	1c50      	adds	r0, r2, #1
 801d4f0:	9019      	str	r0, [sp, #100]	@ 0x64
 801d4f2:	7852      	ldrb	r2, [r2, #1]
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	460d      	mov	r5, r1
 801d4f8:	e7b1      	b.n	801d45e <_strtod_l+0x1d6>
 801d4fa:	f04f 0900 	mov.w	r9, #0
 801d4fe:	2301      	movs	r3, #1
 801d500:	e77d      	b.n	801d3fe <_strtod_l+0x176>
 801d502:	f04f 0c00 	mov.w	ip, #0
 801d506:	1ca2      	adds	r2, r4, #2
 801d508:	9219      	str	r2, [sp, #100]	@ 0x64
 801d50a:	78a2      	ldrb	r2, [r4, #2]
 801d50c:	e785      	b.n	801d41a <_strtod_l+0x192>
 801d50e:	f04f 0c01 	mov.w	ip, #1
 801d512:	e7f8      	b.n	801d506 <_strtod_l+0x27e>
 801d514:	08020630 	.word	0x08020630
 801d518:	08020618 	.word	0x08020618
 801d51c:	7ff00000 	.word	0x7ff00000
 801d520:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d522:	1c51      	adds	r1, r2, #1
 801d524:	9119      	str	r1, [sp, #100]	@ 0x64
 801d526:	7852      	ldrb	r2, [r2, #1]
 801d528:	2a30      	cmp	r2, #48	@ 0x30
 801d52a:	d0f9      	beq.n	801d520 <_strtod_l+0x298>
 801d52c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801d530:	2908      	cmp	r1, #8
 801d532:	f63f af78 	bhi.w	801d426 <_strtod_l+0x19e>
 801d536:	3a30      	subs	r2, #48	@ 0x30
 801d538:	920e      	str	r2, [sp, #56]	@ 0x38
 801d53a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d53c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d53e:	f04f 080a 	mov.w	r8, #10
 801d542:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d544:	1c56      	adds	r6, r2, #1
 801d546:	9619      	str	r6, [sp, #100]	@ 0x64
 801d548:	7852      	ldrb	r2, [r2, #1]
 801d54a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801d54e:	f1be 0f09 	cmp.w	lr, #9
 801d552:	d939      	bls.n	801d5c8 <_strtod_l+0x340>
 801d554:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d556:	1a76      	subs	r6, r6, r1
 801d558:	2e08      	cmp	r6, #8
 801d55a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801d55e:	dc03      	bgt.n	801d568 <_strtod_l+0x2e0>
 801d560:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d562:	4588      	cmp	r8, r1
 801d564:	bfa8      	it	ge
 801d566:	4688      	movge	r8, r1
 801d568:	f1bc 0f00 	cmp.w	ip, #0
 801d56c:	d001      	beq.n	801d572 <_strtod_l+0x2ea>
 801d56e:	f1c8 0800 	rsb	r8, r8, #0
 801d572:	2d00      	cmp	r5, #0
 801d574:	d14e      	bne.n	801d614 <_strtod_l+0x38c>
 801d576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d578:	4308      	orrs	r0, r1
 801d57a:	f47f aebe 	bne.w	801d2fa <_strtod_l+0x72>
 801d57e:	2b00      	cmp	r3, #0
 801d580:	f47f aed6 	bne.w	801d330 <_strtod_l+0xa8>
 801d584:	2a69      	cmp	r2, #105	@ 0x69
 801d586:	d028      	beq.n	801d5da <_strtod_l+0x352>
 801d588:	dc25      	bgt.n	801d5d6 <_strtod_l+0x34e>
 801d58a:	2a49      	cmp	r2, #73	@ 0x49
 801d58c:	d025      	beq.n	801d5da <_strtod_l+0x352>
 801d58e:	2a4e      	cmp	r2, #78	@ 0x4e
 801d590:	f47f aece 	bne.w	801d330 <_strtod_l+0xa8>
 801d594:	499b      	ldr	r1, [pc, #620]	@ (801d804 <_strtod_l+0x57c>)
 801d596:	a819      	add	r0, sp, #100	@ 0x64
 801d598:	f001 fb52 	bl	801ec40 <__match>
 801d59c:	2800      	cmp	r0, #0
 801d59e:	f43f aec7 	beq.w	801d330 <_strtod_l+0xa8>
 801d5a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d5a4:	781b      	ldrb	r3, [r3, #0]
 801d5a6:	2b28      	cmp	r3, #40	@ 0x28
 801d5a8:	d12e      	bne.n	801d608 <_strtod_l+0x380>
 801d5aa:	4997      	ldr	r1, [pc, #604]	@ (801d808 <_strtod_l+0x580>)
 801d5ac:	aa1c      	add	r2, sp, #112	@ 0x70
 801d5ae:	a819      	add	r0, sp, #100	@ 0x64
 801d5b0:	f001 fb5a 	bl	801ec68 <__hexnan>
 801d5b4:	2805      	cmp	r0, #5
 801d5b6:	d127      	bne.n	801d608 <_strtod_l+0x380>
 801d5b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d5ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801d5be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801d5c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801d5c6:	e698      	b.n	801d2fa <_strtod_l+0x72>
 801d5c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d5ca:	fb08 2101 	mla	r1, r8, r1, r2
 801d5ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801d5d2:	920e      	str	r2, [sp, #56]	@ 0x38
 801d5d4:	e7b5      	b.n	801d542 <_strtod_l+0x2ba>
 801d5d6:	2a6e      	cmp	r2, #110	@ 0x6e
 801d5d8:	e7da      	b.n	801d590 <_strtod_l+0x308>
 801d5da:	498c      	ldr	r1, [pc, #560]	@ (801d80c <_strtod_l+0x584>)
 801d5dc:	a819      	add	r0, sp, #100	@ 0x64
 801d5de:	f001 fb2f 	bl	801ec40 <__match>
 801d5e2:	2800      	cmp	r0, #0
 801d5e4:	f43f aea4 	beq.w	801d330 <_strtod_l+0xa8>
 801d5e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d5ea:	4989      	ldr	r1, [pc, #548]	@ (801d810 <_strtod_l+0x588>)
 801d5ec:	3b01      	subs	r3, #1
 801d5ee:	a819      	add	r0, sp, #100	@ 0x64
 801d5f0:	9319      	str	r3, [sp, #100]	@ 0x64
 801d5f2:	f001 fb25 	bl	801ec40 <__match>
 801d5f6:	b910      	cbnz	r0, 801d5fe <_strtod_l+0x376>
 801d5f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d5fa:	3301      	adds	r3, #1
 801d5fc:	9319      	str	r3, [sp, #100]	@ 0x64
 801d5fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801d820 <_strtod_l+0x598>
 801d602:	f04f 0a00 	mov.w	sl, #0
 801d606:	e678      	b.n	801d2fa <_strtod_l+0x72>
 801d608:	4882      	ldr	r0, [pc, #520]	@ (801d814 <_strtod_l+0x58c>)
 801d60a:	f001 f881 	bl	801e710 <nan>
 801d60e:	ec5b ab10 	vmov	sl, fp, d0
 801d612:	e672      	b.n	801d2fa <_strtod_l+0x72>
 801d614:	eba8 0309 	sub.w	r3, r8, r9
 801d618:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d61a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d61c:	2f00      	cmp	r7, #0
 801d61e:	bf08      	it	eq
 801d620:	462f      	moveq	r7, r5
 801d622:	2d10      	cmp	r5, #16
 801d624:	462c      	mov	r4, r5
 801d626:	bfa8      	it	ge
 801d628:	2410      	movge	r4, #16
 801d62a:	f7e2 ff9b 	bl	8000564 <__aeabi_ui2d>
 801d62e:	2d09      	cmp	r5, #9
 801d630:	4682      	mov	sl, r0
 801d632:	468b      	mov	fp, r1
 801d634:	dc13      	bgt.n	801d65e <_strtod_l+0x3d6>
 801d636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d638:	2b00      	cmp	r3, #0
 801d63a:	f43f ae5e 	beq.w	801d2fa <_strtod_l+0x72>
 801d63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d640:	dd78      	ble.n	801d734 <_strtod_l+0x4ac>
 801d642:	2b16      	cmp	r3, #22
 801d644:	dc5f      	bgt.n	801d706 <_strtod_l+0x47e>
 801d646:	4974      	ldr	r1, [pc, #464]	@ (801d818 <_strtod_l+0x590>)
 801d648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d64c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d650:	4652      	mov	r2, sl
 801d652:	465b      	mov	r3, fp
 801d654:	f7e3 f800 	bl	8000658 <__aeabi_dmul>
 801d658:	4682      	mov	sl, r0
 801d65a:	468b      	mov	fp, r1
 801d65c:	e64d      	b.n	801d2fa <_strtod_l+0x72>
 801d65e:	4b6e      	ldr	r3, [pc, #440]	@ (801d818 <_strtod_l+0x590>)
 801d660:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d664:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801d668:	f7e2 fff6 	bl	8000658 <__aeabi_dmul>
 801d66c:	4682      	mov	sl, r0
 801d66e:	9808      	ldr	r0, [sp, #32]
 801d670:	468b      	mov	fp, r1
 801d672:	f7e2 ff77 	bl	8000564 <__aeabi_ui2d>
 801d676:	4602      	mov	r2, r0
 801d678:	460b      	mov	r3, r1
 801d67a:	4650      	mov	r0, sl
 801d67c:	4659      	mov	r1, fp
 801d67e:	f7e2 fe35 	bl	80002ec <__adddf3>
 801d682:	2d0f      	cmp	r5, #15
 801d684:	4682      	mov	sl, r0
 801d686:	468b      	mov	fp, r1
 801d688:	ddd5      	ble.n	801d636 <_strtod_l+0x3ae>
 801d68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d68c:	1b2c      	subs	r4, r5, r4
 801d68e:	441c      	add	r4, r3
 801d690:	2c00      	cmp	r4, #0
 801d692:	f340 8096 	ble.w	801d7c2 <_strtod_l+0x53a>
 801d696:	f014 030f 	ands.w	r3, r4, #15
 801d69a:	d00a      	beq.n	801d6b2 <_strtod_l+0x42a>
 801d69c:	495e      	ldr	r1, [pc, #376]	@ (801d818 <_strtod_l+0x590>)
 801d69e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d6a2:	4652      	mov	r2, sl
 801d6a4:	465b      	mov	r3, fp
 801d6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d6aa:	f7e2 ffd5 	bl	8000658 <__aeabi_dmul>
 801d6ae:	4682      	mov	sl, r0
 801d6b0:	468b      	mov	fp, r1
 801d6b2:	f034 040f 	bics.w	r4, r4, #15
 801d6b6:	d073      	beq.n	801d7a0 <_strtod_l+0x518>
 801d6b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801d6bc:	dd48      	ble.n	801d750 <_strtod_l+0x4c8>
 801d6be:	2400      	movs	r4, #0
 801d6c0:	46a0      	mov	r8, r4
 801d6c2:	940a      	str	r4, [sp, #40]	@ 0x28
 801d6c4:	46a1      	mov	r9, r4
 801d6c6:	9a05      	ldr	r2, [sp, #20]
 801d6c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801d820 <_strtod_l+0x598>
 801d6cc:	2322      	movs	r3, #34	@ 0x22
 801d6ce:	6013      	str	r3, [r2, #0]
 801d6d0:	f04f 0a00 	mov.w	sl, #0
 801d6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	f43f ae0f 	beq.w	801d2fa <_strtod_l+0x72>
 801d6dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d6de:	9805      	ldr	r0, [sp, #20]
 801d6e0:	f7ff f938 	bl	801c954 <_Bfree>
 801d6e4:	9805      	ldr	r0, [sp, #20]
 801d6e6:	4649      	mov	r1, r9
 801d6e8:	f7ff f934 	bl	801c954 <_Bfree>
 801d6ec:	9805      	ldr	r0, [sp, #20]
 801d6ee:	4641      	mov	r1, r8
 801d6f0:	f7ff f930 	bl	801c954 <_Bfree>
 801d6f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d6f6:	9805      	ldr	r0, [sp, #20]
 801d6f8:	f7ff f92c 	bl	801c954 <_Bfree>
 801d6fc:	9805      	ldr	r0, [sp, #20]
 801d6fe:	4621      	mov	r1, r4
 801d700:	f7ff f928 	bl	801c954 <_Bfree>
 801d704:	e5f9      	b.n	801d2fa <_strtod_l+0x72>
 801d706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d708:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801d70c:	4293      	cmp	r3, r2
 801d70e:	dbbc      	blt.n	801d68a <_strtod_l+0x402>
 801d710:	4c41      	ldr	r4, [pc, #260]	@ (801d818 <_strtod_l+0x590>)
 801d712:	f1c5 050f 	rsb	r5, r5, #15
 801d716:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d71a:	4652      	mov	r2, sl
 801d71c:	465b      	mov	r3, fp
 801d71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d722:	f7e2 ff99 	bl	8000658 <__aeabi_dmul>
 801d726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d728:	1b5d      	subs	r5, r3, r5
 801d72a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d72e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d732:	e78f      	b.n	801d654 <_strtod_l+0x3cc>
 801d734:	3316      	adds	r3, #22
 801d736:	dba8      	blt.n	801d68a <_strtod_l+0x402>
 801d738:	4b37      	ldr	r3, [pc, #220]	@ (801d818 <_strtod_l+0x590>)
 801d73a:	eba9 0808 	sub.w	r8, r9, r8
 801d73e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801d742:	e9d8 2300 	ldrd	r2, r3, [r8]
 801d746:	4650      	mov	r0, sl
 801d748:	4659      	mov	r1, fp
 801d74a:	f7e3 f8af 	bl	80008ac <__aeabi_ddiv>
 801d74e:	e783      	b.n	801d658 <_strtod_l+0x3d0>
 801d750:	4b32      	ldr	r3, [pc, #200]	@ (801d81c <_strtod_l+0x594>)
 801d752:	9308      	str	r3, [sp, #32]
 801d754:	2300      	movs	r3, #0
 801d756:	1124      	asrs	r4, r4, #4
 801d758:	4650      	mov	r0, sl
 801d75a:	4659      	mov	r1, fp
 801d75c:	461e      	mov	r6, r3
 801d75e:	2c01      	cmp	r4, #1
 801d760:	dc21      	bgt.n	801d7a6 <_strtod_l+0x51e>
 801d762:	b10b      	cbz	r3, 801d768 <_strtod_l+0x4e0>
 801d764:	4682      	mov	sl, r0
 801d766:	468b      	mov	fp, r1
 801d768:	492c      	ldr	r1, [pc, #176]	@ (801d81c <_strtod_l+0x594>)
 801d76a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801d76e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801d772:	4652      	mov	r2, sl
 801d774:	465b      	mov	r3, fp
 801d776:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d77a:	f7e2 ff6d 	bl	8000658 <__aeabi_dmul>
 801d77e:	4b28      	ldr	r3, [pc, #160]	@ (801d820 <_strtod_l+0x598>)
 801d780:	460a      	mov	r2, r1
 801d782:	400b      	ands	r3, r1
 801d784:	4927      	ldr	r1, [pc, #156]	@ (801d824 <_strtod_l+0x59c>)
 801d786:	428b      	cmp	r3, r1
 801d788:	4682      	mov	sl, r0
 801d78a:	d898      	bhi.n	801d6be <_strtod_l+0x436>
 801d78c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801d790:	428b      	cmp	r3, r1
 801d792:	bf86      	itte	hi
 801d794:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801d828 <_strtod_l+0x5a0>
 801d798:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 801d79c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	9308      	str	r3, [sp, #32]
 801d7a4:	e07a      	b.n	801d89c <_strtod_l+0x614>
 801d7a6:	07e2      	lsls	r2, r4, #31
 801d7a8:	d505      	bpl.n	801d7b6 <_strtod_l+0x52e>
 801d7aa:	9b08      	ldr	r3, [sp, #32]
 801d7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7b0:	f7e2 ff52 	bl	8000658 <__aeabi_dmul>
 801d7b4:	2301      	movs	r3, #1
 801d7b6:	9a08      	ldr	r2, [sp, #32]
 801d7b8:	3208      	adds	r2, #8
 801d7ba:	3601      	adds	r6, #1
 801d7bc:	1064      	asrs	r4, r4, #1
 801d7be:	9208      	str	r2, [sp, #32]
 801d7c0:	e7cd      	b.n	801d75e <_strtod_l+0x4d6>
 801d7c2:	d0ed      	beq.n	801d7a0 <_strtod_l+0x518>
 801d7c4:	4264      	negs	r4, r4
 801d7c6:	f014 020f 	ands.w	r2, r4, #15
 801d7ca:	d00a      	beq.n	801d7e2 <_strtod_l+0x55a>
 801d7cc:	4b12      	ldr	r3, [pc, #72]	@ (801d818 <_strtod_l+0x590>)
 801d7ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d7d2:	4650      	mov	r0, sl
 801d7d4:	4659      	mov	r1, fp
 801d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7da:	f7e3 f867 	bl	80008ac <__aeabi_ddiv>
 801d7de:	4682      	mov	sl, r0
 801d7e0:	468b      	mov	fp, r1
 801d7e2:	1124      	asrs	r4, r4, #4
 801d7e4:	d0dc      	beq.n	801d7a0 <_strtod_l+0x518>
 801d7e6:	2c1f      	cmp	r4, #31
 801d7e8:	dd20      	ble.n	801d82c <_strtod_l+0x5a4>
 801d7ea:	2400      	movs	r4, #0
 801d7ec:	46a0      	mov	r8, r4
 801d7ee:	940a      	str	r4, [sp, #40]	@ 0x28
 801d7f0:	46a1      	mov	r9, r4
 801d7f2:	9a05      	ldr	r2, [sp, #20]
 801d7f4:	2322      	movs	r3, #34	@ 0x22
 801d7f6:	f04f 0a00 	mov.w	sl, #0
 801d7fa:	f04f 0b00 	mov.w	fp, #0
 801d7fe:	6013      	str	r3, [r2, #0]
 801d800:	e768      	b.n	801d6d4 <_strtod_l+0x44c>
 801d802:	bf00      	nop
 801d804:	080203e3 	.word	0x080203e3
 801d808:	0802061c 	.word	0x0802061c
 801d80c:	080203db 	.word	0x080203db
 801d810:	0802044e 	.word	0x0802044e
 801d814:	0802044a 	.word	0x0802044a
 801d818:	08020550 	.word	0x08020550
 801d81c:	08020528 	.word	0x08020528
 801d820:	7ff00000 	.word	0x7ff00000
 801d824:	7ca00000 	.word	0x7ca00000
 801d828:	7fefffff 	.word	0x7fefffff
 801d82c:	f014 0310 	ands.w	r3, r4, #16
 801d830:	bf18      	it	ne
 801d832:	236a      	movne	r3, #106	@ 0x6a
 801d834:	4ea9      	ldr	r6, [pc, #676]	@ (801dadc <_strtod_l+0x854>)
 801d836:	9308      	str	r3, [sp, #32]
 801d838:	4650      	mov	r0, sl
 801d83a:	4659      	mov	r1, fp
 801d83c:	2300      	movs	r3, #0
 801d83e:	07e2      	lsls	r2, r4, #31
 801d840:	d504      	bpl.n	801d84c <_strtod_l+0x5c4>
 801d842:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d846:	f7e2 ff07 	bl	8000658 <__aeabi_dmul>
 801d84a:	2301      	movs	r3, #1
 801d84c:	1064      	asrs	r4, r4, #1
 801d84e:	f106 0608 	add.w	r6, r6, #8
 801d852:	d1f4      	bne.n	801d83e <_strtod_l+0x5b6>
 801d854:	b10b      	cbz	r3, 801d85a <_strtod_l+0x5d2>
 801d856:	4682      	mov	sl, r0
 801d858:	468b      	mov	fp, r1
 801d85a:	9b08      	ldr	r3, [sp, #32]
 801d85c:	b1b3      	cbz	r3, 801d88c <_strtod_l+0x604>
 801d85e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801d862:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801d866:	2b00      	cmp	r3, #0
 801d868:	4659      	mov	r1, fp
 801d86a:	dd0f      	ble.n	801d88c <_strtod_l+0x604>
 801d86c:	2b1f      	cmp	r3, #31
 801d86e:	dd55      	ble.n	801d91c <_strtod_l+0x694>
 801d870:	2b34      	cmp	r3, #52	@ 0x34
 801d872:	bfde      	ittt	le
 801d874:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 801d878:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801d87c:	4093      	lslle	r3, r2
 801d87e:	f04f 0a00 	mov.w	sl, #0
 801d882:	bfcc      	ite	gt
 801d884:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801d888:	ea03 0b01 	andle.w	fp, r3, r1
 801d88c:	2200      	movs	r2, #0
 801d88e:	2300      	movs	r3, #0
 801d890:	4650      	mov	r0, sl
 801d892:	4659      	mov	r1, fp
 801d894:	f7e3 f948 	bl	8000b28 <__aeabi_dcmpeq>
 801d898:	2800      	cmp	r0, #0
 801d89a:	d1a6      	bne.n	801d7ea <_strtod_l+0x562>
 801d89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d89e:	9300      	str	r3, [sp, #0]
 801d8a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d8a2:	9805      	ldr	r0, [sp, #20]
 801d8a4:	462b      	mov	r3, r5
 801d8a6:	463a      	mov	r2, r7
 801d8a8:	f7ff f8bc 	bl	801ca24 <__s2b>
 801d8ac:	900a      	str	r0, [sp, #40]	@ 0x28
 801d8ae:	2800      	cmp	r0, #0
 801d8b0:	f43f af05 	beq.w	801d6be <_strtod_l+0x436>
 801d8b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d8b6:	2a00      	cmp	r2, #0
 801d8b8:	eba9 0308 	sub.w	r3, r9, r8
 801d8bc:	bfa8      	it	ge
 801d8be:	2300      	movge	r3, #0
 801d8c0:	9312      	str	r3, [sp, #72]	@ 0x48
 801d8c2:	2400      	movs	r4, #0
 801d8c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801d8c8:	9316      	str	r3, [sp, #88]	@ 0x58
 801d8ca:	46a0      	mov	r8, r4
 801d8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d8ce:	9805      	ldr	r0, [sp, #20]
 801d8d0:	6859      	ldr	r1, [r3, #4]
 801d8d2:	f7fe ffff 	bl	801c8d4 <_Balloc>
 801d8d6:	4681      	mov	r9, r0
 801d8d8:	2800      	cmp	r0, #0
 801d8da:	f43f aef4 	beq.w	801d6c6 <_strtod_l+0x43e>
 801d8de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d8e0:	691a      	ldr	r2, [r3, #16]
 801d8e2:	3202      	adds	r2, #2
 801d8e4:	f103 010c 	add.w	r1, r3, #12
 801d8e8:	0092      	lsls	r2, r2, #2
 801d8ea:	300c      	adds	r0, #12
 801d8ec:	f7fe f91b 	bl	801bb26 <memcpy>
 801d8f0:	ec4b ab10 	vmov	d0, sl, fp
 801d8f4:	9805      	ldr	r0, [sp, #20]
 801d8f6:	aa1c      	add	r2, sp, #112	@ 0x70
 801d8f8:	a91b      	add	r1, sp, #108	@ 0x6c
 801d8fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801d8fe:	f7ff fbcd 	bl	801d09c <__d2b>
 801d902:	901a      	str	r0, [sp, #104]	@ 0x68
 801d904:	2800      	cmp	r0, #0
 801d906:	f43f aede 	beq.w	801d6c6 <_strtod_l+0x43e>
 801d90a:	9805      	ldr	r0, [sp, #20]
 801d90c:	2101      	movs	r1, #1
 801d90e:	f7ff f91f 	bl	801cb50 <__i2b>
 801d912:	4680      	mov	r8, r0
 801d914:	b948      	cbnz	r0, 801d92a <_strtod_l+0x6a2>
 801d916:	f04f 0800 	mov.w	r8, #0
 801d91a:	e6d4      	b.n	801d6c6 <_strtod_l+0x43e>
 801d91c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d920:	fa02 f303 	lsl.w	r3, r2, r3
 801d924:	ea03 0a0a 	and.w	sl, r3, sl
 801d928:	e7b0      	b.n	801d88c <_strtod_l+0x604>
 801d92a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801d92c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801d92e:	2d00      	cmp	r5, #0
 801d930:	bfab      	itete	ge
 801d932:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801d934:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801d936:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801d938:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801d93a:	bfac      	ite	ge
 801d93c:	18ef      	addge	r7, r5, r3
 801d93e:	1b5e      	sublt	r6, r3, r5
 801d940:	9b08      	ldr	r3, [sp, #32]
 801d942:	1aed      	subs	r5, r5, r3
 801d944:	4415      	add	r5, r2
 801d946:	4b66      	ldr	r3, [pc, #408]	@ (801dae0 <_strtod_l+0x858>)
 801d948:	3d01      	subs	r5, #1
 801d94a:	429d      	cmp	r5, r3
 801d94c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801d950:	da50      	bge.n	801d9f4 <_strtod_l+0x76c>
 801d952:	1b5b      	subs	r3, r3, r5
 801d954:	2b1f      	cmp	r3, #31
 801d956:	eba2 0203 	sub.w	r2, r2, r3
 801d95a:	f04f 0101 	mov.w	r1, #1
 801d95e:	dc3d      	bgt.n	801d9dc <_strtod_l+0x754>
 801d960:	fa01 f303 	lsl.w	r3, r1, r3
 801d964:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d966:	2300      	movs	r3, #0
 801d968:	9310      	str	r3, [sp, #64]	@ 0x40
 801d96a:	18bd      	adds	r5, r7, r2
 801d96c:	9b08      	ldr	r3, [sp, #32]
 801d96e:	42af      	cmp	r7, r5
 801d970:	4416      	add	r6, r2
 801d972:	441e      	add	r6, r3
 801d974:	463b      	mov	r3, r7
 801d976:	bfa8      	it	ge
 801d978:	462b      	movge	r3, r5
 801d97a:	42b3      	cmp	r3, r6
 801d97c:	bfa8      	it	ge
 801d97e:	4633      	movge	r3, r6
 801d980:	2b00      	cmp	r3, #0
 801d982:	bfc2      	ittt	gt
 801d984:	1aed      	subgt	r5, r5, r3
 801d986:	1af6      	subgt	r6, r6, r3
 801d988:	1aff      	subgt	r7, r7, r3
 801d98a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	dd16      	ble.n	801d9be <_strtod_l+0x736>
 801d990:	4641      	mov	r1, r8
 801d992:	9805      	ldr	r0, [sp, #20]
 801d994:	461a      	mov	r2, r3
 801d996:	f7ff f99b 	bl	801ccd0 <__pow5mult>
 801d99a:	4680      	mov	r8, r0
 801d99c:	2800      	cmp	r0, #0
 801d99e:	d0ba      	beq.n	801d916 <_strtod_l+0x68e>
 801d9a0:	4601      	mov	r1, r0
 801d9a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d9a4:	9805      	ldr	r0, [sp, #20]
 801d9a6:	f7ff f8e9 	bl	801cb7c <__multiply>
 801d9aa:	900e      	str	r0, [sp, #56]	@ 0x38
 801d9ac:	2800      	cmp	r0, #0
 801d9ae:	f43f ae8a 	beq.w	801d6c6 <_strtod_l+0x43e>
 801d9b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d9b4:	9805      	ldr	r0, [sp, #20]
 801d9b6:	f7fe ffcd 	bl	801c954 <_Bfree>
 801d9ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9bc:	931a      	str	r3, [sp, #104]	@ 0x68
 801d9be:	2d00      	cmp	r5, #0
 801d9c0:	dc1d      	bgt.n	801d9fe <_strtod_l+0x776>
 801d9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	dd23      	ble.n	801da10 <_strtod_l+0x788>
 801d9c8:	4649      	mov	r1, r9
 801d9ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d9cc:	9805      	ldr	r0, [sp, #20]
 801d9ce:	f7ff f97f 	bl	801ccd0 <__pow5mult>
 801d9d2:	4681      	mov	r9, r0
 801d9d4:	b9e0      	cbnz	r0, 801da10 <_strtod_l+0x788>
 801d9d6:	f04f 0900 	mov.w	r9, #0
 801d9da:	e674      	b.n	801d6c6 <_strtod_l+0x43e>
 801d9dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801d9e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801d9e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801d9e8:	35e2      	adds	r5, #226	@ 0xe2
 801d9ea:	fa01 f305 	lsl.w	r3, r1, r5
 801d9ee:	9310      	str	r3, [sp, #64]	@ 0x40
 801d9f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801d9f2:	e7ba      	b.n	801d96a <_strtod_l+0x6e2>
 801d9f4:	2300      	movs	r3, #0
 801d9f6:	9310      	str	r3, [sp, #64]	@ 0x40
 801d9f8:	2301      	movs	r3, #1
 801d9fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d9fc:	e7b5      	b.n	801d96a <_strtod_l+0x6e2>
 801d9fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801da00:	9805      	ldr	r0, [sp, #20]
 801da02:	462a      	mov	r2, r5
 801da04:	f7ff f9be 	bl	801cd84 <__lshift>
 801da08:	901a      	str	r0, [sp, #104]	@ 0x68
 801da0a:	2800      	cmp	r0, #0
 801da0c:	d1d9      	bne.n	801d9c2 <_strtod_l+0x73a>
 801da0e:	e65a      	b.n	801d6c6 <_strtod_l+0x43e>
 801da10:	2e00      	cmp	r6, #0
 801da12:	dd07      	ble.n	801da24 <_strtod_l+0x79c>
 801da14:	4649      	mov	r1, r9
 801da16:	9805      	ldr	r0, [sp, #20]
 801da18:	4632      	mov	r2, r6
 801da1a:	f7ff f9b3 	bl	801cd84 <__lshift>
 801da1e:	4681      	mov	r9, r0
 801da20:	2800      	cmp	r0, #0
 801da22:	d0d8      	beq.n	801d9d6 <_strtod_l+0x74e>
 801da24:	2f00      	cmp	r7, #0
 801da26:	dd08      	ble.n	801da3a <_strtod_l+0x7b2>
 801da28:	4641      	mov	r1, r8
 801da2a:	9805      	ldr	r0, [sp, #20]
 801da2c:	463a      	mov	r2, r7
 801da2e:	f7ff f9a9 	bl	801cd84 <__lshift>
 801da32:	4680      	mov	r8, r0
 801da34:	2800      	cmp	r0, #0
 801da36:	f43f ae46 	beq.w	801d6c6 <_strtod_l+0x43e>
 801da3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801da3c:	9805      	ldr	r0, [sp, #20]
 801da3e:	464a      	mov	r2, r9
 801da40:	f7ff fa28 	bl	801ce94 <__mdiff>
 801da44:	4604      	mov	r4, r0
 801da46:	2800      	cmp	r0, #0
 801da48:	f43f ae3d 	beq.w	801d6c6 <_strtod_l+0x43e>
 801da4c:	68c3      	ldr	r3, [r0, #12]
 801da4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801da50:	2300      	movs	r3, #0
 801da52:	60c3      	str	r3, [r0, #12]
 801da54:	4641      	mov	r1, r8
 801da56:	f7ff fa01 	bl	801ce5c <__mcmp>
 801da5a:	2800      	cmp	r0, #0
 801da5c:	da46      	bge.n	801daec <_strtod_l+0x864>
 801da5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da60:	ea53 030a 	orrs.w	r3, r3, sl
 801da64:	d16c      	bne.n	801db40 <_strtod_l+0x8b8>
 801da66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d168      	bne.n	801db40 <_strtod_l+0x8b8>
 801da6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801da72:	0d1b      	lsrs	r3, r3, #20
 801da74:	051b      	lsls	r3, r3, #20
 801da76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801da7a:	d961      	bls.n	801db40 <_strtod_l+0x8b8>
 801da7c:	6963      	ldr	r3, [r4, #20]
 801da7e:	b913      	cbnz	r3, 801da86 <_strtod_l+0x7fe>
 801da80:	6923      	ldr	r3, [r4, #16]
 801da82:	2b01      	cmp	r3, #1
 801da84:	dd5c      	ble.n	801db40 <_strtod_l+0x8b8>
 801da86:	4621      	mov	r1, r4
 801da88:	2201      	movs	r2, #1
 801da8a:	9805      	ldr	r0, [sp, #20]
 801da8c:	f7ff f97a 	bl	801cd84 <__lshift>
 801da90:	4641      	mov	r1, r8
 801da92:	4604      	mov	r4, r0
 801da94:	f7ff f9e2 	bl	801ce5c <__mcmp>
 801da98:	2800      	cmp	r0, #0
 801da9a:	dd51      	ble.n	801db40 <_strtod_l+0x8b8>
 801da9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801daa0:	9a08      	ldr	r2, [sp, #32]
 801daa2:	0d1b      	lsrs	r3, r3, #20
 801daa4:	051b      	lsls	r3, r3, #20
 801daa6:	2a00      	cmp	r2, #0
 801daa8:	d06b      	beq.n	801db82 <_strtod_l+0x8fa>
 801daaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801daae:	d868      	bhi.n	801db82 <_strtod_l+0x8fa>
 801dab0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801dab4:	f67f ae9d 	bls.w	801d7f2 <_strtod_l+0x56a>
 801dab8:	4b0a      	ldr	r3, [pc, #40]	@ (801dae4 <_strtod_l+0x85c>)
 801daba:	4650      	mov	r0, sl
 801dabc:	4659      	mov	r1, fp
 801dabe:	2200      	movs	r2, #0
 801dac0:	f7e2 fdca 	bl	8000658 <__aeabi_dmul>
 801dac4:	4b08      	ldr	r3, [pc, #32]	@ (801dae8 <_strtod_l+0x860>)
 801dac6:	400b      	ands	r3, r1
 801dac8:	4682      	mov	sl, r0
 801daca:	468b      	mov	fp, r1
 801dacc:	2b00      	cmp	r3, #0
 801dace:	f47f ae05 	bne.w	801d6dc <_strtod_l+0x454>
 801dad2:	9a05      	ldr	r2, [sp, #20]
 801dad4:	2322      	movs	r3, #34	@ 0x22
 801dad6:	6013      	str	r3, [r2, #0]
 801dad8:	e600      	b.n	801d6dc <_strtod_l+0x454>
 801dada:	bf00      	nop
 801dadc:	08020648 	.word	0x08020648
 801dae0:	fffffc02 	.word	0xfffffc02
 801dae4:	39500000 	.word	0x39500000
 801dae8:	7ff00000 	.word	0x7ff00000
 801daec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801daf0:	d165      	bne.n	801dbbe <_strtod_l+0x936>
 801daf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801daf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801daf8:	b35a      	cbz	r2, 801db52 <_strtod_l+0x8ca>
 801dafa:	4a9f      	ldr	r2, [pc, #636]	@ (801dd78 <_strtod_l+0xaf0>)
 801dafc:	4293      	cmp	r3, r2
 801dafe:	d12b      	bne.n	801db58 <_strtod_l+0x8d0>
 801db00:	9b08      	ldr	r3, [sp, #32]
 801db02:	4651      	mov	r1, sl
 801db04:	b303      	cbz	r3, 801db48 <_strtod_l+0x8c0>
 801db06:	4b9d      	ldr	r3, [pc, #628]	@ (801dd7c <_strtod_l+0xaf4>)
 801db08:	465a      	mov	r2, fp
 801db0a:	4013      	ands	r3, r2
 801db0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801db10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801db14:	d81b      	bhi.n	801db4e <_strtod_l+0x8c6>
 801db16:	0d1b      	lsrs	r3, r3, #20
 801db18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801db1c:	fa02 f303 	lsl.w	r3, r2, r3
 801db20:	4299      	cmp	r1, r3
 801db22:	d119      	bne.n	801db58 <_strtod_l+0x8d0>
 801db24:	4b96      	ldr	r3, [pc, #600]	@ (801dd80 <_strtod_l+0xaf8>)
 801db26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db28:	429a      	cmp	r2, r3
 801db2a:	d102      	bne.n	801db32 <_strtod_l+0x8aa>
 801db2c:	3101      	adds	r1, #1
 801db2e:	f43f adca 	beq.w	801d6c6 <_strtod_l+0x43e>
 801db32:	4b92      	ldr	r3, [pc, #584]	@ (801dd7c <_strtod_l+0xaf4>)
 801db34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db36:	401a      	ands	r2, r3
 801db38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801db3c:	f04f 0a00 	mov.w	sl, #0
 801db40:	9b08      	ldr	r3, [sp, #32]
 801db42:	2b00      	cmp	r3, #0
 801db44:	d1b8      	bne.n	801dab8 <_strtod_l+0x830>
 801db46:	e5c9      	b.n	801d6dc <_strtod_l+0x454>
 801db48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801db4c:	e7e8      	b.n	801db20 <_strtod_l+0x898>
 801db4e:	4613      	mov	r3, r2
 801db50:	e7e6      	b.n	801db20 <_strtod_l+0x898>
 801db52:	ea53 030a 	orrs.w	r3, r3, sl
 801db56:	d0a1      	beq.n	801da9c <_strtod_l+0x814>
 801db58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801db5a:	b1db      	cbz	r3, 801db94 <_strtod_l+0x90c>
 801db5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db5e:	4213      	tst	r3, r2
 801db60:	d0ee      	beq.n	801db40 <_strtod_l+0x8b8>
 801db62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db64:	9a08      	ldr	r2, [sp, #32]
 801db66:	4650      	mov	r0, sl
 801db68:	4659      	mov	r1, fp
 801db6a:	b1bb      	cbz	r3, 801db9c <_strtod_l+0x914>
 801db6c:	f7ff fb6c 	bl	801d248 <sulp>
 801db70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801db74:	ec53 2b10 	vmov	r2, r3, d0
 801db78:	f7e2 fbb8 	bl	80002ec <__adddf3>
 801db7c:	4682      	mov	sl, r0
 801db7e:	468b      	mov	fp, r1
 801db80:	e7de      	b.n	801db40 <_strtod_l+0x8b8>
 801db82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801db86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801db8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801db8e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801db92:	e7d5      	b.n	801db40 <_strtod_l+0x8b8>
 801db94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801db96:	ea13 0f0a 	tst.w	r3, sl
 801db9a:	e7e1      	b.n	801db60 <_strtod_l+0x8d8>
 801db9c:	f7ff fb54 	bl	801d248 <sulp>
 801dba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dba4:	ec53 2b10 	vmov	r2, r3, d0
 801dba8:	f7e2 fb9e 	bl	80002e8 <__aeabi_dsub>
 801dbac:	2200      	movs	r2, #0
 801dbae:	2300      	movs	r3, #0
 801dbb0:	4682      	mov	sl, r0
 801dbb2:	468b      	mov	fp, r1
 801dbb4:	f7e2 ffb8 	bl	8000b28 <__aeabi_dcmpeq>
 801dbb8:	2800      	cmp	r0, #0
 801dbba:	d0c1      	beq.n	801db40 <_strtod_l+0x8b8>
 801dbbc:	e619      	b.n	801d7f2 <_strtod_l+0x56a>
 801dbbe:	4641      	mov	r1, r8
 801dbc0:	4620      	mov	r0, r4
 801dbc2:	f7ff fac3 	bl	801d14c <__ratio>
 801dbc6:	ec57 6b10 	vmov	r6, r7, d0
 801dbca:	2200      	movs	r2, #0
 801dbcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801dbd0:	4630      	mov	r0, r6
 801dbd2:	4639      	mov	r1, r7
 801dbd4:	f7e2 ffbc 	bl	8000b50 <__aeabi_dcmple>
 801dbd8:	2800      	cmp	r0, #0
 801dbda:	d06f      	beq.n	801dcbc <_strtod_l+0xa34>
 801dbdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d17a      	bne.n	801dcd8 <_strtod_l+0xa50>
 801dbe2:	f1ba 0f00 	cmp.w	sl, #0
 801dbe6:	d158      	bne.n	801dc9a <_strtod_l+0xa12>
 801dbe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d15a      	bne.n	801dca8 <_strtod_l+0xa20>
 801dbf2:	4b64      	ldr	r3, [pc, #400]	@ (801dd84 <_strtod_l+0xafc>)
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	4630      	mov	r0, r6
 801dbf8:	4639      	mov	r1, r7
 801dbfa:	f7e2 ff9f 	bl	8000b3c <__aeabi_dcmplt>
 801dbfe:	2800      	cmp	r0, #0
 801dc00:	d159      	bne.n	801dcb6 <_strtod_l+0xa2e>
 801dc02:	4630      	mov	r0, r6
 801dc04:	4639      	mov	r1, r7
 801dc06:	4b60      	ldr	r3, [pc, #384]	@ (801dd88 <_strtod_l+0xb00>)
 801dc08:	2200      	movs	r2, #0
 801dc0a:	f7e2 fd25 	bl	8000658 <__aeabi_dmul>
 801dc0e:	4606      	mov	r6, r0
 801dc10:	460f      	mov	r7, r1
 801dc12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801dc16:	9606      	str	r6, [sp, #24]
 801dc18:	9307      	str	r3, [sp, #28]
 801dc1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801dc1e:	4d57      	ldr	r5, [pc, #348]	@ (801dd7c <_strtod_l+0xaf4>)
 801dc20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801dc24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc26:	401d      	ands	r5, r3
 801dc28:	4b58      	ldr	r3, [pc, #352]	@ (801dd8c <_strtod_l+0xb04>)
 801dc2a:	429d      	cmp	r5, r3
 801dc2c:	f040 80b2 	bne.w	801dd94 <_strtod_l+0xb0c>
 801dc30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801dc36:	ec4b ab10 	vmov	d0, sl, fp
 801dc3a:	f7ff f9bf 	bl	801cfbc <__ulp>
 801dc3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801dc42:	ec51 0b10 	vmov	r0, r1, d0
 801dc46:	f7e2 fd07 	bl	8000658 <__aeabi_dmul>
 801dc4a:	4652      	mov	r2, sl
 801dc4c:	465b      	mov	r3, fp
 801dc4e:	f7e2 fb4d 	bl	80002ec <__adddf3>
 801dc52:	460b      	mov	r3, r1
 801dc54:	4949      	ldr	r1, [pc, #292]	@ (801dd7c <_strtod_l+0xaf4>)
 801dc56:	4a4e      	ldr	r2, [pc, #312]	@ (801dd90 <_strtod_l+0xb08>)
 801dc58:	4019      	ands	r1, r3
 801dc5a:	4291      	cmp	r1, r2
 801dc5c:	4682      	mov	sl, r0
 801dc5e:	d942      	bls.n	801dce6 <_strtod_l+0xa5e>
 801dc60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dc62:	4b47      	ldr	r3, [pc, #284]	@ (801dd80 <_strtod_l+0xaf8>)
 801dc64:	429a      	cmp	r2, r3
 801dc66:	d103      	bne.n	801dc70 <_strtod_l+0x9e8>
 801dc68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc6a:	3301      	adds	r3, #1
 801dc6c:	f43f ad2b 	beq.w	801d6c6 <_strtod_l+0x43e>
 801dc70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801dd80 <_strtod_l+0xaf8>
 801dc74:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801dc78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801dc7a:	9805      	ldr	r0, [sp, #20]
 801dc7c:	f7fe fe6a 	bl	801c954 <_Bfree>
 801dc80:	9805      	ldr	r0, [sp, #20]
 801dc82:	4649      	mov	r1, r9
 801dc84:	f7fe fe66 	bl	801c954 <_Bfree>
 801dc88:	9805      	ldr	r0, [sp, #20]
 801dc8a:	4641      	mov	r1, r8
 801dc8c:	f7fe fe62 	bl	801c954 <_Bfree>
 801dc90:	9805      	ldr	r0, [sp, #20]
 801dc92:	4621      	mov	r1, r4
 801dc94:	f7fe fe5e 	bl	801c954 <_Bfree>
 801dc98:	e618      	b.n	801d8cc <_strtod_l+0x644>
 801dc9a:	f1ba 0f01 	cmp.w	sl, #1
 801dc9e:	d103      	bne.n	801dca8 <_strtod_l+0xa20>
 801dca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	f43f ada5 	beq.w	801d7f2 <_strtod_l+0x56a>
 801dca8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801dd58 <_strtod_l+0xad0>
 801dcac:	4f35      	ldr	r7, [pc, #212]	@ (801dd84 <_strtod_l+0xafc>)
 801dcae:	ed8d 7b06 	vstr	d7, [sp, #24]
 801dcb2:	2600      	movs	r6, #0
 801dcb4:	e7b1      	b.n	801dc1a <_strtod_l+0x992>
 801dcb6:	4f34      	ldr	r7, [pc, #208]	@ (801dd88 <_strtod_l+0xb00>)
 801dcb8:	2600      	movs	r6, #0
 801dcba:	e7aa      	b.n	801dc12 <_strtod_l+0x98a>
 801dcbc:	4b32      	ldr	r3, [pc, #200]	@ (801dd88 <_strtod_l+0xb00>)
 801dcbe:	4630      	mov	r0, r6
 801dcc0:	4639      	mov	r1, r7
 801dcc2:	2200      	movs	r2, #0
 801dcc4:	f7e2 fcc8 	bl	8000658 <__aeabi_dmul>
 801dcc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcca:	4606      	mov	r6, r0
 801dccc:	460f      	mov	r7, r1
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d09f      	beq.n	801dc12 <_strtod_l+0x98a>
 801dcd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801dcd6:	e7a0      	b.n	801dc1a <_strtod_l+0x992>
 801dcd8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801dd60 <_strtod_l+0xad8>
 801dcdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 801dce0:	ec57 6b17 	vmov	r6, r7, d7
 801dce4:	e799      	b.n	801dc1a <_strtod_l+0x992>
 801dce6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801dcea:	9b08      	ldr	r3, [sp, #32]
 801dcec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d1c1      	bne.n	801dc78 <_strtod_l+0x9f0>
 801dcf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801dcf8:	0d1b      	lsrs	r3, r3, #20
 801dcfa:	051b      	lsls	r3, r3, #20
 801dcfc:	429d      	cmp	r5, r3
 801dcfe:	d1bb      	bne.n	801dc78 <_strtod_l+0x9f0>
 801dd00:	4630      	mov	r0, r6
 801dd02:	4639      	mov	r1, r7
 801dd04:	f7e3 f966 	bl	8000fd4 <__aeabi_d2lz>
 801dd08:	f7e2 fc78 	bl	80005fc <__aeabi_l2d>
 801dd0c:	4602      	mov	r2, r0
 801dd0e:	460b      	mov	r3, r1
 801dd10:	4630      	mov	r0, r6
 801dd12:	4639      	mov	r1, r7
 801dd14:	f7e2 fae8 	bl	80002e8 <__aeabi_dsub>
 801dd18:	460b      	mov	r3, r1
 801dd1a:	4602      	mov	r2, r0
 801dd1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801dd20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801dd24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd26:	ea46 060a 	orr.w	r6, r6, sl
 801dd2a:	431e      	orrs	r6, r3
 801dd2c:	d06f      	beq.n	801de0e <_strtod_l+0xb86>
 801dd2e:	a30e      	add	r3, pc, #56	@ (adr r3, 801dd68 <_strtod_l+0xae0>)
 801dd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd34:	f7e2 ff02 	bl	8000b3c <__aeabi_dcmplt>
 801dd38:	2800      	cmp	r0, #0
 801dd3a:	f47f accf 	bne.w	801d6dc <_strtod_l+0x454>
 801dd3e:	a30c      	add	r3, pc, #48	@ (adr r3, 801dd70 <_strtod_l+0xae8>)
 801dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dd48:	f7e2 ff16 	bl	8000b78 <__aeabi_dcmpgt>
 801dd4c:	2800      	cmp	r0, #0
 801dd4e:	d093      	beq.n	801dc78 <_strtod_l+0x9f0>
 801dd50:	e4c4      	b.n	801d6dc <_strtod_l+0x454>
 801dd52:	bf00      	nop
 801dd54:	f3af 8000 	nop.w
 801dd58:	00000000 	.word	0x00000000
 801dd5c:	bff00000 	.word	0xbff00000
 801dd60:	00000000 	.word	0x00000000
 801dd64:	3ff00000 	.word	0x3ff00000
 801dd68:	94a03595 	.word	0x94a03595
 801dd6c:	3fdfffff 	.word	0x3fdfffff
 801dd70:	35afe535 	.word	0x35afe535
 801dd74:	3fe00000 	.word	0x3fe00000
 801dd78:	000fffff 	.word	0x000fffff
 801dd7c:	7ff00000 	.word	0x7ff00000
 801dd80:	7fefffff 	.word	0x7fefffff
 801dd84:	3ff00000 	.word	0x3ff00000
 801dd88:	3fe00000 	.word	0x3fe00000
 801dd8c:	7fe00000 	.word	0x7fe00000
 801dd90:	7c9fffff 	.word	0x7c9fffff
 801dd94:	9b08      	ldr	r3, [sp, #32]
 801dd96:	b323      	cbz	r3, 801dde2 <_strtod_l+0xb5a>
 801dd98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801dd9c:	d821      	bhi.n	801dde2 <_strtod_l+0xb5a>
 801dd9e:	a328      	add	r3, pc, #160	@ (adr r3, 801de40 <_strtod_l+0xbb8>)
 801dda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dda4:	4630      	mov	r0, r6
 801dda6:	4639      	mov	r1, r7
 801dda8:	f7e2 fed2 	bl	8000b50 <__aeabi_dcmple>
 801ddac:	b1a0      	cbz	r0, 801ddd8 <_strtod_l+0xb50>
 801ddae:	4639      	mov	r1, r7
 801ddb0:	4630      	mov	r0, r6
 801ddb2:	f7e2 ff29 	bl	8000c08 <__aeabi_d2uiz>
 801ddb6:	2801      	cmp	r0, #1
 801ddb8:	bf38      	it	cc
 801ddba:	2001      	movcc	r0, #1
 801ddbc:	f7e2 fbd2 	bl	8000564 <__aeabi_ui2d>
 801ddc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ddc2:	4606      	mov	r6, r0
 801ddc4:	460f      	mov	r7, r1
 801ddc6:	b9fb      	cbnz	r3, 801de08 <_strtod_l+0xb80>
 801ddc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ddcc:	9014      	str	r0, [sp, #80]	@ 0x50
 801ddce:	9315      	str	r3, [sp, #84]	@ 0x54
 801ddd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801ddd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801ddd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ddda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801ddde:	1b5b      	subs	r3, r3, r5
 801dde0:	9311      	str	r3, [sp, #68]	@ 0x44
 801dde2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801dde6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801ddea:	f7ff f8e7 	bl	801cfbc <__ulp>
 801ddee:	4650      	mov	r0, sl
 801ddf0:	ec53 2b10 	vmov	r2, r3, d0
 801ddf4:	4659      	mov	r1, fp
 801ddf6:	f7e2 fc2f 	bl	8000658 <__aeabi_dmul>
 801ddfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801ddfe:	f7e2 fa75 	bl	80002ec <__adddf3>
 801de02:	4682      	mov	sl, r0
 801de04:	468b      	mov	fp, r1
 801de06:	e770      	b.n	801dcea <_strtod_l+0xa62>
 801de08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801de0c:	e7e0      	b.n	801ddd0 <_strtod_l+0xb48>
 801de0e:	a30e      	add	r3, pc, #56	@ (adr r3, 801de48 <_strtod_l+0xbc0>)
 801de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de14:	f7e2 fe92 	bl	8000b3c <__aeabi_dcmplt>
 801de18:	e798      	b.n	801dd4c <_strtod_l+0xac4>
 801de1a:	2300      	movs	r3, #0
 801de1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801de20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801de22:	6013      	str	r3, [r2, #0]
 801de24:	f7ff ba6d 	b.w	801d302 <_strtod_l+0x7a>
 801de28:	2a65      	cmp	r2, #101	@ 0x65
 801de2a:	f43f ab66 	beq.w	801d4fa <_strtod_l+0x272>
 801de2e:	2a45      	cmp	r2, #69	@ 0x45
 801de30:	f43f ab63 	beq.w	801d4fa <_strtod_l+0x272>
 801de34:	2301      	movs	r3, #1
 801de36:	f7ff bb9e 	b.w	801d576 <_strtod_l+0x2ee>
 801de3a:	bf00      	nop
 801de3c:	f3af 8000 	nop.w
 801de40:	ffc00000 	.word	0xffc00000
 801de44:	41dfffff 	.word	0x41dfffff
 801de48:	94a03595 	.word	0x94a03595
 801de4c:	3fcfffff 	.word	0x3fcfffff

0801de50 <_strtod_r>:
 801de50:	4b01      	ldr	r3, [pc, #4]	@ (801de58 <_strtod_r+0x8>)
 801de52:	f7ff ba19 	b.w	801d288 <_strtod_l>
 801de56:	bf00      	nop
 801de58:	20001290 	.word	0x20001290

0801de5c <_strtol_l.constprop.0>:
 801de5c:	2b24      	cmp	r3, #36	@ 0x24
 801de5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de62:	4686      	mov	lr, r0
 801de64:	4690      	mov	r8, r2
 801de66:	d801      	bhi.n	801de6c <_strtol_l.constprop.0+0x10>
 801de68:	2b01      	cmp	r3, #1
 801de6a:	d106      	bne.n	801de7a <_strtol_l.constprop.0+0x1e>
 801de6c:	f7fd fe26 	bl	801babc <__errno>
 801de70:	2316      	movs	r3, #22
 801de72:	6003      	str	r3, [r0, #0]
 801de74:	2000      	movs	r0, #0
 801de76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de7a:	4834      	ldr	r0, [pc, #208]	@ (801df4c <_strtol_l.constprop.0+0xf0>)
 801de7c:	460d      	mov	r5, r1
 801de7e:	462a      	mov	r2, r5
 801de80:	f815 4b01 	ldrb.w	r4, [r5], #1
 801de84:	5d06      	ldrb	r6, [r0, r4]
 801de86:	f016 0608 	ands.w	r6, r6, #8
 801de8a:	d1f8      	bne.n	801de7e <_strtol_l.constprop.0+0x22>
 801de8c:	2c2d      	cmp	r4, #45	@ 0x2d
 801de8e:	d12d      	bne.n	801deec <_strtol_l.constprop.0+0x90>
 801de90:	782c      	ldrb	r4, [r5, #0]
 801de92:	2601      	movs	r6, #1
 801de94:	1c95      	adds	r5, r2, #2
 801de96:	f033 0210 	bics.w	r2, r3, #16
 801de9a:	d109      	bne.n	801deb0 <_strtol_l.constprop.0+0x54>
 801de9c:	2c30      	cmp	r4, #48	@ 0x30
 801de9e:	d12a      	bne.n	801def6 <_strtol_l.constprop.0+0x9a>
 801dea0:	782a      	ldrb	r2, [r5, #0]
 801dea2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801dea6:	2a58      	cmp	r2, #88	@ 0x58
 801dea8:	d125      	bne.n	801def6 <_strtol_l.constprop.0+0x9a>
 801deaa:	786c      	ldrb	r4, [r5, #1]
 801deac:	2310      	movs	r3, #16
 801deae:	3502      	adds	r5, #2
 801deb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801deb4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801deb8:	2200      	movs	r2, #0
 801deba:	fbbc f9f3 	udiv	r9, ip, r3
 801debe:	4610      	mov	r0, r2
 801dec0:	fb03 ca19 	mls	sl, r3, r9, ip
 801dec4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801dec8:	2f09      	cmp	r7, #9
 801deca:	d81b      	bhi.n	801df04 <_strtol_l.constprop.0+0xa8>
 801decc:	463c      	mov	r4, r7
 801dece:	42a3      	cmp	r3, r4
 801ded0:	dd27      	ble.n	801df22 <_strtol_l.constprop.0+0xc6>
 801ded2:	1c57      	adds	r7, r2, #1
 801ded4:	d007      	beq.n	801dee6 <_strtol_l.constprop.0+0x8a>
 801ded6:	4581      	cmp	r9, r0
 801ded8:	d320      	bcc.n	801df1c <_strtol_l.constprop.0+0xc0>
 801deda:	d101      	bne.n	801dee0 <_strtol_l.constprop.0+0x84>
 801dedc:	45a2      	cmp	sl, r4
 801dede:	db1d      	blt.n	801df1c <_strtol_l.constprop.0+0xc0>
 801dee0:	fb00 4003 	mla	r0, r0, r3, r4
 801dee4:	2201      	movs	r2, #1
 801dee6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801deea:	e7eb      	b.n	801dec4 <_strtol_l.constprop.0+0x68>
 801deec:	2c2b      	cmp	r4, #43	@ 0x2b
 801deee:	bf04      	itt	eq
 801def0:	782c      	ldrbeq	r4, [r5, #0]
 801def2:	1c95      	addeq	r5, r2, #2
 801def4:	e7cf      	b.n	801de96 <_strtol_l.constprop.0+0x3a>
 801def6:	2b00      	cmp	r3, #0
 801def8:	d1da      	bne.n	801deb0 <_strtol_l.constprop.0+0x54>
 801defa:	2c30      	cmp	r4, #48	@ 0x30
 801defc:	bf0c      	ite	eq
 801defe:	2308      	moveq	r3, #8
 801df00:	230a      	movne	r3, #10
 801df02:	e7d5      	b.n	801deb0 <_strtol_l.constprop.0+0x54>
 801df04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801df08:	2f19      	cmp	r7, #25
 801df0a:	d801      	bhi.n	801df10 <_strtol_l.constprop.0+0xb4>
 801df0c:	3c37      	subs	r4, #55	@ 0x37
 801df0e:	e7de      	b.n	801dece <_strtol_l.constprop.0+0x72>
 801df10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801df14:	2f19      	cmp	r7, #25
 801df16:	d804      	bhi.n	801df22 <_strtol_l.constprop.0+0xc6>
 801df18:	3c57      	subs	r4, #87	@ 0x57
 801df1a:	e7d8      	b.n	801dece <_strtol_l.constprop.0+0x72>
 801df1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801df20:	e7e1      	b.n	801dee6 <_strtol_l.constprop.0+0x8a>
 801df22:	1c53      	adds	r3, r2, #1
 801df24:	d108      	bne.n	801df38 <_strtol_l.constprop.0+0xdc>
 801df26:	2322      	movs	r3, #34	@ 0x22
 801df28:	f8ce 3000 	str.w	r3, [lr]
 801df2c:	4660      	mov	r0, ip
 801df2e:	f1b8 0f00 	cmp.w	r8, #0
 801df32:	d0a0      	beq.n	801de76 <_strtol_l.constprop.0+0x1a>
 801df34:	1e69      	subs	r1, r5, #1
 801df36:	e006      	b.n	801df46 <_strtol_l.constprop.0+0xea>
 801df38:	b106      	cbz	r6, 801df3c <_strtol_l.constprop.0+0xe0>
 801df3a:	4240      	negs	r0, r0
 801df3c:	f1b8 0f00 	cmp.w	r8, #0
 801df40:	d099      	beq.n	801de76 <_strtol_l.constprop.0+0x1a>
 801df42:	2a00      	cmp	r2, #0
 801df44:	d1f6      	bne.n	801df34 <_strtol_l.constprop.0+0xd8>
 801df46:	f8c8 1000 	str.w	r1, [r8]
 801df4a:	e794      	b.n	801de76 <_strtol_l.constprop.0+0x1a>
 801df4c:	080202d6 	.word	0x080202d6

0801df50 <_strtol_r>:
 801df50:	f7ff bf84 	b.w	801de5c <_strtol_l.constprop.0>

0801df54 <__ssputs_r>:
 801df54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df58:	688e      	ldr	r6, [r1, #8]
 801df5a:	461f      	mov	r7, r3
 801df5c:	42be      	cmp	r6, r7
 801df5e:	680b      	ldr	r3, [r1, #0]
 801df60:	4682      	mov	sl, r0
 801df62:	460c      	mov	r4, r1
 801df64:	4690      	mov	r8, r2
 801df66:	d82d      	bhi.n	801dfc4 <__ssputs_r+0x70>
 801df68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801df6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801df70:	d026      	beq.n	801dfc0 <__ssputs_r+0x6c>
 801df72:	6965      	ldr	r5, [r4, #20]
 801df74:	6909      	ldr	r1, [r1, #16]
 801df76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801df7a:	eba3 0901 	sub.w	r9, r3, r1
 801df7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801df82:	1c7b      	adds	r3, r7, #1
 801df84:	444b      	add	r3, r9
 801df86:	106d      	asrs	r5, r5, #1
 801df88:	429d      	cmp	r5, r3
 801df8a:	bf38      	it	cc
 801df8c:	461d      	movcc	r5, r3
 801df8e:	0553      	lsls	r3, r2, #21
 801df90:	d527      	bpl.n	801dfe2 <__ssputs_r+0x8e>
 801df92:	4629      	mov	r1, r5
 801df94:	f7fc f966 	bl	801a264 <_malloc_r>
 801df98:	4606      	mov	r6, r0
 801df9a:	b360      	cbz	r0, 801dff6 <__ssputs_r+0xa2>
 801df9c:	6921      	ldr	r1, [r4, #16]
 801df9e:	464a      	mov	r2, r9
 801dfa0:	f7fd fdc1 	bl	801bb26 <memcpy>
 801dfa4:	89a3      	ldrh	r3, [r4, #12]
 801dfa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801dfaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dfae:	81a3      	strh	r3, [r4, #12]
 801dfb0:	6126      	str	r6, [r4, #16]
 801dfb2:	6165      	str	r5, [r4, #20]
 801dfb4:	444e      	add	r6, r9
 801dfb6:	eba5 0509 	sub.w	r5, r5, r9
 801dfba:	6026      	str	r6, [r4, #0]
 801dfbc:	60a5      	str	r5, [r4, #8]
 801dfbe:	463e      	mov	r6, r7
 801dfc0:	42be      	cmp	r6, r7
 801dfc2:	d900      	bls.n	801dfc6 <__ssputs_r+0x72>
 801dfc4:	463e      	mov	r6, r7
 801dfc6:	6820      	ldr	r0, [r4, #0]
 801dfc8:	4632      	mov	r2, r6
 801dfca:	4641      	mov	r1, r8
 801dfcc:	f7fd fc5c 	bl	801b888 <memmove>
 801dfd0:	68a3      	ldr	r3, [r4, #8]
 801dfd2:	1b9b      	subs	r3, r3, r6
 801dfd4:	60a3      	str	r3, [r4, #8]
 801dfd6:	6823      	ldr	r3, [r4, #0]
 801dfd8:	4433      	add	r3, r6
 801dfda:	6023      	str	r3, [r4, #0]
 801dfdc:	2000      	movs	r0, #0
 801dfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dfe2:	462a      	mov	r2, r5
 801dfe4:	f7fc fa3e 	bl	801a464 <_realloc_r>
 801dfe8:	4606      	mov	r6, r0
 801dfea:	2800      	cmp	r0, #0
 801dfec:	d1e0      	bne.n	801dfb0 <__ssputs_r+0x5c>
 801dfee:	6921      	ldr	r1, [r4, #16]
 801dff0:	4650      	mov	r0, sl
 801dff2:	f7fe fc25 	bl	801c840 <_free_r>
 801dff6:	230c      	movs	r3, #12
 801dff8:	f8ca 3000 	str.w	r3, [sl]
 801dffc:	89a3      	ldrh	r3, [r4, #12]
 801dffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e002:	81a3      	strh	r3, [r4, #12]
 801e004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e008:	e7e9      	b.n	801dfde <__ssputs_r+0x8a>
	...

0801e00c <_svfiprintf_r>:
 801e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e010:	4698      	mov	r8, r3
 801e012:	898b      	ldrh	r3, [r1, #12]
 801e014:	061b      	lsls	r3, r3, #24
 801e016:	b09d      	sub	sp, #116	@ 0x74
 801e018:	4607      	mov	r7, r0
 801e01a:	460d      	mov	r5, r1
 801e01c:	4614      	mov	r4, r2
 801e01e:	d510      	bpl.n	801e042 <_svfiprintf_r+0x36>
 801e020:	690b      	ldr	r3, [r1, #16]
 801e022:	b973      	cbnz	r3, 801e042 <_svfiprintf_r+0x36>
 801e024:	2140      	movs	r1, #64	@ 0x40
 801e026:	f7fc f91d 	bl	801a264 <_malloc_r>
 801e02a:	6028      	str	r0, [r5, #0]
 801e02c:	6128      	str	r0, [r5, #16]
 801e02e:	b930      	cbnz	r0, 801e03e <_svfiprintf_r+0x32>
 801e030:	230c      	movs	r3, #12
 801e032:	603b      	str	r3, [r7, #0]
 801e034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e038:	b01d      	add	sp, #116	@ 0x74
 801e03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e03e:	2340      	movs	r3, #64	@ 0x40
 801e040:	616b      	str	r3, [r5, #20]
 801e042:	2300      	movs	r3, #0
 801e044:	9309      	str	r3, [sp, #36]	@ 0x24
 801e046:	2320      	movs	r3, #32
 801e048:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e04c:	f8cd 800c 	str.w	r8, [sp, #12]
 801e050:	2330      	movs	r3, #48	@ 0x30
 801e052:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e1f0 <_svfiprintf_r+0x1e4>
 801e056:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e05a:	f04f 0901 	mov.w	r9, #1
 801e05e:	4623      	mov	r3, r4
 801e060:	469a      	mov	sl, r3
 801e062:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e066:	b10a      	cbz	r2, 801e06c <_svfiprintf_r+0x60>
 801e068:	2a25      	cmp	r2, #37	@ 0x25
 801e06a:	d1f9      	bne.n	801e060 <_svfiprintf_r+0x54>
 801e06c:	ebba 0b04 	subs.w	fp, sl, r4
 801e070:	d00b      	beq.n	801e08a <_svfiprintf_r+0x7e>
 801e072:	465b      	mov	r3, fp
 801e074:	4622      	mov	r2, r4
 801e076:	4629      	mov	r1, r5
 801e078:	4638      	mov	r0, r7
 801e07a:	f7ff ff6b 	bl	801df54 <__ssputs_r>
 801e07e:	3001      	adds	r0, #1
 801e080:	f000 80a7 	beq.w	801e1d2 <_svfiprintf_r+0x1c6>
 801e084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e086:	445a      	add	r2, fp
 801e088:	9209      	str	r2, [sp, #36]	@ 0x24
 801e08a:	f89a 3000 	ldrb.w	r3, [sl]
 801e08e:	2b00      	cmp	r3, #0
 801e090:	f000 809f 	beq.w	801e1d2 <_svfiprintf_r+0x1c6>
 801e094:	2300      	movs	r3, #0
 801e096:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e09e:	f10a 0a01 	add.w	sl, sl, #1
 801e0a2:	9304      	str	r3, [sp, #16]
 801e0a4:	9307      	str	r3, [sp, #28]
 801e0a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e0aa:	931a      	str	r3, [sp, #104]	@ 0x68
 801e0ac:	4654      	mov	r4, sl
 801e0ae:	2205      	movs	r2, #5
 801e0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0b4:	484e      	ldr	r0, [pc, #312]	@ (801e1f0 <_svfiprintf_r+0x1e4>)
 801e0b6:	f7e2 f8bb 	bl	8000230 <memchr>
 801e0ba:	9a04      	ldr	r2, [sp, #16]
 801e0bc:	b9d8      	cbnz	r0, 801e0f6 <_svfiprintf_r+0xea>
 801e0be:	06d0      	lsls	r0, r2, #27
 801e0c0:	bf44      	itt	mi
 801e0c2:	2320      	movmi	r3, #32
 801e0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e0c8:	0711      	lsls	r1, r2, #28
 801e0ca:	bf44      	itt	mi
 801e0cc:	232b      	movmi	r3, #43	@ 0x2b
 801e0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e0d2:	f89a 3000 	ldrb.w	r3, [sl]
 801e0d6:	2b2a      	cmp	r3, #42	@ 0x2a
 801e0d8:	d015      	beq.n	801e106 <_svfiprintf_r+0xfa>
 801e0da:	9a07      	ldr	r2, [sp, #28]
 801e0dc:	4654      	mov	r4, sl
 801e0de:	2000      	movs	r0, #0
 801e0e0:	f04f 0c0a 	mov.w	ip, #10
 801e0e4:	4621      	mov	r1, r4
 801e0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e0ea:	3b30      	subs	r3, #48	@ 0x30
 801e0ec:	2b09      	cmp	r3, #9
 801e0ee:	d94b      	bls.n	801e188 <_svfiprintf_r+0x17c>
 801e0f0:	b1b0      	cbz	r0, 801e120 <_svfiprintf_r+0x114>
 801e0f2:	9207      	str	r2, [sp, #28]
 801e0f4:	e014      	b.n	801e120 <_svfiprintf_r+0x114>
 801e0f6:	eba0 0308 	sub.w	r3, r0, r8
 801e0fa:	fa09 f303 	lsl.w	r3, r9, r3
 801e0fe:	4313      	orrs	r3, r2
 801e100:	9304      	str	r3, [sp, #16]
 801e102:	46a2      	mov	sl, r4
 801e104:	e7d2      	b.n	801e0ac <_svfiprintf_r+0xa0>
 801e106:	9b03      	ldr	r3, [sp, #12]
 801e108:	1d19      	adds	r1, r3, #4
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	9103      	str	r1, [sp, #12]
 801e10e:	2b00      	cmp	r3, #0
 801e110:	bfbb      	ittet	lt
 801e112:	425b      	neglt	r3, r3
 801e114:	f042 0202 	orrlt.w	r2, r2, #2
 801e118:	9307      	strge	r3, [sp, #28]
 801e11a:	9307      	strlt	r3, [sp, #28]
 801e11c:	bfb8      	it	lt
 801e11e:	9204      	strlt	r2, [sp, #16]
 801e120:	7823      	ldrb	r3, [r4, #0]
 801e122:	2b2e      	cmp	r3, #46	@ 0x2e
 801e124:	d10a      	bne.n	801e13c <_svfiprintf_r+0x130>
 801e126:	7863      	ldrb	r3, [r4, #1]
 801e128:	2b2a      	cmp	r3, #42	@ 0x2a
 801e12a:	d132      	bne.n	801e192 <_svfiprintf_r+0x186>
 801e12c:	9b03      	ldr	r3, [sp, #12]
 801e12e:	1d1a      	adds	r2, r3, #4
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	9203      	str	r2, [sp, #12]
 801e134:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e138:	3402      	adds	r4, #2
 801e13a:	9305      	str	r3, [sp, #20]
 801e13c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e200 <_svfiprintf_r+0x1f4>
 801e140:	7821      	ldrb	r1, [r4, #0]
 801e142:	2203      	movs	r2, #3
 801e144:	4650      	mov	r0, sl
 801e146:	f7e2 f873 	bl	8000230 <memchr>
 801e14a:	b138      	cbz	r0, 801e15c <_svfiprintf_r+0x150>
 801e14c:	9b04      	ldr	r3, [sp, #16]
 801e14e:	eba0 000a 	sub.w	r0, r0, sl
 801e152:	2240      	movs	r2, #64	@ 0x40
 801e154:	4082      	lsls	r2, r0
 801e156:	4313      	orrs	r3, r2
 801e158:	3401      	adds	r4, #1
 801e15a:	9304      	str	r3, [sp, #16]
 801e15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e160:	4824      	ldr	r0, [pc, #144]	@ (801e1f4 <_svfiprintf_r+0x1e8>)
 801e162:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e166:	2206      	movs	r2, #6
 801e168:	f7e2 f862 	bl	8000230 <memchr>
 801e16c:	2800      	cmp	r0, #0
 801e16e:	d036      	beq.n	801e1de <_svfiprintf_r+0x1d2>
 801e170:	4b21      	ldr	r3, [pc, #132]	@ (801e1f8 <_svfiprintf_r+0x1ec>)
 801e172:	bb1b      	cbnz	r3, 801e1bc <_svfiprintf_r+0x1b0>
 801e174:	9b03      	ldr	r3, [sp, #12]
 801e176:	3307      	adds	r3, #7
 801e178:	f023 0307 	bic.w	r3, r3, #7
 801e17c:	3308      	adds	r3, #8
 801e17e:	9303      	str	r3, [sp, #12]
 801e180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e182:	4433      	add	r3, r6
 801e184:	9309      	str	r3, [sp, #36]	@ 0x24
 801e186:	e76a      	b.n	801e05e <_svfiprintf_r+0x52>
 801e188:	fb0c 3202 	mla	r2, ip, r2, r3
 801e18c:	460c      	mov	r4, r1
 801e18e:	2001      	movs	r0, #1
 801e190:	e7a8      	b.n	801e0e4 <_svfiprintf_r+0xd8>
 801e192:	2300      	movs	r3, #0
 801e194:	3401      	adds	r4, #1
 801e196:	9305      	str	r3, [sp, #20]
 801e198:	4619      	mov	r1, r3
 801e19a:	f04f 0c0a 	mov.w	ip, #10
 801e19e:	4620      	mov	r0, r4
 801e1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1a4:	3a30      	subs	r2, #48	@ 0x30
 801e1a6:	2a09      	cmp	r2, #9
 801e1a8:	d903      	bls.n	801e1b2 <_svfiprintf_r+0x1a6>
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d0c6      	beq.n	801e13c <_svfiprintf_r+0x130>
 801e1ae:	9105      	str	r1, [sp, #20]
 801e1b0:	e7c4      	b.n	801e13c <_svfiprintf_r+0x130>
 801e1b2:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1b6:	4604      	mov	r4, r0
 801e1b8:	2301      	movs	r3, #1
 801e1ba:	e7f0      	b.n	801e19e <_svfiprintf_r+0x192>
 801e1bc:	ab03      	add	r3, sp, #12
 801e1be:	9300      	str	r3, [sp, #0]
 801e1c0:	462a      	mov	r2, r5
 801e1c2:	4b0e      	ldr	r3, [pc, #56]	@ (801e1fc <_svfiprintf_r+0x1f0>)
 801e1c4:	a904      	add	r1, sp, #16
 801e1c6:	4638      	mov	r0, r7
 801e1c8:	f7fc fa92 	bl	801a6f0 <_printf_float>
 801e1cc:	1c42      	adds	r2, r0, #1
 801e1ce:	4606      	mov	r6, r0
 801e1d0:	d1d6      	bne.n	801e180 <_svfiprintf_r+0x174>
 801e1d2:	89ab      	ldrh	r3, [r5, #12]
 801e1d4:	065b      	lsls	r3, r3, #25
 801e1d6:	f53f af2d 	bmi.w	801e034 <_svfiprintf_r+0x28>
 801e1da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e1dc:	e72c      	b.n	801e038 <_svfiprintf_r+0x2c>
 801e1de:	ab03      	add	r3, sp, #12
 801e1e0:	9300      	str	r3, [sp, #0]
 801e1e2:	462a      	mov	r2, r5
 801e1e4:	4b05      	ldr	r3, [pc, #20]	@ (801e1fc <_svfiprintf_r+0x1f0>)
 801e1e6:	a904      	add	r1, sp, #16
 801e1e8:	4638      	mov	r0, r7
 801e1ea:	f7fc fd19 	bl	801ac20 <_printf_i>
 801e1ee:	e7ed      	b.n	801e1cc <_svfiprintf_r+0x1c0>
 801e1f0:	08020670 	.word	0x08020670
 801e1f4:	0802067a 	.word	0x0802067a
 801e1f8:	0801a6f1 	.word	0x0801a6f1
 801e1fc:	0801df55 	.word	0x0801df55
 801e200:	08020676 	.word	0x08020676

0801e204 <__sfputc_r>:
 801e204:	6893      	ldr	r3, [r2, #8]
 801e206:	3b01      	subs	r3, #1
 801e208:	2b00      	cmp	r3, #0
 801e20a:	b410      	push	{r4}
 801e20c:	6093      	str	r3, [r2, #8]
 801e20e:	da08      	bge.n	801e222 <__sfputc_r+0x1e>
 801e210:	6994      	ldr	r4, [r2, #24]
 801e212:	42a3      	cmp	r3, r4
 801e214:	db01      	blt.n	801e21a <__sfputc_r+0x16>
 801e216:	290a      	cmp	r1, #10
 801e218:	d103      	bne.n	801e222 <__sfputc_r+0x1e>
 801e21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e21e:	f7fd ba8f 	b.w	801b740 <__swbuf_r>
 801e222:	6813      	ldr	r3, [r2, #0]
 801e224:	1c58      	adds	r0, r3, #1
 801e226:	6010      	str	r0, [r2, #0]
 801e228:	7019      	strb	r1, [r3, #0]
 801e22a:	4608      	mov	r0, r1
 801e22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e230:	4770      	bx	lr

0801e232 <__sfputs_r>:
 801e232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e234:	4606      	mov	r6, r0
 801e236:	460f      	mov	r7, r1
 801e238:	4614      	mov	r4, r2
 801e23a:	18d5      	adds	r5, r2, r3
 801e23c:	42ac      	cmp	r4, r5
 801e23e:	d101      	bne.n	801e244 <__sfputs_r+0x12>
 801e240:	2000      	movs	r0, #0
 801e242:	e007      	b.n	801e254 <__sfputs_r+0x22>
 801e244:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e248:	463a      	mov	r2, r7
 801e24a:	4630      	mov	r0, r6
 801e24c:	f7ff ffda 	bl	801e204 <__sfputc_r>
 801e250:	1c43      	adds	r3, r0, #1
 801e252:	d1f3      	bne.n	801e23c <__sfputs_r+0xa>
 801e254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e258 <_vfiprintf_r>:
 801e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e25c:	460d      	mov	r5, r1
 801e25e:	b09d      	sub	sp, #116	@ 0x74
 801e260:	4614      	mov	r4, r2
 801e262:	4698      	mov	r8, r3
 801e264:	4606      	mov	r6, r0
 801e266:	b118      	cbz	r0, 801e270 <_vfiprintf_r+0x18>
 801e268:	6a03      	ldr	r3, [r0, #32]
 801e26a:	b90b      	cbnz	r3, 801e270 <_vfiprintf_r+0x18>
 801e26c:	f7fd f898 	bl	801b3a0 <__sinit>
 801e270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e272:	07d9      	lsls	r1, r3, #31
 801e274:	d405      	bmi.n	801e282 <_vfiprintf_r+0x2a>
 801e276:	89ab      	ldrh	r3, [r5, #12]
 801e278:	059a      	lsls	r2, r3, #22
 801e27a:	d402      	bmi.n	801e282 <_vfiprintf_r+0x2a>
 801e27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e27e:	f7fd fc48 	bl	801bb12 <__retarget_lock_acquire_recursive>
 801e282:	89ab      	ldrh	r3, [r5, #12]
 801e284:	071b      	lsls	r3, r3, #28
 801e286:	d501      	bpl.n	801e28c <_vfiprintf_r+0x34>
 801e288:	692b      	ldr	r3, [r5, #16]
 801e28a:	b99b      	cbnz	r3, 801e2b4 <_vfiprintf_r+0x5c>
 801e28c:	4629      	mov	r1, r5
 801e28e:	4630      	mov	r0, r6
 801e290:	f7fd fa94 	bl	801b7bc <__swsetup_r>
 801e294:	b170      	cbz	r0, 801e2b4 <_vfiprintf_r+0x5c>
 801e296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e298:	07dc      	lsls	r4, r3, #31
 801e29a:	d504      	bpl.n	801e2a6 <_vfiprintf_r+0x4e>
 801e29c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e2a0:	b01d      	add	sp, #116	@ 0x74
 801e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2a6:	89ab      	ldrh	r3, [r5, #12]
 801e2a8:	0598      	lsls	r0, r3, #22
 801e2aa:	d4f7      	bmi.n	801e29c <_vfiprintf_r+0x44>
 801e2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e2ae:	f7fd fc31 	bl	801bb14 <__retarget_lock_release_recursive>
 801e2b2:	e7f3      	b.n	801e29c <_vfiprintf_r+0x44>
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2b8:	2320      	movs	r3, #32
 801e2ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e2be:	f8cd 800c 	str.w	r8, [sp, #12]
 801e2c2:	2330      	movs	r3, #48	@ 0x30
 801e2c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e474 <_vfiprintf_r+0x21c>
 801e2c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e2cc:	f04f 0901 	mov.w	r9, #1
 801e2d0:	4623      	mov	r3, r4
 801e2d2:	469a      	mov	sl, r3
 801e2d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e2d8:	b10a      	cbz	r2, 801e2de <_vfiprintf_r+0x86>
 801e2da:	2a25      	cmp	r2, #37	@ 0x25
 801e2dc:	d1f9      	bne.n	801e2d2 <_vfiprintf_r+0x7a>
 801e2de:	ebba 0b04 	subs.w	fp, sl, r4
 801e2e2:	d00b      	beq.n	801e2fc <_vfiprintf_r+0xa4>
 801e2e4:	465b      	mov	r3, fp
 801e2e6:	4622      	mov	r2, r4
 801e2e8:	4629      	mov	r1, r5
 801e2ea:	4630      	mov	r0, r6
 801e2ec:	f7ff ffa1 	bl	801e232 <__sfputs_r>
 801e2f0:	3001      	adds	r0, #1
 801e2f2:	f000 80a7 	beq.w	801e444 <_vfiprintf_r+0x1ec>
 801e2f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e2f8:	445a      	add	r2, fp
 801e2fa:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2fc:	f89a 3000 	ldrb.w	r3, [sl]
 801e300:	2b00      	cmp	r3, #0
 801e302:	f000 809f 	beq.w	801e444 <_vfiprintf_r+0x1ec>
 801e306:	2300      	movs	r3, #0
 801e308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e30c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e310:	f10a 0a01 	add.w	sl, sl, #1
 801e314:	9304      	str	r3, [sp, #16]
 801e316:	9307      	str	r3, [sp, #28]
 801e318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e31c:	931a      	str	r3, [sp, #104]	@ 0x68
 801e31e:	4654      	mov	r4, sl
 801e320:	2205      	movs	r2, #5
 801e322:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e326:	4853      	ldr	r0, [pc, #332]	@ (801e474 <_vfiprintf_r+0x21c>)
 801e328:	f7e1 ff82 	bl	8000230 <memchr>
 801e32c:	9a04      	ldr	r2, [sp, #16]
 801e32e:	b9d8      	cbnz	r0, 801e368 <_vfiprintf_r+0x110>
 801e330:	06d1      	lsls	r1, r2, #27
 801e332:	bf44      	itt	mi
 801e334:	2320      	movmi	r3, #32
 801e336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e33a:	0713      	lsls	r3, r2, #28
 801e33c:	bf44      	itt	mi
 801e33e:	232b      	movmi	r3, #43	@ 0x2b
 801e340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e344:	f89a 3000 	ldrb.w	r3, [sl]
 801e348:	2b2a      	cmp	r3, #42	@ 0x2a
 801e34a:	d015      	beq.n	801e378 <_vfiprintf_r+0x120>
 801e34c:	9a07      	ldr	r2, [sp, #28]
 801e34e:	4654      	mov	r4, sl
 801e350:	2000      	movs	r0, #0
 801e352:	f04f 0c0a 	mov.w	ip, #10
 801e356:	4621      	mov	r1, r4
 801e358:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e35c:	3b30      	subs	r3, #48	@ 0x30
 801e35e:	2b09      	cmp	r3, #9
 801e360:	d94b      	bls.n	801e3fa <_vfiprintf_r+0x1a2>
 801e362:	b1b0      	cbz	r0, 801e392 <_vfiprintf_r+0x13a>
 801e364:	9207      	str	r2, [sp, #28]
 801e366:	e014      	b.n	801e392 <_vfiprintf_r+0x13a>
 801e368:	eba0 0308 	sub.w	r3, r0, r8
 801e36c:	fa09 f303 	lsl.w	r3, r9, r3
 801e370:	4313      	orrs	r3, r2
 801e372:	9304      	str	r3, [sp, #16]
 801e374:	46a2      	mov	sl, r4
 801e376:	e7d2      	b.n	801e31e <_vfiprintf_r+0xc6>
 801e378:	9b03      	ldr	r3, [sp, #12]
 801e37a:	1d19      	adds	r1, r3, #4
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	9103      	str	r1, [sp, #12]
 801e380:	2b00      	cmp	r3, #0
 801e382:	bfbb      	ittet	lt
 801e384:	425b      	neglt	r3, r3
 801e386:	f042 0202 	orrlt.w	r2, r2, #2
 801e38a:	9307      	strge	r3, [sp, #28]
 801e38c:	9307      	strlt	r3, [sp, #28]
 801e38e:	bfb8      	it	lt
 801e390:	9204      	strlt	r2, [sp, #16]
 801e392:	7823      	ldrb	r3, [r4, #0]
 801e394:	2b2e      	cmp	r3, #46	@ 0x2e
 801e396:	d10a      	bne.n	801e3ae <_vfiprintf_r+0x156>
 801e398:	7863      	ldrb	r3, [r4, #1]
 801e39a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e39c:	d132      	bne.n	801e404 <_vfiprintf_r+0x1ac>
 801e39e:	9b03      	ldr	r3, [sp, #12]
 801e3a0:	1d1a      	adds	r2, r3, #4
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	9203      	str	r2, [sp, #12]
 801e3a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e3aa:	3402      	adds	r4, #2
 801e3ac:	9305      	str	r3, [sp, #20]
 801e3ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e484 <_vfiprintf_r+0x22c>
 801e3b2:	7821      	ldrb	r1, [r4, #0]
 801e3b4:	2203      	movs	r2, #3
 801e3b6:	4650      	mov	r0, sl
 801e3b8:	f7e1 ff3a 	bl	8000230 <memchr>
 801e3bc:	b138      	cbz	r0, 801e3ce <_vfiprintf_r+0x176>
 801e3be:	9b04      	ldr	r3, [sp, #16]
 801e3c0:	eba0 000a 	sub.w	r0, r0, sl
 801e3c4:	2240      	movs	r2, #64	@ 0x40
 801e3c6:	4082      	lsls	r2, r0
 801e3c8:	4313      	orrs	r3, r2
 801e3ca:	3401      	adds	r4, #1
 801e3cc:	9304      	str	r3, [sp, #16]
 801e3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3d2:	4829      	ldr	r0, [pc, #164]	@ (801e478 <_vfiprintf_r+0x220>)
 801e3d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e3d8:	2206      	movs	r2, #6
 801e3da:	f7e1 ff29 	bl	8000230 <memchr>
 801e3de:	2800      	cmp	r0, #0
 801e3e0:	d03f      	beq.n	801e462 <_vfiprintf_r+0x20a>
 801e3e2:	4b26      	ldr	r3, [pc, #152]	@ (801e47c <_vfiprintf_r+0x224>)
 801e3e4:	bb1b      	cbnz	r3, 801e42e <_vfiprintf_r+0x1d6>
 801e3e6:	9b03      	ldr	r3, [sp, #12]
 801e3e8:	3307      	adds	r3, #7
 801e3ea:	f023 0307 	bic.w	r3, r3, #7
 801e3ee:	3308      	adds	r3, #8
 801e3f0:	9303      	str	r3, [sp, #12]
 801e3f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e3f4:	443b      	add	r3, r7
 801e3f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e3f8:	e76a      	b.n	801e2d0 <_vfiprintf_r+0x78>
 801e3fa:	fb0c 3202 	mla	r2, ip, r2, r3
 801e3fe:	460c      	mov	r4, r1
 801e400:	2001      	movs	r0, #1
 801e402:	e7a8      	b.n	801e356 <_vfiprintf_r+0xfe>
 801e404:	2300      	movs	r3, #0
 801e406:	3401      	adds	r4, #1
 801e408:	9305      	str	r3, [sp, #20]
 801e40a:	4619      	mov	r1, r3
 801e40c:	f04f 0c0a 	mov.w	ip, #10
 801e410:	4620      	mov	r0, r4
 801e412:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e416:	3a30      	subs	r2, #48	@ 0x30
 801e418:	2a09      	cmp	r2, #9
 801e41a:	d903      	bls.n	801e424 <_vfiprintf_r+0x1cc>
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d0c6      	beq.n	801e3ae <_vfiprintf_r+0x156>
 801e420:	9105      	str	r1, [sp, #20]
 801e422:	e7c4      	b.n	801e3ae <_vfiprintf_r+0x156>
 801e424:	fb0c 2101 	mla	r1, ip, r1, r2
 801e428:	4604      	mov	r4, r0
 801e42a:	2301      	movs	r3, #1
 801e42c:	e7f0      	b.n	801e410 <_vfiprintf_r+0x1b8>
 801e42e:	ab03      	add	r3, sp, #12
 801e430:	9300      	str	r3, [sp, #0]
 801e432:	462a      	mov	r2, r5
 801e434:	4b12      	ldr	r3, [pc, #72]	@ (801e480 <_vfiprintf_r+0x228>)
 801e436:	a904      	add	r1, sp, #16
 801e438:	4630      	mov	r0, r6
 801e43a:	f7fc f959 	bl	801a6f0 <_printf_float>
 801e43e:	4607      	mov	r7, r0
 801e440:	1c78      	adds	r0, r7, #1
 801e442:	d1d6      	bne.n	801e3f2 <_vfiprintf_r+0x19a>
 801e444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e446:	07d9      	lsls	r1, r3, #31
 801e448:	d405      	bmi.n	801e456 <_vfiprintf_r+0x1fe>
 801e44a:	89ab      	ldrh	r3, [r5, #12]
 801e44c:	059a      	lsls	r2, r3, #22
 801e44e:	d402      	bmi.n	801e456 <_vfiprintf_r+0x1fe>
 801e450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e452:	f7fd fb5f 	bl	801bb14 <__retarget_lock_release_recursive>
 801e456:	89ab      	ldrh	r3, [r5, #12]
 801e458:	065b      	lsls	r3, r3, #25
 801e45a:	f53f af1f 	bmi.w	801e29c <_vfiprintf_r+0x44>
 801e45e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e460:	e71e      	b.n	801e2a0 <_vfiprintf_r+0x48>
 801e462:	ab03      	add	r3, sp, #12
 801e464:	9300      	str	r3, [sp, #0]
 801e466:	462a      	mov	r2, r5
 801e468:	4b05      	ldr	r3, [pc, #20]	@ (801e480 <_vfiprintf_r+0x228>)
 801e46a:	a904      	add	r1, sp, #16
 801e46c:	4630      	mov	r0, r6
 801e46e:	f7fc fbd7 	bl	801ac20 <_printf_i>
 801e472:	e7e4      	b.n	801e43e <_vfiprintf_r+0x1e6>
 801e474:	08020670 	.word	0x08020670
 801e478:	0802067a 	.word	0x0802067a
 801e47c:	0801a6f1 	.word	0x0801a6f1
 801e480:	0801e233 	.word	0x0801e233
 801e484:	08020676 	.word	0x08020676

0801e488 <__sflush_r>:
 801e488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e490:	0716      	lsls	r6, r2, #28
 801e492:	4605      	mov	r5, r0
 801e494:	460c      	mov	r4, r1
 801e496:	d454      	bmi.n	801e542 <__sflush_r+0xba>
 801e498:	684b      	ldr	r3, [r1, #4]
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	dc02      	bgt.n	801e4a4 <__sflush_r+0x1c>
 801e49e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e4a0:	2b00      	cmp	r3, #0
 801e4a2:	dd48      	ble.n	801e536 <__sflush_r+0xae>
 801e4a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e4a6:	2e00      	cmp	r6, #0
 801e4a8:	d045      	beq.n	801e536 <__sflush_r+0xae>
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e4b0:	682f      	ldr	r7, [r5, #0]
 801e4b2:	6a21      	ldr	r1, [r4, #32]
 801e4b4:	602b      	str	r3, [r5, #0]
 801e4b6:	d030      	beq.n	801e51a <__sflush_r+0x92>
 801e4b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e4ba:	89a3      	ldrh	r3, [r4, #12]
 801e4bc:	0759      	lsls	r1, r3, #29
 801e4be:	d505      	bpl.n	801e4cc <__sflush_r+0x44>
 801e4c0:	6863      	ldr	r3, [r4, #4]
 801e4c2:	1ad2      	subs	r2, r2, r3
 801e4c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e4c6:	b10b      	cbz	r3, 801e4cc <__sflush_r+0x44>
 801e4c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e4ca:	1ad2      	subs	r2, r2, r3
 801e4cc:	2300      	movs	r3, #0
 801e4ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e4d0:	6a21      	ldr	r1, [r4, #32]
 801e4d2:	4628      	mov	r0, r5
 801e4d4:	47b0      	blx	r6
 801e4d6:	1c43      	adds	r3, r0, #1
 801e4d8:	89a3      	ldrh	r3, [r4, #12]
 801e4da:	d106      	bne.n	801e4ea <__sflush_r+0x62>
 801e4dc:	6829      	ldr	r1, [r5, #0]
 801e4de:	291d      	cmp	r1, #29
 801e4e0:	d82b      	bhi.n	801e53a <__sflush_r+0xb2>
 801e4e2:	4a2a      	ldr	r2, [pc, #168]	@ (801e58c <__sflush_r+0x104>)
 801e4e4:	410a      	asrs	r2, r1
 801e4e6:	07d6      	lsls	r6, r2, #31
 801e4e8:	d427      	bmi.n	801e53a <__sflush_r+0xb2>
 801e4ea:	2200      	movs	r2, #0
 801e4ec:	6062      	str	r2, [r4, #4]
 801e4ee:	04d9      	lsls	r1, r3, #19
 801e4f0:	6922      	ldr	r2, [r4, #16]
 801e4f2:	6022      	str	r2, [r4, #0]
 801e4f4:	d504      	bpl.n	801e500 <__sflush_r+0x78>
 801e4f6:	1c42      	adds	r2, r0, #1
 801e4f8:	d101      	bne.n	801e4fe <__sflush_r+0x76>
 801e4fa:	682b      	ldr	r3, [r5, #0]
 801e4fc:	b903      	cbnz	r3, 801e500 <__sflush_r+0x78>
 801e4fe:	6560      	str	r0, [r4, #84]	@ 0x54
 801e500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e502:	602f      	str	r7, [r5, #0]
 801e504:	b1b9      	cbz	r1, 801e536 <__sflush_r+0xae>
 801e506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e50a:	4299      	cmp	r1, r3
 801e50c:	d002      	beq.n	801e514 <__sflush_r+0x8c>
 801e50e:	4628      	mov	r0, r5
 801e510:	f7fe f996 	bl	801c840 <_free_r>
 801e514:	2300      	movs	r3, #0
 801e516:	6363      	str	r3, [r4, #52]	@ 0x34
 801e518:	e00d      	b.n	801e536 <__sflush_r+0xae>
 801e51a:	2301      	movs	r3, #1
 801e51c:	4628      	mov	r0, r5
 801e51e:	47b0      	blx	r6
 801e520:	4602      	mov	r2, r0
 801e522:	1c50      	adds	r0, r2, #1
 801e524:	d1c9      	bne.n	801e4ba <__sflush_r+0x32>
 801e526:	682b      	ldr	r3, [r5, #0]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d0c6      	beq.n	801e4ba <__sflush_r+0x32>
 801e52c:	2b1d      	cmp	r3, #29
 801e52e:	d001      	beq.n	801e534 <__sflush_r+0xac>
 801e530:	2b16      	cmp	r3, #22
 801e532:	d11e      	bne.n	801e572 <__sflush_r+0xea>
 801e534:	602f      	str	r7, [r5, #0]
 801e536:	2000      	movs	r0, #0
 801e538:	e022      	b.n	801e580 <__sflush_r+0xf8>
 801e53a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e53e:	b21b      	sxth	r3, r3
 801e540:	e01b      	b.n	801e57a <__sflush_r+0xf2>
 801e542:	690f      	ldr	r7, [r1, #16]
 801e544:	2f00      	cmp	r7, #0
 801e546:	d0f6      	beq.n	801e536 <__sflush_r+0xae>
 801e548:	0793      	lsls	r3, r2, #30
 801e54a:	680e      	ldr	r6, [r1, #0]
 801e54c:	bf08      	it	eq
 801e54e:	694b      	ldreq	r3, [r1, #20]
 801e550:	600f      	str	r7, [r1, #0]
 801e552:	bf18      	it	ne
 801e554:	2300      	movne	r3, #0
 801e556:	eba6 0807 	sub.w	r8, r6, r7
 801e55a:	608b      	str	r3, [r1, #8]
 801e55c:	f1b8 0f00 	cmp.w	r8, #0
 801e560:	dde9      	ble.n	801e536 <__sflush_r+0xae>
 801e562:	6a21      	ldr	r1, [r4, #32]
 801e564:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e566:	4643      	mov	r3, r8
 801e568:	463a      	mov	r2, r7
 801e56a:	4628      	mov	r0, r5
 801e56c:	47b0      	blx	r6
 801e56e:	2800      	cmp	r0, #0
 801e570:	dc08      	bgt.n	801e584 <__sflush_r+0xfc>
 801e572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e57a:	81a3      	strh	r3, [r4, #12]
 801e57c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e584:	4407      	add	r7, r0
 801e586:	eba8 0800 	sub.w	r8, r8, r0
 801e58a:	e7e7      	b.n	801e55c <__sflush_r+0xd4>
 801e58c:	dfbffffe 	.word	0xdfbffffe

0801e590 <_fflush_r>:
 801e590:	b538      	push	{r3, r4, r5, lr}
 801e592:	690b      	ldr	r3, [r1, #16]
 801e594:	4605      	mov	r5, r0
 801e596:	460c      	mov	r4, r1
 801e598:	b913      	cbnz	r3, 801e5a0 <_fflush_r+0x10>
 801e59a:	2500      	movs	r5, #0
 801e59c:	4628      	mov	r0, r5
 801e59e:	bd38      	pop	{r3, r4, r5, pc}
 801e5a0:	b118      	cbz	r0, 801e5aa <_fflush_r+0x1a>
 801e5a2:	6a03      	ldr	r3, [r0, #32]
 801e5a4:	b90b      	cbnz	r3, 801e5aa <_fflush_r+0x1a>
 801e5a6:	f7fc fefb 	bl	801b3a0 <__sinit>
 801e5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d0f3      	beq.n	801e59a <_fflush_r+0xa>
 801e5b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e5b4:	07d0      	lsls	r0, r2, #31
 801e5b6:	d404      	bmi.n	801e5c2 <_fflush_r+0x32>
 801e5b8:	0599      	lsls	r1, r3, #22
 801e5ba:	d402      	bmi.n	801e5c2 <_fflush_r+0x32>
 801e5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e5be:	f7fd faa8 	bl	801bb12 <__retarget_lock_acquire_recursive>
 801e5c2:	4628      	mov	r0, r5
 801e5c4:	4621      	mov	r1, r4
 801e5c6:	f7ff ff5f 	bl	801e488 <__sflush_r>
 801e5ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e5cc:	07da      	lsls	r2, r3, #31
 801e5ce:	4605      	mov	r5, r0
 801e5d0:	d4e4      	bmi.n	801e59c <_fflush_r+0xc>
 801e5d2:	89a3      	ldrh	r3, [r4, #12]
 801e5d4:	059b      	lsls	r3, r3, #22
 801e5d6:	d4e1      	bmi.n	801e59c <_fflush_r+0xc>
 801e5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e5da:	f7fd fa9b 	bl	801bb14 <__retarget_lock_release_recursive>
 801e5de:	e7dd      	b.n	801e59c <_fflush_r+0xc>

0801e5e0 <fiprintf>:
 801e5e0:	b40e      	push	{r1, r2, r3}
 801e5e2:	b503      	push	{r0, r1, lr}
 801e5e4:	4601      	mov	r1, r0
 801e5e6:	ab03      	add	r3, sp, #12
 801e5e8:	4805      	ldr	r0, [pc, #20]	@ (801e600 <fiprintf+0x20>)
 801e5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801e5ee:	6800      	ldr	r0, [r0, #0]
 801e5f0:	9301      	str	r3, [sp, #4]
 801e5f2:	f7ff fe31 	bl	801e258 <_vfiprintf_r>
 801e5f6:	b002      	add	sp, #8
 801e5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e5fc:	b003      	add	sp, #12
 801e5fe:	4770      	bx	lr
 801e600:	20001240 	.word	0x20001240

0801e604 <__swhatbuf_r>:
 801e604:	b570      	push	{r4, r5, r6, lr}
 801e606:	460c      	mov	r4, r1
 801e608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e60c:	2900      	cmp	r1, #0
 801e60e:	b096      	sub	sp, #88	@ 0x58
 801e610:	4615      	mov	r5, r2
 801e612:	461e      	mov	r6, r3
 801e614:	da0d      	bge.n	801e632 <__swhatbuf_r+0x2e>
 801e616:	89a3      	ldrh	r3, [r4, #12]
 801e618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e61c:	f04f 0100 	mov.w	r1, #0
 801e620:	bf14      	ite	ne
 801e622:	2340      	movne	r3, #64	@ 0x40
 801e624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e628:	2000      	movs	r0, #0
 801e62a:	6031      	str	r1, [r6, #0]
 801e62c:	602b      	str	r3, [r5, #0]
 801e62e:	b016      	add	sp, #88	@ 0x58
 801e630:	bd70      	pop	{r4, r5, r6, pc}
 801e632:	466a      	mov	r2, sp
 801e634:	f000 f848 	bl	801e6c8 <_fstat_r>
 801e638:	2800      	cmp	r0, #0
 801e63a:	dbec      	blt.n	801e616 <__swhatbuf_r+0x12>
 801e63c:	9901      	ldr	r1, [sp, #4]
 801e63e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e646:	4259      	negs	r1, r3
 801e648:	4159      	adcs	r1, r3
 801e64a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e64e:	e7eb      	b.n	801e628 <__swhatbuf_r+0x24>

0801e650 <__smakebuf_r>:
 801e650:	898b      	ldrh	r3, [r1, #12]
 801e652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e654:	079d      	lsls	r5, r3, #30
 801e656:	4606      	mov	r6, r0
 801e658:	460c      	mov	r4, r1
 801e65a:	d507      	bpl.n	801e66c <__smakebuf_r+0x1c>
 801e65c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e660:	6023      	str	r3, [r4, #0]
 801e662:	6123      	str	r3, [r4, #16]
 801e664:	2301      	movs	r3, #1
 801e666:	6163      	str	r3, [r4, #20]
 801e668:	b003      	add	sp, #12
 801e66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e66c:	ab01      	add	r3, sp, #4
 801e66e:	466a      	mov	r2, sp
 801e670:	f7ff ffc8 	bl	801e604 <__swhatbuf_r>
 801e674:	9f00      	ldr	r7, [sp, #0]
 801e676:	4605      	mov	r5, r0
 801e678:	4639      	mov	r1, r7
 801e67a:	4630      	mov	r0, r6
 801e67c:	f7fb fdf2 	bl	801a264 <_malloc_r>
 801e680:	b948      	cbnz	r0, 801e696 <__smakebuf_r+0x46>
 801e682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e686:	059a      	lsls	r2, r3, #22
 801e688:	d4ee      	bmi.n	801e668 <__smakebuf_r+0x18>
 801e68a:	f023 0303 	bic.w	r3, r3, #3
 801e68e:	f043 0302 	orr.w	r3, r3, #2
 801e692:	81a3      	strh	r3, [r4, #12]
 801e694:	e7e2      	b.n	801e65c <__smakebuf_r+0xc>
 801e696:	89a3      	ldrh	r3, [r4, #12]
 801e698:	6020      	str	r0, [r4, #0]
 801e69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e69e:	81a3      	strh	r3, [r4, #12]
 801e6a0:	9b01      	ldr	r3, [sp, #4]
 801e6a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e6a6:	b15b      	cbz	r3, 801e6c0 <__smakebuf_r+0x70>
 801e6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e6ac:	4630      	mov	r0, r6
 801e6ae:	f000 f81d 	bl	801e6ec <_isatty_r>
 801e6b2:	b128      	cbz	r0, 801e6c0 <__smakebuf_r+0x70>
 801e6b4:	89a3      	ldrh	r3, [r4, #12]
 801e6b6:	f023 0303 	bic.w	r3, r3, #3
 801e6ba:	f043 0301 	orr.w	r3, r3, #1
 801e6be:	81a3      	strh	r3, [r4, #12]
 801e6c0:	89a3      	ldrh	r3, [r4, #12]
 801e6c2:	431d      	orrs	r5, r3
 801e6c4:	81a5      	strh	r5, [r4, #12]
 801e6c6:	e7cf      	b.n	801e668 <__smakebuf_r+0x18>

0801e6c8 <_fstat_r>:
 801e6c8:	b538      	push	{r3, r4, r5, lr}
 801e6ca:	4d07      	ldr	r5, [pc, #28]	@ (801e6e8 <_fstat_r+0x20>)
 801e6cc:	2300      	movs	r3, #0
 801e6ce:	4604      	mov	r4, r0
 801e6d0:	4608      	mov	r0, r1
 801e6d2:	4611      	mov	r1, r2
 801e6d4:	602b      	str	r3, [r5, #0]
 801e6d6:	f7e6 f813 	bl	8004700 <_fstat>
 801e6da:	1c43      	adds	r3, r0, #1
 801e6dc:	d102      	bne.n	801e6e4 <_fstat_r+0x1c>
 801e6de:	682b      	ldr	r3, [r5, #0]
 801e6e0:	b103      	cbz	r3, 801e6e4 <_fstat_r+0x1c>
 801e6e2:	6023      	str	r3, [r4, #0]
 801e6e4:	bd38      	pop	{r3, r4, r5, pc}
 801e6e6:	bf00      	nop
 801e6e8:	20017a70 	.word	0x20017a70

0801e6ec <_isatty_r>:
 801e6ec:	b538      	push	{r3, r4, r5, lr}
 801e6ee:	4d06      	ldr	r5, [pc, #24]	@ (801e708 <_isatty_r+0x1c>)
 801e6f0:	2300      	movs	r3, #0
 801e6f2:	4604      	mov	r4, r0
 801e6f4:	4608      	mov	r0, r1
 801e6f6:	602b      	str	r3, [r5, #0]
 801e6f8:	f7e6 f812 	bl	8004720 <_isatty>
 801e6fc:	1c43      	adds	r3, r0, #1
 801e6fe:	d102      	bne.n	801e706 <_isatty_r+0x1a>
 801e700:	682b      	ldr	r3, [r5, #0]
 801e702:	b103      	cbz	r3, 801e706 <_isatty_r+0x1a>
 801e704:	6023      	str	r3, [r4, #0]
 801e706:	bd38      	pop	{r3, r4, r5, pc}
 801e708:	20017a70 	.word	0x20017a70
 801e70c:	00000000 	.word	0x00000000

0801e710 <nan>:
 801e710:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e718 <nan+0x8>
 801e714:	4770      	bx	lr
 801e716:	bf00      	nop
 801e718:	00000000 	.word	0x00000000
 801e71c:	7ff80000 	.word	0x7ff80000

0801e720 <abort>:
 801e720:	b508      	push	{r3, lr}
 801e722:	2006      	movs	r0, #6
 801e724:	f000 fb82 	bl	801ee2c <raise>
 801e728:	2001      	movs	r0, #1
 801e72a:	f7e5 ff99 	bl	8004660 <_exit>

0801e72e <rshift>:
 801e72e:	6903      	ldr	r3, [r0, #16]
 801e730:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e738:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e73c:	f100 0414 	add.w	r4, r0, #20
 801e740:	dd45      	ble.n	801e7ce <rshift+0xa0>
 801e742:	f011 011f 	ands.w	r1, r1, #31
 801e746:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e74a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e74e:	d10c      	bne.n	801e76a <rshift+0x3c>
 801e750:	f100 0710 	add.w	r7, r0, #16
 801e754:	4629      	mov	r1, r5
 801e756:	42b1      	cmp	r1, r6
 801e758:	d334      	bcc.n	801e7c4 <rshift+0x96>
 801e75a:	1a9b      	subs	r3, r3, r2
 801e75c:	009b      	lsls	r3, r3, #2
 801e75e:	1eea      	subs	r2, r5, #3
 801e760:	4296      	cmp	r6, r2
 801e762:	bf38      	it	cc
 801e764:	2300      	movcc	r3, #0
 801e766:	4423      	add	r3, r4
 801e768:	e015      	b.n	801e796 <rshift+0x68>
 801e76a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e76e:	f1c1 0820 	rsb	r8, r1, #32
 801e772:	40cf      	lsrs	r7, r1
 801e774:	f105 0e04 	add.w	lr, r5, #4
 801e778:	46a1      	mov	r9, r4
 801e77a:	4576      	cmp	r6, lr
 801e77c:	46f4      	mov	ip, lr
 801e77e:	d815      	bhi.n	801e7ac <rshift+0x7e>
 801e780:	1a9a      	subs	r2, r3, r2
 801e782:	0092      	lsls	r2, r2, #2
 801e784:	3a04      	subs	r2, #4
 801e786:	3501      	adds	r5, #1
 801e788:	42ae      	cmp	r6, r5
 801e78a:	bf38      	it	cc
 801e78c:	2200      	movcc	r2, #0
 801e78e:	18a3      	adds	r3, r4, r2
 801e790:	50a7      	str	r7, [r4, r2]
 801e792:	b107      	cbz	r7, 801e796 <rshift+0x68>
 801e794:	3304      	adds	r3, #4
 801e796:	1b1a      	subs	r2, r3, r4
 801e798:	42a3      	cmp	r3, r4
 801e79a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e79e:	bf08      	it	eq
 801e7a0:	2300      	moveq	r3, #0
 801e7a2:	6102      	str	r2, [r0, #16]
 801e7a4:	bf08      	it	eq
 801e7a6:	6143      	streq	r3, [r0, #20]
 801e7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7ac:	f8dc c000 	ldr.w	ip, [ip]
 801e7b0:	fa0c fc08 	lsl.w	ip, ip, r8
 801e7b4:	ea4c 0707 	orr.w	r7, ip, r7
 801e7b8:	f849 7b04 	str.w	r7, [r9], #4
 801e7bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e7c0:	40cf      	lsrs	r7, r1
 801e7c2:	e7da      	b.n	801e77a <rshift+0x4c>
 801e7c4:	f851 cb04 	ldr.w	ip, [r1], #4
 801e7c8:	f847 cf04 	str.w	ip, [r7, #4]!
 801e7cc:	e7c3      	b.n	801e756 <rshift+0x28>
 801e7ce:	4623      	mov	r3, r4
 801e7d0:	e7e1      	b.n	801e796 <rshift+0x68>

0801e7d2 <__hexdig_fun>:
 801e7d2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801e7d6:	2b09      	cmp	r3, #9
 801e7d8:	d802      	bhi.n	801e7e0 <__hexdig_fun+0xe>
 801e7da:	3820      	subs	r0, #32
 801e7dc:	b2c0      	uxtb	r0, r0
 801e7de:	4770      	bx	lr
 801e7e0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801e7e4:	2b05      	cmp	r3, #5
 801e7e6:	d801      	bhi.n	801e7ec <__hexdig_fun+0x1a>
 801e7e8:	3847      	subs	r0, #71	@ 0x47
 801e7ea:	e7f7      	b.n	801e7dc <__hexdig_fun+0xa>
 801e7ec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801e7f0:	2b05      	cmp	r3, #5
 801e7f2:	d801      	bhi.n	801e7f8 <__hexdig_fun+0x26>
 801e7f4:	3827      	subs	r0, #39	@ 0x27
 801e7f6:	e7f1      	b.n	801e7dc <__hexdig_fun+0xa>
 801e7f8:	2000      	movs	r0, #0
 801e7fa:	4770      	bx	lr

0801e7fc <__gethex>:
 801e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e800:	b085      	sub	sp, #20
 801e802:	468a      	mov	sl, r1
 801e804:	9302      	str	r3, [sp, #8]
 801e806:	680b      	ldr	r3, [r1, #0]
 801e808:	9001      	str	r0, [sp, #4]
 801e80a:	4690      	mov	r8, r2
 801e80c:	1c9c      	adds	r4, r3, #2
 801e80e:	46a1      	mov	r9, r4
 801e810:	f814 0b01 	ldrb.w	r0, [r4], #1
 801e814:	2830      	cmp	r0, #48	@ 0x30
 801e816:	d0fa      	beq.n	801e80e <__gethex+0x12>
 801e818:	eba9 0303 	sub.w	r3, r9, r3
 801e81c:	f1a3 0b02 	sub.w	fp, r3, #2
 801e820:	f7ff ffd7 	bl	801e7d2 <__hexdig_fun>
 801e824:	4605      	mov	r5, r0
 801e826:	2800      	cmp	r0, #0
 801e828:	d168      	bne.n	801e8fc <__gethex+0x100>
 801e82a:	49a0      	ldr	r1, [pc, #640]	@ (801eaac <__gethex+0x2b0>)
 801e82c:	2201      	movs	r2, #1
 801e82e:	4648      	mov	r0, r9
 801e830:	f7fd f859 	bl	801b8e6 <strncmp>
 801e834:	4607      	mov	r7, r0
 801e836:	2800      	cmp	r0, #0
 801e838:	d167      	bne.n	801e90a <__gethex+0x10e>
 801e83a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801e83e:	4626      	mov	r6, r4
 801e840:	f7ff ffc7 	bl	801e7d2 <__hexdig_fun>
 801e844:	2800      	cmp	r0, #0
 801e846:	d062      	beq.n	801e90e <__gethex+0x112>
 801e848:	4623      	mov	r3, r4
 801e84a:	7818      	ldrb	r0, [r3, #0]
 801e84c:	2830      	cmp	r0, #48	@ 0x30
 801e84e:	4699      	mov	r9, r3
 801e850:	f103 0301 	add.w	r3, r3, #1
 801e854:	d0f9      	beq.n	801e84a <__gethex+0x4e>
 801e856:	f7ff ffbc 	bl	801e7d2 <__hexdig_fun>
 801e85a:	fab0 f580 	clz	r5, r0
 801e85e:	096d      	lsrs	r5, r5, #5
 801e860:	f04f 0b01 	mov.w	fp, #1
 801e864:	464a      	mov	r2, r9
 801e866:	4616      	mov	r6, r2
 801e868:	3201      	adds	r2, #1
 801e86a:	7830      	ldrb	r0, [r6, #0]
 801e86c:	f7ff ffb1 	bl	801e7d2 <__hexdig_fun>
 801e870:	2800      	cmp	r0, #0
 801e872:	d1f8      	bne.n	801e866 <__gethex+0x6a>
 801e874:	498d      	ldr	r1, [pc, #564]	@ (801eaac <__gethex+0x2b0>)
 801e876:	2201      	movs	r2, #1
 801e878:	4630      	mov	r0, r6
 801e87a:	f7fd f834 	bl	801b8e6 <strncmp>
 801e87e:	2800      	cmp	r0, #0
 801e880:	d13f      	bne.n	801e902 <__gethex+0x106>
 801e882:	b944      	cbnz	r4, 801e896 <__gethex+0x9a>
 801e884:	1c74      	adds	r4, r6, #1
 801e886:	4622      	mov	r2, r4
 801e888:	4616      	mov	r6, r2
 801e88a:	3201      	adds	r2, #1
 801e88c:	7830      	ldrb	r0, [r6, #0]
 801e88e:	f7ff ffa0 	bl	801e7d2 <__hexdig_fun>
 801e892:	2800      	cmp	r0, #0
 801e894:	d1f8      	bne.n	801e888 <__gethex+0x8c>
 801e896:	1ba4      	subs	r4, r4, r6
 801e898:	00a7      	lsls	r7, r4, #2
 801e89a:	7833      	ldrb	r3, [r6, #0]
 801e89c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801e8a0:	2b50      	cmp	r3, #80	@ 0x50
 801e8a2:	d13e      	bne.n	801e922 <__gethex+0x126>
 801e8a4:	7873      	ldrb	r3, [r6, #1]
 801e8a6:	2b2b      	cmp	r3, #43	@ 0x2b
 801e8a8:	d033      	beq.n	801e912 <__gethex+0x116>
 801e8aa:	2b2d      	cmp	r3, #45	@ 0x2d
 801e8ac:	d034      	beq.n	801e918 <__gethex+0x11c>
 801e8ae:	1c71      	adds	r1, r6, #1
 801e8b0:	2400      	movs	r4, #0
 801e8b2:	7808      	ldrb	r0, [r1, #0]
 801e8b4:	f7ff ff8d 	bl	801e7d2 <__hexdig_fun>
 801e8b8:	1e43      	subs	r3, r0, #1
 801e8ba:	b2db      	uxtb	r3, r3
 801e8bc:	2b18      	cmp	r3, #24
 801e8be:	d830      	bhi.n	801e922 <__gethex+0x126>
 801e8c0:	f1a0 0210 	sub.w	r2, r0, #16
 801e8c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e8c8:	f7ff ff83 	bl	801e7d2 <__hexdig_fun>
 801e8cc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801e8d0:	fa5f fc8c 	uxtb.w	ip, ip
 801e8d4:	f1bc 0f18 	cmp.w	ip, #24
 801e8d8:	f04f 030a 	mov.w	r3, #10
 801e8dc:	d91e      	bls.n	801e91c <__gethex+0x120>
 801e8de:	b104      	cbz	r4, 801e8e2 <__gethex+0xe6>
 801e8e0:	4252      	negs	r2, r2
 801e8e2:	4417      	add	r7, r2
 801e8e4:	f8ca 1000 	str.w	r1, [sl]
 801e8e8:	b1ed      	cbz	r5, 801e926 <__gethex+0x12a>
 801e8ea:	f1bb 0f00 	cmp.w	fp, #0
 801e8ee:	bf0c      	ite	eq
 801e8f0:	2506      	moveq	r5, #6
 801e8f2:	2500      	movne	r5, #0
 801e8f4:	4628      	mov	r0, r5
 801e8f6:	b005      	add	sp, #20
 801e8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8fc:	2500      	movs	r5, #0
 801e8fe:	462c      	mov	r4, r5
 801e900:	e7b0      	b.n	801e864 <__gethex+0x68>
 801e902:	2c00      	cmp	r4, #0
 801e904:	d1c7      	bne.n	801e896 <__gethex+0x9a>
 801e906:	4627      	mov	r7, r4
 801e908:	e7c7      	b.n	801e89a <__gethex+0x9e>
 801e90a:	464e      	mov	r6, r9
 801e90c:	462f      	mov	r7, r5
 801e90e:	2501      	movs	r5, #1
 801e910:	e7c3      	b.n	801e89a <__gethex+0x9e>
 801e912:	2400      	movs	r4, #0
 801e914:	1cb1      	adds	r1, r6, #2
 801e916:	e7cc      	b.n	801e8b2 <__gethex+0xb6>
 801e918:	2401      	movs	r4, #1
 801e91a:	e7fb      	b.n	801e914 <__gethex+0x118>
 801e91c:	fb03 0002 	mla	r0, r3, r2, r0
 801e920:	e7ce      	b.n	801e8c0 <__gethex+0xc4>
 801e922:	4631      	mov	r1, r6
 801e924:	e7de      	b.n	801e8e4 <__gethex+0xe8>
 801e926:	eba6 0309 	sub.w	r3, r6, r9
 801e92a:	3b01      	subs	r3, #1
 801e92c:	4629      	mov	r1, r5
 801e92e:	2b07      	cmp	r3, #7
 801e930:	dc0a      	bgt.n	801e948 <__gethex+0x14c>
 801e932:	9801      	ldr	r0, [sp, #4]
 801e934:	f7fd ffce 	bl	801c8d4 <_Balloc>
 801e938:	4604      	mov	r4, r0
 801e93a:	b940      	cbnz	r0, 801e94e <__gethex+0x152>
 801e93c:	4b5c      	ldr	r3, [pc, #368]	@ (801eab0 <__gethex+0x2b4>)
 801e93e:	4602      	mov	r2, r0
 801e940:	21e4      	movs	r1, #228	@ 0xe4
 801e942:	485c      	ldr	r0, [pc, #368]	@ (801eab4 <__gethex+0x2b8>)
 801e944:	f7fd f904 	bl	801bb50 <__assert_func>
 801e948:	3101      	adds	r1, #1
 801e94a:	105b      	asrs	r3, r3, #1
 801e94c:	e7ef      	b.n	801e92e <__gethex+0x132>
 801e94e:	f100 0a14 	add.w	sl, r0, #20
 801e952:	2300      	movs	r3, #0
 801e954:	4655      	mov	r5, sl
 801e956:	469b      	mov	fp, r3
 801e958:	45b1      	cmp	r9, r6
 801e95a:	d337      	bcc.n	801e9cc <__gethex+0x1d0>
 801e95c:	f845 bb04 	str.w	fp, [r5], #4
 801e960:	eba5 050a 	sub.w	r5, r5, sl
 801e964:	10ad      	asrs	r5, r5, #2
 801e966:	6125      	str	r5, [r4, #16]
 801e968:	4658      	mov	r0, fp
 801e96a:	f7fe f8a5 	bl	801cab8 <__hi0bits>
 801e96e:	016d      	lsls	r5, r5, #5
 801e970:	f8d8 6000 	ldr.w	r6, [r8]
 801e974:	1a2d      	subs	r5, r5, r0
 801e976:	42b5      	cmp	r5, r6
 801e978:	dd54      	ble.n	801ea24 <__gethex+0x228>
 801e97a:	1bad      	subs	r5, r5, r6
 801e97c:	4629      	mov	r1, r5
 801e97e:	4620      	mov	r0, r4
 801e980:	f7fe fc39 	bl	801d1f6 <__any_on>
 801e984:	4681      	mov	r9, r0
 801e986:	b178      	cbz	r0, 801e9a8 <__gethex+0x1ac>
 801e988:	1e6b      	subs	r3, r5, #1
 801e98a:	1159      	asrs	r1, r3, #5
 801e98c:	f003 021f 	and.w	r2, r3, #31
 801e990:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801e994:	f04f 0901 	mov.w	r9, #1
 801e998:	fa09 f202 	lsl.w	r2, r9, r2
 801e99c:	420a      	tst	r2, r1
 801e99e:	d003      	beq.n	801e9a8 <__gethex+0x1ac>
 801e9a0:	454b      	cmp	r3, r9
 801e9a2:	dc36      	bgt.n	801ea12 <__gethex+0x216>
 801e9a4:	f04f 0902 	mov.w	r9, #2
 801e9a8:	4629      	mov	r1, r5
 801e9aa:	4620      	mov	r0, r4
 801e9ac:	f7ff febf 	bl	801e72e <rshift>
 801e9b0:	442f      	add	r7, r5
 801e9b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e9b6:	42bb      	cmp	r3, r7
 801e9b8:	da42      	bge.n	801ea40 <__gethex+0x244>
 801e9ba:	9801      	ldr	r0, [sp, #4]
 801e9bc:	4621      	mov	r1, r4
 801e9be:	f7fd ffc9 	bl	801c954 <_Bfree>
 801e9c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	6013      	str	r3, [r2, #0]
 801e9c8:	25a3      	movs	r5, #163	@ 0xa3
 801e9ca:	e793      	b.n	801e8f4 <__gethex+0xf8>
 801e9cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801e9d0:	2a2e      	cmp	r2, #46	@ 0x2e
 801e9d2:	d012      	beq.n	801e9fa <__gethex+0x1fe>
 801e9d4:	2b20      	cmp	r3, #32
 801e9d6:	d104      	bne.n	801e9e2 <__gethex+0x1e6>
 801e9d8:	f845 bb04 	str.w	fp, [r5], #4
 801e9dc:	f04f 0b00 	mov.w	fp, #0
 801e9e0:	465b      	mov	r3, fp
 801e9e2:	7830      	ldrb	r0, [r6, #0]
 801e9e4:	9303      	str	r3, [sp, #12]
 801e9e6:	f7ff fef4 	bl	801e7d2 <__hexdig_fun>
 801e9ea:	9b03      	ldr	r3, [sp, #12]
 801e9ec:	f000 000f 	and.w	r0, r0, #15
 801e9f0:	4098      	lsls	r0, r3
 801e9f2:	ea4b 0b00 	orr.w	fp, fp, r0
 801e9f6:	3304      	adds	r3, #4
 801e9f8:	e7ae      	b.n	801e958 <__gethex+0x15c>
 801e9fa:	45b1      	cmp	r9, r6
 801e9fc:	d8ea      	bhi.n	801e9d4 <__gethex+0x1d8>
 801e9fe:	492b      	ldr	r1, [pc, #172]	@ (801eaac <__gethex+0x2b0>)
 801ea00:	9303      	str	r3, [sp, #12]
 801ea02:	2201      	movs	r2, #1
 801ea04:	4630      	mov	r0, r6
 801ea06:	f7fc ff6e 	bl	801b8e6 <strncmp>
 801ea0a:	9b03      	ldr	r3, [sp, #12]
 801ea0c:	2800      	cmp	r0, #0
 801ea0e:	d1e1      	bne.n	801e9d4 <__gethex+0x1d8>
 801ea10:	e7a2      	b.n	801e958 <__gethex+0x15c>
 801ea12:	1ea9      	subs	r1, r5, #2
 801ea14:	4620      	mov	r0, r4
 801ea16:	f7fe fbee 	bl	801d1f6 <__any_on>
 801ea1a:	2800      	cmp	r0, #0
 801ea1c:	d0c2      	beq.n	801e9a4 <__gethex+0x1a8>
 801ea1e:	f04f 0903 	mov.w	r9, #3
 801ea22:	e7c1      	b.n	801e9a8 <__gethex+0x1ac>
 801ea24:	da09      	bge.n	801ea3a <__gethex+0x23e>
 801ea26:	1b75      	subs	r5, r6, r5
 801ea28:	4621      	mov	r1, r4
 801ea2a:	9801      	ldr	r0, [sp, #4]
 801ea2c:	462a      	mov	r2, r5
 801ea2e:	f7fe f9a9 	bl	801cd84 <__lshift>
 801ea32:	1b7f      	subs	r7, r7, r5
 801ea34:	4604      	mov	r4, r0
 801ea36:	f100 0a14 	add.w	sl, r0, #20
 801ea3a:	f04f 0900 	mov.w	r9, #0
 801ea3e:	e7b8      	b.n	801e9b2 <__gethex+0x1b6>
 801ea40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ea44:	42bd      	cmp	r5, r7
 801ea46:	dd6f      	ble.n	801eb28 <__gethex+0x32c>
 801ea48:	1bed      	subs	r5, r5, r7
 801ea4a:	42ae      	cmp	r6, r5
 801ea4c:	dc34      	bgt.n	801eab8 <__gethex+0x2bc>
 801ea4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ea52:	2b02      	cmp	r3, #2
 801ea54:	d022      	beq.n	801ea9c <__gethex+0x2a0>
 801ea56:	2b03      	cmp	r3, #3
 801ea58:	d024      	beq.n	801eaa4 <__gethex+0x2a8>
 801ea5a:	2b01      	cmp	r3, #1
 801ea5c:	d115      	bne.n	801ea8a <__gethex+0x28e>
 801ea5e:	42ae      	cmp	r6, r5
 801ea60:	d113      	bne.n	801ea8a <__gethex+0x28e>
 801ea62:	2e01      	cmp	r6, #1
 801ea64:	d10b      	bne.n	801ea7e <__gethex+0x282>
 801ea66:	9a02      	ldr	r2, [sp, #8]
 801ea68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ea6c:	6013      	str	r3, [r2, #0]
 801ea6e:	2301      	movs	r3, #1
 801ea70:	6123      	str	r3, [r4, #16]
 801ea72:	f8ca 3000 	str.w	r3, [sl]
 801ea76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea78:	2562      	movs	r5, #98	@ 0x62
 801ea7a:	601c      	str	r4, [r3, #0]
 801ea7c:	e73a      	b.n	801e8f4 <__gethex+0xf8>
 801ea7e:	1e71      	subs	r1, r6, #1
 801ea80:	4620      	mov	r0, r4
 801ea82:	f7fe fbb8 	bl	801d1f6 <__any_on>
 801ea86:	2800      	cmp	r0, #0
 801ea88:	d1ed      	bne.n	801ea66 <__gethex+0x26a>
 801ea8a:	9801      	ldr	r0, [sp, #4]
 801ea8c:	4621      	mov	r1, r4
 801ea8e:	f7fd ff61 	bl	801c954 <_Bfree>
 801ea92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ea94:	2300      	movs	r3, #0
 801ea96:	6013      	str	r3, [r2, #0]
 801ea98:	2550      	movs	r5, #80	@ 0x50
 801ea9a:	e72b      	b.n	801e8f4 <__gethex+0xf8>
 801ea9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	d1f3      	bne.n	801ea8a <__gethex+0x28e>
 801eaa2:	e7e0      	b.n	801ea66 <__gethex+0x26a>
 801eaa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d1dd      	bne.n	801ea66 <__gethex+0x26a>
 801eaaa:	e7ee      	b.n	801ea8a <__gethex+0x28e>
 801eaac:	08020618 	.word	0x08020618
 801eab0:	080204b0 	.word	0x080204b0
 801eab4:	08020689 	.word	0x08020689
 801eab8:	1e6f      	subs	r7, r5, #1
 801eaba:	f1b9 0f00 	cmp.w	r9, #0
 801eabe:	d130      	bne.n	801eb22 <__gethex+0x326>
 801eac0:	b127      	cbz	r7, 801eacc <__gethex+0x2d0>
 801eac2:	4639      	mov	r1, r7
 801eac4:	4620      	mov	r0, r4
 801eac6:	f7fe fb96 	bl	801d1f6 <__any_on>
 801eaca:	4681      	mov	r9, r0
 801eacc:	117a      	asrs	r2, r7, #5
 801eace:	2301      	movs	r3, #1
 801ead0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ead4:	f007 071f 	and.w	r7, r7, #31
 801ead8:	40bb      	lsls	r3, r7
 801eada:	4213      	tst	r3, r2
 801eadc:	4629      	mov	r1, r5
 801eade:	4620      	mov	r0, r4
 801eae0:	bf18      	it	ne
 801eae2:	f049 0902 	orrne.w	r9, r9, #2
 801eae6:	f7ff fe22 	bl	801e72e <rshift>
 801eaea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801eaee:	1b76      	subs	r6, r6, r5
 801eaf0:	2502      	movs	r5, #2
 801eaf2:	f1b9 0f00 	cmp.w	r9, #0
 801eaf6:	d047      	beq.n	801eb88 <__gethex+0x38c>
 801eaf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eafc:	2b02      	cmp	r3, #2
 801eafe:	d015      	beq.n	801eb2c <__gethex+0x330>
 801eb00:	2b03      	cmp	r3, #3
 801eb02:	d017      	beq.n	801eb34 <__gethex+0x338>
 801eb04:	2b01      	cmp	r3, #1
 801eb06:	d109      	bne.n	801eb1c <__gethex+0x320>
 801eb08:	f019 0f02 	tst.w	r9, #2
 801eb0c:	d006      	beq.n	801eb1c <__gethex+0x320>
 801eb0e:	f8da 3000 	ldr.w	r3, [sl]
 801eb12:	ea49 0903 	orr.w	r9, r9, r3
 801eb16:	f019 0f01 	tst.w	r9, #1
 801eb1a:	d10e      	bne.n	801eb3a <__gethex+0x33e>
 801eb1c:	f045 0510 	orr.w	r5, r5, #16
 801eb20:	e032      	b.n	801eb88 <__gethex+0x38c>
 801eb22:	f04f 0901 	mov.w	r9, #1
 801eb26:	e7d1      	b.n	801eacc <__gethex+0x2d0>
 801eb28:	2501      	movs	r5, #1
 801eb2a:	e7e2      	b.n	801eaf2 <__gethex+0x2f6>
 801eb2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb2e:	f1c3 0301 	rsb	r3, r3, #1
 801eb32:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eb34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d0f0      	beq.n	801eb1c <__gethex+0x320>
 801eb3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801eb3e:	f104 0314 	add.w	r3, r4, #20
 801eb42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801eb46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801eb4a:	f04f 0c00 	mov.w	ip, #0
 801eb4e:	4618      	mov	r0, r3
 801eb50:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb54:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801eb58:	d01b      	beq.n	801eb92 <__gethex+0x396>
 801eb5a:	3201      	adds	r2, #1
 801eb5c:	6002      	str	r2, [r0, #0]
 801eb5e:	2d02      	cmp	r5, #2
 801eb60:	f104 0314 	add.w	r3, r4, #20
 801eb64:	d13c      	bne.n	801ebe0 <__gethex+0x3e4>
 801eb66:	f8d8 2000 	ldr.w	r2, [r8]
 801eb6a:	3a01      	subs	r2, #1
 801eb6c:	42b2      	cmp	r2, r6
 801eb6e:	d109      	bne.n	801eb84 <__gethex+0x388>
 801eb70:	1171      	asrs	r1, r6, #5
 801eb72:	2201      	movs	r2, #1
 801eb74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801eb78:	f006 061f 	and.w	r6, r6, #31
 801eb7c:	fa02 f606 	lsl.w	r6, r2, r6
 801eb80:	421e      	tst	r6, r3
 801eb82:	d13a      	bne.n	801ebfa <__gethex+0x3fe>
 801eb84:	f045 0520 	orr.w	r5, r5, #32
 801eb88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb8a:	601c      	str	r4, [r3, #0]
 801eb8c:	9b02      	ldr	r3, [sp, #8]
 801eb8e:	601f      	str	r7, [r3, #0]
 801eb90:	e6b0      	b.n	801e8f4 <__gethex+0xf8>
 801eb92:	4299      	cmp	r1, r3
 801eb94:	f843 cc04 	str.w	ip, [r3, #-4]
 801eb98:	d8d9      	bhi.n	801eb4e <__gethex+0x352>
 801eb9a:	68a3      	ldr	r3, [r4, #8]
 801eb9c:	459b      	cmp	fp, r3
 801eb9e:	db17      	blt.n	801ebd0 <__gethex+0x3d4>
 801eba0:	6861      	ldr	r1, [r4, #4]
 801eba2:	9801      	ldr	r0, [sp, #4]
 801eba4:	3101      	adds	r1, #1
 801eba6:	f7fd fe95 	bl	801c8d4 <_Balloc>
 801ebaa:	4681      	mov	r9, r0
 801ebac:	b918      	cbnz	r0, 801ebb6 <__gethex+0x3ba>
 801ebae:	4b1a      	ldr	r3, [pc, #104]	@ (801ec18 <__gethex+0x41c>)
 801ebb0:	4602      	mov	r2, r0
 801ebb2:	2184      	movs	r1, #132	@ 0x84
 801ebb4:	e6c5      	b.n	801e942 <__gethex+0x146>
 801ebb6:	6922      	ldr	r2, [r4, #16]
 801ebb8:	3202      	adds	r2, #2
 801ebba:	f104 010c 	add.w	r1, r4, #12
 801ebbe:	0092      	lsls	r2, r2, #2
 801ebc0:	300c      	adds	r0, #12
 801ebc2:	f7fc ffb0 	bl	801bb26 <memcpy>
 801ebc6:	4621      	mov	r1, r4
 801ebc8:	9801      	ldr	r0, [sp, #4]
 801ebca:	f7fd fec3 	bl	801c954 <_Bfree>
 801ebce:	464c      	mov	r4, r9
 801ebd0:	6923      	ldr	r3, [r4, #16]
 801ebd2:	1c5a      	adds	r2, r3, #1
 801ebd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ebd8:	6122      	str	r2, [r4, #16]
 801ebda:	2201      	movs	r2, #1
 801ebdc:	615a      	str	r2, [r3, #20]
 801ebde:	e7be      	b.n	801eb5e <__gethex+0x362>
 801ebe0:	6922      	ldr	r2, [r4, #16]
 801ebe2:	455a      	cmp	r2, fp
 801ebe4:	dd0b      	ble.n	801ebfe <__gethex+0x402>
 801ebe6:	2101      	movs	r1, #1
 801ebe8:	4620      	mov	r0, r4
 801ebea:	f7ff fda0 	bl	801e72e <rshift>
 801ebee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ebf2:	3701      	adds	r7, #1
 801ebf4:	42bb      	cmp	r3, r7
 801ebf6:	f6ff aee0 	blt.w	801e9ba <__gethex+0x1be>
 801ebfa:	2501      	movs	r5, #1
 801ebfc:	e7c2      	b.n	801eb84 <__gethex+0x388>
 801ebfe:	f016 061f 	ands.w	r6, r6, #31
 801ec02:	d0fa      	beq.n	801ebfa <__gethex+0x3fe>
 801ec04:	4453      	add	r3, sl
 801ec06:	f1c6 0620 	rsb	r6, r6, #32
 801ec0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ec0e:	f7fd ff53 	bl	801cab8 <__hi0bits>
 801ec12:	42b0      	cmp	r0, r6
 801ec14:	dbe7      	blt.n	801ebe6 <__gethex+0x3ea>
 801ec16:	e7f0      	b.n	801ebfa <__gethex+0x3fe>
 801ec18:	080204b0 	.word	0x080204b0

0801ec1c <L_shift>:
 801ec1c:	f1c2 0208 	rsb	r2, r2, #8
 801ec20:	0092      	lsls	r2, r2, #2
 801ec22:	b570      	push	{r4, r5, r6, lr}
 801ec24:	f1c2 0620 	rsb	r6, r2, #32
 801ec28:	6843      	ldr	r3, [r0, #4]
 801ec2a:	6804      	ldr	r4, [r0, #0]
 801ec2c:	fa03 f506 	lsl.w	r5, r3, r6
 801ec30:	432c      	orrs	r4, r5
 801ec32:	40d3      	lsrs	r3, r2
 801ec34:	6004      	str	r4, [r0, #0]
 801ec36:	f840 3f04 	str.w	r3, [r0, #4]!
 801ec3a:	4288      	cmp	r0, r1
 801ec3c:	d3f4      	bcc.n	801ec28 <L_shift+0xc>
 801ec3e:	bd70      	pop	{r4, r5, r6, pc}

0801ec40 <__match>:
 801ec40:	b530      	push	{r4, r5, lr}
 801ec42:	6803      	ldr	r3, [r0, #0]
 801ec44:	3301      	adds	r3, #1
 801ec46:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec4a:	b914      	cbnz	r4, 801ec52 <__match+0x12>
 801ec4c:	6003      	str	r3, [r0, #0]
 801ec4e:	2001      	movs	r0, #1
 801ec50:	bd30      	pop	{r4, r5, pc}
 801ec52:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801ec5a:	2d19      	cmp	r5, #25
 801ec5c:	bf98      	it	ls
 801ec5e:	3220      	addls	r2, #32
 801ec60:	42a2      	cmp	r2, r4
 801ec62:	d0f0      	beq.n	801ec46 <__match+0x6>
 801ec64:	2000      	movs	r0, #0
 801ec66:	e7f3      	b.n	801ec50 <__match+0x10>

0801ec68 <__hexnan>:
 801ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec6c:	680b      	ldr	r3, [r1, #0]
 801ec6e:	6801      	ldr	r1, [r0, #0]
 801ec70:	115e      	asrs	r6, r3, #5
 801ec72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ec76:	f013 031f 	ands.w	r3, r3, #31
 801ec7a:	b087      	sub	sp, #28
 801ec7c:	bf18      	it	ne
 801ec7e:	3604      	addne	r6, #4
 801ec80:	2500      	movs	r5, #0
 801ec82:	1f37      	subs	r7, r6, #4
 801ec84:	4682      	mov	sl, r0
 801ec86:	4690      	mov	r8, r2
 801ec88:	9301      	str	r3, [sp, #4]
 801ec8a:	f846 5c04 	str.w	r5, [r6, #-4]
 801ec8e:	46b9      	mov	r9, r7
 801ec90:	463c      	mov	r4, r7
 801ec92:	9502      	str	r5, [sp, #8]
 801ec94:	46ab      	mov	fp, r5
 801ec96:	784a      	ldrb	r2, [r1, #1]
 801ec98:	1c4b      	adds	r3, r1, #1
 801ec9a:	9303      	str	r3, [sp, #12]
 801ec9c:	b342      	cbz	r2, 801ecf0 <__hexnan+0x88>
 801ec9e:	4610      	mov	r0, r2
 801eca0:	9105      	str	r1, [sp, #20]
 801eca2:	9204      	str	r2, [sp, #16]
 801eca4:	f7ff fd95 	bl	801e7d2 <__hexdig_fun>
 801eca8:	2800      	cmp	r0, #0
 801ecaa:	d151      	bne.n	801ed50 <__hexnan+0xe8>
 801ecac:	9a04      	ldr	r2, [sp, #16]
 801ecae:	9905      	ldr	r1, [sp, #20]
 801ecb0:	2a20      	cmp	r2, #32
 801ecb2:	d818      	bhi.n	801ece6 <__hexnan+0x7e>
 801ecb4:	9b02      	ldr	r3, [sp, #8]
 801ecb6:	459b      	cmp	fp, r3
 801ecb8:	dd13      	ble.n	801ece2 <__hexnan+0x7a>
 801ecba:	454c      	cmp	r4, r9
 801ecbc:	d206      	bcs.n	801eccc <__hexnan+0x64>
 801ecbe:	2d07      	cmp	r5, #7
 801ecc0:	dc04      	bgt.n	801eccc <__hexnan+0x64>
 801ecc2:	462a      	mov	r2, r5
 801ecc4:	4649      	mov	r1, r9
 801ecc6:	4620      	mov	r0, r4
 801ecc8:	f7ff ffa8 	bl	801ec1c <L_shift>
 801eccc:	4544      	cmp	r4, r8
 801ecce:	d952      	bls.n	801ed76 <__hexnan+0x10e>
 801ecd0:	2300      	movs	r3, #0
 801ecd2:	f1a4 0904 	sub.w	r9, r4, #4
 801ecd6:	f844 3c04 	str.w	r3, [r4, #-4]
 801ecda:	f8cd b008 	str.w	fp, [sp, #8]
 801ecde:	464c      	mov	r4, r9
 801ece0:	461d      	mov	r5, r3
 801ece2:	9903      	ldr	r1, [sp, #12]
 801ece4:	e7d7      	b.n	801ec96 <__hexnan+0x2e>
 801ece6:	2a29      	cmp	r2, #41	@ 0x29
 801ece8:	d157      	bne.n	801ed9a <__hexnan+0x132>
 801ecea:	3102      	adds	r1, #2
 801ecec:	f8ca 1000 	str.w	r1, [sl]
 801ecf0:	f1bb 0f00 	cmp.w	fp, #0
 801ecf4:	d051      	beq.n	801ed9a <__hexnan+0x132>
 801ecf6:	454c      	cmp	r4, r9
 801ecf8:	d206      	bcs.n	801ed08 <__hexnan+0xa0>
 801ecfa:	2d07      	cmp	r5, #7
 801ecfc:	dc04      	bgt.n	801ed08 <__hexnan+0xa0>
 801ecfe:	462a      	mov	r2, r5
 801ed00:	4649      	mov	r1, r9
 801ed02:	4620      	mov	r0, r4
 801ed04:	f7ff ff8a 	bl	801ec1c <L_shift>
 801ed08:	4544      	cmp	r4, r8
 801ed0a:	d936      	bls.n	801ed7a <__hexnan+0x112>
 801ed0c:	f1a8 0204 	sub.w	r2, r8, #4
 801ed10:	4623      	mov	r3, r4
 801ed12:	f853 1b04 	ldr.w	r1, [r3], #4
 801ed16:	f842 1f04 	str.w	r1, [r2, #4]!
 801ed1a:	429f      	cmp	r7, r3
 801ed1c:	d2f9      	bcs.n	801ed12 <__hexnan+0xaa>
 801ed1e:	1b3b      	subs	r3, r7, r4
 801ed20:	f023 0303 	bic.w	r3, r3, #3
 801ed24:	3304      	adds	r3, #4
 801ed26:	3401      	adds	r4, #1
 801ed28:	3e03      	subs	r6, #3
 801ed2a:	42b4      	cmp	r4, r6
 801ed2c:	bf88      	it	hi
 801ed2e:	2304      	movhi	r3, #4
 801ed30:	4443      	add	r3, r8
 801ed32:	2200      	movs	r2, #0
 801ed34:	f843 2b04 	str.w	r2, [r3], #4
 801ed38:	429f      	cmp	r7, r3
 801ed3a:	d2fb      	bcs.n	801ed34 <__hexnan+0xcc>
 801ed3c:	683b      	ldr	r3, [r7, #0]
 801ed3e:	b91b      	cbnz	r3, 801ed48 <__hexnan+0xe0>
 801ed40:	4547      	cmp	r7, r8
 801ed42:	d128      	bne.n	801ed96 <__hexnan+0x12e>
 801ed44:	2301      	movs	r3, #1
 801ed46:	603b      	str	r3, [r7, #0]
 801ed48:	2005      	movs	r0, #5
 801ed4a:	b007      	add	sp, #28
 801ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed50:	3501      	adds	r5, #1
 801ed52:	2d08      	cmp	r5, #8
 801ed54:	f10b 0b01 	add.w	fp, fp, #1
 801ed58:	dd06      	ble.n	801ed68 <__hexnan+0x100>
 801ed5a:	4544      	cmp	r4, r8
 801ed5c:	d9c1      	bls.n	801ece2 <__hexnan+0x7a>
 801ed5e:	2300      	movs	r3, #0
 801ed60:	f844 3c04 	str.w	r3, [r4, #-4]
 801ed64:	2501      	movs	r5, #1
 801ed66:	3c04      	subs	r4, #4
 801ed68:	6822      	ldr	r2, [r4, #0]
 801ed6a:	f000 000f 	and.w	r0, r0, #15
 801ed6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ed72:	6020      	str	r0, [r4, #0]
 801ed74:	e7b5      	b.n	801ece2 <__hexnan+0x7a>
 801ed76:	2508      	movs	r5, #8
 801ed78:	e7b3      	b.n	801ece2 <__hexnan+0x7a>
 801ed7a:	9b01      	ldr	r3, [sp, #4]
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d0dd      	beq.n	801ed3c <__hexnan+0xd4>
 801ed80:	f1c3 0320 	rsb	r3, r3, #32
 801ed84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ed88:	40da      	lsrs	r2, r3
 801ed8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ed8e:	4013      	ands	r3, r2
 801ed90:	f846 3c04 	str.w	r3, [r6, #-4]
 801ed94:	e7d2      	b.n	801ed3c <__hexnan+0xd4>
 801ed96:	3f04      	subs	r7, #4
 801ed98:	e7d0      	b.n	801ed3c <__hexnan+0xd4>
 801ed9a:	2004      	movs	r0, #4
 801ed9c:	e7d5      	b.n	801ed4a <__hexnan+0xe2>

0801ed9e <__ascii_mbtowc>:
 801ed9e:	b082      	sub	sp, #8
 801eda0:	b901      	cbnz	r1, 801eda4 <__ascii_mbtowc+0x6>
 801eda2:	a901      	add	r1, sp, #4
 801eda4:	b142      	cbz	r2, 801edb8 <__ascii_mbtowc+0x1a>
 801eda6:	b14b      	cbz	r3, 801edbc <__ascii_mbtowc+0x1e>
 801eda8:	7813      	ldrb	r3, [r2, #0]
 801edaa:	600b      	str	r3, [r1, #0]
 801edac:	7812      	ldrb	r2, [r2, #0]
 801edae:	1e10      	subs	r0, r2, #0
 801edb0:	bf18      	it	ne
 801edb2:	2001      	movne	r0, #1
 801edb4:	b002      	add	sp, #8
 801edb6:	4770      	bx	lr
 801edb8:	4610      	mov	r0, r2
 801edba:	e7fb      	b.n	801edb4 <__ascii_mbtowc+0x16>
 801edbc:	f06f 0001 	mvn.w	r0, #1
 801edc0:	e7f8      	b.n	801edb4 <__ascii_mbtowc+0x16>

0801edc2 <__ascii_wctomb>:
 801edc2:	4603      	mov	r3, r0
 801edc4:	4608      	mov	r0, r1
 801edc6:	b141      	cbz	r1, 801edda <__ascii_wctomb+0x18>
 801edc8:	2aff      	cmp	r2, #255	@ 0xff
 801edca:	d904      	bls.n	801edd6 <__ascii_wctomb+0x14>
 801edcc:	228a      	movs	r2, #138	@ 0x8a
 801edce:	601a      	str	r2, [r3, #0]
 801edd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801edd4:	4770      	bx	lr
 801edd6:	700a      	strb	r2, [r1, #0]
 801edd8:	2001      	movs	r0, #1
 801edda:	4770      	bx	lr

0801eddc <_raise_r>:
 801eddc:	291f      	cmp	r1, #31
 801edde:	b538      	push	{r3, r4, r5, lr}
 801ede0:	4605      	mov	r5, r0
 801ede2:	460c      	mov	r4, r1
 801ede4:	d904      	bls.n	801edf0 <_raise_r+0x14>
 801ede6:	2316      	movs	r3, #22
 801ede8:	6003      	str	r3, [r0, #0]
 801edea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801edee:	bd38      	pop	{r3, r4, r5, pc}
 801edf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801edf2:	b112      	cbz	r2, 801edfa <_raise_r+0x1e>
 801edf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801edf8:	b94b      	cbnz	r3, 801ee0e <_raise_r+0x32>
 801edfa:	4628      	mov	r0, r5
 801edfc:	f000 f830 	bl	801ee60 <_getpid_r>
 801ee00:	4622      	mov	r2, r4
 801ee02:	4601      	mov	r1, r0
 801ee04:	4628      	mov	r0, r5
 801ee06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ee0a:	f000 b817 	b.w	801ee3c <_kill_r>
 801ee0e:	2b01      	cmp	r3, #1
 801ee10:	d00a      	beq.n	801ee28 <_raise_r+0x4c>
 801ee12:	1c59      	adds	r1, r3, #1
 801ee14:	d103      	bne.n	801ee1e <_raise_r+0x42>
 801ee16:	2316      	movs	r3, #22
 801ee18:	6003      	str	r3, [r0, #0]
 801ee1a:	2001      	movs	r0, #1
 801ee1c:	e7e7      	b.n	801edee <_raise_r+0x12>
 801ee1e:	2100      	movs	r1, #0
 801ee20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ee24:	4620      	mov	r0, r4
 801ee26:	4798      	blx	r3
 801ee28:	2000      	movs	r0, #0
 801ee2a:	e7e0      	b.n	801edee <_raise_r+0x12>

0801ee2c <raise>:
 801ee2c:	4b02      	ldr	r3, [pc, #8]	@ (801ee38 <raise+0xc>)
 801ee2e:	4601      	mov	r1, r0
 801ee30:	6818      	ldr	r0, [r3, #0]
 801ee32:	f7ff bfd3 	b.w	801eddc <_raise_r>
 801ee36:	bf00      	nop
 801ee38:	20001240 	.word	0x20001240

0801ee3c <_kill_r>:
 801ee3c:	b538      	push	{r3, r4, r5, lr}
 801ee3e:	4d07      	ldr	r5, [pc, #28]	@ (801ee5c <_kill_r+0x20>)
 801ee40:	2300      	movs	r3, #0
 801ee42:	4604      	mov	r4, r0
 801ee44:	4608      	mov	r0, r1
 801ee46:	4611      	mov	r1, r2
 801ee48:	602b      	str	r3, [r5, #0]
 801ee4a:	f7e5 fbf9 	bl	8004640 <_kill>
 801ee4e:	1c43      	adds	r3, r0, #1
 801ee50:	d102      	bne.n	801ee58 <_kill_r+0x1c>
 801ee52:	682b      	ldr	r3, [r5, #0]
 801ee54:	b103      	cbz	r3, 801ee58 <_kill_r+0x1c>
 801ee56:	6023      	str	r3, [r4, #0]
 801ee58:	bd38      	pop	{r3, r4, r5, pc}
 801ee5a:	bf00      	nop
 801ee5c:	20017a70 	.word	0x20017a70

0801ee60 <_getpid_r>:
 801ee60:	f7e5 bbe6 	b.w	8004630 <_getpid>

0801ee64 <_init>:
 801ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee66:	bf00      	nop
 801ee68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee6a:	bc08      	pop	{r3}
 801ee6c:	469e      	mov	lr, r3
 801ee6e:	4770      	bx	lr

0801ee70 <_fini>:
 801ee70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee72:	bf00      	nop
 801ee74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee76:	bc08      	pop	{r3}
 801ee78:	469e      	mov	lr, r3
 801ee7a:	4770      	bx	lr
